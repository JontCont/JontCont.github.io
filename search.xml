<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Youtube(二)  - 使用(C#)製作</title>
      <link href="/2023/02/05/%E5%BE%8C%E7%AB%AF%E6%8A%80%E8%A1%93/CS/Youtube/Youtube(%E4%BA%8C)%20%20-%20%E4%BD%BF%E7%94%A8(C#)%E8%A3%BD%E4%BD%9C/"/>
      <url>/2023/02/05/%E5%BE%8C%E7%AB%AF%E6%8A%80%E8%A1%93/CS/Youtube/Youtube(%E4%BA%8C)%20%20-%20%E4%BD%BF%E7%94%A8(C#)%E8%A3%BD%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 後端技術 </category>
          
          <category> C# </category>
          
          <category> Youtube </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
            <tag> API </tag>
            
            <tag> Youtube </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Youtube (一) - API 筆記 (不定時更新)</title>
      <link href="/2023/01/25/%E5%BE%8C%E7%AB%AF%E6%8A%80%E8%A1%93/CS/Youtube/Youtube%20(%E4%B8%80)%20-%20API%20%E6%96%87%E4%BB%B6/"/>
      <url>/2023/01/25/%E5%BE%8C%E7%AB%AF%E6%8A%80%E8%A1%93/CS/Youtube/Youtube%20(%E4%B8%80)%20-%20API%20%E6%96%87%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<p>(本篇為記錄使用)</p><h2 id="Youtube-API"><a href="#Youtube-API" class="headerlink" title="Youtube API"></a>Youtube API</h2><p>由 <a href="https://cloud.google.com/apis?hl=zh-tw">Google Cloud API</a> 提供API。Google Cloud API 有很多種類如( Vision API、Speech API、Translation API、Natural Language API、Video Intelligence API等)。</p><h3 id="API-種類"><a href="#API-種類" class="headerlink" title="API 種類"></a>API 種類</h3><ul><li><a href="https://developers.google.com/youtube/v3/getting-started">Data API</a></li><li><a href="https://developers.google.com/youtube/v3/live/getting-started">Live Streaming API</a></li><li><a href="https://developers.google.com/youtube/v3/live/getting-started">Player API</a></li><li><a href="https://developers.google.com/youtube/reporting">Analytics&#x2F;Reporting  API</a></li></ul><h3 id="API-授權"><a href="#API-授權" class="headerlink" title="API 授權"></a>API 授權</h3><ul><li>OAuth 2.0</li><li>API keys</li></ul><h2 id="OpenID-Connect"><a href="#OpenID-Connect" class="headerlink" title="OpenID Connect"></a>OpenID Connect</h2><p>是由OAuth 2.0用於身分驗證、授權。使用 OAuth 2.0 需要憑證(用戶端 ID 和用戶端密鑰)驗證使用者，授權後會有 【Access Token】、【ID Token】兩種Token 授權。</p><ol><li>ID Token : 格式由 JWT 組成，可以透過 <a href="https://jwt.io/">JWT.IO</a>解析。ID Token 會依據 API 授權種類決定會不會產生出 ID Token 。</li><li>Access Token : 作用是存取授權，必須要產生出這項Access Token 才能使用。</li></ol><h3 id="Access-Token-有效期"><a href="#Access-Token-有效期" class="headerlink" title="Access Token 有效期"></a>Access Token 有效期</h3><p>access_token 取決於授權時指定的scope的有效期，如果授權時指定多個scope，最終的access_token 的有效期取決於有效期最短的scope。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">access_token 截止時間 =（授權時間點）+（授權後調用alipay.system.oauth.token 返回的expires_in）。</span><br></pre></td></tr></table></figure><h2 id="參考文件"><a href="#參考文件" class="headerlink" title="參考文件"></a>參考文件</h2><ul><li><p>OpenID Connect : <a href="https://developers.google.com/identity/openid-connect/openid-connect?hl=zh-cn">https://developers.google.com/identity/openid-connect/openid-connect?hl=zh-cn</a></p></li><li><p>OpenID Connect Core 1.0 incorporating errata set 1 : <a href="https://openid.net/specs/openid-connect-core-1_0.html#ImplicitAuthRequest">https://openid.net/specs/openid-connect-core-1_0.html#ImplicitAuthRequest</a></p></li><li><p>‘[料理佳餚]’ 在 ASP.NET Core 整合 Google 做為網站的第三方登入: <a href="https://dotblogs.com.tw/supershowwei/2022/11/10/integrate-google-login-in-asp-net-core">https://dotblogs.com.tw/supershowwei/2022/11/10/integrate-google-login-in-asp-net-core</a></p></li><li><p>Google API 是什麼？一次搞懂五種 Google API，聽說讀寫樣樣通！: <a href="https://mile.cloud/zh/resources/blog/What-is-Google-API-one-time-to-know-five-types-of-Google-API_60">https://mile.cloud/zh/resources/blog/What-is-Google-API-one-time-to-know-five-types-of-Google-API_60</a></p></li><li><p>OAuth (6) access token &amp; refresh token : <a href="https://ithelp.ithome.com.tw/articles/10296956?sc=rss.qu">https://ithelp.ithome.com.tw/articles/10296956?sc=rss.qu</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 後端技術 </category>
          
          <category> C# </category>
          
          <category> Youtube </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
            <tag> API </tag>
            
            <tag> Youtube </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VTuber 零成本製作(二) - 直播設定</title>
      <link href="/2023/01/24/%E7%AD%86%E8%A8%98%E8%88%87%E7%94%9F%E6%B4%BB%E9%9B%9C%E8%A8%98/VTuber/VTuber%20%E9%9B%B6%E6%88%90%E6%9C%AC%E8%A3%BD%E4%BD%9C(%E4%BA%8C)/"/>
      <url>/2023/01/24/%E7%AD%86%E8%A8%98%E8%88%87%E7%94%9F%E6%B4%BB%E9%9B%9C%E8%A8%98/VTuber/VTuber%20%E9%9B%B6%E6%88%90%E6%9C%AC%E8%A3%BD%E4%BD%9C(%E4%BA%8C)/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>繼續上一篇未完成部分安裝 VMagicMirror ，這軟體主要是補助角色在直播中使用你創建的角色直播，需要配合 OBS 來完成直播功能。</p><h3 id="安裝-VMagicMirror"><a href="#安裝-VMagicMirror" class="headerlink" title="安裝 VMagicMirror"></a>安裝 VMagicMirror</h3><p>下載點 : <a href="https://malaybaku.github.io/VMagicMirror/en/">請點擊</a></p><h2 id="一、VMagicMirror"><a href="#一、VMagicMirror" class="headerlink" title="一、VMagicMirror"></a>一、VMagicMirror</h2><p>初始會有兩個畫面存在，左邊會是創建角色的呈現位置，右邊則是設定檔。現在我們將剛才的VRM檔案開啟。<br><img src="/image/20230124_22-17-25.png"><br><img src="/image/20230124_22-22-42.png"></p><p>讀取完後，立即可以呈現目前角色模樣。(目前先不使用 Dev47App )<br><img src="/image/20230124_22-23-04.png"></p><h2 id="二、使用-OBS"><a href="#二、使用-OBS" class="headerlink" title="二、使用 OBS"></a>二、使用 OBS</h2><p>現在使用 【視窗攝取】方式設定 VMagicMirror 視窗，就會完成以上動作。<br><img src="/image/20230124_22-27-08.png"><br><img src="/image/20230124_22-28-15.png"></p><p>如果需要移除後面的綠色背景請將透明背景打給即可。<br><img src="/image/20230124_22-50-03.png"></p>]]></content>
      
      
      <categories>
          
          <category> 筆記 </category>
          
          <category> VTuber </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>VTuber 零成本製作(一) - 建立角色</title>
      <link href="/2023/01/24/%E7%AD%86%E8%A8%98%E8%88%87%E7%94%9F%E6%B4%BB%E9%9B%9C%E8%A8%98/VTuber/VTuber%20%E9%9B%B6%E6%88%90%E6%9C%AC%E8%A3%BD%E4%BD%9C(%E4%B8%80)/"/>
      <url>/2023/01/24/%E7%AD%86%E8%A8%98%E8%88%87%E7%94%9F%E6%B4%BB%E9%9B%9C%E8%A8%98/VTuber/VTuber%20%E9%9B%B6%E6%88%90%E6%9C%AC%E8%A3%BD%E4%BD%9C(%E4%B8%80)/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>去年製作 <code>製作 Scanner</code> 章節，想到 VTuber 製作部分可以直接使用這些工具嘗試製作。本作者不是專業VTuber 製作師不適合直接使用 Live2D 製作，因此用快速建檔方式完成建模。</p><p>(如果使用需要使用工具就需要自備)</p><h3 id="相關章節"><a href="#相關章節" class="headerlink" title="相關章節"></a>相關章節</h3><ul><li><a href="../../%E5%89%8D%E7%AB%AF%E6%8A%80%E8%A1%93/HTML/Html-05-ScannerQR.md">製作 Scanner (一) - 把手機轉換電腦攝影機</a></li><li><a href="../../%E5%89%8D%E7%AB%AF%E6%8A%80%E8%A1%93/HTML/Html-06-ScannerQR.md">製作 Scanner (二) - 快速使用讀取器&#x2F;掃描器 (使用 html5-qrcode )</a></li></ul><h2 id="需要使用工具"><a href="#需要使用工具" class="headerlink" title="需要使用工具"></a>需要使用工具</h2><ol><li>Dev47Apps、手機</li><li>VRoid Studio、VRoid Hub</li></ol><h2 id="VRoid"><a href="#VRoid" class="headerlink" title="VRoid"></a>VRoid</h2><p>VRoid 是一套免費軟體的VTuber 製作軟體，初期需要從這邊建立簡單人物。下圖為初起介面。<br><img src="/image/20230124_21-44-10.png"></p><h2 id="一、創建角色"><a href="#一、創建角色" class="headerlink" title="一、創建角色"></a>一、創建角色</h2><p>(角色配置不詳細介紹自行挖掘、製作)<br><img src="/image/20230124_21-45-13.png"><br><img src="/image/20230124_21-45-38.png"></p><h2 id="二、匯出角色"><a href="#二、匯出角色" class="headerlink" title="二、匯出角色"></a>二、匯出角色</h2><p>這邊會需要創建 VRM 副檔名，需要確認匯出是否是VRM 。如果要使用 VRoid Hub 也是一樣，至指定角色頁面按下下載即可。<br><img src="/image/20230124_21-58-47.png"><br><img src="/image/20230124_21-59-18.png"><br><img src="/image/20230124_22-00-12.png"><br><img src="/image/20230124_22-01-04.png"></p>]]></content>
      
      
      <categories>
          
          <category> 筆記 </category>
          
          <category> VTuber </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>回顧2022年心路歷程</title>
      <link href="/2023/01/21/%E7%AD%86%E8%A8%98%E8%88%87%E7%94%9F%E6%B4%BB%E9%9B%9C%E8%A8%98/%E5%9B%9E%E9%A1%A72022%E5%B9%B4%E5%BF%83%E8%B7%AF%E6%AD%B7%E7%A8%8B/"/>
      <url>/2023/01/21/%E7%AD%86%E8%A8%98%E8%88%87%E7%94%9F%E6%B4%BB%E9%9B%9C%E8%A8%98/%E5%9B%9E%E9%A1%A72022%E5%B9%B4%E5%BF%83%E8%B7%AF%E6%AD%B7%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<p>2022 即將結束，我也要開始統計自己今年為自己提升、改變什麼吧!</p><h2 id="2022-心路歷程"><a href="#2022-心路歷程" class="headerlink" title="2022 心路歷程"></a>2022 心路歷程</h2><p>過去以前不斷學習、盲目的直衝直撞找到軟體工程師的職業， 2020年當初因疫情提早為自己找一份工作，當中不斷需要與客戶、主管之間取得兩方溝通才能進行程式修改、變更以及自己非常不熟悉的系統受到極大的挫折感，面對前後的調適也讓我開啟撰寫Blog之路。</p><p>今年不斷位置自己突破技能，過程開發技術上還是沒辦法到達心目中的等級。今年算是我這一生有最大突破，也是動盪最大的一年。</p><p>過去公司文化不斷卡在落後技術，不斷的試著突破、創新讓公司文化可以為開發有一點點認同。團隊部分也下很大功夫，造就 Line bot 有五個人協助開發，API、 Net 6 、EF Core等技術也慢慢傳授給團隊，增強團隊獨立能力。 </p><p>從團隊、指導、完善團隊開發流程到團隊解散算是結束最光輝的一年，曾為公司、團隊努力突破，同時為自己得到一些啟發。相信接下來的一年從下一份工作可以為我的能力有大幅進步，不管接下來有沒有比今年更有價值，期望接下來會用不同方式呈現給所有人看自己的能力。</p><h2 id="2022-達成成就"><a href="#2022-達成成就" class="headerlink" title="2022 達成成就"></a>2022 達成成就</h2><h3 id="技術成就"><a href="#技術成就" class="headerlink" title="技術成就"></a>技術成就</h3><ol><li>使用 Electron 完成印表機列印 (TSC 標籤機專案)</li><li>提倡 單元測試加入專案</li><li>提倡 新型專案使用 Net 6 版本</li><li>提倡 Review Code</li><li>提倡 團隊技術分享</li><li>加入 CI&#x2F;CD 至團隊專案</li><li>加入 簡易版本更新流程</li><li>加入系統語言國際化語言</li><li>加入 部落格收益、Google SEO 調整</li><li>與 第三方串接 API (AGV 、 Line bot 、 Line notify)</li><li>獨立開發 CMS 系統 (雲端管理系統)</li><li>獨立開發小型 WMS 系統 </li><li>獨立開發 看板系統</li><li>協助 Line Bots 開發製作</li></ol><h2 id="里程碑成就-、特殊經歷"><a href="#里程碑成就-、特殊經歷" class="headerlink" title="里程碑成就 、特殊經歷"></a>里程碑成就 、特殊經歷</h2><ol><li>機車、汽車駕照同年一起考</li><li>Blog 達成 100 篇以上</li><li>人生第一張升降桌 </li><li>2021~2022 結束我的第二間公司</li></ol><h2 id="學習"><a href="#學習" class="headerlink" title="學習"></a>學習</h2><ol><li>Angular 、 Reast 、Vue 基礎架構</li><li>正規表示法 (Reqgular Expression)</li><li>Electron</li><li>AspNet Global 使用方式</li><li>SignalR</li><li>Ngrok 、Docker 、WSDL</li><li>Line Bot、Line Notify 、Discord Bot</li><li>Github Actions 、CI&#x2F;CD</li><li>API 、WSDL 串接方式</li></ol><h2 id="內心心得"><a href="#內心心得" class="headerlink" title="內心心得"></a>內心心得</h2><p>寫一年的 Blog 始終沒有進步，過程中還是要謝謝支持我的前輩們才能活出精采的我，不管從軟體工程師轉換成全端工程師或是DevOps工程師，都要為自己的行為不後悔。</p><p>祝所有大家渡過不安盪的一年，迎接新的一年新氣象。</p>]]></content>
      
      
      <categories>
          
          <category> 筆記 </category>
          
          <category> 生活雜記 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>(筆記) 微服務 micro service</title>
      <link href="/2023/01/21/%E7%AD%86%E8%A8%98%E8%88%87%E7%94%9F%E6%B4%BB%E9%9B%9C%E8%A8%98/%E5%BE%AE%E6%9C%8D%E5%8B%99micro%20service/"/>
      <url>/2023/01/21/%E7%AD%86%E8%A8%98%E8%88%87%E7%94%9F%E6%B4%BB%E9%9B%9C%E8%A8%98/%E5%BE%AE%E6%9C%8D%E5%8B%99micro%20service/</url>
      
        <content type="html"><![CDATA[<h2 id="微服務-micro-service"><a href="#微服務-micro-service" class="headerlink" title="微服務 - micro service"></a>微服務 - micro service</h2><p>微服務架構是解決巨型專案，設計方向由龐大專案拆解成小群獨立的服務軟體系統。<br><img src="/image/20221212_14-22-46.png"></p><p>微服務架構特性，可以讓開發複雜性降低、開發速度，透過 RPC (Remote Procedure Call)方式呼叫。因此，<br> 微服務 成為目前最常見的架構，若從舊系統來看是無法將舊系統拆解，可能使用傳統架構 “單體式系統架構”。</p><h3 id="優點"><a href="#優點" class="headerlink" title="優點"></a>優點</h3><ol><li>降低開發認知複雜性</li><li>提升開發速度、規模</li><li>性能與可擴展性</li><li>可以獨立部署</li></ol><h3 id="缺點"><a href="#缺點" class="headerlink" title="缺點"></a>缺點</h3><ol><li>RPC 調用、呼叫方式大量增加</li><li>系統安全性管理更加有挑戰性</li><li>引入分佈式系統的複雜度</li></ol>]]></content>
      
      
      <categories>
          
          <category> 筆記 </category>
          
          <category> 生活雜記 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[心得] 一個月訓練機車心得</title>
      <link href="/2023/01/21/%E7%AD%86%E8%A8%98%E8%88%87%E7%94%9F%E6%B4%BB%E9%9B%9C%E8%A8%98/%E4%B8%80%E5%80%8B%E6%9C%88%E8%A8%93%E7%B7%B4%E6%A9%9F%E8%BB%8A%E5%BF%83%E5%BE%97/"/>
      <url>/2023/01/21/%E7%AD%86%E8%A8%98%E8%88%87%E7%94%9F%E6%B4%BB%E9%9B%9C%E8%A8%98/%E4%B8%80%E5%80%8B%E6%9C%88%E8%A8%93%E7%B7%B4%E6%A9%9F%E8%BB%8A%E5%BF%83%E5%BE%97/</url>
      
        <content type="html"><![CDATA[<h2 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h2><p>今年因為疫情造成很多公司居家上班，因此我想找時間去把握時間去考以下為時間軸。</p><ul><li>2022&#x2F;03&#x2F;27 : 報名考試 2022&#x2F;05&#x2F;09 (稱作為勝利日)</li><li>2022&#x2F;04&#x2F;09 : 開始練習機車，每周六日去練習場練習</li><li>2022&#x2F;05&#x2F;09 : 順利拿到機車駕照</li></ul><h2 id="第一天授課"><a href="#第一天授課" class="headerlink" title="第一天授課"></a>第一天授課</h2><p>這邊先給個觀念，練習機車前必須要留意各項機車動作以及注意事項，主要原因:</p><ol><li>了解目前機車款式、操作</li><li>基本開車箱、油門、開啟電力等</li><li>遠近光燈打開後特徵等。</li></ol><p>有了這些基礎，可以從裡面知道學科一些基礎概念，相當好上手。</p><h2 id="熟悉機車特性"><a href="#熟悉機車特性" class="headerlink" title="熟悉機車特性"></a>熟悉機車特性</h2><p>第二天相對需要抓緊時間去了解手感，騎車與腳踏車不同處會在於轉角時候，機車如果座得太前面有時候會卡到膝蓋，相對要習慣自己能轉到怎樣的程度。</p><h2 id="為自己騎乘方式記錄"><a href="#為自己騎乘方式記錄" class="headerlink" title="為自己騎乘方式記錄"></a>為自己騎乘方式記錄</h2><p>記錄自己騎乘很多方式，因為我有帶朋友去練習場練習，所以可以藉由他來得知自己哪個關卡不足。如果沒有朋友可以考慮用行車紀錄器紀錄，效果會不錯。</p><p>第三天我直接到練習場練習轉彎處、直線七秒，當中兩段式可能需要抓一些範圍才能適應。</p><h2 id="從別人失敗的關卡學習"><a href="#從別人失敗的關卡學習" class="headerlink" title="從別人失敗的關卡學習"></a>從別人失敗的關卡學習</h2><p>第四天我依據影片流程、動作去學習，提早讓自己熟悉步驟，例如停車時必須要用後照鏡左右查看後，再向左右方查看完成動作。當然少不了魔王關卡，魔王關卡之所以沒過的人很多人多少是因為練習、環境問題，轉彎處是需要抓取大概範圍去轉彎。例如: U型轉彎，最安全方式轉彎是弧度大一點，轉龍頭相對會輕鬆一些。</p><h2 id="魔王關卡-直線七秒"><a href="#魔王關卡-直線七秒" class="headerlink" title="魔王關卡 : 直線七秒"></a>魔王關卡 : 直線七秒</h2><p>相信很多人一定是死在直線七秒很多，練習方式也有很多種。如果要提升駕駛穩定性先具備:</p><ul><li>坐姿</li><li>兩手貼其身體</li><li>穩住把手<br>如果記住這些動作，可以嘗試在練習區停滯10<del>13秒，如果到考場通常都是7</del>8秒穩穩通關。到考試時候請不要看秒數，如果駕駛時分心最容易偏掉是非常危險的行為。</li></ul><h2 id="自訂時間自習、模擬考"><a href="#自訂時間自習、模擬考" class="headerlink" title="自訂時間自習、模擬考"></a>自訂時間自習、模擬考</h2><p><a href="https://www.mvdis.gov.tw/m3-simulator-drv/">交通部公路總局汽機車線上隨機模擬考系統</a></p><p>自習時間，如果像我一樣不太愛看這些東西，可以找朋友一起考試互相交流是一種選擇，再來是不看情況下，需要付出練習次數來擬補閱讀，建議是考在 95~100 區間為最安全，如果是僥倖通過就要確保當天考試是否跟你考得內容一樣。</p><h2 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h2><p>標題為一個月訓練機車，實際上是不用到一個月，通常是努力的方式來決定。記起以上經驗，可以確定兩人一起學習會學比較快，如果從學習中分享給其他人成功秘訣，會讓自己更熟習騎車需要具備那些動作、操作、坐姿等，以上努力考到機車駕照的工程師心得。</p>]]></content>
      
      
      <categories>
          
          <category> 筆記 </category>
          
          <category> 生活雜記 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>(筆記) 微軟開發者 -  Office 365 E5 無限續期方式</title>
      <link href="/2023/01/21/%E7%AD%86%E8%A8%98%E8%88%87%E7%94%9F%E6%B4%BB%E9%9B%9C%E8%A8%98/office_dev/"/>
      <url>/2023/01/21/%E7%AD%86%E8%A8%98%E8%88%87%E7%94%9F%E6%B4%BB%E9%9B%9C%E8%A8%98/office_dev/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>微軟已經提供很久讓開發者可以持續使用E5，相信很多人也有用過這個東西，後面發現Github AutApi 消失又再一次重複操作，這次會將重要操作列出。本篇文章提供下載點以及操作說明讓所有人可以快速創出自己的環境。</p><h2 id="文件參考"><a href="#文件參考" class="headerlink" title="文件參考"></a>文件參考</h2><ol><li><a href="https://www.jkg.tw/p3341/">文件參考</a></li><li><a href="https://www.microsoft.com/zh-tw/microsoft-365/enterprise/office-365-e5?activetab=pivot:overviewtab">Office 365 E5</a></li><li><a href="https://developer.microsoft.com/zh-cn/microsoft-365/dev-program">註冊Microsoft 365 E5 開發計劃</a></li><li><a href="/upload/zip/rclone-v1.53.1-windows-amd64.zip">rclone工具</a></li></ol><h1 id="AutApi-設定"><a href="#AutApi-設定" class="headerlink" title="AutApi 設定"></a>AutApi 設定</h1><p>如果第一次使用或是想要看詳細內容可以到第一點選項點選。<br>本篇使用 <a href="https://github.com/huijiyun/AutoApiSecret">AutoApiSecret</a>，相信很多人都有使用過這個Api，近期有發現以前的AutoApi被Github封鎖，之後發現這東西還存在，可以暫時先觀察狀況是否持續續期。</p><h2 id="Azure"><a href="#Azure" class="headerlink" title="Azure"></a><a href="https://azure.microsoft.com/zh-tw/">Azure</a></h2><p>如果已經有註冊帳號可以直接按下 <a href="https://portal.azure.com/#home">Azure 入口</a></p><h3 id="1-請點選-Azure-Active-Directory-gt-應用程式註冊"><a href="#1-請點選-Azure-Active-Directory-gt-應用程式註冊" class="headerlink" title="1. 請點選 [Azure Active Directory] &gt; [應用程式註冊]"></a>1. 請點選 [Azure Active Directory] &gt; [應用程式註冊]</h3><p><img src="/img/Note/office/office_e5/02.png"><br><img src="/img/Note/office/office_e5/03.png"></p><h3 id="2-設定註冊內容"><a href="#2-設定註冊內容" class="headerlink" title="2. 設定註冊內容"></a>2. 設定註冊內容</h3><ul><li>名稱 : 設定自己想要的名稱</li><li>支援類型 : 任何組織目錄中的帳戶</li><li>重新導向 URI : web - <a href="http://localhost:53682/">http://localhost:53682/</a><br><img src="/img/Note/office/office_e5/04.png"></li></ul><h3 id="3-紀錄ID"><a href="#3-紀錄ID" class="headerlink" title="3. 紀錄ID"></a>3. 紀錄ID</h3><p>務必要將 [應用程式 (用戶端) 識別碼] 存放記事本上面，等下會用到。<br><img src="/img/Note/office/office_e5/05.png"></p><h3 id="4-點選-憑證與秘密-gt-用戶端密碼-gt-新增用戶端密碼"><a href="#4-點選-憑證與秘密-gt-用戶端密碼-gt-新增用戶端密碼" class="headerlink" title="4. 點選[憑證與秘密] &gt; [用戶端密碼] &gt; [新增用戶端密碼]"></a>4. 點選[憑證與秘密] &gt; [用戶端密碼] &gt; [新增用戶端密碼]</h3><p>新增完畢後即可複製[值]，這是你第二個ID 一樣請你複製到記事本上面。<br><img src="/img/Note/office/office_e5/06.png"><br><img src="/img/Note/office/office_e5/07.png"><br><img src="/img/Note/office/office_e5/08.png"></p><h3 id="5-點選-API權限-gt-新增權限-gt-完畢後按下-代表xxx授予管理員同意-按鈕"><a href="#5-點選-API權限-gt-新增權限-gt-完畢後按下-代表xxx授予管理員同意-按鈕" class="headerlink" title="5. 點選 [API權限] &gt; [新增權限] &gt; 完畢後按下[代表xxx授予管理員同意]按鈕"></a>5. 點選 [API權限] &gt; [新增權限] &gt; 完畢後按下[代表xxx授予管理員同意]按鈕</h3><p>需要注意 : 這次我設定與舊版不同，只要新增以下選項即可。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Directory.ReadWrite.All</span><br><span class="line">Files.ReadWrite.All</span><br><span class="line">Mail.ReadWrite</span><br><span class="line">MailboxSettings.ReadWrite</span><br><span class="line">User.Read</span><br><span class="line">User.ReadWrite.All</span><br></pre></td></tr></table></figure><p><img src="/img/Note/office/office_e5/09.png"><br><img src="/img/Note/office/office_e5/10.png"></p><p>到這邊就完成了~! 之後可以準備使用 github </p><h2 id="AutoApiSecret"><a href="#AutoApiSecret" class="headerlink" title="AutoApiSecret"></a><a href="https://github.com/huijiyun/AutoApiSecret">AutoApiSecret</a></h2><p>請各位自行按下 <strong>Fork</strong> 再進行下一步。<br><img src="/img/Note/office/office_e5/01.png"></p><h3 id="1-創建-Personal-access-tokens"><a href="#1-創建-Personal-access-tokens" class="headerlink" title="1. 創建 Personal access tokens"></a>1. 創建 Personal access tokens</h3><p>如果不知道如何創建可以參考 <a href="https://jontcont.github.io/2022/03/21/Github_UseToken/">使用 Github Token</a><br><img src="/img/Note/office/office_e5/11.png"></p><p>設定方式也很簡單，只要按照圖片設定即可。完成後記得要複製自己的token。</p><h3 id="2-使用-rclone工具"><a href="#2-使用-rclone工具" class="headerlink" title="2. 使用 rclone工具"></a>2. 使用 <a href="/upload/zip/rclone-v1.53.1-windows-amd64.zip">rclone工具</a></h3><p>使用方式是解完壓縮，用 [系統管理員身分執行] 打開 [命令字元] 到你接壓縮的路徑。指令如下 :</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./rclone.exe &quot;onedrive&quot; &quot;id1&quot; &quot;id2&quot;</span><br></pre></td></tr></table></figure><p>備註 </p><ul><li>id1 : 應用程式 (用戶端) 識別碼</li><li>id2 : 憑證與秘密</li></ul><p>完成後按下Enter ，會列出很多字串。字串立面是json 字串會比較長一點，請找到下方一樣的格式。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;refresh_token&quot;:&quot;xxxxxxxxxxxxxxxxxxxxxxxx&quot;</span><br></pre></td></tr></table></figure><p>找到之後只要複製裡面的內容，上面範例則是用 <code>xxxxxxxxxxxxxxxxxxxxxxxx</code>。</p><h3 id="3-修改-AutoApiSecret-gt-1-txt檔案"><a href="#3-修改-AutoApiSecret-gt-1-txt檔案" class="headerlink" title="3. 修改 AutoApiSecret &gt; 1.txt檔案"></a>3. 修改 AutoApiSecret &gt; 1.txt檔案</h3><p>這邊是存放 [ refresh_token ] 把剛才複製貼上 1.txt上面。</p><p><img src="/img/Note/office/office_e5/12.png"><br><img src="/img/Note/office/office_e5/13.png"></p><h3 id="4-點選-Action-並按下-Star"><a href="#4-點選-Action-並按下-Star" class="headerlink" title="4. 點選 Action 並按下 [Star]"></a>4. 點選 Action 並按下 [Star]</h3><p>按完 [Star] 記得要重新整理或是重新點選即可。Pin記得點選,主要原因是不知道何時AutoApiSeret會不會消失，建議還是開著鱉。<br><img src="/img/Note/office/office_e5/14.png"><br><img src="/img/Note/office/office_e5/15.png"></p><p>這邊需要留意，office E5 快到期時後才會通知，所以有空時候可以看一下Mail確保有沒有快失效。</p>]]></content>
      
      
      <categories>
          
          <category> 筆記 </category>
          
          <category> 生活雜記 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> office </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(筆記) 命令提示字元 - chcp 變更命令提示字元語言環境</title>
      <link href="/2023/01/21/%E7%AD%86%E8%A8%98%E8%88%87%E7%94%9F%E6%B4%BB%E9%9B%9C%E8%A8%98/record_chcp/"/>
      <url>/2023/01/21/%E7%AD%86%E8%A8%98%E8%88%87%E7%94%9F%E6%B4%BB%E9%9B%9C%E8%A8%98/record_chcp/</url>
      
        <content type="html"><![CDATA[<h1 id="紀錄目的"><a href="#紀錄目的" class="headerlink" title="紀錄目的"></a>紀錄目的</h1><p>如果使用命令提示字元有遇到亂碼，需要轉換 cmd Unicode 設定問題，可以考慮嘗試用這個。 </p><h1 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h1><p>chcp 是一個轉換 Unicode 設定，輸入方式很簡單，只需要輸入<code>chcp 65001</code>。</p><h1 id="參考文件"><a href="#參考文件" class="headerlink" title="參考文件"></a>參考文件</h1><ul><li>維基百科 - <a href="https://zh.wikipedia.org/wiki/%E4%BB%A3%E7%A0%81%E9%A1%B5">頁碼</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 筆記 </category>
          
          <category> 生活雜記 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web Api </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(筆記) 命令提示字元 - netsh 顯示 wifi 資訊</title>
      <link href="/2023/01/21/%E7%AD%86%E8%A8%98%E8%88%87%E7%94%9F%E6%B4%BB%E9%9B%9C%E8%A8%98/record_netshShowWifi/"/>
      <url>/2023/01/21/%E7%AD%86%E8%A8%98%E8%88%87%E7%94%9F%E6%B4%BB%E9%9B%9C%E8%A8%98/record_netshShowWifi/</url>
      
        <content type="html"><![CDATA[<h1 id="紀錄目的"><a href="#紀錄目的" class="headerlink" title="紀錄目的"></a>紀錄目的</h1><p>cmd 指令有很多可以使用，通常太久沒使用會忘記如何使用，預防再次忘記會利用空檔紀錄如何使用。</p><p>wifi 部分通常很多人想要往回查wifi密碼或是忘記密碼可以使用netsh 查詢，相對這種查詢方式也要開始思考是否有沒有資安問題。</p><h1 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h1><p>步驟如下 :</p><ol><li>打開 cmd 或是 powershell </li><li>輸入 netsh 可以進入 netsh 輸入對話中。</li><li>進入對話內使用 <code>wlan show profiles</code>;如果沒有進入情況下使用 <code>netsh wlan show profiles</code></li><li>上面結果可以查看已存檔的wifi名稱，選擇需要的wifi 複製。</li><li>輸入方式 : <code>wlan show profiles [wifi name]</code> ，可以得知訊息內容。如果想要查詢密碼請輸入 <code>wlan show profiles [wifi name] key=clear</code> 就會出現wifi密碼。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 筆記 </category>
          
          <category> 生活雜記 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cmd </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(筆記) 如何確認 TipTop Web Api 對接方式</title>
      <link href="/2023/01/21/%E7%AD%86%E8%A8%98%E8%88%87%E7%94%9F%E6%B4%BB%E9%9B%9C%E8%A8%98/record_tiptop_frame/"/>
      <url>/2023/01/21/%E7%AD%86%E8%A8%98%E8%88%87%E7%94%9F%E6%B4%BB%E9%9B%9C%E8%A8%98/record_tiptop_frame/</url>
      
        <content type="html"><![CDATA[<h1 id="紀錄目的"><a href="#紀錄目的" class="headerlink" title="紀錄目的"></a>紀錄目的</h1><p>近期遇到 Web Api 處理方式是使用 TipTop Web Api，處理方式、撰寫方式也不明確，在此紀錄如何跟別人對接Web Api 方式。</p><h1 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h1><p>TipTop 是一個非常舊版的 Web Api，執行上對新人非常不友善。下方是概念圖。<br><img src="/img/flower/tiptop.png"></p><p>遇到不使用帳號的 API 往往都是使用內網方式串接，目前查詢呼叫方式使用 SoapUI 到目前是顯示XML比較好用的Software。</p><h2 id="注意事項"><a href="#注意事項" class="headerlink" title="注意事項"></a>注意事項</h2><ol><li>Response 通常會在自己本機撰寫好程式碼，會告知對方使用這個Function。</li><li>可以透過得知文件進行確認</li><li>TipTop 有分兩種版本，1. 需使用帳號登入 2. 只需傳入值</li><li>Response 如果失效，通常會有顯示 Status ，[-1] 為無效、失敗; [0]則是成功。</li></ol><h2 id="下載支援"><a href="#下載支援" class="headerlink" title="下載支援"></a>下載支援</h2><ol><li><a href="https://www.soapui.org/downloads/soapui/">SoapUI</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 筆記 </category>
          
          <category> 生活雜記 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web Api </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(筆記) Javascript - Callback Function 回呼函式</title>
      <link href="/2023/01/21/%E7%AD%86%E8%A8%98%E8%88%87%E7%94%9F%E6%B4%BB%E9%9B%9C%E8%A8%98/js-callback/"/>
      <url>/2023/01/21/%E7%AD%86%E8%A8%98%E8%88%87%E7%94%9F%E6%B4%BB%E9%9B%9C%E8%A8%98/js-callback/</url>
      
        <content type="html"><![CDATA[<h1 id="Callback-function-回呼函式"><a href="#Callback-function-回呼函式" class="headerlink" title="Callback function - 回呼函式"></a>Callback function - 回呼函式</h1><p>是指能藉由參數（argument）通往另一個函式的函式。它會在外部函式內調用、以完成某些事情。</p><h2 id="使用種類"><a href="#使用種類" class="headerlink" title="使用種類"></a>使用種類</h2><h3 id="一般使用function"><a href="#一般使用function" class="headerlink" title="一般使用function"></a>一般使用function</h3><p>開發常見使用個別function去做執行動作。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">A = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;這是 A functions&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">B = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;這是 B functions&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">A</span>();</span><br><span class="line"><span class="title function_">B</span>();</span><br></pre></td></tr></table></figure><h3 id="B-function-成為-A-function-的參數"><a href="#B-function-成為-A-function-的參數" class="headerlink" title="B function 成為 A function 的參數"></a>B function 成為 A function 的參數</h3><p>這邊是將參數設為call，讓 B function 填的位置。這樣就可以達成簡易版本的callback。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">A=<span class="function">(<span class="params">call</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;這是function A&#x27;</span>);</span><br><span class="line">    <span class="title function_">call</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">B=<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;這是function B&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">A</span>(B);</span><br></pre></td></tr></table></figure><p>下方則是利用 <code>prompt</code>方式傳入B function 參數中。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">A=<span class="function">(<span class="params">call</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> name = <span class="title function_">prompt</span>(<span class="string">&#x27;請輸入名字&#x27;</span>);</span><br><span class="line">    <span class="title function_">call</span>(name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">B=<span class="function">(<span class="params">name</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;哈摟 &#x27;</span>+name+<span class="string">&#x27;!! 這是CallBack 測試&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">A</span>(B);</span><br></pre></td></tr></table></figure><h3 id="非同步處理-asynchronous-callback"><a href="#非同步處理-asynchronous-callback" class="headerlink" title="非同步處理(asynchronous callback)"></a>非同步處理(asynchronous callback)</h3><p>以下可能會遇到需要延遲的event ，這如果要考量執行順序需要小心執行。執行順序可以考慮使用 async、await 。 </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">A=<span class="function">(<span class="params">call</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;這是function A&#x27;</span>);</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">         <span class="title function_">call</span>();</span><br><span class="line">    &#125;,<span class="number">2000</span>);</span><br><span class="line">   </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">B=<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;這是function B&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">A</span>(B);</span><br></pre></td></tr></table></figure><p>下方使用非同步方式處理。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">B = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123; <span class="title function_">resolve</span>(<span class="string">&#x27;async B function&#x27;</span>) &#125;,<span class="number">2000</span>)</span><br><span class="line">    &#125;)<span class="comment">//return</span></span><br><span class="line">    </span><br><span class="line">&#125;<span class="comment">//B()</span></span><br><span class="line"></span><br><span class="line">A = <span class="title function_">async</span>(call) =&gt; &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;A function&#x27;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">await</span> <span class="title function_">call</span>());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">A</span>(B);</span><br></pre></td></tr></table></figure><h2 id="使用時機"><a href="#使用時機" class="headerlink" title="使用時機"></a>使用時機</h2><ul><li><a href="https://developer.mozilla.org/zh-TW/docs/Glossary/Callback_function">MDN Web Docs</a></li></ul><p>從MDN Web Docs 得知，CallBack 常使用於非同步動作執行。常見案例 : Google API、Geolocation API 、GPS定位等，利用非同步取得 GPS 的設備坐標。</p>]]></content>
      
      
      <categories>
          
          <category> 筆記 </category>
          
          <category> 生活雜記 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> Callback </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(筆記) ngrok - http 轉換 https 神器</title>
      <link href="/2023/01/21/%E7%AD%86%E8%A8%98%E8%88%87%E7%94%9F%E6%B4%BB%E9%9B%9C%E8%A8%98/ngrok/"/>
      <url>/2023/01/21/%E7%AD%86%E8%A8%98%E8%88%87%E7%94%9F%E6%B4%BB%E9%9B%9C%E8%A8%98/ngrok/</url>
      
        <content type="html"><![CDATA[<p>相信不少有製作專案時候，面臨不少有管https的問題 ，例如 Line Bot (message api)、影像識別等。必需要https 才能使用，ngrok會將成為專案救星。</p><p>如果是使用 windows 以外系統，建議配合其他資料參考。</p><h1 id="ngrok"><a href="#ngrok" class="headerlink" title="ngrok"></a><a href="https://ngrok.com/">ngrok</a></h1><p>ngrok 是一個可以將內網伺服器與對外伺服器溝通的服務。ngrok 可以把外界的請求轉發到你指定的 Port，使用的背景原理是連接到 ngrok 雲端伺服器，將你本機指定的地址公開，再將由 ngrok 一串公開的網址來存取內容。</p><h2 id="安裝"><a href="#安裝" class="headerlink" title="安裝"></a>安裝</h2><p>註冊部分請各位自行去註冊。</p><p>進入ngrok網站後，會需要進行安裝的動作，點擊<a href="https://bin.equinox.io/c/bNyj1mQVY4c/ngrok-v3-stable-windows-amd64.zip">ngrok.exe</a>即可。</p><p>存放位置沒有特別限制，這邊我存放路徑為 <code>C:\Windows\System32</code> 給各位參考。<br><img src="/img/Note/ngrok/Snipaste_2022-08-11_21-01-27.png"></p><p>接下來要加入 authtoken 這邊需要複製網站上提供的指令並貼在command 裡面。</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ngrok config add-authtoken xxxxxxx</span><br></pre></td></tr></table></figure><p><img src="/img/Note/ngrok/Snipaste_2022-08-11_21-24-50.png"></p><p>完成後，可以輸入<code>ngrok help </code>先看看指令。官方網所提供如果要開啟 port 80 必須要輸入<code>ngrok http 80</code>。</p><h2 id="執行"><a href="#執行" class="headerlink" title="執行"></a>執行</h2><p>ngrok其實有三種種做法。</p><ol><li>單一開啟</li><li>多個開啟</li><li>全部開啟</li></ol><p>依據專案開放測試，可能遇到串接問題需要兩個https 同時存在就會需要開啟多個port來解決現況。</p><h2 id="多個開啟-yml"><a href="#多個開啟-yml" class="headerlink" title="多個開啟 (.yml)"></a>多個開啟 (.yml)</h2><p>加入憑證時候，其實可以看到已經有加入yml檔案，也就是設定檔案。設定部分需要透過<code>C:\Users\user\AppData\Local\ngrok</code>當中<code>ngrok.yml</code>設定。</p><p>預設通常會看到憑證、版本，接下來再輸入我們要哪些Port以及名稱。下方範例加入兩個port 以及 名稱，這樣設定部分就已經完成了。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;2&quot;</span></span><br><span class="line"><span class="attr">authtoken:</span> <span class="string">xxxxxxxxx</span></span><br><span class="line"><span class="attr">tunnels:</span></span><br><span class="line">  <span class="attr">LineBot:</span></span><br><span class="line">    <span class="attr">addr:</span> <span class="number">8000</span></span><br><span class="line">    <span class="attr">proto:</span> <span class="string">http</span></span><br><span class="line">    <span class="attr">host_header:</span> <span class="string">Localhost</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">LineAPI:</span></span><br><span class="line">    <span class="attr">addr:</span> <span class="number">8100</span></span><br><span class="line">    <span class="attr">proto:</span> <span class="string">http</span></span><br><span class="line">    <span class="attr">host_header:</span> <span class="string">Localhost</span></span><br></pre></td></tr></table></figure><p>設定完畢後，輸入指定名稱開起來即可，使用上也相當簡單許多。</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ngrok <span class="built_in">start</span> LineBot LineAPI</span><br></pre></td></tr></table></figure><h2 id="全部開啟"><a href="#全部開啟" class="headerlink" title="全部開啟"></a>全部開啟</h2><p>使用方式如同多個開啟一樣，必須要先設定yml 這個指令才會生效。</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ngrok <span class="built_in">start</span> --all</span><br></pre></td></tr></table></figure><h2 id="單一開啟"><a href="#單一開啟" class="headerlink" title="單一開啟"></a>單一開啟</h2><p>單一開啟有兩種做法，yml設定檔中的名稱以及指定port名稱。</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ngrok <span class="built_in">start</span> LineBot </span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ngrok http <span class="number">7777</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 筆記 </category>
          
          <category> 生活雜記 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ngrok </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(筆記) Net Core - Scaffold</title>
      <link href="/2023/01/21/%E5%BE%8C%E7%AB%AF%E6%8A%80%E8%A1%93/CS/%E7%AD%86%E8%A8%98/cs_notion_core-scaffold/"/>
      <url>/2023/01/21/%E5%BE%8C%E7%AB%AF%E6%8A%80%E8%A1%93/CS/%E7%AD%86%E8%A8%98/cs_notion_core-scaffold/</url>
      
        <content type="html"><![CDATA[<h1 id="Scaffold"><a href="#Scaffold" class="headerlink" title="Scaffold"></a>Scaffold</h1><p>又可稱”鷹架”、”支架”。Scaffold 是可以解釋為程式碼產生器，可以透由指令產生出想要的檔案、專案，使用部分通常是透由指令方式呼叫、產生指令。dotnet.exe內也有提供scaffold概念。</p><h2 id="專案"><a href="#專案" class="headerlink" title="專案"></a>專案</h2><p>Net Core SDK安裝時候會提供預先定義的 scaffold 範本(example: dotnet.exe)。 以下指令參考 : </p><ul><li>展開 dotnet.exe 清單 : <code>dotnet new --lists </code></li><li>求救指令 : <code> dotnet new -h</code></li></ul><h2 id="Entity-Framework-Core"><a href="#Entity-Framework-Core" class="headerlink" title="Entity Framework Core"></a>Entity Framework Core</h2><p>EF Core 使用方式與 EF 不同，EF Core 基於 Scaffolding 實體類型類別和 DbCoNtext 類別的程式。可以透由套件管理員主控台 (PMC):<code>Scaffold-DbContext</code>或是 NET 命令列介面 (CLI): <code>dotnet ef dbcontext scaffold</code> 產生出檔案。</p><h3 id="注意事項"><a href="#注意事項" class="headerlink" title="注意事項"></a>注意事項</h3><ul><li>必須使用<code>Microsoft.EntityFrameworkCore.Design</code> NuGet 套件</li><li>需要安裝相關工具 : <ol><li><a href="https://docs.microsoft.com/zh-tw/ef/core/cli/powershell">套件管理員主控台 (PMC)</a></li><li><a href="https://docs.microsoft.com/zh-tw/ef/core/cli/dotnet">NET 命令列介面 (CLI)</a></li></ol></li></ul><h3 id="使用方式-NET-命令列介面-CLI"><a href="#使用方式-NET-命令列介面-CLI" class="headerlink" title="使用方式 - NET 命令列介面 (CLI)"></a>使用方式 - NET 命令列介面 (CLI)</h3><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dotnet ef dbcontext scaffold &quot;Data Source=(localdb)\MSSQLLocalDB;Initial Catalog=Chinook&quot; Microsoft.EntityFrameworkCore.SqlServer</span><br></pre></td></tr></table></figure><h3 id="使用方式-套件管理員主控台-PMC"><a href="#使用方式-套件管理員主控台-PMC" class="headerlink" title="使用方式 - 套件管理員主控台 (PMC)"></a>使用方式 - 套件管理員主控台 (PMC)</h3><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Scaffold-DbContext &#x27;Data Source=(localdb)\MSSQLLocalDB;Initial Catalog=Chinook&#x27; Microsoft.EntityFrameworkCore.SqlServer</span><br></pre></td></tr></table></figure><h2 id="參考文件"><a href="#參考文件" class="headerlink" title="參考文件"></a>參考文件</h2><ol><li><a href="https://docs.microsoft.com/zh-tw/ef/core/managing-schemas/scaffolding?tabs=dotnet-core-cli">反向工程</a></li><li><a href="https://dotblogs.com.tw/stanley14/2016/07/02/193832">[Web API]基本CRUD 程式碼產生器(Scaffold)</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 後端技術 </category>
          
          <category> C# </category>
          
          <category> 筆記 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
            <tag> core </tag>
            
            <tag> Scaffold </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C# .NET 筆記</title>
      <link href="/2023/01/21/%E5%BE%8C%E7%AB%AF%E6%8A%80%E8%A1%93/CS/%E7%AD%86%E8%A8%98/cs_notion_.NET%20%E7%AD%86%E8%A8%98/"/>
      <url>/2023/01/21/%E5%BE%8C%E7%AB%AF%E6%8A%80%E8%A1%93/CS/%E7%AD%86%E8%A8%98/cs_notion_.NET%20%E7%AD%86%E8%A8%98/</url>
      
        <content type="html"><![CDATA[<h2 id="Net"><a href="#Net" class="headerlink" title=".Net"></a>.Net</h2><p>.NET是.NET Framework的新一代版本，是微軟開發的第一個跨平台 (Windows、Mac OSX、Linux）的應用程式開發框架（Application Framework），未來也將會支援FreeBSD與Alpine 平台。</p><p>由於 .NET Core 的開發目標是跨平台的 .NET 平台，因此 .NET Core 會包含 .NET Framework 的類別庫，但與 .NET Framework 不同的是 .NET Core 採用套件化 (Packages) 的管理方式，應用程式只需要取得需要的組件即可，與 .NET Framework 大包式安裝的作法截然不同，同時各套件亦有獨立的版本線 (Version line)，不再硬性要求應用程式跟隨主線版本。</p><h3 id="核心功能"><a href="#核心功能" class="headerlink" title="核心功能"></a>核心功能</h3><p>.NET Core 是由許多專案所組成，除了基本的類別庫 (Core FX) 之外，也包含採用 RyuJIT 編譯的執行平台 Core CLR、編譯器平台 .NET Compiler Platform、採用 AOT 編譯技術運行最佳化的套件 Core RT (.NET Core Runtime)，以及跨平台的 MSIL 編譯器 LLILC (LLVM-based MSIL Compiler) 等專案。<br>同時，微軟也發展了一個建置技術檔案的平台 docfx ，並運用於 .NET Core 的檔案網站。</p><h3 id="與其他平台的關係"><a href="#與其他平台的關係" class="headerlink" title="與其他平台的關係"></a>與其他平台的關係</h3><p>NET Core 經常會拿來與其他平台做類比，尤其是它的源頭 .NET Framework 以及另一個相似性質的開源平台 Mono。</p><h2 id="Framework"><a href="#Framework" class="headerlink" title="Framework"></a>Framework</h2><h3 id="NET-Framework"><a href="#NET-Framework" class="headerlink" title=".NET Framework"></a>.NET Framework</h3><p>據微軟的說明，.NET Core 和 .NET Framework 是子集 (Subset) 與超集 (Superset) 的關係，.NET Core 將會實作出部份的 .NET Framework 功能 (基本上是不含使用者介面的部份)，例如 JIT (.NET Core 採用 RyuJIT)、垃圾收集器 (GC) 以及型別 (包含基本型別以及泛型型別等)。未來 .NET Framework 和 .NET Core 也將會是各自發展，但它們也會同時使用彼此的功能，例如 .NET Compiler Platform 與 RyuJIT 等技術。</p><h3 id="Mono"><a href="#Mono" class="headerlink" title="Mono"></a>Mono</h3><p>Mono 是另一個已發展許久的 .NET Framework 跨平台開源版本，基本上並不隸屬微軟官方，而是由社群的力量所主導，自成一個生態系統，也開發出了像Xamarin這樣的跨平台.NET行動應用，.NET Core 與 Mono 未來會是合作的關係，Mono 仍會維持社群力量的維護與發展，而 .NET Core 則會以官方角度來進行發展，兩邊也會一起進行彼此功能上的增進。</p><h3 id="NET-CLI"><a href="#NET-CLI" class="headerlink" title=".NET CLI"></a>.NET CLI</h3><p>.NET CLI (Command-Line Interface) 指令列工具是 .NET Core 處理建造、執行與編輯工作的主要工具 ，有幾個主要的動作：</p><h3 id="ASP-net-Core"><a href="#ASP-net-Core" class="headerlink" title="ASP.net Core"></a>ASP.net Core</h3><p>ASP.NET Core 是一種跨平台且高效能的開放原始碼架構<br>建置現代化、雲端式、網際網路連線的應用程式、 Web 應用程式和服務、IoT 應用程式、以及行動後端<br>可以在 Windows、macOS 和 Linux 上使用慣用的開發工具<br>部署到雲端或在內部部署。<br>在 .NET Core 或 .NET Framework 上執行。</p><p>ASP.NET 5的Stack，為了開放原始碼與跨平台(Linux、iOS)，擺脫了對 System.Web 的依賴</p><h2 id="優點分析"><a href="#優點分析" class="headerlink" title="優點分析"></a>優點分析</h2><p>Microsoft 在 Windows、macOS 與 Linux上 都支援 .NET Core<br>每年都為它推出安全性與品質更新數次<br>.NET Core 二進位發行版本是在 Azure 中由 Microsoft 維護的服務上建置及測試，享有與任何 Microsoft 產品一樣的支援<br>應用程式介面區較小，包括更嚴密的安全性、減少維護工作，以及提升效能<br>完美整合常用的用戶端架構和程式庫，包括 Angular、React 與 Bootstrap</p>]]></content>
      
      
      <categories>
          
          <category> 後端技術 </category>
          
          <category> C# </category>
          
          <category> 筆記 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(筆記) C# - DI / IOC 差異</title>
      <link href="/2023/01/21/%E5%BE%8C%E7%AB%AF%E6%8A%80%E8%A1%93/CS/%E7%AD%86%E8%A8%98/cs_notion_DInIOC/"/>
      <url>/2023/01/21/%E5%BE%8C%E7%AB%AF%E6%8A%80%E8%A1%93/CS/%E7%AD%86%E8%A8%98/cs_notion_DInIOC/</url>
      
        <content type="html"><![CDATA[<h2 id="DI-依賴注入-Dependency-Injection"><a href="#DI-依賴注入-Dependency-Injection" class="headerlink" title="DI 依賴注入 (Dependency Injection)"></a>DI 依賴注入 (Dependency Injection)</h2><p>定義 : A物件程式內部需要使用B物件 , 則 B 物件中有依賴的成份。</p><p><img src="/image/20221209_17-15-42.png"></p><h2 id="IOC-控制反轉-Inversion-of-Control"><a href="#IOC-控制反轉-Inversion-of-Control" class="headerlink" title="IOC 控制反轉 (Inversion of Control)"></a>IOC 控制反轉 (Inversion of Control)</h2><p>定義 : A 物件與 B 物件控制權由第三方容器控制。</p><p><img src="/image/20221209_17-15-51.png"></p>]]></content>
      
      
      <categories>
          
          <category> 後端技術 </category>
          
          <category> C# </category>
          
          <category> 筆記 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(筆記) - C# ORM 物件關係映像</title>
      <link href="/2023/01/21/%E5%BE%8C%E7%AB%AF%E6%8A%80%E8%A1%93/CS/%E7%AD%86%E8%A8%98/cs_notion_ORM/"/>
      <url>/2023/01/21/%E5%BE%8C%E7%AB%AF%E6%8A%80%E8%A1%93/CS/%E7%AD%86%E8%A8%98/cs_notion_ORM/</url>
      
        <content type="html"><![CDATA[<h2 id="物件關係映像-Object-Relational-Mapping"><a href="#物件關係映像-Object-Relational-Mapping" class="headerlink" title="物件關係映像 Object Relational Mapping"></a>物件關係映像 Object Relational Mapping</h2><p>物件關係映像是 “物件”與”資料庫”之間對應的一種技術，例如 : “Entity Framework”。特色是資料透過【物件方式】 呈現，也可以使用 CRUD 方式。</p><p>ORM 與 資料庫由抽象關係，程式與資料庫沒有直接相依性，資料庫具有可抽換性，即使變更資料庫平台，ORM 資料存取可以正常運作。</p><p><img src="https://2.bp.blogspot.com/-4ABOoATNbag/V0vUgXqBAEI/AAAAAAAADHY/o61wN5yv2cMDX0lwGghkvzACQcU1YOOaQCLcB/s1600/object_relational_mapping.JPG"></p>]]></content>
      
      
      <categories>
          
          <category> 後端技術 </category>
          
          <category> C# </category>
          
          <category> 筆記 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(筆記) IIS - 排除 &quot;APK檔案無法下載&quot;</title>
      <link href="/2023/01/21/%E7%AD%86%E8%A8%98%E8%88%87%E7%94%9F%E6%B4%BB%E9%9B%9C%E8%A8%98/IIS_APK%E6%AA%94%E6%A1%88%E7%84%A1%E6%B3%95%E4%B8%8B%E8%BC%89/"/>
      <url>/2023/01/21/%E7%AD%86%E8%A8%98%E8%88%87%E7%94%9F%E6%B4%BB%E9%9B%9C%E8%A8%98/IIS_APK%E6%AA%94%E6%A1%88%E7%84%A1%E6%B3%95%E4%B8%8B%E8%BC%89/</url>
      
        <content type="html"><![CDATA[<h2 id="紀錄目的"><a href="#紀錄目的" class="headerlink" title="紀錄目的"></a>紀錄目的</h2><p>若遇到APK檔案無法下載時候，先確認IIS中的MIME是否有設定。<br><img src="/img/Note/IIS/bg_2_0.png"></p><h2 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h2><p>按下新增按鈕後，打下方提供的字輸入在MIME類型中，記得副檔名要打.apk 才會生效。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">application/vnd.android.package-archive</span><br></pre></td></tr></table></figure><p><img src="/img/Note/IIS/2_1.png"></p><h2 id="備註"><a href="#備註" class="headerlink" title="備註"></a>備註</h2><p>網際網路媒體型別(Internet media type)</p><p>原名叫“Type MIME”或“MIME”或在頭資訊中各種協議之後的內容種類(Content-type),他有兩部分用來在Internet上鑑別資料格式。<br>一個Type MIME至少包括兩個部分:一個型別和一個子型別和一個或多個其他需要的引數。<br>引數要求一個Uri 和一個網際網路媒體型別,返回一個Intent物件。通過setDataAndType  就可以實現更新,下載,開啟新應用等功能。<br>P.S. APK 檔案基於 ZIP 檔案格式，它與JAR檔案的構造方式相似。它的網際網路媒體類型是：application&#x2F;vnd.android.package-archive</p>]]></content>
      
      
      <categories>
          
          <category> 筆記 </category>
          
          <category> 生活雜記 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(筆記) IIS - 排除 &quot;必須使用Localhost或是127.0.0.1問題&quot;</title>
      <link href="/2023/01/21/%E7%AD%86%E8%A8%98%E8%88%87%E7%94%9F%E6%B4%BB%E9%9B%9C%E8%A8%98/IIS_%E6%8E%92%E9%99%A4%E5%BF%85%E9%A0%88%E4%BD%BF%E7%94%A8Localhost%E5%95%8F%E9%A1%8C/"/>
      <url>/2023/01/21/%E7%AD%86%E8%A8%98%E8%88%87%E7%94%9F%E6%B4%BB%E9%9B%9C%E8%A8%98/IIS_%E6%8E%92%E9%99%A4%E5%BF%85%E9%A0%88%E4%BD%BF%E7%94%A8Localhost%E5%95%8F%E9%A1%8C/</url>
      
        <content type="html"><![CDATA[<h2 id="紀錄目的"><a href="#紀錄目的" class="headerlink" title="紀錄目的"></a>紀錄目的</h2><p>架設網站時若連線出現下圖問題，可以參考以下作法。<br><img src="/img/Note/IIS/bg.png"></p><h2 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h2><p>請打開 [服務] 後找尋下圖的ASP.NET State service，將它設為自動後並啟動，完成後網站將可連線<br><img src="/img/Note/IIS/01.png"></p>]]></content>
      
      
      <categories>
          
          <category> 筆記 </category>
          
          <category> 生活雜記 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(VS Code) Live Server 解決 Https、SSL 問題</title>
      <link href="/2023/01/21/%E7%AD%86%E8%A8%98%E8%88%87%E7%94%9F%E6%B4%BB%E9%9B%9C%E8%A8%98/Live%20Server%E8%A7%A3%E6%B1%BAHttps%E5%95%8F%E9%A1%8C/"/>
      <url>/2023/01/21/%E7%AD%86%E8%A8%98%E8%88%87%E7%94%9F%E6%B4%BB%E9%9B%9C%E8%A8%98/Live%20Server%E8%A7%A3%E6%B1%BAHttps%E5%95%8F%E9%A1%8C/</url>
      
        <content type="html"><![CDATA[<h2 id="前置作業"><a href="#前置作業" class="headerlink" title="前置作業"></a>前置作業</h2><h3 id="準備工具、網址"><a href="#準備工具、網址" class="headerlink" title="準備工具、網址"></a>準備工具、網址</h3><ol><li>Chocolatey : <a href="https://chocolatey.org/">https://chocolatey.org/</a></li><li>Live Server : <a href="https://marketplace.visualstudio.com/items?itemName=ritwickdey.LiveServer">https://marketplace.visualstudio.com/items?itemName=ritwickdey.LiveServer</a></li></ol><h3 id="安裝方式"><a href="#安裝方式" class="headerlink" title="安裝方式"></a>安裝方式</h3><ol><li>開啟系統管理員 Powershell 安裝 Chocolatey<figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Set</span>-ExecutionPolicy Bypass -Scope Process -Force; [System.<span class="built_in">Net</span>.ServicePointManager]::SecurityProtocol = [System.<span class="built_in">Net</span>.ServicePointManager]::SecurityProtocol -bor <span class="number">3072</span>; iex ((New-Object System.<span class="built_in">Net</span>.WebClient).DownloadString(&#x27;https://community.chocolatey.org/install.ps1&#x27;))</span><br></pre></td></tr></table></figure></li><li>安裝 mkcert<figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">choco install mkcert</span><br></pre></td></tr></table></figure></li></ol><h2 id="Mkcert使用步驟"><a href="#Mkcert使用步驟" class="headerlink" title="Mkcert使用步驟"></a>Mkcert使用步驟</h2><h3 id="一、創建專案"><a href="#一、創建專案" class="headerlink" title="一、創建專案"></a>一、創建專案</h3><p><img src="/image/20230101_19-15-11.png"></p><h3 id="二、創建本機CA"><a href="#二、創建本機CA" class="headerlink" title="二、創建本機CA"></a>二、創建本機CA</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkcert localhost</span><br></pre></td></tr></table></figure><h3 id="三、設定-setting-參數"><a href="#三、設定-setting-參數" class="headerlink" title="三、設定 setting 參數"></a>三、設定 setting 參數</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;liveServer.settings.host&quot;</span><span class="punctuation">:</span> <span class="string">&quot;localhost&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;liveServer.settings.https&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;enable&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> <span class="comment">//set it true to enable the feature.</span></span><br><span class="line">        <span class="attr">&quot;cert&quot;</span><span class="punctuation">:</span> <span class="string">&quot;E:\\LiveServer\\CA\\localhost.pem&quot;</span><span class="punctuation">,</span> <span class="comment">//full path</span></span><br><span class="line">        <span class="attr">&quot;key&quot;</span><span class="punctuation">:</span> <span class="string">&quot;E:\\LiveServer\\CA\\localhost-key.pem&quot;</span><span class="punctuation">,</span> <span class="comment">//full path</span></span><br><span class="line">        <span class="attr">&quot;passphrase&quot;</span><span class="punctuation">:</span> <span class="string">&quot;12345&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="執行"><a href="#執行" class="headerlink" title="執行"></a>執行</h3><p>打開後，上方就可以看到是否有沒有 SSL。<br><img src="/image/20230101_19-17-46.png"></p>]]></content>
      
      
      <categories>
          
          <category> 筆記 </category>
          
          <category> 生活雜記 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vsc </tag>
            
            <tag> Chocolatey </tag>
            
            <tag> mkcert </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(筆記) VSC - Markdown PasteImage</title>
      <link href="/2023/01/21/%E7%AD%86%E8%A8%98%E8%88%87%E7%94%9F%E6%B4%BB%E9%9B%9C%E8%A8%98/PasteImage/"/>
      <url>/2023/01/21/%E7%AD%86%E8%A8%98%E8%88%87%E7%94%9F%E6%B4%BB%E9%9B%9C%E8%A8%98/PasteImage/</url>
      
        <content type="html"><![CDATA[<p>VSC MarkDown 有提供截圖工具 Markdown PasteImage，近期需要即時貼上圖片會方便許多，簡單簡述Markdown PasteImage 使用方式。</p><h2 id="Markdown-PasteImage"><a href="#Markdown-PasteImage" class="headerlink" title="Markdown PasteImage"></a><a href="https://marketplace.visualstudio.com/items?itemName=telesoho.vscode-markdown-paste-image">Markdown PasteImage</a></h2><p>Markdown PasteImage 與其他Paste Images 不同可以快速貼上圖片(無提示視窗ex: path 存放位置)。</p><h2 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h2><p>通過按”Ctrl+Alt+V”或是指令方式 <code> markdown paste</code> (備註 Mac: “Cmd+Alt+V”)</p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><h3 id="預定義變量"><a href="#預定義變量" class="headerlink" title="預定義變量"></a>預定義變量</h3><ul><li>${workspaceRoot} : 在 VS Code 中打開的文件夾的路徑</li><li>${fileWorkspaceFolder} : 當前打開文件的工作區文件夾</li><li>${fileBasename} : 當前打開文件的基本名稱</li><li>${fileBasenameNoExtension} : 當前打開的文件的基本名稱，沒有文件擴展名</li><li>${fileExtname} : 當前打開文件的擴展名</li><li>${fileDirname} : 當前打開文件的目錄名</li><li>${datetime} : 當前日期和時間格式化為”yyyyMMDDHHmmss”</li></ul><h3 id="設定清單"><a href="#設定清單" class="headerlink" title="設定清單"></a>設定清單</h3><ul><li>MarkdownPaste.path </li><li>MarkdownPaste.nameBase</li><li>MarkdownPaste.namePrefix</li><li>MarkdownPaste.nameSuffix</li><li>MarkdownPaste.silence</li><li>MarkdownPaste.enableImgTag</li><li>MarkdownPaste.encodePath</li><li>MarkdownPaste.rules</li><li>MarkdownPaste.lang_rules</li></ul><p>詳細內容請參閱 <a href="https://github.com/telesoho/vscode-markdown-paste-image">vscode-markdown-paste-image</a></p><h2 id="使用方式-1"><a href="#使用方式-1" class="headerlink" title="使用方式"></a>使用方式</h2><p>MarkdownPaste.path 是儲存路徑，必須要指向你要指定的位置。pasteImage.insertPattern 則是呈現路徑，意思是可以變更Markdown Image Path 。參考如下</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;pasteImage.defaultName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;YYYYMMDD_HH-mm-ss&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;pasteImage.path&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$&#123;currentFileDir&#125;../../../img/Note/other/&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;pasteImage.insertPattern&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$&#123;imageSyntaxPrefix&#125;/img/Note/other/$&#123;imageFileName&#125;$&#123;imageSyntaxSuffix&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><hr><h3 id="參考文件"><a href="#參考文件" class="headerlink" title="參考文件"></a>參考文件</h3><p>-<a href="https://blog.51cto.com/u_15127700/4163443">VSCode Paste Image 设置</a></p>]]></content>
      
      
      <categories>
          
          <category> 筆記 </category>
          
          <category> 生活雜記 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VSC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(筆記) Docker Desktop - 解決 &quot;Hardware assisted virtualization and data execution protection must be enabled in the BIOS&quot;</title>
      <link href="/2023/01/21/%E7%AD%86%E8%A8%98%E8%88%87%E7%94%9F%E6%B4%BB%E9%9B%9C%E8%A8%98/Docker_%E8%A7%A3%E6%B1%BABios%E8%99%9B%E6%93%AC%E5%8C%96/"/>
      <url>/2023/01/21/%E7%AD%86%E8%A8%98%E8%88%87%E7%94%9F%E6%B4%BB%E9%9B%9C%E8%A8%98/Docker_%E8%A7%A3%E6%B1%BABios%E8%99%9B%E6%93%AC%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<p>為了再次學習之前學一半的Docker ，重新再次安裝 Docker Desktop 。安狀完成以為可以正常使用，發生 “Hardware assisted virtualization and data execution protection must be enabled in the BIOS” 錯誤訊息，急忙地排除這問題。<br><img src="/img/Docker/Snipaste_2022-10-06_21-40-59.png"></p><h2 id="問題排除一、指令方式排除"><a href="#問題排除一、指令方式排除" class="headerlink" title="問題排除一、指令方式排除"></a>問題排除一、指令方式排除</h2><p>來源 <a href="https://stackoverflow.com/questions/39684974/docker-for-windows-error-hardware-assisted-virtualization-and-data-execution-p">Stock Overflow</a></p><p>第一次使用安裝使用，先馬上看有沒有要開啟項目。從下方指令明顯看到對象是Hyper-V，看來只要針對這個項目開放因該可以成功。</p><p>一、<strong>SOLUTION A</strong> (If Hyper-V is totally disabled or not installed)</p><ol><li>Open PowerShell as administrator and</li><li>Enable Hyper-V with</li></ol><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dism.exe /Online /Enable-Feature:Microsoft-Hyper-V /All</span><br></pre></td></tr></table></figure><p>二、<strong>SOLUTION B</strong> (If Hyper-V feature is already enabled but doesn’t work)</p><ol><li>Enable Hypervisor with<figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bcdedit /<span class="built_in">set</span> hypervisorlaunchtype auto</span><br></pre></td></tr></table></figure><img src="/img/Docker/Snipaste_2022-10-06_21-43-21.png"></li></ol><p>以上方式結果一樣卻沒辦法成功開啟，看似是透過其他方式開啟，因此，嘗試用其他方式解決。</p><h2 id="問題排除二、BIOS-開啟虛擬化-CPU-MOD"><a href="#問題排除二、BIOS-開啟虛擬化-CPU-MOD" class="headerlink" title="問題排除二、BIOS 開啟虛擬化(CPU MOD)"></a>問題排除二、BIOS 開啟虛擬化(CPU MOD)</h2><p>檢查方式 : 開啟工作管理員 &gt; 效能 &gt; 模擬。</p><p>底下會有 “模擬: 關閉”，看似是這個搞的鬼。這時候需要透過BIOS方式打開，進入Advanced Mode &gt; 開啟 (SVM) 即可。<br><img src="/img/Docker/Snipaste_2022-10-06_22-11-35.png"></p><p>備註 : Intel 虛擬化功能名稱會不相同 (Virtualization Technology)。</p><p>重新開機後，從工作管理員可見已經開啟，Docker Desktop 順利開起來<br>結束這怪問題。<br><img src="/img/Docker/Snipaste_2022-10-06_22-40-03.png"><br><img src="/img/Docker/Snipaste_2022-10-06_22-40-10.png"></p><p>這幾周稍微摸摸如何使用Docker，努力推進 DevOps 工具之一。</p>]]></content>
      
      
      <categories>
          
          <category> 筆記 </category>
          
          <category> 生活雜記 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[心得] Funter開箱心得</title>
      <link href="/2023/01/21/%E7%AD%86%E8%A8%98%E8%88%87%E7%94%9F%E6%B4%BB%E9%9B%9C%E8%A8%98/Funter%E9%96%8B%E7%AE%B1%E5%BF%83%E5%BE%97/"/>
      <url>/2023/01/21/%E7%AD%86%E8%A8%98%E8%88%87%E7%94%9F%E6%B4%BB%E9%9B%9C%E8%A8%98/Funter%E9%96%8B%E7%AE%B1%E5%BF%83%E5%BE%97/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>供給各位放鬆心情閱讀，請慢用貓貓圖φ(゜▽゜*)♪。<br><img src="/image/20221216_22-46-46.png"></p><h3 id="購買契機"><a href="#購買契機" class="headerlink" title="購買契機"></a>購買契機</h3><p>由於本人主要工作是”撰寫程式”(軟體工程師)長期坐在位子上使用電腦，如果長期一直坐著使用電腦不斷影響我的腰部能力，因此選擇升降桌。而市面上很多升降桌品牌，最多人提出品牌為 “funte”、”standway”最多，思考方向會想 雙11或雙12入手比較價格。”standway”部分沒有降下來趨勢，再來就是價格比funte貴才放下standway。</p><p>funte 因雙12優惠 寬120cm*深60cm 智慧型電動三節式升降桌 只需要 <code>13,860</code>相當划算。<br><img src="/image/20221216_23-11-26.png"></p><h3 id="最初桌子"><a href="#最初桌子" class="headerlink" title="最初桌子"></a>最初桌子</h3><p>一開始使用的桌面為ikea SVARTA 現代北歐桌板 ，桌面長度很廣、也有弧形的桌邊，可以強化高架床的搖晃度相當實用。<br><img src="/image/20221216_22-55-50.png"></p><p>這幾年使用下來分享一下缺點，如下。</p><ul><li>桌面高度、椅子舒適度</li><li>弧形桌面使用上的不適感</li><li>夾桌面設備比較不友善，如掛壁式螢幕</li></ul><p>之後選擇了，升降桌方式排除問題點。</p><h2 id="Funte-開箱"><a href="#Funte-開箱" class="headerlink" title="Funte 開箱"></a>Funte 開箱</h2><p>首次撰寫開箱文，新手發文請多多包涵。</p><h3 id="Funte-重量、搬運"><a href="#Funte-重量、搬運" class="headerlink" title="Funte 重量、搬運"></a>Funte 重量、搬運</h3><p>Funte整體重量來說，鐵架那包是最重包裹，如果家裡是公寓沒有電梯建議還是兩個人去搬運(自行DIY)。<br><img src="/image/20221216_23-24-02.png"></p><h3 id="Funte-製作心得"><a href="#Funte-製作心得" class="headerlink" title="Funte 製作心得"></a>Funte 製作心得</h3><p>骨架部分如果有其他人幫忙請記得要請人支援，初次實作勞作差點摔爛地板。購買前有偷偷購買輪胎預防移動時需要第二個人手支援，總結來說，只有桌面部分有電動起子可以鎖，其餘都是人工鎖緊相當費工，花費時間40~50分鐘上下。從ikea 到 funte 使用桌面部分 funte桌面相當厚實非常喜歡這類桌面，輪胎部分使用上安靜、好滾加購部分也很滿意。</p><div class="fj-gallery"><p><img src="/image/20221216_23-30-35.png"><br><img src="/image/20221216_23-31-10.png"><br><img src="/image/20221216_23-34-20.png"><br><img src="/image/20221216_23-31-49.png"><br><img src="/image/20221216_23-32-10.png"></p>          </div><h3 id="Funte-成品"><a href="#Funte-成品" class="headerlink" title="Funte 成品"></a>Funte 成品</h3><p>桌面部分擺放、switch 其餘能架桌面就架桌面保持桌面整齊感，使用上麥克風部分會卡到床邊，限制在 100cm(還輪胎)還在容忍範圍，funte 板面3.0可以上升到 130區間 ，身高如果很高可以不妨選擇這台。<br><img src="/image/20221216_23-46-01.png"></p>]]></content>
      
      
      <categories>
          
          <category> 筆記 </category>
          
          <category> 生活雜記 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>VB Asp.Net - 使用 Ajax</title>
      <link href="/2023/01/21/%E5%BE%8C%E7%AB%AF%E6%8A%80%E8%A1%93/VB/vb_aspnet/"/>
      <url>/2023/01/21/%E5%BE%8C%E7%AB%AF%E6%8A%80%E8%A1%93/VB/vb_aspnet/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>前幾天遇到VB Asp .Net 沒有人寫過 ajax 紀錄，今天單純撰寫如何適用 VB 的 AJAX。<br>寫法如同與C# ajax 相似，就請各位看下去。</p><h1 id="AJAX"><a href="#AJAX" class="headerlink" title="AJAX"></a>AJAX</h1><h2 id="什麼是-AJAX-？"><a href="#什麼是-AJAX-？" class="headerlink" title="什麼是 AJAX ？"></a>什麼是 AJAX ？</h2><p>AJAX 是「Asynchronous JavaScript and XML」（非同步的 JavaScript 與 XML 技術）的縮寫，簡單說就是網頁不用重新整理，就能即時地透過瀏覽器去跟伺服器溝通，撈出資料。</p><ul><li>Asynchronous：非同步</li><li>JavaScript：使用的程式語言</li><li>XML：Client 與 Server 交換資料用的資料與方法，近年由於 JSON 等格式的流行，使用 Ajax 處理的資料並不限於 XML。</li></ul><h2 id="同步請求-v-s-非同步請求"><a href="#同步請求-v-s-非同步請求" class="headerlink" title="同步請求 v.s. 非同步請求"></a>同步請求 v.s. 非同步請求</h2><p>接著讓我們引入客戶端與伺服器端的概念，來看看「同步請求」和「非同步請求」的對比：</p><ul><li><p>同步請求 (Synchronous request)： 客戶端 (client) 對伺服器端 (server) 送出 request ，並且在收到伺服器端的 response 之後才會繼續下一步的動作，等待的期間無法處理其他事情。這個作法並不理想，因為通常伺服器端的運算速度比本地電腦慢上好幾倍。</p></li><li><p>非同步請求 (Asynchronous request)：客戶端 (client) 對伺服器端 (server) 送出 request 之後，不需要等待結果，仍可以持續處理其他事情，甚至繼續送出其他 request。Responese 傳回之後，就被融合進當下頁面或應用中。</p></li></ul><h2 id="參考文件"><a href="#參考文件" class="headerlink" title="參考文件"></a>參考文件</h2><ol><li>jQuery: <a href="https://api.jquery.com/jquery.ajax/">https://api.jquery.com/jquery.ajax/</a></li><li>ithome : <a href="https://ithelp.ithome.com.tw/articles/10226692">https://ithelp.ithome.com.tw/articles/10226692</a></li></ol><hr><h1 id="使用-VB-Ajax"><a href="#使用-VB-Ajax" class="headerlink" title="使用 VB Ajax"></a>使用 VB Ajax</h1><h2 id="Ajax-格式"><a href="#Ajax-格式" class="headerlink" title="Ajax 格式"></a>Ajax 格式</h2><p>我先設定vb ajax格式，前面設定ajax 都比較簡單，確定好後就開始我們的製作接收ajax吧!</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">           <span class="attr">url</span>: <span class="string">&quot;/Ajax/Example.aspx/ExampleAjax&quot;</span>, <span class="comment">//需要抓取的url </span></span><br><span class="line">           <span class="attr">type</span>: <span class="string">&quot;POST&quot;</span>,  <span class="comment">//請求資料的方式(Ex:POST / GET / PUT...等)</span></span><br><span class="line">           <span class="attr">async</span>: <span class="literal">false</span>, <span class="comment">//非同步 。預設為true</span></span><br><span class="line">           <span class="attr">contentType</span>: <span class="string">&quot;application/json; charset=utf-8&quot;</span>, <span class="comment">// 要送到server的資料型態</span></span><br><span class="line">           <span class="attr">data</span>:&#123;&#125;,<span class="comment">// 需要傳送給 Server 的內容</span></span><br><span class="line">           <span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">res</span>) &#123;</span><br><span class="line">               <span class="keyword">let</span> json = $.<span class="title function_">parseJSON</span>(res.<span class="property">d</span>);</span><br><span class="line">               <span class="variable language_">console</span>.<span class="title function_">log</span>(json);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;);</span><br></pre></td></tr></table></figure><h2 id="接收FUNCTION"><a href="#接收FUNCTION" class="headerlink" title="接收FUNCTION"></a>接收FUNCTION</h2><p>我們來介紹我們的主軸 “WebMethod()”，VB設定AJAX需要注意不能漏掉 <code>&lt;System.Web.Services.WebMethod()&gt;</code>，<br>放的位置就會是在FUNCTION上方，要告訴它FUNCTION要被使用AJAX傳輸的概念，如下方所示。</p><figure class="highlight vb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;System.Web.Services.WebMethod()&gt;</span><br><span class="line"><span class="keyword">Public</span> <span class="keyword">Shared</span> <span class="keyword">Function</span> ExampleAjax() <span class="keyword">As</span> <span class="type">String</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">End</span> <span class="keyword">Function</span></span><br></pre></td></tr></table></figure><p>這邊你會好奇說怎麼多了 “Shared”，使用ajax 必須要加上 Shared 關鍵詞，用義會像是 C# 的 static。<br>下方為官方解釋 。</p><div class="note info flat"><h2 id="使用共用的時機"><a href="#使用共用的時機" class="headerlink" title="使用共用的時機"></a>使用共用的時機</h2><p>共用類別或結構的成員可將其提供給每個實例，而 非共用，其中每個實例都會保留它自己的複本。 例如，如果變數的值適用于整個應用程式，共用就很有用。 如果您將該變數宣告為 Shared ，則所有的實例都會存取相同的儲存位置，而如果某個實例變更變數的值，則所有實例都會存取更新的值。</p><h2 id="規則"><a href="#規則" class="headerlink" title="規則"></a>規則</h2><p><strong>宣告內容</strong> : 您只能在模組層級使用 Shared。 這表示元素的宣告內容 Shared 必須是類別或結構，而且不能是原始程式檔、命名空間或程式。<br><strong>結合的修飾詞</strong> : 您無法 Shared 在相同的宣告中，搭配覆寫、可覆寫、 NotOverridable、 MustOverride或靜態來指定。<br><strong>訪問</strong> : 您可以使用類別或結構名稱來限定共用元素，而不是使用其類別或結構的特定實例的變數名稱來存取共用專案。 您甚至不需要建立類別或結構的實例，即可存取其共用成員。</p></div><p>這邊我就使用簡單的方式回傳給我們js，前置作業就這樣完成了。 </p><figure class="highlight vb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;System.Web.Services.WebMethod()&gt;</span><br><span class="line"><span class="keyword">Public</span> <span class="keyword">Shared</span> <span class="keyword">Function</span> ExampleAjax() <span class="keyword">As</span> <span class="type">String</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;is dataType : Json&quot;</span></span><br><span class="line"><span class="keyword">End</span> <span class="keyword">Function</span></span><br></pre></td></tr></table></figure><h2 id="結果"><a href="#結果" class="headerlink" title="結果"></a>結果</h2><p>我們可以從 js ajax中 success 從res可以看到，有 d 的JSON在這裡範例我直接把d裡面的資料取出來就完成我的基本操作。<br>那你們會問如果要回傳值給Server如何使用? 那我們看下方範例。</p><p>範例我用Str包成 json回傳給 server接收值，再用剛才輸入來回傳回去。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">           <span class="attr">url</span>: <span class="string">&quot;/Ajax/Example.aspx/ExampleAjax&quot;</span>, <span class="comment">//需要抓取的url </span></span><br><span class="line">           <span class="attr">type</span>: <span class="string">&quot;POST&quot;</span>,  <span class="comment">//請求資料的方式(Ex:POST / GET / PUT...等)</span></span><br><span class="line">           <span class="attr">async</span>: <span class="literal">false</span>, <span class="comment">//非同步 。預設為true</span></span><br><span class="line">           <span class="attr">contentType</span>: <span class="string">&quot;application/json; charset=utf-8&quot;</span>, <span class="comment">// 要送到server的資料型態</span></span><br><span class="line">           <span class="attr">data</span>:<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(&#123;</span><br><span class="line">               <span class="title class_">Str</span>: <span class="title class_">Str</span>,</span><br><span class="line">           &#125;),<span class="comment">// 需要傳送給 Server 的內容</span></span><br><span class="line">           <span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">res</span>) &#123;</span><br><span class="line">               <span class="keyword">let</span> json = $.<span class="title function_">parseJSON</span>(res.<span class="property">d</span>);</span><br><span class="line">               <span class="variable language_">console</span>.<span class="title function_">log</span>(json);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;);</span><br></pre></td></tr></table></figure><p>你們可以注意到 ajax注意的點，傳值名稱必須要一致，這裡就要注意有沒有Key錯變數名稱。</p><figure class="highlight vb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;System.Web.Services.WebMethod()&gt;</span><br><span class="line"><span class="keyword">Public</span> <span class="keyword">Shared</span> <span class="keyword">Function</span> ExampleAjax(Str <span class="keyword">As</span> <span class="type">String</span>) <span class="keyword">As</span> <span class="type">String</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;is dataType : Json&quot;</span></span><br><span class="line"><span class="keyword">End</span> <span class="keyword">Function</span></span><br></pre></td></tr></table></figure><p>如果要用 Fetch 取得資料，答案是可以使用也歡迎大家也玩玩看ajax。 </p>]]></content>
      
      
      <categories>
          
          <category> 後端技術 </category>
          
          <category> VB </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用 LinQ (三) - LinqPad 工具</title>
      <link href="/2023/01/21/%E5%BE%8C%E7%AB%AF%E6%8A%80%E8%A1%93/LINQ/%E4%BD%BF%E7%94%A8%20LinQ%20(%E4%B8%89)%20-%20LinqPad%20%E5%B7%A5%E5%85%B7/"/>
      <url>/2023/01/21/%E5%BE%8C%E7%AB%AF%E6%8A%80%E8%A1%93/LINQ/%E4%BD%BF%E7%94%A8%20LinQ%20(%E4%B8%89)%20-%20LinqPad%20%E5%B7%A5%E5%85%B7/</url>
      
        <content type="html"><![CDATA[<p>如果要繼續深入使用 LinQ ，那一定要說一下最近使用的工具 LinqPad。</p><h2 id="LinQpad"><a href="#LinQpad" class="headerlink" title="LinQpad"></a><a href="http://www.linqpad.net/">LinQpad</a></h2><p>這工具是一套免費軟體，注意一下環境必須要安裝 .NET Framework 3.5或是4.0以上，免費版功能已經夠用測試LinQ使用。</p><p>如果需要code snippets,autocompletion, smart tags, code outlining, .NET Reflector integration 功能就前往升級版本。</p><p>詳細說明請至 IT邦幫忙(Peter Chen) : <a href="https://ithelp.ithome.com.tw/articles/10193063">https://ithelp.ithome.com.tw/articles/10193063</a></p><hr><h1 id="創造資料庫"><a href="#創造資料庫" class="headerlink" title="創造資料庫"></a>創造資料庫</h1><p>這邊為了快速建檔，可以使用下方語法創建資料庫。<br>我們需要創建個人資料以及成績，之後會用 LINQ 串出來。</p><h2 id="資料庫"><a href="#資料庫" class="headerlink" title="資料庫"></a>資料庫</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/****** Object:  Database [TestDB]    Script Date: 2021/12/3 下午 10:40:32 ******/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> DATABASE [TestDB]</span><br><span class="line"> CONTAINMENT <span class="operator">=</span> <span class="keyword">NONE</span></span><br><span class="line"> <span class="keyword">ON</span>  <span class="keyword">PRIMARY</span> </span><br><span class="line">( NAME <span class="operator">=</span> N<span class="string">&#x27;TestDB&#x27;</span>, FILENAME <span class="operator">=</span> N<span class="string">&#x27;d:\SQL\TestDB.mdf&#x27;</span> , SIZE <span class="operator">=</span> <span class="number">8192</span>KB , MAXSIZE <span class="operator">=</span> UNLIMITED, FILEGROWTH <span class="operator">=</span> <span class="number">65536</span>KB )</span><br><span class="line"> LOG <span class="keyword">ON</span> </span><br><span class="line">( NAME <span class="operator">=</span> N<span class="string">&#x27;TestDB_log&#x27;</span>, FILENAME <span class="operator">=</span> N<span class="string">&#x27;d:d:\SQL\TestDB_log.ldf&#x27;</span> , SIZE <span class="operator">=</span> <span class="number">8192</span>KB , MAXSIZE <span class="operator">=</span> <span class="number">2048</span>GB , FILEGROWTH <span class="operator">=</span> <span class="number">65536</span>KB )</span><br><span class="line"> <span class="keyword">WITH</span> CATALOG_COLLATION <span class="operator">=</span> DATABASE_DEFAULT</span><br><span class="line">GO</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="資料表結構"><a href="#資料表結構" class="headerlink" title="資料表結構"></a>資料表結構</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> [dbo].[person](</span><br><span class="line">[name] [<span class="type">nchar</span>](<span class="number">10</span>) <span class="keyword">NULL</span>,</span><br><span class="line">[age] [<span class="type">nchar</span>](<span class="number">10</span>) <span class="keyword">NULL</span>,</span><br><span class="line">[sex] [<span class="type">nchar</span>](<span class="number">10</span>) <span class="keyword">NULL</span></span><br><span class="line">) <span class="keyword">ON</span> [<span class="keyword">PRIMARY</span>]</span><br><span class="line">GO</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> [dbo].[score](</span><br><span class="line">[id] [<span class="type">int</span>] <span class="keyword">IDENTITY</span>(<span class="number">1</span>,<span class="number">1</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">[Name] [<span class="type">nchar</span>](<span class="number">10</span>) <span class="keyword">NULL</span>,</span><br><span class="line">[score] [<span class="type">nchar</span>](<span class="number">10</span>) <span class="keyword">NULL</span></span><br><span class="line">) <span class="keyword">ON</span> [<span class="keyword">PRIMARY</span>]</span><br><span class="line">GO</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="連接LinQ"><a href="#連接LinQ" class="headerlink" title="連接LinQ"></a>連接LinQ</h2><p>畫面左邊可以看到有 [add connection] 字眼，點選後選擇 Sql Server 選項，如果不是Sql Server可以選擇下方選項。<br><img src="/img/linq_use_day02/01.jpg"><br><img src="/img/linq_use_day02/02.jpg"><br>這裡會需要自己得登入Sql Server 後，按下完成即可。<br><img src="/img/linq_use_day02/03.jpg"><br><img src="/img/linq_use_day02/04.jpg"></p><hr><h2 id="使用-LinQPad"><a href="#使用-LinQPad" class="headerlink" title="使用 LinQPad"></a>使用 LinQPad</h2><p>使用前到LinQPad記得要切換資料庫，再來請自行在資料庫key資料。<br><img src="/img/linq_use_day02/05.jpg"></p><h2 id="Select-字句"><a href="#Select-字句" class="headerlink" title="Select 字句"></a>Select 字句</h2><p>linQ 有兩種寫法，LINQ Query Expression、Lambda Expression。</p><ol><li>LINQ Query Expression<br>寫法會比較偏向 SQL 語法比較容易學起來，需要注意是每一個結尾都要加上 <code>SELECT</code> 字眼。<figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> row <span class="keyword">in</span> Persons <span class="keyword">select</span> row</span><br></pre></td></tr></table></figure></li><li>Lambda Expression<br>LINQ方法配上Lambda運算式，句子會比較好識別。<figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Persons.Select(x=&gt;x)</span><br></pre></td></tr></table></figure></li></ol><h2 id="Where-字句"><a href="#Where-字句" class="headerlink" title="Where 字句"></a>Where 字句</h2><ol><li>LINQ Query Expression<br>以下範例是簡易判斷，如果要增加判斷自行使用(&amp;&amp; 、 ||)。<br>Example : <code>row.Age != &quot;13&quot; &amp;&amp; row.Name == &quot;Eric&quot; </code></li></ol><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> row <span class="keyword">in</span> Persons </span><br><span class="line"><span class="keyword">where</span> row.Age != <span class="string">&quot;13&quot;</span> </span><br><span class="line"><span class="keyword">select</span> row</span><br></pre></td></tr></table></figure><ol start="2"><li>Lambda Expression</li></ol><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Persons.Where(row=&gt; row.Age!= <span class="string">&quot;13&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="Contains"><a href="#Contains" class="headerlink" title="Contains"></a>Contains</h3><p>Linq遇到沒有Like語法怎麼辦? 這裡使用 “ Contains “ 類似於Link效果。</p><ol><li>LINQ Query Expression</li></ol><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> row <span class="keyword">in</span> Persons </span><br><span class="line"><span class="keyword">where</span> !row.Age.Contains(<span class="string">&quot;3&quot;</span>)</span><br><span class="line"><span class="keyword">select</span> row</span><br></pre></td></tr></table></figure><ol start="2"><li>Lambda Expression</li></ol><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Persons.Where(row=&gt; !row.Age.Contains(<span class="string">&quot;3&quot;</span>))</span><br></pre></td></tr></table></figure><h2 id="OrderBy-排序"><a href="#OrderBy-排序" class="headerlink" title="OrderBy 排序"></a>OrderBy 排序</h2><p>排序在Sql中是扮演很重要角色，所以要先使用看看LinQ如何呈現。</p><h3 id="Asc"><a href="#Asc" class="headerlink" title="Asc"></a>Asc</h3><p>用過Sql 都知道Asc代表結果會以由小往大的順序列出，以下使用為例。</p><ol><li>LINQ Query Expression</li></ol><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> row <span class="keyword">in</span> Persons </span><br><span class="line"><span class="keyword">where</span> !row.Age.Contains(<span class="string">&quot;3&quot;</span>)</span><br><span class="line"><span class="keyword">orderby</span> row.Age </span><br><span class="line"><span class="keyword">select</span> row</span><br></pre></td></tr></table></figure><ol start="2"><li>Lambda Expression</li></ol><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Persons</span><br><span class="line">.Where(row=&gt; !row.Age.Contains(<span class="string">&quot;3&quot;</span>))</span><br><span class="line">.OrderBy(row=&gt; row.Age)</span><br></pre></td></tr></table></figure><h3 id="Desc"><a href="#Desc" class="headerlink" title="Desc"></a>Desc</h3><p>如果有使用過LinQ Desc排序需要打很長的英文字是很正常的，LINQ Query Expression 會需要在結尾加上 “ descending “ 請各位多多留意千萬不要打成Desc。</p><p>定義 : DESC 代表結果會以由大往小的順序列出。</p><ol><li>LINQ Query Expression</li></ol><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> row <span class="keyword">in</span> Persons </span><br><span class="line"><span class="keyword">where</span> !row.Age.Contains(<span class="string">&quot;3&quot;</span>)</span><br><span class="line"><span class="keyword">orderby</span> row.Age <span class="keyword">descending</span></span><br><span class="line"><span class="keyword">select</span> row</span><br></pre></td></tr></table></figure><ol start="2"><li>Lambda Expression</li></ol><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Persons</span><br><span class="line">.Where(row=&gt; !row.Age.Contains(<span class="string">&quot;3&quot;</span>))</span><br><span class="line">.OrderByDescending(row=&gt; row.Age)</span><br></pre></td></tr></table></figure><h2 id="GroupBy-群組"><a href="#GroupBy-群組" class="headerlink" title="GroupBy 群組"></a>GroupBy 群組</h2><p>GroupBy群組會直接影顯顯示內容，如果需要顯示多筆請加入<code>new&#123;&#125;</code>字句。</p><ol><li>LINQ Query Expression</li></ol><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> row <span class="keyword">in</span> Persons </span><br><span class="line"><span class="keyword">where</span> !row.Age.Contains(<span class="string">&quot;3&quot;</span>)</span><br><span class="line"><span class="keyword">group</span> row <span class="keyword">by</span> row.Age <span class="keyword">into</span> groups </span><br><span class="line"><span class="keyword">select</span> groups</span><br></pre></td></tr></table></figure><ol start="2"><li>Lambda Expression</li></ol><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Persons</span><br><span class="line">.Where(row=&gt; !row.Age.Contains(<span class="string">&quot;3&quot;</span>))</span><br><span class="line">.GroupBy(row=&gt;row.Age)</span><br></pre></td></tr></table></figure><hr><h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>LinQ 使用上如果遇到多種、多個資料行，需要加入 <code>new&#123;&#125;</code>方式。<br>以上的介紹的寫法比較常使用的方式，下次章節會介紹 join使用方式。</p>]]></content>
      
      
      <categories>
          
          <category> 後端技術 </category>
          
          <category> C# </category>
          
          <category> LinQ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
            <tag> Net FrameWork </tag>
            
            <tag> LinQ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用 LinQ (二) - C# 常見使用方式</title>
      <link href="/2023/01/21/%E5%BE%8C%E7%AB%AF%E6%8A%80%E8%A1%93/LINQ/%E4%BD%BF%E7%94%A8%20LinQ%20(%E4%BA%8C)%20-%20C#%20%E5%B8%B8%E8%A6%8B%E4%BD%BF%E7%94%A8%E6%96%B9%E5%BC%8F/"/>
      <url>/2023/01/21/%E5%BE%8C%E7%AB%AF%E6%8A%80%E8%A1%93/LINQ/%E4%BD%BF%E7%94%A8%20LinQ%20(%E4%BA%8C)%20-%20C#%20%E5%B8%B8%E8%A6%8B%E4%BD%BF%E7%94%A8%E6%96%B9%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="VSC-所需的套件"><a href="#VSC-所需的套件" class="headerlink" title="VSC - 所需的套件"></a>VSC - 所需的套件</h1><h2 id="Mindbox-Data-Linq"><a href="#Mindbox-Data-Linq" class="headerlink" title="[Mindbox.Data.Linq]"></a>[Mindbox.Data.Linq]</h2><ul><li><a href="https://www.nuget.org/packages/Mindbox.Data.Linq/">https://www.nuget.org/packages/Mindbox.Data.Linq/</a></li></ul><h2 id="System-Linq"><a href="#System-Linq" class="headerlink" title="[System.Linq]"></a>[System.Linq]</h2><ul><li><a href="https://www.nuget.org/packages/System.Linq/">https://www.nuget.org/packages/System.Linq/</a></li></ul><h2 id="System-Data-SqlClient"><a href="#System-Data-SqlClient" class="headerlink" title="[System.Data.SqlClient]"></a>[System.Data.SqlClient]</h2><ul><li><a href="https://www.nuget.org/packages/System.Data.SqlClient/">https://www.nuget.org/packages/System.Data.SqlClient/</a></li></ul><h1 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h1><h2 id="1-Array"><a href="#1-Array" class="headerlink" title="1. Array"></a>1. Array</h2><p>linQ可以將陣列重新排序或是重新查詢，以下使用讀取方式：</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">linqArrayExmple</span>()</span>&#123;</span><br><span class="line">    <span class="built_in">string</span>[] sName = &#123;<span class="string">&quot;周杰輪&quot;</span>,<span class="string">&quot;周潤發&quot;</span>,<span class="string">&quot;劉得華&quot;</span>,<span class="string">&quot;周深&quot;</span>&#125;;</span><br><span class="line">    <span class="keyword">var</span> vSearch = <span class="keyword">from</span> s <span class="keyword">in</span> sName  <span class="keyword">select</span> s ;</span><br><span class="line">    <span class="comment">//或  var vSearch = sName; 為全部搜尋</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">foreach</span>(<span class="keyword">var</span> i <span class="keyword">in</span> vSearch)&#123;</span><br><span class="line">        Console.WriteLine(i + <span class="string">&quot;\t&quot;</span> );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>linQ有很多種寫法，也可以使用下方兩種寫法設定變數。<br><code>var vSearch = from s in sName where s.Contains(&quot;周&quot;) select s ;</code><br><code>var vSearch = sName.Where(sName =&gt; sName.Contains(&quot;周&quot;));</code></p><p>linQ也提供很多Function可以使用，如下方式用取得第一個、最後一個資料 First()、Last():</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Console.WriteLine(<span class="string">&quot;ElementAt -&gt; 2 = &#123;0&#125;&quot;</span>, sName.ElementAt(<span class="number">2</span>));</span><br><span class="line">Console.WriteLine(<span class="string">&quot;First no.1 = &#123;0&#125; no.2 = &#123;1&#125;&quot;</span> </span><br><span class="line">    ,sName.First(), sName.First(name =&gt; name.Length == <span class="number">3</span>));</span><br><span class="line">Console.WriteLine(<span class="string">&quot;Last  no.1 = &#123;0&#125; no.2 = &#123;1&#125;&quot;</span> </span><br><span class="line">    ,sName.Last() , sName.Last(name =&gt; name.Length == <span class="number">3</span>));</span><br></pre></td></tr></table></figure><h2 id="2-SQL"><a href="#2-SQL" class="headerlink" title="2. SQL"></a>2. SQL</h2><p>如果使用SQL不用DataTable使用方式，先創建Student的Class。<br>當資料庫抓取會依據Student內容抓取。</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Data.Linq.Mapping;</span><br><span class="line"></span><br><span class="line">[<span class="meta">Table(Name=<span class="string">&quot;學生備份&quot;</span>)</span>] <span class="comment">//對應資料表</span></span><br><span class="line"><span class="keyword">class</span> <span class="title">Student</span>&#123;</span><br><span class="line">    [<span class="meta">Column(Name=<span class="string">&quot;學號&quot;</span>)</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Std_ID &#123;<span class="keyword">get</span>;<span class="keyword">set</span>;&#125;</span><br><span class="line">    [<span class="meta">Column(Name=<span class="string">&quot;姓名&quot;</span>)</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Name &#123;<span class="keyword">get</span>;<span class="keyword">set</span>;&#125;</span><br><span class="line">    [<span class="meta">Column(Name=<span class="string">&quot;性別&quot;</span>)</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Sex &#123;<span class="keyword">get</span>;<span class="keyword">set</span>;&#125;</span><br><span class="line">    [<span class="meta">Column(Name=<span class="string">&quot;電話&quot;</span>)</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Tel &#123;<span class="keyword">get</span>;<span class="keyword">set</span>;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>這邊我使用的方式是Function來呈現，取得資料庫中叫做 Student的table讀到 Class Student 三個內容。<br>讓他打印出 學號、姓名、電話。</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">LinqEaxmple</span>()</span>&#123;</span><br><span class="line">    <span class="comment">//conn sql string</span></span><br><span class="line">    <span class="built_in">string</span> strConn = <span class="string">&quot;Data Source=DESKTOP-2HU7NL0\\CONT;Initial Catalog=Linq_Example;User ID=sa;Password=root;Pooling=True&quot;</span>;</span><br><span class="line">    DataContext dc = <span class="keyword">new</span> DataContext(strConn);</span><br><span class="line">    <span class="comment">//GET TABLE</span></span><br><span class="line">    Table&lt;Student&gt; students = dc.GetTable&lt;Student&gt;();</span><br><span class="line">    <span class="comment">//select data</span></span><br><span class="line">    <span class="keyword">var</span> data= <span class="keyword">from</span> s <span class="keyword">in</span> students <span class="keyword">select</span> s;</span><br><span class="line">    Console.WriteLine(<span class="string">&quot;學號\t姓名\t電話&quot;</span>);</span><br><span class="line">    <span class="keyword">foreach</span>(<span class="keyword">var</span> i <span class="keyword">in</span> data)&#123;</span><br><span class="line">        Console.WriteLine(i.Std_ID+<span class="string">&quot;\t&quot;</span>+i.Name+<span class="string">&quot;\t&quot;</span>+ i.Tel);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="DataTable"><a href="#DataTable" class="headerlink" title="DataTable"></a>DataTable</h2><p>資料表比較多種情況，這範例講解簡單的使用方式，後續詳細說明使用linQ方式。<br>DataTable必須要先使用 AsEnumerable() 才能用linQ查詢，如果你要Where() 就需要配合 Field&lt;&gt;，比較麻煩是資料需要轉換資料型態，轉型失敗就會有錯誤問題。</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> CS;</span><br><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Data.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Data;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title">CS</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            comm comm = <span class="keyword">new</span> comm();</span><br><span class="line">            <span class="comment">//將資料轉成dataTable</span></span><br><span class="line">            <span class="built_in">string</span> sSql = <span class="string">&quot;SELECT * FROM Student&quot;</span>; </span><br><span class="line">            DataTable dt = comm.Get_DataTable(sSql);</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">var</span> test = <span class="keyword">from</span> row <span class="keyword">in</span> dt.AsEnumerable() <span class="keyword">select</span> row ;</span><br><span class="line">            <span class="keyword">foreach</span>(<span class="keyword">var</span> i <span class="keyword">in</span> test)&#123;</span><br><span class="line">                Console.WriteLine(i.Field&lt;<span class="built_in">string</span>&gt;(<span class="string">&quot;pro_name&quot;</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="List"><a href="#List" class="headerlink" title="List"></a>List</h2><p>List跟DataTable是差不多的問題，都要使用AsEnumerable()，過程中可能需要拿捏好取值得方式。<br>這邊範例可以參考DataTable寫法。</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> CS;</span><br><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Data.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Data;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title">CS</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            comm comm = <span class="keyword">new</span> comm();</span><br><span class="line">            <span class="built_in">string</span> sSql = <span class="string">&quot;SELECT * FROM MEB20_0000&quot;</span>; </span><br><span class="line">            DataTable dt = comm.Get_DataTable(sSql);</span><br><span class="line">            List&lt;MEB20_0000&gt; result = dt.AsEnumerable()</span><br><span class="line">                .Select( row =&gt; <span class="keyword">new</span> MEB20_0000&#123;</span><br><span class="line">                    pro_name = row.Field&lt;<span class="built_in">string</span>&gt;(<span class="string">&quot;pro_name&quot;</span>)</span><br><span class="line">                &#125;).ToList();</span><br><span class="line">            <span class="keyword">foreach</span>(<span class="keyword">var</span> i <span class="keyword">in</span> result)&#123;</span><br><span class="line">                Console.WriteLine(i.pro_name);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 後端技術 </category>
          
          <category> C# </category>
          
          <category> LinQ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
            <tag> Net FrameWork </tag>
            
            <tag> LinQ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用 LinQ (四) - Join 使用方式</title>
      <link href="/2023/01/21/%E5%BE%8C%E7%AB%AF%E6%8A%80%E8%A1%93/LINQ/%E4%BD%BF%E7%94%A8%20LinQ%20(%E5%9B%9B)%20-%20Join%20%E4%BD%BF%E7%94%A8%E6%96%B9%E5%BC%8F/"/>
      <url>/2023/01/21/%E5%BE%8C%E7%AB%AF%E6%8A%80%E8%A1%93/LINQ/%E4%BD%BF%E7%94%A8%20LinQ%20(%E5%9B%9B)%20-%20Join%20%E4%BD%BF%E7%94%A8%E6%96%B9%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>LinQ 使用join 需要知道Outer及Inner兩個資料型別物件。</p><h2 id="JOIN-定義"><a href="#JOIN-定義" class="headerlink" title="JOIN 定義"></a>JOIN 定義</h2><p>Join方法如下:</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="title">IEnumerable</span>&lt;<span class="title">TResult</span>&gt; <span class="title">Join</span>&lt;<span class="title">TOuter</span>, <span class="title">TInner</span>, <span class="title">TKey</span>, <span class="title">TResult</span>&gt;(<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="keyword">this</span> IEnumerable&lt;TOuter&gt; outer,</span></span></span><br><span class="line"><span class="params"><span class="function">    IEnumerable&lt;TInner&gt; inner,</span></span></span><br><span class="line"><span class="params"><span class="function">    Func&lt;TOuter, TKey&gt; outerKeySelector,</span></span></span><br><span class="line"><span class="params"><span class="function">    Func&lt;TInner, TKey&gt; innerKeySelector,</span></span></span><br><span class="line"><span class="params"><span class="function">    Func&lt;TOuter, TInner, TResult&gt; resultSelector</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="title">IEnumerable</span>&lt;<span class="title">TResult</span>&gt; <span class="title">Join</span>&lt;<span class="title">TOuter</span>, <span class="title">TInner</span>, <span class="title">TKey</span>, <span class="title">TResult</span>&gt;(<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="keyword">this</span> IEnumerable&lt;TOuter&gt; outer,</span></span></span><br><span class="line"><span class="params"><span class="function">    IEnumerable&lt;TInner&gt; inner,</span></span></span><br><span class="line"><span class="params"><span class="function">    Func&lt;TOuter, TKey&gt; outerKeySelector,</span></span></span><br><span class="line"><span class="params"><span class="function">    Func&lt;TInner, TKey&gt; innerKeySelector,</span></span></span><br><span class="line"><span class="params"><span class="function">    Func&lt;TOuter, TInner, TResult&gt; resultSelector,</span></span></span><br><span class="line"><span class="params"><span class="function">    IEqualityComparer&lt;TKey&gt; comparer</span>)</span>;</span><br></pre></td></tr></table></figure><p>方法參數說明:<br>    - outer : 第一個序列項目的類型。<br>    - inner : 與 Outer 類型比對項目 (第二個序列項目類型)。<br>    - outerKeySelector : 跟 Inner 有關的屬性<br>    - innerKeySelector : 跟 Outer 有關的屬性<br>    - resultSelector   : 查詢結果內容<br>    - comparer : Inner 、 Outer 屬性的等值比較器<br>LINQ的Join方法是Inner Join，所以尋找的內容不存在資料不會出現</p><h2 id="查詢運算式"><a href="#查詢運算式" class="headerlink" title="查詢運算式"></a>查詢運算式</h2><p>使用 Join 簡易方式，以下方式有包含著多個Select 內容。</p><ol><li><p>LINQ Query Expression</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> row <span class="keyword">in</span> Persons   </span><br><span class="line"><span class="keyword">join</span> part1 <span class="keyword">in</span> Scores <span class="keyword">on</span> row.Name <span class="keyword">equals</span> part1.Name</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">new</span> &#123; row.Name, Score = <span class="built_in">decimal</span>.Parse(part1.Content)&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>Lambda Expression</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Persons</span><br><span class="line">.Join(</span><br><span class="line">Scores, <span class="comment">//抓取table</span></span><br><span class="line">x =&gt; x.Name , <span class="comment">//抓取 table Persons</span></span><br><span class="line">y =&gt; y.Name , <span class="comment">//抓取 table Scores</span></span><br><span class="line">(x,y)=&gt;<span class="keyword">new</span>&#123; x.Name , Score = <span class="built_in">decimal</span>.Parse(y.Content) &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure></li></ol><h2 id="Join-比對多筆"><a href="#Join-比對多筆" class="headerlink" title="Join - 比對多筆"></a>Join - 比對多筆</h2><p>LinQ會比對同一行的資料，如果有多個不同資料內容就會需要對好資料內容。</p><ol><li><p>LINQ Query Expression</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> row <span class="keyword">in</span> Persons </span><br><span class="line"><span class="keyword">join</span> a <span class="keyword">in</span> Scores <span class="keyword">on</span> </span><br><span class="line">    <span class="keyword">new</span> &#123; row.Name &#125; <span class="keyword">equals</span> </span><br><span class="line">    <span class="keyword">new</span> &#123;   a.Name &#125;</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">new</span> &#123; a.Name,row.Sex , a.Content &#125;</span><br></pre></td></tr></table></figure></li><li><p>Lambda Expression<br>Lambda 則是比對x,y同樣也必須要同一個位置、同個名稱如果遇到名稱不一樣，可以使用 <code>new&#123;name = x.ClassName&#125;</code>方式。</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Persons.Join(</span><br><span class="line">Scores,</span><br><span class="line">x=&gt;  <span class="keyword">new</span>&#123; x.Name &#125; , <span class="comment">//比對1 </span></span><br><span class="line">y =&gt; <span class="keyword">new</span>&#123; y.Name &#125; , <span class="comment">//比對2</span></span><br><span class="line">(x,y)=&gt;<span class="keyword">new</span> &#123;</span><br><span class="line">Name    = x.Name,</span><br><span class="line">Sex     = x.Sex,</span><br><span class="line">Content = y.Content</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ol><h2 id="Left-Join"><a href="#Left-Join" class="headerlink" title="Left Join"></a>Left Join</h2><p>LinQ 有 Join()是交集的概念，若要有Left join 可以使用 DefaultIfEmpty()，使用方式如下。</p><ol><li>LINQ Query Expression<figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> row <span class="keyword">in</span> Persons </span><br><span class="line"><span class="keyword">join</span> a <span class="keyword">in</span> Scores <span class="keyword">on</span> row.Name <span class="keyword">equals</span> a.Name </span><br><span class="line"><span class="keyword">into</span> ps <span class="keyword">from</span> a <span class="keyword">in</span> ps.DefaultIfEmpty() <span class="comment">//需加入這行</span></span><br><span class="line"><span class="keyword">select</span> a</span><br></pre></td></tr></table></figure>使用會與SQL LEFT Join 觀念不太同，所以使用方式需要自行判斷。</li></ol><h2 id="參考文件"><a href="#參考文件" class="headerlink" title="參考文件"></a>參考文件</h2><ol><li><p>[Will - 分享幾個 LINQ to SQL 執行各種 Join 查詢的技巧] : <a href="https://blog.miniasp.com/post/2010/10/14/LINQ-to-SQL-Query-Tips-INNER-JOIN-and-LEFT-JOIN">https://blog.miniasp.com/post/2010/10/14/LINQ-to-SQL-Query-Tips-INNER-JOIN-and-LEFT-JOIN</a></p></li><li><p>[ 艾瑞克 - C# Linq Join &amp; Lambda Join] : <a href="https://dotblogs.com.tw/erictsaiblog/2015/05/17/151321">https://dotblogs.com.tw/erictsaiblog/2015/05/17/151321</a></p></li></ol><h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>使用LinQ Join部分會比較難使用，需要多多測試練習才能上手。<br>如果是多Join (兩個以上)，建議能把它拆開就把它拆開，有可能遇到Join太多會導致搜尋效能會變差。</p>]]></content>
      
      
      <categories>
          
          <category> 後端技術 </category>
          
          <category> C# </category>
          
          <category> LinQ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
            <tag> Net FrameWork </tag>
            
            <tag> LinQ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[學習] Golang 基本使用(二) - 資料型態、運算式</title>
      <link href="/2023/01/21/%E5%BE%8C%E7%AB%AF%E6%8A%80%E8%A1%93/GOLANG/Golang_02/"/>
      <url>/2023/01/21/%E5%BE%8C%E7%AB%AF%E6%8A%80%E8%A1%93/GOLANG/Golang_02/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>接續 Go 安裝後，介紹 資料型態、運算式 功能、內容吧!!<br>內容會比較多，請慢慢觀看!!</p><h1 id="Golang特性"><a href="#Golang特性" class="headerlink" title="Golang特性"></a>Golang特性</h1><ul><li>開放原始碼 (open source)</li><li>靜態型別的編譯語言；但語法類似於腳本語言 (scripting language)</li><li>跨平台 (cross-platform)</li><li>內建垃圾回收 (garbage collection)，可手動調整觸發時機</li><li>內建平行處理 (concurrency) 的語法</li><li>內建函式程式設計 (functional programming)</li><li>輕量級物件 (lightweight object) 系統</li><li>程式風格強制統一</li><li>快速編譯</li><li>內建開發相關工具</li><li>豐富的標準函式庫</li><li>成長中的社群資源</li></ul><h2 id="型態"><a href="#型態" class="headerlink" title="型態"></a>型態</h2><p>Go 預先定義型態（Pre-declared Type），內建資料型態有布林(Boolean)、數字(Number)與字串(String)型態。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//宣告方式</span></span><br><span class="line"><span class="keyword">var</span> &lt;name&gt; &lt;<span class="keyword">type</span>&gt; <span class="comment">//var &lt;變數名稱&gt; &lt;資料型態&gt;</span></span><br><span class="line"><span class="keyword">var</span> &lt;name&gt; &lt;<span class="keyword">type</span>&gt; = expreesion<span class="comment">//var &lt;變數名稱&gt; &lt;資料型態&gt; = 值</span></span><br></pre></td></tr></table></figure><hr><h1 id="型態種類"><a href="#型態種類" class="headerlink" title="型態種類"></a>型態種類</h1><h2 id="布林-Boolean"><a href="#布林-Boolean" class="headerlink" title="布林(Boolean)"></a>布林(Boolean)</h2><p>預定義型態也是具有名稱的型態（Named Type），布林型態名稱為 bool，只有兩個預先定義的常數 true 與 false，由於只有兩個值，因此在 Go 的規格書 中，並沒有明確提及 bool 的大小，雖然在 Go 官方網站的 The Go Playground 執行以下程式碼，會告訴你 bool 大小是 1：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;unsafe&quot;</span></span><br><span class="line">)</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">//宣告方式</span></span><br><span class="line"><span class="keyword">var</span> bo_T <span class="type">bool</span> = <span class="literal">true</span></span><br><span class="line"><span class="keyword">var</span> bo_F = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="string">&quot;Boolean DataType Size &gt;&gt; &quot;</span>)</span><br><span class="line">fmt.Printf(<span class="string">&quot;True Size : %d , False Size : %d&quot;</span>, </span><br><span class="line">unsafe.Sizeof(bo_T), unsafe.Sizeof(bo_F))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="數字-Number"><a href="#數字-Number" class="headerlink" title="數字(Number)"></a>數字(Number)</h2><p>數字型態為整數與浮點數的集合，整數部份支援無號與有號整數，名稱分別為 uint 與 int，int 長度會與 uint 相同，而 uint 長度視平台實作而異，可能是 32 位元或是 64 位元。<br> 有號整數的型態名稱為 int8、int16、int32、int64，顧名思義，使用的長度分別為 8 位元、16 位元、32 位元與 64 位元，舉例來說，int32 可儲存的整數範圍為 -2147483648 到 2147483647，而 rune 為 int32 的別名，可用來儲存 Unicode 碼點（code point）。<br><img src="/image/20221207_21-24-41.png"></p><p> 如果想要長度固定，無號整數的型態名稱為 uint8、uint16、uint32、uint64，顧名思義，使用的長度分別為 8 位元、16 位元、32 位元與 64 位元，舉例來說，uint8 可儲存的整數範圍為 0 到 255，這也是開發者熟悉的位元組型態，而在 Go 中，byte 正是　uint8 的別名。<br><img src="/image/20221207_21-24-49.png"></p><h3 id="範例-數字型態大小"><a href="#範例-數字型態大小" class="headerlink" title="範例 - 數字型態大小"></a>範例 - 數字型態大小</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">   fmt.Printf(<span class="string">&quot;uint8  : 0 ~ %d\n&quot;</span>, math.MaxUint8)</span><br><span class="line">fmt.Printf(<span class="string">&quot;uint16 : 0 ~ %d\n&quot;</span>, math.MaxUint16)</span><br><span class="line">fmt.Printf(<span class="string">&quot;uint32 : 0 ~ %d\n&quot;</span>, math.MaxUint32)</span><br><span class="line">fmt.Printf(<span class="string">&quot;uint64 : 0 ~ %d\n&quot;</span>, <span class="type">uint64</span>(math.MaxUint64))</span><br><span class="line">fmt.Printf(<span class="string">&quot;int8   : %d ~ %d\n&quot;</span>, math.MinInt8, math.MaxInt8)</span><br><span class="line">fmt.Printf(<span class="string">&quot;int16  : %d ~ %d\n&quot;</span>, math.MinInt16, math.MaxInt16)</span><br><span class="line">fmt.Printf(<span class="string">&quot;int32  : %d ~ %d\n&quot;</span>, math.MinInt32, math.MaxInt32)</span><br><span class="line">fmt.Printf(<span class="string">&quot;int64  : %d ~ %d\n&quot;</span>, math.MinInt64, math.MaxInt64)</span><br><span class="line">fmt.Printf(<span class="string">&quot;整數預設型態: %s\n&quot;</span>, reflect.TypeOf(<span class="number">1</span>))</span><br></pre></td></tr></table></figure><h2 id="字串-String"><a href="#字串-String" class="headerlink" title="字串(String)"></a>字串(String)</h2><p>Go 的字串在實作上使用 UTF-8，就目前必須先知道的是，當使用雙引號包裹一系列文字，會產生字串型態，預設型態為 string，例如，”Justin” 會建立一個字串。<br>如果對字串使用 len 函式，傳回的會是位元組數量，而不是 Unicode 碼點的數量；如果使用 [] 搭配索引，取得特定索引位置的值，那麼傳回的會是 byte（uint8）型態。</p><h2 id="其他型態"><a href="#其他型態" class="headerlink" title="其他型態"></a>其他型態</h2><p><img src="/image/20221207_21-25-01.png"></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> varByte <span class="type">byte</span> = <span class="string">&#x27;a&#x27;</span></span><br><span class="line"><span class="keyword">var</span> varRun <span class="type">rune</span> = <span class="string">&#x27;🧨&#x27;</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;%c = %d and %c =%U\n&quot;</span>, varByte, varByte, varRun, varRun)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="運算子Operators"><a href="#運算子Operators" class="headerlink" title="運算子Operators"></a>運算子Operators</h1><h2 id="代數運算子-Arithmetic-Operators"><a href="#代數運算子-Arithmetic-Operators" class="headerlink" title="代數運算子 (Arithmetic Operators)"></a>代數運算子 (Arithmetic Operators)</h2><p>代數運算子用來進行基本的四則運算。以下是代數運算子：</p><ul><li>+：相加 </li><li>-：相減</li><li>*：相乘</li><li>&#x2F;：相除</li><li>%：取餘數<br><img src="/image/20221207_21-25-12.png"></li></ul><p>由於四則運算的原理相當簡單，讀者可試著自行閱讀程式碼。要注意在進行除法運算時，整數 (integer) 和浮點數 (floating point number) 會有不同的行為。<br>由於浮點數內部儲存數字的方式和整數相異，浮點數運算可能會產生誤差，故我們在比較浮點數的運算結果時，不會直接用相等 &#x3D;&#x3D; 來比較，而會確認運算結果的誤差在許可範圍內。我們使用 math 套件的 <a href="https://pkg.go.dev/math#Abs">Abs</a> 函式取得誤差的絕對值 (absolute value)，以消除正負號所帶來的誤判。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;math&quot;</span></span><br><span class="line"><span class="string">&quot;os&quot;</span></span><br><span class="line"><span class="string">&quot;runtime&quot;</span></span><br><span class="line">)</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">assert(<span class="number">4</span>+<span class="number">3</span> == <span class="number">7</span>, <span class="string">&quot;4 + 3 should be 7&quot;</span>)</span><br><span class="line">assert(<span class="number">4</span><span class="number">-3</span> == <span class="number">1</span>, <span class="string">&quot;4 - 3 should be 1&quot;</span>)</span><br><span class="line">assert(<span class="number">4</span>*<span class="number">3</span> == <span class="number">12</span>, <span class="string">&quot;4 * 3 should be 12&quot;</span>)</span><br><span class="line">assert(<span class="number">4</span>/<span class="number">3</span> == <span class="number">1</span>, <span class="string">&quot;4 / 3 should be 1&quot;</span>)</span><br><span class="line">assert(math.Abs(<span class="number">4.0</span>/<span class="number">3.0</span><span class="number">-1.333333</span>) &lt; <span class="number">0.00001</span>, <span class="string">&quot;4.0 / 3.0 should be 1.333333&quot;</span>)</span><br><span class="line">assert(<span class="number">4</span>%<span class="number">3</span> == <span class="number">1</span>, <span class="string">&quot;4 % 3 should be 1&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">assert</span><span class="params">(cond <span class="type">bool</span>, msg <span class="type">string</span>)</span></span> &#123;</span><br><span class="line">_, f, l, _ := runtime.Caller(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">if</span> !cond &#123;</span><br><span class="line">fmt.Fprintf(os.Stderr, <span class="string">&quot;Failed on (%s:%d): %s&quot;</span>, f, l, msg)</span><br><span class="line">os.Exit(<span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二元運算子-Bitwise-Operators"><a href="#二元運算子-Bitwise-Operators" class="headerlink" title="二元運算子 (Bitwise Operators)"></a>二元運算子 (Bitwise Operators)</h2><p>二元運算子也是代數運算子。但二元運算的概念和一般的代數運算有一些差異，故我們將其分開。以下是二元運算子：</p><ul><li>&amp;：bitwise AND</li><li>|：bitwise OR</li><li>^：bitwise XOR</li><li>&amp;^：bit clear</li><li>&lt;&lt;：左移 (left shift)</li><li>(&gt;&gt;)：右移 (right shift)<br><img src="/image/20221207_21-25-22.png"></li></ul><p>由於二元運算在日常生活中不會接觸到，我們把運算過程寫在註解中，供讀者參考。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;os&quot;</span></span><br><span class="line"><span class="string">&quot;runtime&quot;</span></span><br><span class="line">)</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">/* 3 is 0011</span></span><br><span class="line"><span class="comment">   5 is 0101 */</span></span><br><span class="line"><span class="comment">/*    0011</span></span><br><span class="line"><span class="comment">   &amp;) 0101</span></span><br><span class="line"><span class="comment">  ---------</span></span><br><span class="line"><span class="comment">      0001  */</span></span><br><span class="line">assert((<span class="number">3</span> &amp; <span class="number">5</span>) == <span class="number">1</span>, <span class="string">&quot;3 &amp; 5 should be 1&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*    0011</span></span><br><span class="line"><span class="comment">   |) 0101</span></span><br><span class="line"><span class="comment">  ---------</span></span><br><span class="line"><span class="comment">      0111  */</span></span><br><span class="line">    assert((<span class="number">3</span> | <span class="number">5</span>) == <span class="number">7</span>, <span class="string">&quot;3 | 5 should be 7&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*    0011</span></span><br><span class="line"><span class="comment">   ^) 0101</span></span><br><span class="line"><span class="comment">  ---------</span></span><br><span class="line"><span class="comment">      0110  */</span></span><br><span class="line">    assert((<span class="number">3</span> ^ <span class="number">5</span>) == <span class="number">6</span>, <span class="string">&quot;3 ^ 5 should be 6&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* &lt;&lt;) 0000 0101</span></span><br><span class="line"><span class="comment">  ---------------</span></span><br><span class="line"><span class="comment">       0000 1010  */</span></span><br><span class="line">    assert((<span class="number">5</span> &lt;&lt; <span class="number">1</span>) == <span class="number">10</span>, <span class="string">&quot;5 &lt;&lt; 1 should be 10&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* &gt;&gt;) 0000 0101</span></span><br><span class="line"><span class="comment">  ---------------</span></span><br><span class="line"><span class="comment">       0000 0010  */</span></span><br><span class="line">    assert((<span class="number">5</span> &gt;&gt; <span class="number">1</span>) == <span class="number">2</span>, <span class="string">&quot;5 &gt;&gt; 1 should be 2&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">assert</span><span class="params">(cond <span class="type">bool</span>, msg <span class="type">string</span>)</span></span> &#123;</span><br><span class="line">    _, f, l, _ := runtime.Caller(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">if</span> !cond &#123;</span><br><span class="line">        fmt.Fprintf(os.Stderr, <span class="string">&quot;Failed on (%s:%d): %s&quot;</span>, f, l, msg)</span><br><span class="line">        os.Exit(<span class="number">1</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="比較運算子-Comparison-Relational-Operators"><a href="#比較運算子-Comparison-Relational-Operators" class="headerlink" title="比較運算子 (Comparison(Relational) Operators)"></a>比較運算子 (Comparison(Relational) Operators)</h2><p>比較運算子用來比較兩項資料的大小，比較後會回傳布林值。以下是比較運算子：</p><ul><li>&#x3D;&#x3D;：相等</li><li>!&#x3D;：不相等</li><li>&lt;：小於</li><li>&lt;&#x3D;：小於等於</li><li>(&gt;)：大於</li><li>(&gt;&#x3D;)：大於等於<br> <img src="/image/20221207_21-25-33.png"></li></ul><p>以下是簡短的實例：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;os&quot;</span></span><br><span class="line"><span class="string">&quot;runtime&quot;</span></span><br><span class="line">)</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">assert(<span class="number">4</span> == <span class="number">4</span>, <span class="string">&quot;4 should be equal to 4&quot;</span>)</span><br><span class="line">assert(<span class="number">4</span> != <span class="number">3</span>, <span class="string">&quot;4 should not be equal to 3&quot;</span>)</span><br><span class="line">assert(<span class="number">4</span> &gt; <span class="number">3</span>, <span class="string">&quot;4 should be greater than 3&quot;</span>)</span><br><span class="line">assert(<span class="number">4</span> &gt;= <span class="number">3</span>, <span class="string">&quot;4 should be greater than or equal to 3&quot;</span>)</span><br><span class="line">assert(<span class="number">4</span> &lt; <span class="number">5</span>, <span class="string">&quot;4 should be less than 5&quot;</span>)</span><br><span class="line">assert(<span class="number">4</span> &lt;= <span class="number">5</span>, <span class="string">&quot;4 should be less than or equal to 5&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">assert</span><span class="params">(cond <span class="type">bool</span>, msg <span class="type">string</span>)</span></span> &#123;</span><br><span class="line">_, f, l, _ := runtime.Caller(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">if</span> !cond &#123;</span><br><span class="line">fmt.Fprintf(os.Stderr, <span class="string">&quot;Failed on (%s:%d): %s&quot;</span>, f, l, msg)</span><br><span class="line">os.Exit(<span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="邏輯運算子-Logical-Operators"><a href="#邏輯運算子-Logical-Operators" class="headerlink" title="邏輯運算子 (Logical Operators)"></a>邏輯運算子 (Logical Operators)</h2><p>邏輯運算子用於布林運算，包括以下三種運算子：</p><ul><li>&amp;&amp;：且 (and)</li><li>||：或 (or)</li><li>!：非 (not)<br><img src="/image/20221207_21-25-46.png"></li></ul><p>以下是簡短的實例：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;os&quot;</span></span><br><span class="line"><span class="string">&quot;runtime&quot;</span></span><br><span class="line">)</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">assert((<span class="literal">true</span> &amp;&amp; <span class="literal">true</span>) == <span class="literal">true</span>, <span class="string">&quot;Wrong logic&quot;</span>)</span><br><span class="line">assert((<span class="literal">true</span> &amp;&amp; <span class="literal">false</span>) == <span class="literal">false</span>, <span class="string">&quot;Wrong logic&quot;</span>)</span><br><span class="line">assert((<span class="literal">false</span> &amp;&amp; <span class="literal">true</span>) == <span class="literal">false</span>, <span class="string">&quot;Wrong logic&quot;</span>)</span><br><span class="line">assert((<span class="literal">false</span> &amp;&amp; <span class="literal">false</span>) == <span class="literal">false</span>, <span class="string">&quot;Wrong logic&quot;</span>)</span><br><span class="line">assert((<span class="literal">true</span> || <span class="literal">true</span>) == <span class="literal">true</span>, <span class="string">&quot;Wrong logic&quot;</span>)</span><br><span class="line">assert((<span class="literal">true</span> || <span class="literal">false</span>) == <span class="literal">true</span>, <span class="string">&quot;Wrong logic&quot;</span>)</span><br><span class="line">assert((<span class="literal">false</span> || <span class="literal">true</span>) == <span class="literal">true</span>, <span class="string">&quot;Wrong logic&quot;</span>)</span><br><span class="line">assert((<span class="literal">false</span> || <span class="literal">false</span>) == <span class="literal">false</span>, <span class="string">&quot;Wrong logic&quot;</span>)</span><br><span class="line">assert((!<span class="literal">true</span>) == <span class="literal">false</span>, <span class="string">&quot;Wrong logic&quot;</span>)</span><br><span class="line">assert((!<span class="literal">false</span>) == <span class="literal">true</span>, <span class="string">&quot;Wrong logic&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">assert</span><span class="params">(cond <span class="type">bool</span>, msg <span class="type">string</span>)</span></span> &#123;</span><br><span class="line">_, f, l, _ := runtime.Caller(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">if</span> !cond &#123;</span><br><span class="line">fmt.Fprintf(os.Stderr, <span class="string">&quot;Failed on (%s:%d): %s&quot;</span>, f, l, msg)</span><br><span class="line">os.Exit(<span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="其他運算子"><a href="#其他運算子" class="headerlink" title="其他運算子"></a>其他運算子</h1><h2 id="位址運算子-Address-Operators"><a href="#位址運算子-Address-Operators" class="headerlink" title="位址運算子 (Address Operators"></a>位址運算子 (Address Operators</h2><p>位址運算子有以下兩種：</p><ul><li><ul><li></li></ul></li><li>&amp;<br>在不同情境，位址運算子有不同的意義。基礎的財經運算用不到位址運算子，日後有機會時會在介紹指標時用到位址運算子。</li></ul><h2 id="接收運算子-Receive-Operator"><a href="#接收運算子-Receive-Operator" class="headerlink" title="接收運算子 (Receive Operator)"></a>接收運算子 (Receive Operator)</h2><p>接收運算子有以下符號：</p><ul><li>&lt;-<br>接收運算子用在通道。基礎的財經運算用不到共時性程式，故不會用到接收運算子。<br><img src="/image/20221207_21-25-57.png"></li></ul><h1 id="運算子-補充"><a href="#運算子-補充" class="headerlink" title="運算子-補充"></a>運算子-補充</h1><h2 id="型別轉換"><a href="#型別轉換" class="headerlink" title="型別轉換"></a>型別轉換</h2><p>Go 語言為了避免不經意的錯誤，不能直接把不同型別的資料相結合。例如，在 Go 程式中不能把整數和浮點數直接相加。轉換型別的方式是用 T(x)；像是 float(3) 會把整數 3 轉為浮點數 3.0。</p><h2 id="運算子優先順序"><a href="#運算子優先順序" class="headerlink" title="運算子優先順序"></a>運算子優先順序</h2><p>為了處理在單一敘述中出現多個運算子的情境，程式語言有內建的運算子優先順序。像是 Golang 官方提供了一份運算子優先順序的<a href="https://golang.org/ref/spec#Operators">清單</a>。<br>但程式設計者甚少背誦運算子優先順序。因為：</p><ul><li>運算子的優先順序和數學的概念相同</li><li>可藉由簡化敘述來簡化運算子的使用</li><li>可使用括號來改變運算子優先順序</li></ul><hr><h1 id="常數"><a href="#常數" class="headerlink" title="常數"></a>常數</h1><h2 id="常數特性"><a href="#常數特性" class="headerlink" title="常數特性"></a>常數特性</h2><p>常數試紙不能更便的數值(value)，執行的期間是不能做更改。常數與變數宣告都是相同，但不是使用var關鍵字，則是使用const關鍵字，依據宣告常數名稱記得設為大寫。<br>宣告常數的好處在於常數宣告後即不能修改。若我們試圖修改常數，會在程式編譯時引發錯誤，提醒我們必需改掉錯誤的動作。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//常數使用方式</span></span><br><span class="line"><span class="keyword">const</span> &lt;constant_name&gt; = value</span><br></pre></td></tr></table></figure><h2 id="跳脫序列-Escape-Sequence"><a href="#跳脫序列-Escape-Sequence" class="headerlink" title="跳脫序列 Escape Sequence"></a>跳脫序列 Escape Sequence</h2><p><img src="/image/20221207_21-26-09.png"></p>]]></content>
      
      
      <categories>
          
          <category> 後端技術 </category>
          
          <category> Go </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[學習] Golang 基本使用(三) - 判斷式、迴圈</title>
      <link href="/2023/01/21/%E5%BE%8C%E7%AB%AF%E6%8A%80%E8%A1%93/GOLANG/Golang_03/"/>
      <url>/2023/01/21/%E5%BE%8C%E7%AB%AF%E6%8A%80%E8%A1%93/GOLANG/Golang_03/</url>
      
        <content type="html"><![CDATA[<h1 id="判斷式"><a href="#判斷式" class="headerlink" title="判斷式"></a>判斷式</h1><p>在分支判斷的控制上，Go 提供了 if…else、switch 語法，相較於其他提供類似語法的語言，例如 : c、c# 、java 等。<br>題外話 python 是沒有switch case必須要自己手動創建出來。</p><h2 id="輸入方式"><a href="#輸入方式" class="headerlink" title="輸入方式"></a>輸入方式</h2><p>這章節會需要用到輸入，請各位參考下方輸入方法：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> number <span class="type">int</span></span><br><span class="line">fmt.Scanln(&amp;number)</span><br></pre></td></tr></table></figure><h2 id="IF-敘述"><a href="#IF-敘述" class="headerlink" title="IF 敘述"></a>IF 敘述</h2><p>GO語言當中是無法使用單行可捨棄括號的敘述，優點會知道if範圍在哪。<br>go特性是此判斷式可以<em>不用使用括號</em>。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> x <span class="type">int16</span></span><br><span class="line">fmt.Scanln(&amp;x)</span><br><span class="line">fmt.Print(<span class="string">&quot;if Statement&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> x &gt; <span class="number">10</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;x = %d  is greater than 10\n&quot;</span>, x)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="IF-ELSE敘述"><a href="#IF-ELSE敘述" class="headerlink" title="IF ELSE敘述"></a>IF ELSE敘述</h2><p>Go語言對IF…ELSE敘述中，看出ELSE前面必須要有{} 相對嚴謹。對於IF….ELSE IF …ELSE也是相同意思。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> x <span class="type">int16</span></span><br><span class="line">fmt.Scanln(&amp;x) <span class="comment">//go 的輸入方式</span></span><br><span class="line"><span class="keyword">if</span> x%<span class="number">2</span> == <span class="number">0</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;x = %d  is even\n&quot;</span>, x)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;x = %d is odd&quot;</span>, x)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="switch-語法"><a href="#switch-語法" class="headerlink" title="switch 語法"></a>switch 語法</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> level <span class="type">rune</span></span><br><span class="line"><span class="keyword">var</span> score = <span class="number">88</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span> score / <span class="number">10</span> &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">10</span>, <span class="number">9</span>:</span><br><span class="line">level = <span class="string">&#x27;A&#x27;</span></span><br><span class="line"><span class="keyword">case</span> <span class="number">8</span>:</span><br><span class="line">level = <span class="string">&#x27;B&#x27;</span></span><br><span class="line"><span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">level = <span class="string">&#x27;C&#x27;</span></span><br><span class="line"><span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">level = <span class="string">&#x27;D&#x27;</span></span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">level = <span class="string">&#x27;E&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">fmt.Printf(<span class="string">&quot;得分等級：%c\n&quot;</span>, level)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意，與 C&#x2F;C++ 或 Java 等語言不同的是，Go 的 switch 比對成功後，不會自動往下執行，因而不用撰寫 break，有多個條件想符合時，在同一 case 中使用逗號區隔。如果真的想在比對成功後，往下一個 case 中的陳述執行，可以使用 fallthrough，例如 ：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> level <span class="type">rune</span></span><br><span class="line">    <span class="keyword">switch</span> score := <span class="number">100</span>; score / <span class="number">10</span> &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">10</span>:</span><br><span class="line">        fmt.Println(<span class="string">&quot;滿分喔！&quot;</span>)</span><br><span class="line">        <span class="keyword">fallthrough</span></span><br><span class="line">    <span class="keyword">case</span> <span class="number">9</span>:</span><br><span class="line">        level = <span class="string">&#x27;A&#x27;</span></span><br><span class="line">    <span class="keyword">case</span> <span class="number">8</span>:</span><br><span class="line">        level = <span class="string">&#x27;B&#x27;</span></span><br><span class="line">    <span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">        level = <span class="string">&#x27;C&#x27;</span></span><br><span class="line">    <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">        level = <span class="string">&#x27;D&#x27;</span></span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        level = <span class="string">&#x27;E&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Printf(<span class="string">&quot;得分等級：%c\n&quot;</span>, level)</span><br></pre></td></tr></table></figure><p>在上面的例子中，如果沒有 fallthrough，那麼只會顯示 “滿分喔！“，而不會執行 case 9 中的 level &#x3D; ‘A’，因此最後顯示得分等級時，不會有 A 的字眼。在上頭也可以看到，switch 中也可以使用 :&#x3D; 宣告與初始變數。<br>實際上，Go 的 switch 中， case 不用是常數，只要 switch 的值型態與 case 比對的型態符合，也可以是個變數或運算式，甚至還可以接受布林運算式，例如：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> level <span class="type">rune</span></span><br><span class="line">    score := <span class="number">88</span></span><br><span class="line">    <span class="keyword">switch</span> &#123;</span><br><span class="line">    <span class="keyword">case</span> score &gt;= <span class="number">90</span>:</span><br><span class="line">        level = <span class="string">&#x27;A&#x27;</span></span><br><span class="line">    <span class="keyword">case</span> score &gt;= <span class="number">80</span> &amp;&amp; score &lt; <span class="number">90</span>:</span><br><span class="line">        level = <span class="string">&#x27;B&#x27;</span></span><br><span class="line">    <span class="keyword">case</span> score &gt;= <span class="number">70</span> &amp;&amp; score &lt; <span class="number">80</span>:</span><br><span class="line">        level = <span class="string">&#x27;C&#x27;</span></span><br><span class="line">    <span class="keyword">case</span> score &gt;= <span class="number">60</span> &amp;&amp; score &lt; <span class="number">70</span>:</span><br><span class="line">        level = <span class="string">&#x27;D&#x27;</span></span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        level = <span class="string">&#x27;E&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Printf(<span class="string">&quot;得分等級：%c\n&quot;</span>, level)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="迴圈"><a href="#迴圈" class="headerlink" title="迴圈"></a>迴圈</h1><p>使用迭代控制結構 (iteration control structure) 來達成反覆 (repeating) 或循環 (looping) 的行為，省下重覆的程式碼。</p><h2 id="條件句-conditional"><a href="#條件句-conditional" class="headerlink" title="條件句 (conditional)"></a>條件句 (conditional)</h2><p>做為迴圈終止條件。在這個 for 迴圈中，只要 cond 為真，for 區塊內的程式碼就會不間斷地反覆執行。<br>當 cond 不為真時，則 for 區塊會終止。我們會透過改變程式的狀態，讓 for 迴圈執行一定次數後停止。<br>使用方式如同 while 一樣 。</p><h3 id="🧙‍♂️-使用方式"><a href="#🧙‍♂️-使用方式" class="headerlink" title="🧙‍♂️ 使用方式:"></a>🧙‍♂️ 使用方式:</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> conditional &#123;</span><br><span class="line"><span class="comment">// Run code here repeatedly.</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用範例"><a href="#使用範例" class="headerlink" title="使用範例"></a>使用範例</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">rangeNum := <span class="number">10</span></span><br><span class="line">index := <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> index &lt; rangeNum &#123;</span><br><span class="line">index++</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">println</span>(index)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="計數器-counter-loop"><a href="#計數器-counter-loop" class="headerlink" title="計數器 (counter loop)"></a>計數器 (counter loop)</h2><p>for 迴圈使用計數器 (counter) 來做為迴圈的中止條件。當執行迴圈結構開端時，會檢查判斷是否是對的，就會去做執行。</p><h3 id="🧙‍♂️-使用方式-1"><a href="#🧙‍♂️-使用方式-1" class="headerlink" title="🧙‍♂️ 使用方式:"></a>🧙‍♂️ 使用方式:</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> 初始值; 範圍 ; 動作 &#123;</span><br><span class="line"><span class="comment">// Run code here repeatedly.</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用範例-1"><a href="#使用範例-1" class="headerlink" title="使用範例"></a>使用範例</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">sum := <span class="number">0</span></span><br><span class="line">rangeNum := <span class="number">10</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; rangeNum; i++ &#123;</span><br><span class="line">sum++</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">println</span>(sum)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="無限迴圈-Infinite-loop"><a href="#無限迴圈-Infinite-loop" class="headerlink" title="無限迴圈 Infinite loop"></a>無限迴圈 Infinite loop</h2><p>其中範例除外[無限迴圈]，以下範例為infinite loop</p><h3 id="🧙‍♂️-使用方式-2"><a href="#🧙‍♂️-使用方式-2" class="headerlink" title="🧙‍♂️ 使用方式:"></a>🧙‍♂️ 使用方式:</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">    <span class="comment">//無限迴圈 (infinite loop)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例子中，for 迴圈會無限次地執行。這樣的迴圈稱為無限迴圈 (infinite loop)。<br>在 Go 語言使用無限迴圈時，會搭配 break 來終止迴圈。若要繼續執行就會使用 continue。</p><h2 id="For-範圍迴圈-For-range-loop"><a href="#For-範圍迴圈-For-range-loop" class="headerlink" title="For 範圍迴圈 For range loop"></a>For 範圍迴圈 For range loop</h2><p>使用陣列時候，可以使用range 取得陣列的長度。</p><h3 id="🧙‍♂️-使用方式-3"><a href="#🧙‍♂️-使用方式-3" class="headerlink" title="🧙‍♂️ 使用方式:"></a>🧙‍♂️ 使用方式:</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">strings := []<span class="type">string</span>&#123;<span class="string">&quot;hello&quot;</span>, <span class="string">&quot;world&quot;</span>&#125;</span><br><span class="line"><span class="keyword">for</span> i, s := <span class="keyword">range</span> strings &#123;</span><br><span class="line"><span class="built_in">println</span>(i, s)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="Break、Continue、goto"><a href="#Break、Continue、goto" class="headerlink" title="Break、Continue、goto"></a>Break、Continue、goto</h1><p>一般情況是會在違反進入迴圈的限制條件時候，才會結束迴圈運作，若問題是重複執行特定某些的敘述特性外，包刮例外特性必須加上break 或是continue 之敘述，可以方便撰寫程式。</p><h2 id="break-敘述功能使用方式"><a href="#break-敘述功能使用方式" class="headerlink" title="break 敘述功能使用方式"></a>break 敘述功能使用方式</h2><p>break 敘述除了在 switch 的選擇結構外，可以使用在迴圈結構。當執行到break 時候，會跳出程式迴圈結構，並在迴圈外層第一行敘述去做執行。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">sum := <span class="number">0</span></span><br><span class="line">i := <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> i &lt; <span class="number">5</span> &#123;</span><br><span class="line">i++</span><br><span class="line"><span class="keyword">if</span> i%<span class="number">2</span> != <span class="number">0</span> &#123; <span class="comment">// skip odd numbers</span></span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">sum += i</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">println</span>(sum)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="continue-敘述功能使用方式"><a href="#continue-敘述功能使用方式" class="headerlink" title="continue 敘述功能使用方式"></a>continue 敘述功能使用方式</h2><p>continue 是不執行迴圈內部某些敘述。<br>在 for 迴圈結構內使用continue 執行到continue 會跳到該層的for迴圈內的第三部分，做迴圈變數增&#x2F;減量。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">sum := <span class="number">0</span></span><br><span class="line">i := <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> i &lt; <span class="number">5</span> &#123;</span><br><span class="line">i++</span><br><span class="line"><span class="keyword">if</span> i%<span class="number">2</span> != <span class="number">0</span> &#123; <span class="comment">// skip odd numbers</span></span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">&#125;</span><br><span class="line">sum += i</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">println</span>(sum)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="goto-敘述功能使用方式"><a href="#goto-敘述功能使用方式" class="headerlink" title="goto 敘述功能使用方式"></a>goto 敘述功能使用方式</h2><p>可以使用 goto 任意移動到同函式中其他位置。像是以下範例用 goto 模擬 break：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">sum := <span class="number">0</span></span><br><span class="line">i := <span class="number">5</span></span><br><span class="line"><span class="keyword">for</span> i &lt; <span class="number">10</span> &#123;</span><br><span class="line">i++</span><br><span class="line"><span class="keyword">if</span> i%<span class="number">2</span> == <span class="number">0</span> &#123; <span class="comment">// skip odd numbers</span></span><br><span class="line"><span class="keyword">goto</span> END</span><br><span class="line">&#125;</span><br><span class="line">sum += i</span><br><span class="line">&#125;</span><br><span class="line">END:</span><br><span class="line"><span class="built_in">println</span>(sum)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>當 i % 2 餘數為 0 ，會觸發 goto 敘述，跳到 END 標籤所在的位置。goto也可以當continue 如以下範例。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">sum := <span class="number">0</span></span><br><span class="line">i := <span class="number">5</span></span><br><span class="line">LOOP:</span><br><span class="line"><span class="keyword">for</span> i &lt; <span class="number">10</span> &#123;</span><br><span class="line">i++</span><br><span class="line"><span class="keyword">if</span> i%<span class="number">2</span> == <span class="number">0</span> &#123; <span class="comment">// skip odd numbers</span></span><br><span class="line"><span class="keyword">goto</span> LOOP</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">sum += i</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">println</span>(sum)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>有些程式人視 goto 為邪惡的語法特性，甚至有些程式語言直接封印 goto。但適當地使用 goto，會讓程式碼更簡潔。</p>]]></content>
      
      
      <categories>
          
          <category> 後端技術 </category>
          
          <category> Go </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用 LinQ (一) - 介紹 LinQ</title>
      <link href="/2023/01/21/%E5%BE%8C%E7%AB%AF%E6%8A%80%E8%A1%93/LINQ/%E4%BD%BF%E7%94%A8%20LinQ%20(%E4%B8%80)%20-%20%E4%BB%8B%E7%B4%B9%20LinQ/"/>
      <url>/2023/01/21/%E5%BE%8C%E7%AB%AF%E6%8A%80%E8%A1%93/LINQ/%E4%BD%BF%E7%94%A8%20LinQ%20(%E4%B8%80)%20-%20%E4%BB%8B%E7%B4%B9%20LinQ/</url>
      
        <content type="html"><![CDATA[<h1 id="語言整合查詢-Linq-簡介"><a href="#語言整合查詢-Linq-簡介" class="headerlink" title="語言整合查詢 - Linq 簡介"></a>語言整合查詢 - Linq 簡介</h1><h2 id="何謂Linq"><a href="#何謂Linq" class="headerlink" title="何謂Linq ?"></a>何謂Linq ?</h2><p>語言整合查詢（英語：Language Integrated Query，縮寫：LINQ）， 顧名思義就是此程式語言擁有查詢資料的能力，LINQ的出現使得C#(基本上 .Net 都可以使用)可以在程式中查找資料。<br>利用標準查詢運算子(Standard Query Operators)，工程師可以用原生的C#語言對資料做處理，選擇資料來源、進行篩選到組合、分組都可以利用標準查詢運算子完成，而且在撰寫的過程中還可以享受到型別檢查及自動完成帶來的便捷。</p><h2 id="LINQ的組成"><a href="#LINQ的組成" class="headerlink" title="LINQ的組成"></a>LINQ的組成</h2><p>LINQ是一種能力，微軟開發出了很多不同的技術讓C#擁有這樣的能力。</p><h2 id="1-標準查詢運算子-Standard-Query-Operators"><a href="#1-標準查詢運算子-Standard-Query-Operators" class="headerlink" title="1. 標準查詢運算子 - Standard Query Operators"></a>1. 標準查詢運算子 - Standard Query Operators</h2><p>標準查詢運算子是應用於集合類別的運算子，它對集合實作了篩選、組合、排序..等等的運算功能，像是Select、Where、OrderBy…等方法，而這些方法就是運作於IEnumerable<T>、IQueryable<T>。</p><h2 id="2-語言擴展-Language-Extensions"><a href="#2-語言擴展-Language-Extensions" class="headerlink" title="2. 語言擴展 - Language Extensions"></a>2. 語言擴展 - Language Extensions</h2><p>為了使LINQ可以更加便捷的使用而將C#擴充了以下的功能:</p><h3 id="a-查詢運算式-Query-Expression-Query-Syntax"><a href="#a-查詢運算式-Query-Expression-Query-Syntax" class="headerlink" title="a. 查詢運算式 - Query Expression(Query Syntax)"></a>a. 查詢運算式 - Query Expression(Query Syntax)</h3><p>查詢運算式(Query Expression)是一種跟SQL搜尋語法相似的運算式，透過查詢運算式，我們可以對資料做相關的處理，下面是一個最基本的查詢運算式:</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> x <span class="keyword">in</span> Products</span><br><span class="line"><span class="keyword">select</span> x.ProductName</span><br></pre></td></tr></table></figure><p>此段語法會被Compiler轉譯為標準查詢運算子:</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Products.Select (x =&gt; x.ProductName)</span><br></pre></td></tr></table></figure><p> 而最後進資料庫的會是下面這樣的SQL語法:</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT [t0].[ProductName]</span><br><span class="line">FROM [Products] AS [t0]</span><br></pre></td></tr></table></figure><h3 id="b-隱含型別變數-Implicitly-typed-variables"><a href="#b-隱含型別變數-Implicitly-typed-variables" class="headerlink" title="b. 隱含型別變數 - Implicitly typed variables"></a>b. 隱含型別變數 - Implicitly typed variables</h3><p>隱含型別變數就是我們在JavaScript上又愛又恨的var，但C#中的var變數還是強型別的變數，它會透過賦予變數的型別來推斷此變數為何種型別(type inference)。</p><h3 id="c-匿名類型-Anonymous-types"><a href="#c-匿名類型-Anonymous-types" class="headerlink" title="c. 匿名類型 - Anonymous types"></a>c. 匿名類型 - Anonymous types</h3><p>匿名型別可以只宣告資料欄位而不需要明確定義類別，這樣的技術在Select或是Join的時候非常好用，因為這些查詢有很大的機會不會是原來的物件。</p><h3 id="d-初始化物件-Object-Initializer"><a href="#d-初始化物件-Object-Initializer" class="headerlink" title="d. 初始化物件 - Object Initializer"></a>d. 初始化物件 - Object Initializer</h3><p>可以直接在new的時候訂定類別的參數初始值，例如說像是下面這樣:</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Person person = <span class="keyword">new</span> Person &#123;</span><br><span class="line">    Name = <span class="string">&quot;John Doe&quot;</span>,</span><br><span class="line">    Age = <span class="number">39</span></span><br><span class="line">&#125;;  <span class="comment">// Object Initializer</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Equal to</span></span><br><span class="line">Person person = <span class="keyword">new</span> Person();</span><br><span class="line">person.Name = <span class="string">&quot;John Doe&quot;</span>;</span><br><span class="line">person.Age = <span class="number">39</span>;</span><br></pre></td></tr></table></figure><h2 id="3-Lambda表達式-Lambda-Expression"><a href="#3-Lambda表達式-Lambda-Expression" class="headerlink" title="3. Lambda表達式 - Lambda Expression"></a>3. Lambda表達式 - Lambda Expression</h2><h2 id="是一種匿名方法，LINQ在Query-Expression轉為Standard-Query-Operators時會使用它來做轉換，另外我們以方法使用LINQ時也會使用Lambda。"><a href="#是一種匿名方法，LINQ在Query-Expression轉為Standard-Query-Operators時會使用它來做轉換，另外我們以方法使用LINQ時也會使用Lambda。" class="headerlink" title="是一種匿名方法，LINQ在Query Expression轉為Standard Query Operators時會使用它來做轉換，另外我們以方法使用LINQ時也會使用Lambda。"></a>是一種匿名方法，LINQ在Query Expression轉為Standard Query Operators時會使用它來做轉換，另外我們以方法使用LINQ時也會使用Lambda。</h2><p>LinQ 主要有三種元件組成:</p><h2 id="1-LINQ-to-Objects"><a href="#1-LINQ-to-Objects" class="headerlink" title="1. LINQ to Objects"></a>1. LINQ to Objects</h2><p>Provider就是利用這個介面去對任何要查詢的物件做處理，只要你的物件有實作IEnumerable這個物件，你就可以使用LINQ。</p><h2 id="2-LINQ-to-ADO-Net"><a href="#2-LINQ-to-ADO-Net" class="headerlink" title="2. LINQ to ADO.Net"></a>2. LINQ to ADO.Net</h2><p>ADO.Net 可以查詢使用取用外部資料，主要這三種:</p><h3 id="a-LINQ-to-SQL"><a href="#a-LINQ-to-SQL" class="headerlink" title="a. LINQ to SQL"></a>a. LINQ to SQL</h3><p>Database有自己的查詢引擎，所以無法直接透過LINQ的語法做處理，Provider處理了LINQ與SQL查詢語法間的轉換還有應用程式與資料庫間的溝通。</p><h3 id="b-LINQ-to-Entities"><a href="#b-LINQ-to-Entities" class="headerlink" title="b. LINQ to Entities"></a>b. LINQ to Entities</h3><p>類似於 Linq to Sql 方式，但是需要對應實際的資料表。</p><h3 id="c-LinQ-to-DataSet"><a href="#c-LinQ-to-DataSet" class="headerlink" title="c. LinQ to DataSet"></a>c. LinQ to DataSet</h3><h2 id="3-LINQ-to-XML"><a href="#3-LINQ-to-XML" class="headerlink" title="3. LINQ to XML"></a>3. LINQ to XML</h2><p>這裡可以提供不同語法、運算子處理 xml 資料，可將XQuery 、XPath 整合到.net 提供 XML 查詢功能。</p>]]></content>
      
      
      <categories>
          
          <category> 後端技術 </category>
          
          <category> C# </category>
          
          <category> LinQ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
            <tag> Net FrameWork </tag>
            
            <tag> LinQ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Entity Framework 6 如何更新結構、資料型態</title>
      <link href="/2023/01/21/%E5%BE%8C%E7%AB%AF%E6%8A%80%E8%A1%93/CS/cs_19_EF%E6%9B%B4%E6%96%B0%E7%B5%90%E6%A7%8B/"/>
      <url>/2023/01/21/%E5%BE%8C%E7%AB%AF%E6%8A%80%E8%A1%93/CS/cs_19_EF%E6%9B%B4%E6%96%B0%E7%B5%90%E6%A7%8B/</url>
      
        <content type="html"><![CDATA[<p>這章節主要使用、更新資料結構，EF6只要碰到更新動作是一件很可怕的事情，以下提供各位解決方案。</p><h2 id="何謂-Edmx-檔案"><a href="#何謂-Edmx-檔案" class="headerlink" title="何謂 Edmx 檔案"></a>何謂 Edmx 檔案</h2><p>edmx是EF產生的檔案，透過創建方式產生 SSDL、CSDL 、MSL 。<br>SSDL：定義實體資料庫。<br>CSDL：定義模型類別。<br>MSL(C-S Mapping)：對應資料庫Table與Entity物件</p><p><img src="/image/20221220_10-48-52.png"></p><h2 id="更新方式"><a href="#更新方式" class="headerlink" title="更新方式"></a>更新方式</h2><ol><li>修改 edmx 檔案(用xml開啟)以及 模型類別</li><li>透過 edmx 圖形化方式修改。</li><li>若要更新model先刪掉裡面內容，才能確保保持一樣的內容。</li></ol><p><img src="/image/20221220_11-20-08.png"></p><h2 id="更新結構-x2F-新增結構"><a href="#更新結構-x2F-新增結構" class="headerlink" title="更新結構&#x2F;新增結構"></a>更新結構&#x2F;新增結構</h2><p>這邊我們用兩種做法，開始前我們先新增 <code>text4</code> 當作範例，請參閱更新方式。</p><p><img src="/image/20221220_11-31-42.png"></p><h3 id="圖形化方式修改"><a href="#圖形化方式修改" class="headerlink" title="圖形化方式修改"></a>圖形化方式修改</h3><p>一、 首先雙點擊edmx再來按下完成。<br>備註 : 更新部分已經存在的table 只需要按下完成即可。<br><img src="/image/20221220_11-41-38.png"><br><img src="/image/20221220_11-42-02.png"></p><p>二、 確認模型類型<br>這邊建議存檔完畢edmx在檢查<strong>類型</strong>會比較好，原因是當他完成更新結構需要loading一段時間，才會更新到類別，雖然它會自動更新類別極大優點也造成有缺陷問題。<br><img src="/image/20221220_11-44-51.png"></p><p>備註 : 通常初期使用圖形化方式更新會比較好上手，EF6載入問題實在是無法排除這致命問題，建議少用圖形化方式更新結構。</p><h3 id="XML修改、更新模型類別"><a href="#XML修改、更新模型類別" class="headerlink" title="XML修改、更新模型類別"></a>XML修改、更新模型類別</h3><p>一、先把模型類別內容修改<br><img src="/image/20221220_11-36-41.png"><br>二、修改edmx檔案 (需要修三個地方)<br><img src="/image/20221220_11-37-10.png"></p><h2 id="變更型態"><a href="#變更型態" class="headerlink" title="變更型態"></a>變更型態</h2><p>前公司部分常常遇到資料庫設計問題更改型態，來先看看圖形化處理方式。<br>備註 :開始前記得更新結構 ，將text4改為int資料型態。</p><h3 id="圖形化方式缺點"><a href="#圖形化方式缺點" class="headerlink" title="圖形化方式缺點"></a>圖形化方式缺點</h3><p>如果我們按照原本操作可以看到，如果直接更新edmx只會更新DB結構並不會更新<strong>類別</strong>檔案型態。<br><img src="/image/20221220_11-56-13.gif"></p><h3 id="圖形化方式-解決方式"><a href="#圖形化方式-解決方式" class="headerlink" title="圖形化方式(解決方式)"></a>圖形化方式(解決方式)</h3><p>動作如下</p><ol><li>打開 “模型瀏覽器” (必須要focus在edmx才能使用)</li><li>刪除 table參考 、以及模型參考</li><li>重新新增table即可<br><img src="/image/20221220_12-26-28.gif"></li></ol><h3 id="XML修改、更新模型類別-1"><a href="#XML修改、更新模型類別-1" class="headerlink" title="XML修改、更新模型類別"></a>XML修改、更新模型類別</h3><p>動作如下</p><ol><li>修改模型類別</li><li>修改xml (SSDL、CSDL、CS mapping)<br>以上方式會遠遠比圖形化處理方式來得快很多，缺點是如果當table很大量可能會遇到改錯問題。<br><img src="/image/20221220_12-32-19.png"><br><img src="/image/20221220_12-32-44.png"></li></ol><h2 id="刪除結構"><a href="#刪除結構" class="headerlink" title="刪除結構"></a>刪除結構</h2><h3 id="圖形化方式"><a href="#圖形化方式" class="headerlink" title="圖形化方式"></a>圖形化方式</h3><p>這邊就比較單純許，只需要刪除現有實體模型以及更新資料庫參考即可。<br><img src="/image/20221220_12-55-37.png"></p><h3 id="XML修改、更新模型類別-2"><a href="#XML修改、更新模型類別-2" class="headerlink" title="XML修改、更新模型類別"></a>XML修改、更新模型類別</h3><p>因動作比較簡單這邊就不就操作。</p><ol><li>修改xml (SSDL、CSDL、CS mapping)內容即可</li><li>修改類別模型</li></ol><h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>EF6 部分比較麻煩是更新結構部分，但還是盡量避免使用 圖形化方式修改，主要原因是開啟、存檔耗損資源以及時間特別長，且如果強制關掉會造成很可怕的問題建議與github保持一定的版本才進行操作。</p><p>如果想要深入了解xml結構可以參考下方測試連結。<br>Github : <a href="https://github.com/JontCont/NetFramework_EF6_Demo">https://github.com/JontCont/NetFramework_EF6_Demo</a></p>]]></content>
      
      
      <categories>
          
          <category> 後端技術 </category>
          
          <category> C# </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
            <tag> EF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[學習] Golang 基本使用(一) - 建立 Golang 環境</title>
      <link href="/2023/01/21/%E5%BE%8C%E7%AB%AF%E6%8A%80%E8%A1%93/GOLANG/Golang_01/"/>
      <url>/2023/01/21/%E5%BE%8C%E7%AB%AF%E6%8A%80%E8%A1%93/GOLANG/Golang_01/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>這邊主要說明Go創建、使用，如果已經有環境，請直接到下一章節。</p><h1 id="設定環境"><a href="#設定環境" class="headerlink" title="設定環境"></a>設定環境</h1><h2 id="使用軟體"><a href="#使用軟體" class="headerlink" title="使用軟體"></a>使用軟體</h2><h3 id="1-Notepad"><a href="#1-Notepad" class="headerlink" title="1. Notepad++"></a>1. Notepad++</h3><p><img src="/image/20221207_21-19-26.png"><br>目前業界最常看到的一套軟體，不但是免費功能也很強大，是一支必備軟體，它的特性也可以隨意跟改語言。<br>按此下載 &#x3D;&gt;  <a href="https://notepad-plus-plus.org/downloads/">https://notepad-plus-plus.org/downloads/</a></p><h3 id="2-VS-CODE"><a href="#2-VS-CODE" class="headerlink" title="2. VS CODE"></a>2. VS CODE</h3><p><img src="/image/20221207_21-19-57.png"><br>(又稱VSC)目前是網頁前端最常用的軟體，非常的實用可以使用其他的語言、BUG，非常多的外掛可以提供使用者下載。<br>下載點 &#x3D;&gt; <a href="https://code.visualstudio.com/download">https://code.visualstudio.com/download</a></p><hr><h2 id="安裝Go語言"><a href="#安裝Go語言" class="headerlink" title="安裝Go語言"></a>安裝Go語言</h2><p>Go官網下載頁網址: <a href="https://golang.org/dl/">https://golang.org/dl/</a><br>安裝時候，選擇安裝msi的副檔名下載，也是可以透過軟體包管理工具進行安裝，像是用windows的chocolatey, mac的homebrew, linux的apt-get或yum，只是用軟體包工具安裝的可能不會是目前的最新版本，必須要等待軟體包伺服器更新。<br><img src="/image/20221207_21-20-10.png"></p><hr><h2 id="環境設定"><a href="#環境設定" class="headerlink" title="環境設定"></a>環境設定</h2><ol><li><p>設定方面需要到 控制台\所有控制台項目\系統 旁有進階系統設定<br><img src="/image/20221207_21-20-22.png"></p></li><li><p>選擇標籤列上方有進階再按下環境設定。<br><img src="/image/20221207_21-20-31.png"></p></li><li><p>選擇後，按照下方圖示順序去做設定。<br><img src="/image/20221207_21-20-41.png"></p></li><li><p>以及新增一個GOROOT 路徑為 C:\ 即可<br><img src="/image/20221207_21-20-52.png"></p></li><li><p>完成後，請重開電腦後到cmd(command 命令指令字元)裡面輸入 go 按下enter 確認是否正常使用。<br><img src="/image/20221207_21-21-01.png"></p></li></ol><hr><h1 id="第一個程式"><a href="#第一個程式" class="headerlink" title="第一個程式"></a>第一個程式</h1><h2 id="Marketplace"><a href="#Marketplace" class="headerlink" title="Marketplace"></a><a href="https://marketplace.visualstudio.com/vscode">Marketplace</a></h2><p>VSC 提供多項外掛可以給使用者多樣的選擇。需要安裝如下:</p><ol><li><h3 id="Go"><a href="#Go" class="headerlink" title="Go"></a>Go</h3><a href="https://marketplace.visualstudio.com/items?itemName=golang.Go">https://marketplace.visualstudio.com/items?itemName=golang.Go</a></li></ol><p>使用前，須設定Debug 環境，先切換至 Debug 模式：<br><img src="/image/20221207_21-21-23.png"></p><p>按下左上方的 Play 按鈕，並選擇 Go 做為 Debug 環境，會出現一個launch檔案，參考下方內容：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0.2.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;configurations&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Launch file&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;go&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;request&quot;</span><span class="punctuation">:</span> <span class="string">&quot;launch&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;mode&quot;</span><span class="punctuation">:</span> <span class="string">&quot;debug&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;program&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$&#123;file&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;env&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;args&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>接著就可以開始使用內建 Console 或中斷點來 Debug 囉！<br><img src="/image/20221207_21-21-36.png"></p><h2 id="手動安裝GO-TOOL"><a href="#手動安裝GO-TOOL" class="headerlink" title="手動安裝GO TOOL"></a>手動安裝GO TOOL</h2><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ go get -u -v [URL]</span><br></pre></td></tr></table></figure><p>以下工具給予參考</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">go get -u -v github.com/ramya-rao-a/go-outline</span><br><span class="line">go get -u -v github.com/acroca/go-symbols</span><br><span class="line">go get -u -v github.com/mdempsky/gocode</span><br><span class="line">go get -u -v github.com/rogpeppe/godef</span><br><span class="line">go get -u -v golang.org/x/tools/<span class="built_in">cmd</span>/godoc</span><br><span class="line">go get -u -v github.com/zmb3/gogetdoc</span><br><span class="line">go get -u -v golang.org/x/lint/golint</span><br><span class="line">go get -u -v github.com/fatih/gomodifytags</span><br><span class="line">go get -u -v golang.org/x/tools/<span class="built_in">cmd</span>/gorename</span><br><span class="line">go get -u -v sourcegraph.com/sqs/goreturns</span><br><span class="line">go get -u -v golang.org/x/tools/<span class="built_in">cmd</span>/goimports</span><br><span class="line">go get -u -v github.com/cweill/gotests/...</span><br><span class="line">go get -u -v golang.org/x/tools/<span class="built_in">cmd</span>/guru</span><br><span class="line">go get -u -v github.com/josharian/impl</span><br><span class="line">go get -u -v github.com/haya14busa/goplay/<span class="built_in">cmd</span>/goplay</span><br><span class="line">go get -u -v github.com/uudashr/gopkgs/<span class="built_in">cmd</span>/gopkgs</span><br><span class="line">go get -u -v github.com/davidrjenni/reftools/<span class="built_in">cmd</span>/fillstruct</span><br></pre></td></tr></table></figure><h2 id="第一個程式-1"><a href="#第一個程式-1" class="headerlink" title="第一個程式"></a>第一個程式</h2><ol><li><p>範例 1 : 創建簡易的輸出功能</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">fmt.Print(<span class="string">&quot;Hello Go. !!&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>範例 2 : Go 可以支援 Emoji</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> varByte <span class="type">byte</span> = <span class="string">&#x27;a&#x27;</span></span><br><span class="line"><span class="keyword">var</span> varRun <span class="type">rune</span> = <span class="string">&#x27;🧨&#x27;</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;%c = %d and %c =%U\n&quot;</span>, varByte, varByte, varRun, varRun)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><hr><h1 id="補充"><a href="#補充" class="headerlink" title="補充"></a>補充</h1><h2 id="1-golang在go-get時錯誤提示-xx-cannot-download-xxx-is-a-GOROOT-not-a-GOPATH-For-more-details-see-…"><a href="#1-golang在go-get時錯誤提示-xx-cannot-download-xxx-is-a-GOROOT-not-a-GOPATH-For-more-details-see-…" class="headerlink" title="1. golang在go get時錯誤提示 : xx cannot download,xxx is a GOROOT, not a GOPATH. For more details see:…"></a>1. golang在go get時錯誤提示 : xx cannot download,xxx is a GOROOT, not a GOPATH. For more details see:…</h2><ul><li>刪除GOPATH中src目錄中的cmd目錄,再執行go get -v xxxxx</li></ul><h2 id="2-VSC預設變量"><a href="#2-VSC預設變量" class="headerlink" title="2.VSC預設變量"></a>2.VSC預設變量</h2><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$&#123;workspaceFolder&#125; - VS Code 中打开的文件夹目录 （通常是项目的位置）</span><br><span class="line">$&#123;workspaceFolderBasename&#125; - 没有任何斜杠 (/)的 VS Code 中打开的文件夹目录</span><br><span class="line">$&#123;file&#125; - 目前打开文件的绝对位置</span><br><span class="line">$&#123;relativeFile&#125; - 目前打开文件相对于 workspaceFolder 的相对位置</span><br><span class="line">$&#123;fileBasename&#125; -  目前打开文件的文件名（有拓展名，如： main.cpp）</span><br><span class="line">$&#123;fileBasenameNoExtension&#125; - 目前打开文件的出去拓展名的文件名（无拓展名， 如： main.cpp）</span><br><span class="line">$&#123;cwd&#125; - task runner的工作目录</span><br><span class="line">$&#123;fileDirname&#125; - 目前打开文件的目录位置</span><br><span class="line">$&#123;fileExtname&#125; - 目前打开文件的拓展名</span><br><span class="line">$&#123;lineNumber&#125; - 文件中目前被选择的行数</span><br><span class="line">$&#123;selectedText&#125; - 文件中目前被选择的内容</span><br></pre></td></tr></table></figure><h2 id="3-CMD執行"><a href="#3-CMD執行" class="headerlink" title="3. CMD執行"></a>3. CMD執行</h2><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ go run xx.go</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 後端技術 </category>
          
          <category> GO </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C# net5.0 - WSDL 簡易測試</title>
      <link href="/2023/01/21/%E5%BE%8C%E7%AB%AF%E6%8A%80%E8%A1%93/CS/cs_15_WSDL%E7%B0%A1%E6%98%93%E6%B8%AC%E8%A9%A6/"/>
      <url>/2023/01/21/%E5%BE%8C%E7%AB%AF%E6%8A%80%E8%A1%93/CS/cs_15_WSDL%E7%B0%A1%E6%98%93%E6%B8%AC%E8%A9%A6/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>近期執行專案時候，常常遇到對方使用的是 WSDL。當時剛入行軟體工程師非常震驚這是甚麼東西，WSDL 如何傳遞、如何使用，直到後期有發現不錯用的工具SoapUI 主要給 WSDL這個使用。接下來會直接讓各位參考如何執行簡易版的WSDL。</p><p>最近有製作簡易版本的response 工具，可以提供參考。</p><h2 id="使用工具、指令"><a href="#使用工具、指令" class="headerlink" title="使用工具、指令"></a>使用工具、指令</h2><ul><li>VSC : <a href="https://code.visualstudio.com/">點擊我</a></li><li>使用 Command : <code>dotnet new console -f net5.0</code></li><li>Github 參考 : <a href="https://github.com/JontCont/dotnetCore_WSDL">點擊我</a></li></ul><h2 id="Web服務描述語言，Web-Services-Description-Language"><a href="#Web服務描述語言，Web-Services-Description-Language" class="headerlink" title="Web服務描述語言，Web Services Description Language"></a>Web服務描述語言，Web Services Description Language</h2><p>基於 XML 用於 描述 、通訊(訪問) Web Services 的語言。常見相關名稱</p><ul><li>Web Services</li><li>SOAP (Simple Object Access Protocol)</li><li>UDDI (Universal Description, Discovery, and Integration)</li></ul><h1 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h1><p>這邊只會使用 請求、回覆。若要看WSDL製作本篇不展示。</p><h2 id="連線方式"><a href="#連線方式" class="headerlink" title="連線方式"></a>連線方式</h2><p>筆者案例是使用xml部分，需要使用 text&#x2F;xml 才能啟動功能，如果是postman 必須要把 request 更改 <code>row</code> -&gt; <code>text</code> 才能使用功能。下方要注意幾點。</p><ol><li>需要確認 wsdl 是否有開啟 (可使用 SoapUI 測試)</li><li>需使用 POST　取得資料 (筆者遇到的案子為例)</li></ol><p>下方範例是主要讓 Request 內容可以呈現狀態、訊息。完成後，簡易的版本就完成了。</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">RequestExtension</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//set config</span></span><br><span class="line">    <span class="comment">//example WSDL : http://localhost/jwsdata/services/Data?wsdl</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">string</span> url = <span class="string">&quot;http://localhost/jwsdata/services/Data?wsdl&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">string</span> XmlString = <span class="string">@&quot;&quot;</span>; <span class="comment">// 輸入要request 內容</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// request result</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ResponseResult result &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125; =<span class="keyword">new</span> ResponseResult();</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ResponseResult</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">bool</span> status &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125; = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span> message &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125; = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// request WSDL</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">async</span> Task&lt;ResponseResult&gt; <span class="title">RequestWSDL</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//取得當前 html 字串</span></span><br><span class="line">        HttpClient client = <span class="keyword">new</span>();</span><br><span class="line">        client</span><br><span class="line">            .DefaultRequestHeaders</span><br><span class="line">            .Accept</span><br><span class="line">            .Add(</span><br><span class="line">                <span class="keyword">new</span> MediaTypeWithQualityHeaderValue(<span class="string">&quot;text/xml&quot;</span>)</span><br><span class="line">            );<span class="comment">//ACCEPT header</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            HttpRequestMessage request = <span class="keyword">new</span> HttpRequestMessage(HttpMethod.Post, url);</span><br><span class="line">            request.Content = </span><br><span class="line">                <span class="keyword">new</span> StringContent(XmlString, Encoding.UTF8, <span class="string">&quot;text/xml&quot;</span>);<span class="comment">//CONTENT-TYPE header</span></span><br><span class="line"></span><br><span class="line">            HttpResponseMessage response =  <span class="keyword">await</span> client.SendAsync(request);</span><br><span class="line">            response.EnsureSuccessStatusCode();</span><br><span class="line">            <span class="built_in">string</span> responseBody = <span class="keyword">await</span> response.Content.ReadAsStringAsync();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ResponseResult&#123;</span><br><span class="line">                status = <span class="literal">true</span>,</span><br><span class="line">                message = responseBody,</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception ex)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ResponseResult&#123;</span><br><span class="line">                status = <span class="literal">false</span>,</span><br><span class="line">                message = ex.Message,</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="comment">//RequestWSDL</span></span><br></pre></td></tr></table></figure><h2 id="加入結果"><a href="#加入結果" class="headerlink" title="加入結果"></a>加入結果</h2><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">async</span> Task <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> responseResult = <span class="keyword">await</span> RequestExtension.RequestWSDL();</span><br><span class="line">        Console.WriteLine(<span class="string">$&quot;status : <span class="subst">&#123;responseResult.status&#125;</span> , message : <span class="subst">&#123;responseResult.message&#125;</span>&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="轉換傳輸資料"><a href="#轉換傳輸資料" class="headerlink" title="轉換傳輸資料"></a>轉換傳輸資料</h2><p>這邊使用方式僅供參考並非最佳解。使用目的是處理資料時候，需要輸入xml 指定名稱過度麻煩，這邊加入方式class 定義出來，解析內容轉出要得傳輸資料。</p><p>處理方式也很簡單，可以透由 replace 字串取代即可產出自動輸入值。如果要產出 class 名稱也是用下方類似做法。</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">string</span> <span class="title">Convert</span>&lt;<span class="title">T</span>&gt;(<span class="params">T obj</span>)</span>&#123;</span><br><span class="line">    Type t = <span class="keyword">typeof</span>(T);</span><br><span class="line">    PropertyDescriptorCollection properties = TypeDescriptor.GetProperties(t);</span><br><span class="line">    StringBuilder strBuilder = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">    <span class="keyword">foreach</span> (PropertyDescriptor property <span class="keyword">in</span> properties)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (property.GetValue(obj) <span class="keyword">is</span> <span class="literal">null</span> ||<span class="built_in">string</span>.IsNullOrEmpty(property.GetValue(obj).ToString())) &#123; <span class="keyword">continue</span>; &#125;</span><br><span class="line">        strBuilder.AppendLine(</span><br><span class="line">            @<span class="string">$&quot;&lt;xsd:<span class="subst">&#123;property.Name&#125;</span>&gt;<span class="subst">&#123;property.GetValue(obj)&#125;</span>&lt;/xsd:<span class="subst">&#123;property.Name&#125;</span>&gt;&quot;</span></span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> strBuilder.ToString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h2><p>本文是用快速開發方式建置，可以快速得知功能是否正常。目的是開發方便而已(參考資料)。net5.0 以後有些淘汰型的request、response function用法可能需要參考本文的作法。今天快速建立出 WSDL 環境提供給各位參考， 後續再補充完整 WSDL。</p>]]></content>
      
      
      <categories>
          
          <category> 後端技術 </category>
          
          <category> C# </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VSC </tag>
            
            <tag> C# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C# API (一)- API種類、特性規範</title>
      <link href="/2023/01/21/%E5%BE%8C%E7%AB%AF%E6%8A%80%E8%A1%93/CS/cs_16_API%E7%A8%AE%E9%A1%9E%E3%80%81%E4%BD%BF%E7%94%A8%E8%A6%8F%E7%AF%84/"/>
      <url>/2023/01/21/%E5%BE%8C%E7%AB%AF%E6%8A%80%E8%A1%93/CS/cs_16_API%E7%A8%AE%E9%A1%9E%E3%80%81%E4%BD%BF%E7%94%A8%E8%A6%8F%E7%AF%84/</url>
      
        <content type="html"><![CDATA[<p>相信很多人開發 API 有使用 RESTful API或是其他定義，很多設計模式可以提升撰寫的速度、閱讀。這章節會著重於介紹請各位參閱以下內容，</p><h2 id="API-application-programming-interface）"><a href="#API-application-programming-interface）" class="headerlink" title="API (application programming interface）"></a>API (application programming interface）</h2><p>API 稱作為 “應用程式介面”，定義上是多個軟體中介互相回應(Response)、請求(Request)。如果要更詳細介紹請到下方連結點選</p><h3 id="詳細介紹"><a href="#詳細介紹" class="headerlink" title="詳細介紹 :"></a>詳細介紹 :</h3><ul><li>API 到底是什麼？ 用白話文帶你認識 by Frankie : <a href="https://medium.com/codingbar/api-%E5%88%B0%E5%BA%95%E6%98%AF%E4%BB%80%E9%BA%BC-%E7%94%A8%E7%99%BD%E8%A9%B1%E6%96%87%E5%B8%B6%E4%BD%A0%E8%AA%8D%E8%AD%98-95f65a9cfc33">請點我</a></li></ul><h2 id="API-請求種類"><a href="#API-請求種類" class="headerlink" title="API 請求種類"></a>API 請求種類</h2><p>API 從歷史到至今其實有很多使用方式，XML、JSON都是在傳輸過程中經常出現。</p><h3 id="REST-Representational-State-Transfer"><a href="#REST-Representational-State-Transfer" class="headerlink" title="REST (Representational State Transfer)"></a>REST (Representational State Transfer)</h3><p>表現層狀態轉移, 英文 Representational State Transfer ，是近年來比較多人使用的一種，最常聽到 <code>RESTful API</code>是同個網路架構風格。REST通常基於HTTP、URI、XML以及HTML這些現有的廣泛流行的協定和標準，他的資源是由URI來指定。</p><p>REST架構的限制條件</p><ul><li>客戶-服務器（Client-Server）</li><li>無狀態（Stateless）</li><li>緩存（Cache）</li><li>統一接口（Uniform Interface）<ol><li>請求中包含資源的 ID（Resource identification in requests）: 以資源為基礎 。每個資源都可以通過URI存取到。</li><li>資源通過標識來操作（Resource manipulation through representations）: 通過重表達的客戶端可以管理原資源</li><li>訊息的自我描述性（Self-descriptive messages）: 返回資訊足夠描述自己</li><li>用超媒體驅動應用狀態（Hypermedia as the engine of application state (HATEOAS)）:超媒體是應用狀態的引擎</li></ol></li><li>分層系統（Layered System）</li><li>按需代碼（Code-On-Demand，可選）</li></ul><p>方法</p><ul><li>POST : 新增</li><li>GET : 讀取</li><li>PUT&#x2F;PATCH : 更新</li><li>DELECT :刪除</li></ul><p>其他方法</p><ul><li>HEAD : 讀取。只回傳 HTTP header，不會回傳請求資源</li><li>CONNECT : HTTP&#x2F;1.1協議中預留給能夠將連接改為管道方式的代理服務器</li><li>OPTIONS : 此方法可使服務器傳回該資源所支持的所有 HTTP 請求方法</li><li>TRACE : 回顯服務器收到的請求，主要用於測試或診斷</li></ul><h3 id="RPC-Remote-Procedure-Call"><a href="#RPC-Remote-Procedure-Call" class="headerlink" title="RPC (Remote Procedure Call)"></a>RPC (Remote Procedure Call)</h3><p>遠端程序呼叫, 英文 Remote Procedure Call。是一種伺服器-客戶端（Client&#x2F;Server）模式，經典實現是一個通過傳送請求-接受回應進行資訊互動的系統。Web服務提供一個分布式函數或方法接口供用戶呼叫，客戶端通常是把方法名和引數傳遞給伺服器，然後伺服器返回JSON或XML。</p><p>RPC 規則中比較少，通常方法是用 <code>Get</code>、<code>POST</code>處理、端點要包含被執行操作的名字。</p><h3 id="GraphQL"><a href="#GraphQL" class="headerlink" title="GraphQL"></a>GraphQL</h3><p>GraphQL 是一種API查詢語言，支援也包含資料讀取、寫入（操作）和資料變更，允許客戶端定義需要得到的資料結構 。</p><p>與REST和RPC不同，GraphQL API只需要一個端點；它也不需要使用不同的HTTP動詞，它只使用POST，你需要在JSON body裡面指定是要執行查詢還是修改。</p><p>引用[程式人生]。GraphQL有下面幾個優勢:</p><ul><li><p>節省了多重的請求往返:GraphQL可以一次把所需的關聯資料全部查詢出來。不會存在例如N+1這樣的問題</p></li><li><p>避免了API版本問題:你可以隨時新增欄位和型別，不會影響現有的查詢。可以標記棄用。通過Log可以追蹤出哪些欄位被誰使用，如果欄位沒人再去使用，就可以移除它了。</p></li><li><p>Payload比較小:REST和RPC的響應都包含客戶端傳送一些不需要的資料。而使用GraphQL的話，客戶端得到的響應就是它所請求的那些東西，不多不少。</p></li><li><p>強型別:GraphQL是強型別的，開發時有型別檢查能保證查詢的正確性和合理性。</p></li><li><p>內省(Introspection):像REST，就需要安裝Swagger等工具來幫助瀏覽API。而GraphQL本身就具備可發現性。它還帶有一個瀏覽器內的IDE用來瀏覽GraphQL API。下圖就是Github的GraphQL API：</p></li></ul><p>缺點就是它為伺服器添加了許多複雜性，伺服器需要額外的工作來處理這些複雜的查詢。根據查詢內容的不同，效能也是一個變數.</p><h2 id="API-狀態規範"><a href="#API-狀態規範" class="headerlink" title="API 狀態規範"></a>API 狀態規範</h2><p>API 狀態碼是回應非常重要的一環。種類主要狀態以下 :</p><ul><li>2xx &#x3D; Success</li><li>3xx &#x3D; Redirect</li><li>4xx &#x3D; User error</li><li>5xx &#x3D; Server error</li></ul><p>參考文件 : <a href="https://restfulapi.net/http-status-codes/">HTTP Status Codes</a></p><h2 id="文件參考"><a href="#文件參考" class="headerlink" title="文件參考"></a>文件參考</h2><ol><li><a href="https://ithelp.ithome.com.tw/articles/10191925">RESTful API與MVC名詞介紹</a></li><li><a href="https://www.796t.com/content/1542560017.html">web API種類 常見形式 Web API 的簡單分類總結</a></li><li><a href="https://zh.wikipedia.org/zh-tw/Web%E6%9C%8D%E5%8A%A1">wiki Web服務</a></li><li><a href="https://medium.com/itsems-frontend/api-%E6%98%AF%E4%BB%80%E9%BA%BC-restful-api-%E5%8F%88%E6%98%AF%E4%BB%80%E9%BA%BC-a001a85ab638">API 是什麼? RESTful API 又是什麼?</a></li><li><a href="https://docs.microsoft.com/zh-tw/azure/architecture/best-practices/api-design">RESTful Web API 設計</a></li><li><a href="https://www.ithome.com.tw/tech/41508">Web Oriented Architecture</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 後端技術 </category>
          
          <category> C# </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
            <tag> API </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C# Core - 設定跨來源資源共用（CORS）</title>
      <link href="/2023/01/21/%E5%BE%8C%E7%AB%AF%E6%8A%80%E8%A1%93/CS/cs_17_%E8%A8%AD%E5%AE%9A%E8%B7%A8%E4%BE%86%E6%BA%90%E8%B3%87%E6%BA%90%E5%85%B1%E7%94%A8/"/>
      <url>/2023/01/21/%E5%BE%8C%E7%AB%AF%E6%8A%80%E8%A1%93/CS/cs_17_%E8%A8%AD%E5%AE%9A%E8%B7%A8%E4%BE%86%E6%BA%90%E8%B3%87%E6%BA%90%E5%85%B1%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="Cors-跨來源資源共用"><a href="#Cors-跨來源資源共用" class="headerlink" title="Cors 跨來源資源共用"></a>Cors 跨來源資源共用</h1><p>相信很多人使用API 時候可能會遇到這問題，例如 : localhost to ip串接不上之類問題，原則上是”跨來源資源共用”在搞鬼。</p><p>Cors 概念中，我們把網站當作(A) 、API為(B)來解釋，A需要透過B取得資訊，傳有一個資料相關內容稱為 “request”，B會確認A的來源是否一樣(same origin)就會讓他執行進去。從中得知(B)是決定(A)是否有權限取得資源。</p><h2 id="使用-Core-API"><a href="#使用-Core-API" class="headerlink" title="使用 Core API"></a>使用 Core API</h2><p>這便我使用 vs 開啟 API，必須要注意有沒有選擇 OpenApi這功能會幫你開啟SwaggerUI相當方便。<br><img src="/../image/Snipaste_2022-06-11_22-42-03.png"><br><img src="/../image/Snipaste_2022-06-11_22-42-58.png"></p><p>這邊使用方式以後再來介紹，下方為產生完畢的function，我們就可以在下方指令區塊輸入 dotnet watch 完成開啟API localhost動作。 </p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">HttpGet</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> IEnumerable&lt;WeatherForecast&gt; <span class="title">Get</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> rng = <span class="keyword">new</span> Random();</span><br><span class="line">    <span class="keyword">return</span> Enumerable.Range(<span class="number">1</span>, <span class="number">5</span>).Select(index =&gt; <span class="keyword">new</span> WeatherForecast</span><br><span class="line">    &#123;</span><br><span class="line">        Date = DateTime.Now.AddDays(index),</span><br><span class="line">        TemperatureC = rng.Next(<span class="number">-20</span>, <span class="number">55</span>),</span><br><span class="line">        Summary = Summaries[rng.Next(Summaries.Length)]</span><br><span class="line">    &#125;)</span><br><span class="line">    .ToArray();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="創建html"><a href="#創建html" class="headerlink" title="創建html"></a>創建html</h2><p>創建 html 用意取得剛才的api，必須要使用<a href="https://marketplace.visualstudio.com/items?itemName=MS-vsliveshare.vsliveshare">Live Share</a>才能看得到錯誤訊息。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdnjs.cloudflare.com/ajax/libs/jquery/3.6.0/jquery.min.js&quot;</span> <span class="attr">integrity</span>=<span class="string">&quot;sha512-894YE6QWD5I59HgZOGReFYm4dnWc1Qt5NtvYSaNcOP+u1T9qYdvdihz0PPSiiqn/+/3e7Jo4EaG7TubfWGUrMQ==&quot;</span> <span class="attr">crossorigin</span>=<span class="string">&quot;anonymous&quot;</span> <span class="attr">referrerpolicy</span>=<span class="string">&quot;no-referrer&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    $.<span class="title function_">ajax</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">method</span>:<span class="string">&#x27;get&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">url</span>:<span class="string">&#x27;https://localhost:5001/WeatherForecast&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">success</span>: <span class="keyword">function</span>(<span class="params">rep</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(rep);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/../image/Snipaste_2022-06-11_23-05-56.png"></p><h2 id="設定-Cors"><a href="#設定-Cors" class="headerlink" title="設定 Cors"></a>設定 Cors</h2><p>現在到 API &gt; Startup.cs 設定。下方範例省略不重要的設定。<br>從錯誤訊息可以知道，origin有問題會跟API也就是後端去確認情況。設定相當簡單只需要<code>AllowAnyOrigin() </code> 就完成了，這邊要注意這是針對全域設定方式，如果要自定義下一章再來介紹。</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// This method gets called by the runtime. Use this method to add  services to the container.</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ConfigureServices</span>(<span class="params">IServiceCollection services</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    ...</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    services.AddCors(options=&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        options.AddDefaultPolicy( builder =&gt;</span><br><span class="line">        &#123;</span><br><span class="line">            builder.AllowAnyOrigin();</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// This method gets called by the runtime. Use this method to configure the HTTP request pipeline.</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Configure</span>(<span class="params">IApplicationBuilder app, IWebHostEnvironment env</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    ....</span><br><span class="line">    ....</span><br><span class="line"></span><br><span class="line">    app.UseCors();</span><br><span class="line">    ....</span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/../image/Snipaste_2022-06-11_23-19-33.png"></p><h2 id="範本"><a href="#範本" class="headerlink" title="範本"></a>範本</h2><p><a href="https://github.com/JontCont/dotnetCore_CorsExample">dotnetCore_CorsExample</a></p>]]></content>
      
      
      <categories>
          
          <category> 後端技術 </category>
          
          <category> C# </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
            <tag> core </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用 Entity Framework 6 CRUD</title>
      <link href="/2023/01/21/%E5%BE%8C%E7%AB%AF%E6%8A%80%E8%A1%93/CS/cs_18_Net472%E4%BD%BF%E7%94%A8EF/"/>
      <url>/2023/01/21/%E5%BE%8C%E7%AB%AF%E6%8A%80%E8%A1%93/CS/cs_18_Net472%E4%BD%BF%E7%94%A8EF/</url>
      
        <content type="html"><![CDATA[<p>使用前必須要先知道 Entity Framework 有兩個版本。</p><ul><li>Entity Framework Core : 適用於 .NET 的新式物件資料庫對應程式。 其支援 LINQ 查詢、變更追蹤、更新以及結構描述移轉。</li><li>Entity Framework 6 : 透過資料庫提供者外掛程式模型搭配使用 SQL Server&#x2F;Azure SQL Database、SQLite、Azure Cosmos DB、MySQL、PostgreSQL 及更多資料庫。</li></ul><p>因此，使用EF6表現上會與 EF core 功能會也所不同。EF6是基於ADO.NET發展出來的物件關聯對應 (O&#x2F;R Mapping)，利用了抽象化資料結構的方式，將每個資料庫物件都轉換成應用程式物件 (entity)，而資料欄位都轉換為屬性 (property)，關聯則轉換為結合屬性 (association)，讓資料庫的 E&#x2F;R 模型完全的轉成物件模型。<br><img src="/image/20221220_09-11-30.png"></p><p>參考文件 </p><ol><li>microsoft : <a href="https://learn.microsoft.com/zh-tw/ef/efcore-and-ef6/">microsoft Entity Framewor</a></li><li>Wiki : <a href="https://zh.wikipedia.org/wiki/Entity_Framework">Entity Framework</a></li><li>Wiki : <a href="https://zh.wikipedia.org/wiki/Entity_Framework_Core">Entity Framework Core</a></li><li>Wiki : <a href="https://zh.wikipedia.org/wiki/ADO.NET">ADO.NET</a></li><li>The Will Will Web: <a href="https://blog.miniasp.com/post/2022/04/23/EF-Core-has-no-ValidateOnSaveEnabled-anymore">EF Core 已經不會在 SaveChanges() 的時候對實體模型進行額外驗證</a></li><li><a href="https://learn.microsoft.com/zh-tw/ef/ef6/modeling/designer/data-types/complex-types">複雜類型 - EF 設計工具</a></li><li><a href="https://learn.microsoft.com/en-us/ef/ef6/">Entity Framework 6</a></li></ol><h2 id="創建方式"><a href="#創建方式" class="headerlink" title="創建方式"></a>創建方式</h2><p>這邊操作建議獨立 folder 存放”實體資料模型”。如以下步驟操作步驟</p><ol><li>選擇 ADO.NET 實體資料模型</li><li>選擇 “來自資料庫的EF Designer” (本文使用 DB First) </li><li>選擇連線方式 (連線資訊會直接寫如Web.config當中)</li><li>選擇版本 (建議選擇6.x穩定版本)</li><li>選擇指定結構</li></ol><p><img src="/image/20221219_21-32-03.png"><br><img src="/image/20221219_21-32-27.png"><br><img src="/image/20221219_21-32-58.png"><br><img src="/image/20221219_21-33-18.png"><br><img src="/image/20221219_21-33-49.png"></p><h3 id="起手前介紹"><a href="#起手前介紹" class="headerlink" title="起手前介紹"></a>起手前介紹</h3><p>如果是初次使用EF的讀者，看看以下說明。<br>EF 創建後會產生 “DbContext”  可以從 xxx.context.cs 查看、修改、複寫。基於ADO.Net來說 EF 很貼心把 Connection Open()&#x2F;Close() 寫好，使用上會比較友善許多、簡單。</p><p><img src="/image/20221219_22-46-00.png"><br><img src="/image/20221219_21-59-01.png"></p><p>xxx.edmx 下一篇會介紹如何此用，原則上他是資料庫、實體資料模型比較的參考文件後面再細談。</p><h2 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h2><p>這邊我們看看如何使用 CRUD 方式測試，這邊會使用非常簡單處理方式執行。如果想要本章節DB結構可以參考最下方。<br>EF 使用規則 :</p><ol><li>需要先初始化 dbcontext</li><li>每當執行變更DB動作需要使用SaveChanges()動作</li></ol><h3 id="新增"><a href="#新增" class="headerlink" title="新增"></a>新增</h3><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">CRUD</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> EF_Demo db = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CRUD</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        db = <span class="keyword">new</span> EF_Demo(); <span class="comment">// 初始化 dbcontext</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Add</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="comment">//存入</span></span><br><span class="line">      db.DEMO_1.Add(<span class="keyword">new</span> DEMO_1</span><br><span class="line">      &#123;</span><br><span class="line">          text1 = <span class="string">&quot;111&quot;</span>,</span><br><span class="line">          text2 = <span class="string">&quot;222&quot;</span>,</span><br><span class="line">          text3 = <span class="string">&quot;333&quot;</span>,</span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">      <span class="comment">//驗證、存檔</span></span><br><span class="line">      db.SaveChanges();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h2><p>這邊稍微留意 EFCore 中是使用 <code>Update</code>方式更新，EF則是直接修改當前”資料”使用上需要小心使用。</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">CRUD</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> EF_Demo db = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CRUD</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        db = <span class="keyword">new</span> EF_Demo(); <span class="comment">// 初始化 dbcontext</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Update</span>(<span class="params"><span class="built_in">string</span> key</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> data = db.DEMO_1.Find(key);</span><br><span class="line">        data.text2 = <span class="string">&quot;222&quot;</span>;</span><br><span class="line">        data.text3 = <span class="string">&quot;333&quot;</span>;</span><br><span class="line">        db.SaveChanges();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="刪除"><a href="#刪除" class="headerlink" title="刪除"></a>刪除</h2><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">CRUD</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> EF_Demo db = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CRUD</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        db = <span class="keyword">new</span> EF_Demo(); <span class="comment">// 初始化 dbcontext</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Delete</span>(<span class="params"><span class="built_in">string</span> key</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> data = db.DEMO_1.Find(key);</span><br><span class="line">        db.DEMO_1.Remove(data);</span><br><span class="line">        db.SaveChanges();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="查詢"><a href="#查詢" class="headerlink" title="查詢"></a>查詢</h2><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">CRUD</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> EF_Demo db = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CRUD</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        db = <span class="keyword">new</span> EF_Demo(); <span class="comment">// 初始化 dbcontext</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Query</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> datas =db.DEMO_1.ToList(); <span class="comment">//取得資料</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">foreach</span> (<span class="keyword">var</span> item <span class="keyword">in</span> datas)</span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(item);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="本章使用DB結構"><a href="#本章使用DB結構" class="headerlink" title="本章使用DB結構"></a>本章使用DB結構</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/****** Object:  Table [dbo].[DEMO_1]    Script Date: 2022/12/20 上午 09:59:51 ******/</span></span><br><span class="line"><span class="keyword">SET</span> ANSI_NULLS <span class="keyword">ON</span></span><br><span class="line">GO</span><br><span class="line"></span><br><span class="line"><span class="keyword">SET</span> QUOTED_IDENTIFIER <span class="keyword">ON</span></span><br><span class="line">GO</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> [dbo].[DEMO_1](</span><br><span class="line">[text1] [<span class="type">nchar</span>](<span class="number">10</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">[text2] [<span class="type">nchar</span>](<span class="number">10</span>) <span class="keyword">NULL</span>,</span><br><span class="line">[text3] [<span class="type">nchar</span>](<span class="number">10</span>) <span class="keyword">NULL</span>,</span><br><span class="line"> <span class="keyword">CONSTRAINT</span> [PK_DEMO_1] <span class="keyword">PRIMARY</span> KEY CLUSTERED </span><br><span class="line">(</span><br><span class="line">[text1] <span class="keyword">ASC</span></span><br><span class="line">)<span class="keyword">WITH</span> (PAD_INDEX <span class="operator">=</span> OFF, STATISTICS_NORECOMPUTE <span class="operator">=</span> OFF, IGNORE_DUP_KEY <span class="operator">=</span> OFF, ALLOW_ROW_LOCKS <span class="operator">=</span> <span class="keyword">ON</span>, ALLOW_PAGE_LOCKS <span class="operator">=</span> <span class="keyword">ON</span>, OPTIMIZE_FOR_SEQUENTIAL_KEY <span class="operator">=</span> OFF) <span class="keyword">ON</span> [<span class="keyword">PRIMARY</span>]</span><br><span class="line">) <span class="keyword">ON</span> [<span class="keyword">PRIMARY</span>]</span><br><span class="line">GO</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 後端技術 </category>
          
          <category> C# </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
            <tag> EF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C# Asp.Net Global (1) -(筆記) Global.asax 事件方法清單</title>
      <link href="/2023/01/21/%E5%BE%8C%E7%AB%AF%E6%8A%80%E8%A1%93/CS/cs_09_AspNet_Global/"/>
      <url>/2023/01/21/%E5%BE%8C%E7%AB%AF%E6%8A%80%E8%A1%93/CS/cs_09_AspNet_Global/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在沒有.net core 環境，asp.net 其實有個 Global.asax 檔案。這檔案具有繼承 <code>HttpApplication</code>類，如果遇到controller 要統計、或是清除catch 從這邊排除是其中的選擇。</p><h1 id="Global-asax"><a href="#Global-asax" class="headerlink" title="Global.asax"></a>Global.asax</h1><p>Global.asax 位於應用程式根目錄下。ASP.NET 頁面框架能夠自動識別出對Global.asax 檔案所做的任何更改。在 Global.asax 被更改後ASP.NET 頁面框架會重新啟動應用程式，包括關閉所有的瀏覽器會話，去除所有狀態資訊，並重新啟動應用程式域。</p><h2 id="提供事件"><a href="#提供事件" class="headerlink" title="提供事件"></a>提供事件</h2><table><thead><tr><th>事件方法</th><th>事件說明</th></tr></thead><tbody><tr><td>Application_Init</td><td>在應用程式被例項化或第一次被呼叫時，該事件被觸發。對於所有的HttpApplication 物件例項，它都會被呼叫。</td></tr><tr><td>Application_Disposed</td><td>在應用程式被銷燬之前觸發。這是清除以前所用資源的理想位置。</td></tr><tr><td>Application_Error</td><td>當應用程式中遇到一個未處理的異常時，該事件被觸發。</td></tr><tr><td>Application_Start</td><td>在HttpApplication 類的第一個例項被建立時，該事件被觸發。它允許你建立可以由所有HttpApplication 例項訪問的物件。</td></tr><tr><td>Application_End</td><td>在HttpApplication 類的最後一個例項被銷燬時，該事件被觸發。在一個應用程式的生命週期內它只被觸發一次。</td></tr><tr><td>Application_BeginRequest</td><td>在接收到一個應用程式請求時觸發。對於一個請求來說，它是第一個被觸發的事件，請求一般是使用者輸入的一個頁面請求（URL）。</td></tr><tr><td>Application_EndRequest</td><td>針對應用程式請求的最後一個事件。</td></tr><tr><td>Application_PreRequestHandlerExecute</td><td>在 ASP.NET 頁面框架開始執行諸如頁面或 Web 服務之類的事件處理程式之前，該事件被觸發。</td></tr><tr><td>Application_PostRequestHandlerExecute</td><td>在 ASP.NET 頁面框架結束執行一個事件處理程式時，該事件被觸發。</td></tr><tr><td>Applcation_PreSendRequestHeaders</td><td>在 ASP.NET 頁面框架傳送 HTTP 頭給請求客戶（瀏覽器）時，該事件被觸發。</td></tr><tr><td>Application_PreSendContent</td><td>在 ASP.NET 頁面框架傳送內容給請求客戶（瀏覽器）時，該事件被觸發。</td></tr><tr><td>Application_AcquireRequestState</td><td>在 ASP.NET 頁面框架得到與當前請求相關的當前狀態（Session 狀態）時，該事件被觸發。</td></tr><tr><td>Application_ReleaseRequestState</td><td>在 ASP.NET 頁面框架執行完所有的事件處理程式時，該事件被觸發。這將導致所有的狀態模組儲存它們當前的狀態資料。</td></tr><tr><td>Application_ResolveRequestCache</td><td>在 ASP.NET 頁面框架完成一個授權請求時，該事件被觸發。它允許快取模組從快取中為請求提供服務，從而繞過事件處理程式的執行。</td></tr><tr><td>Application_UpdateRequestCache</td><td>在 ASP.NET 頁面框架完成事件處理程式的執行時，該事件被觸發，從而使快取模組儲存響應資料，以供響應後續的請求時使用。</td></tr><tr><td>Application_AuthenticateRequest</td><td>在安全模組建立起當前使用者的有效的身份時，該事件被觸發。在這個時候，使用者的憑據將會被驗證。</td></tr><tr><td>Application_AuthorizeRequest</td><td>當安全模組確認一個使用者可以訪問資源之後，該事件被觸發。</td></tr><tr><td>Session_Start</td><td>在一個新使用者訪問應用程式 Web 站點時，該事件被觸發。</td></tr><tr><td>Session_End</td><td>在一個使+A1:B20用者的會話超時、結束或他們離開應用程式 Web 站點時，該事件被觸發。</td></tr></tbody></table><h2 id="參考文件"><a href="#參考文件" class="headerlink" title="參考文件"></a>參考文件</h2><ul><li><a href="https://coolmandiary.blogspot.com/2020/11/aspnetglobalasax.html">[ASP.NET]Global.asax事件筆記_實際應用例子_停用 TLS 1.0_檔案上傳大小頁面跳轉_錯誤紀錄處理</a></li><li><a href="https://www.c-sharpcorner.com/uploadfile/aa04e6/major-events-in-global-asax-file/">Major Events in GLOBAL.ASAX file</a></li><li><a href="https://codertw.com/%E5%89%8D%E7%AB%AF%E9%96%8B%E7%99%BC/266541/">ASP.NET Global.asax應用程式檔案簡介</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 後端技術 </category>
          
          <category> C# </category>
          
          <category> Global </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VSC </tag>
            
            <tag> C# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C# Asp.Net Global (2) - 使用 Global.asax 清除 cache 以及 controller 管控</title>
      <link href="/2023/01/21/%E5%BE%8C%E7%AB%AF%E6%8A%80%E8%A1%93/CS/cs_10_AspNet_Global/"/>
      <url>/2023/01/21/%E5%BE%8C%E7%AB%AF%E6%8A%80%E8%A1%93/CS/cs_10_AspNet_Global/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>配合上一張function 清單，可以得知很多 Global 能用的事件方法，這篇排除cache 問題以及好用的方法。</p><h1 id="Global-asax"><a href="#Global-asax" class="headerlink" title="Global.asax"></a>Global.asax</h1><h2 id="提供事件"><a href="#提供事件" class="headerlink" title="提供事件"></a>提供事件</h2><p>筆者留事件function給各位讀者們參閱，請配合這個表格。</p><table><thead><tr><th>事件方法</th><th>事件說明</th></tr></thead><tbody><tr><td>Application_Init</td><td>在應用程式被例項化或第一次被呼叫時，該事件被觸發。對於所有的HttpApplication 物件例項，它都會被呼叫。</td></tr><tr><td>Application_Disposed</td><td>在應用程式被銷燬之前觸發。這是清除以前所用資源的理想位置。</td></tr><tr><td>Application_Error</td><td>當應用程式中遇到一個未處理的異常時，該事件被觸發。</td></tr><tr><td>Application_Start</td><td>在HttpApplication 類的第一個例項被建立時，該事件被觸發。它允許你建立可以由所有HttpApplication 例項訪問的物件。</td></tr><tr><td>Application_End</td><td>在HttpApplication 類的最後一個例項被銷燬時，該事件被觸發。在一個應用程式的生命週期內它只被觸發一次。</td></tr><tr><td>Application_BeginRequest</td><td>在接收到一個應用程式請求時觸發。對於一個請求來說，它是第一個被觸發的事件，請求一般是使用者輸入的一個頁面請求（URL）。</td></tr><tr><td>Application_EndRequest</td><td>針對應用程式請求的最後一個事件。</td></tr><tr><td>Application_PreRequestHandlerExecute</td><td>在 ASP.NET 頁面框架開始執行諸如頁面或 Web 服務之類的事件處理程式之前，該事件被觸發。</td></tr><tr><td>Application_PostRequestHandlerExecute</td><td>在 ASP.NET 頁面框架結束執行一個事件處理程式時，該事件被觸發。</td></tr><tr><td>Applcation_PreSendRequestHeaders</td><td>在 ASP.NET 頁面框架傳送 HTTP 頭給請求客戶（瀏覽器）時，該事件被觸發。</td></tr><tr><td>Application_PreSendContent</td><td>在 ASP.NET 頁面框架傳送內容給請求客戶（瀏覽器）時，該事件被觸發。</td></tr><tr><td>Application_AcquireRequestState</td><td>在 ASP.NET 頁面框架得到與當前請求相關的當前狀態（Session 狀態）時，該事件被觸發。</td></tr><tr><td>Application_ReleaseRequestState</td><td>在 ASP.NET 頁面框架執行完所有的事件處理程式時，該事件被觸發。這將導致所有的狀態模組儲存它們當前的狀態資料。</td></tr><tr><td>Application_ResolveRequestCache</td><td>在 ASP.NET 頁面框架完成一個授權請求時，該事件被觸發。它允許快取模組從快取中為請求提供服務，從而繞過事件處理程式的執行。</td></tr><tr><td>Application_UpdateRequestCache</td><td>在 ASP.NET 頁面框架完成事件處理程式的執行時，該事件被觸發，從而使快取模組儲存響應資料，以供響應後續的請求時使用。</td></tr><tr><td>Application_AuthenticateRequest</td><td>在安全模組建立起當前使用者的有效的身份時，該事件被觸發。在這個時候，使用者的憑據將會被驗證。</td></tr><tr><td>Application_AuthorizeRequest</td><td>當安全模組確認一個使用者可以訪問資源之後，該事件被觸發。</td></tr><tr><td>Session_Start</td><td>在一個新使用者訪問應用程式 Web 站點時，該事件被觸發。</td></tr><tr><td>Session_End</td><td>在一個使+A1:B20用者的會話超時、結束或他們離開應用程式 Web 站點時，該事件被觸發。</td></tr></tbody></table><h2 id="清除-cache"><a href="#清除-cache" class="headerlink" title="清除 cache"></a>清除 cache</h2><p>要清除每一個 Action 最快方式從 Application_AcquireRequestState 加入設定檔案，發生 cache 最可怕是登入後上一頁可以看到原有的模樣，排除cache可以參考下方寫法:</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">Application_AcquireRequestState</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//取消Cache</span></span><br><span class="line">    httpContext.Response.Cache.SetCacheability(HttpCacheability.NoCache);</span><br><span class="line">    httpContext.Response.Cache.AppendCacheExtension(<span class="string">&quot;no-store, must-revalidate&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="controller-管控"><a href="#controller-管控" class="headerlink" title="controller 管控"></a>controller 管控</h2><p>從上方案例可以得知，每一個action 都會有成功清除cache ，如果再延伸應用就會像是 controller管控。</p><p>控管方式相對簡單，每一隻帳號都會有特定功能權限，選擇能前往的pages 當如果有人強行載入pages 就會需要把他導回<del>正途(誤)</del>。<br>導回方式</p><ul><li>錯誤訊息</li><li>固定首頁</li><li>提示視窗</li></ul><p>下方提供參考寫法，請各位自行參閱:</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">Application_AcquireRequestState</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> httpContext = ((MvcApplication)sender).Context;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//取得Route資訊</span></span><br><span class="line">    <span class="keyword">var</span> currentRouteData = RouteTable.Routes.GetRouteData(<span class="keyword">new</span> HttpContextWrapper(httpContext));<span class="comment">//目的: httpContext 轉換到 HttpContextBase </span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//檢查身分</span></span><br><span class="line">    <span class="built_in">string</span> currentController = Get_ControllerOrActionName(currentRouteData, <span class="string">&quot;Controller&quot;</span>); <span class="comment">//存放 controller 內容</span></span><br><span class="line">    <span class="built_in">string</span> currentAction = Get_ControllerOrActionName(currentRouteData, <span class="string">&quot;Action&quot;</span>); ; <span class="comment">//存放 action 內容</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*----- 處理判斷向下 ------*/</span></span><br><span class="line">    <span class="comment">/*----- 處理判斷向上 ------*/</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (currentController == <span class="string">&quot;Home&quot;</span> &amp;&amp; currentAction==<span class="string">&quot;Index&quot;</span> )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> routeData = <span class="keyword">new</span> RouteData();</span><br><span class="line">        routeData.Values[<span class="string">&quot;exception&quot;</span>] = <span class="literal">null</span>;</span><br><span class="line">        routeData.Values[<span class="string">&quot;controller&quot;</span>] = <span class="string">&quot;Error&quot;</span>;</span><br><span class="line">        routeData.Values[<span class="string">&quot;action&quot;</span>] = <span class="string">&quot;LoginNotFound&quot;</span>;</span><br><span class="line"></span><br><span class="line">        httpContext.ClearError();</span><br><span class="line">        httpContext.Response.Clear();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//取得errorController</span></span><br><span class="line">        IController errormanagerController = <span class="keyword">new</span> ErrorController();</span><br><span class="line">        HttpContextWrapper wrapper = <span class="keyword">new</span> HttpContextWrapper(httpContext);</span><br><span class="line">        <span class="keyword">var</span> rc = <span class="keyword">new</span> RequestContext(wrapper, routeData);</span><br><span class="line">        errormanagerController.Execute(rc);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="built_in">string</span> <span class="title">Get_ControllerOrActionName</span>(<span class="params">RouteData routeData, <span class="built_in">string</span> getName</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">string</span> resultName = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="comment">//暫存</span></span><br><span class="line">    <span class="keyword">if</span> (routeData != <span class="literal">null</span>)</span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">switch</span> (getName)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;Action&quot;</span>:</span><br><span class="line"></span><br><span class="line">                resultName = (routeData.Values[<span class="string">&quot;action&quot;</span>] != <span class="literal">null</span> &amp;&amp; !String.IsNullOrEmpty(routeData.Values[<span class="string">&quot;action&quot;</span>].ToString()))</span><br><span class="line">                        ? routeData.Values[<span class="string">&quot;action&quot;</span>].ToString()</span><br><span class="line">                        : <span class="string">&quot;&quot;</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;Controller&quot;</span>:</span><br><span class="line"></span><br><span class="line">                resultName = (routeData.Values[<span class="string">&quot;controller&quot;</span>] != <span class="literal">null</span> &amp;&amp; !String.IsNullOrEmpty(routeData.Values[<span class="string">&quot;controller&quot;</span>].ToString()))</span><br><span class="line">                        ? routeData.Values[<span class="string">&quot;controller&quot;</span>].ToString()</span><br><span class="line">                        : <span class="string">&quot;&quot;</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> resultName;</span><br><span class="line">&#125;<span class="comment">//Get_ControllerOrActionName</span></span><br></pre></td></tr></table></figure><h2 id="controller-管控注意事項"><a href="#controller-管控注意事項" class="headerlink" title="controller 管控注意事項"></a>controller 管控注意事項</h2><p>這並非萬能的功能，這function會連ajax 抓取都會抓上來，如果太頻繁呼叫也會對這段不太友善，解決方式有兩種 </p><ol><li>使用 attribute</li><li>排除指定controller ajax</li></ol><p>題外話: 很多時候ajax 自訂出 controller 需要自己歸納、編輯，但是這個功能會發現很多自定義的controller 無法掌控直接造成功能執行效果，</p><h2 id="參考文件"><a href="#參考文件" class="headerlink" title="參考文件"></a>參考文件</h2><ul><li><a href="https://coolmandiary.blogspot.com/2020/11/aspnetglobalasax.html">[ASP.NET]Global.asax事件筆記_實際應用例子_停用 TLS 1.0_檔案上傳大小頁面跳轉_錯誤紀錄處理</a></li><li><a href="https://www.c-sharpcorner.com/uploadfile/aa04e6/major-events-in-global-asax-file/">Major Events in GLOBAL.ASAX file</a></li><li><a href="https://codertw.com/%E5%89%8D%E7%AB%AF%E9%96%8B%E7%99%BC/266541/">ASP.NET Global.asax應用程式檔案簡介</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 後端技術 </category>
          
          <category> C# </category>
          
          <category> Global </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VSC </tag>
            
            <tag> C# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C# resXManager (一) - 製作多國語言</title>
      <link href="/2023/01/21/%E5%BE%8C%E7%AB%AF%E6%8A%80%E8%A1%93/CS/cs_13_resXManager_%E8%A3%BD%E4%BD%9C%E5%A4%9A%E5%9C%8B%E8%AA%9E%E8%A8%80/"/>
      <url>/2023/01/21/%E5%BE%8C%E7%AB%AF%E6%8A%80%E8%A1%93/CS/cs_13_resXManager_%E8%A3%BD%E4%BD%9C%E5%A4%9A%E5%9C%8B%E8%AA%9E%E8%A8%80/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>開發時期，許多人會注意開發最後須要有環境去做切換語言的動作。使用多國語言處理方式有很多種，如果使用老派一點可以使用Excel方式讀取指定要讀取的文字，可以參考NPOI、LinqToExcel 兩種套件效果會相當不錯。</p><h1 id="resXManager"><a href="#resXManager" class="headerlink" title="resXManager"></a>resXManager</h1><p>resXManager 是資源文件編輯工具，使用方式相當簡單。內建有包含翻譯(不能太依賴)、Excel匯入出、創建語言時自動產生Resource檔案等，維護上可以套用同一個Resource開發上會相對快速。</p><p>首先第一步需要請各位先自行安裝ResXManager。</p><ul><li>ResXManger : <a href="https://marketplace.visualstudio.com/items?itemName=TomEnglert.ResXManager">請點選</a></li><li>Github : <a href="https://github.com/JontCont/dotnet_resXManager">請點選</a></li></ul><h2 id="創建專案"><a href="#創建專案" class="headerlink" title="創建專案"></a>創建專案</h2><p>此文章是使用 framework 4.7.2 ，目前筆者嘗試過一些版本可以參考Github資訊。創建完畢後在<code>Properties</code> 裡面新增 <code>resources.resx</code> 檔案，方便待會存放文字。</p><div class="note info flat"><h3 id="VB-NET"><a href="#VB-NET" class="headerlink" title="VB.NET"></a>VB.NET</h3><p>目前嘗試WebForm 版本初始預設位置會是在 App_GlobalResources ，會與C#使用方式不太同。</p></div><p><img src="/img/dotnet/cs/resXManager/Snipaste_2022-07-23_20-06-59.png"><br><img src="/img/dotnet/cs/resXManager/Snipaste_2022-07-23_20-09-19.png"></p><h2 id="加入Resource"><a href="#加入Resource" class="headerlink" title="加入Resource"></a>加入Resource</h2><p>為了讓resources有資料，第一個動作可以先把指定的文字去選取、<code>Move to Resource</code> 加入ResXManger當中，後面設定語言會比較方便一些。</p><p>剛才創建的resources會自動加入在裡面當中。<br><img src="/img/dotnet/cs/resXManager/Snipaste_2022-07-23_20-11-09.png"><br><img src="/img/dotnet/cs/resXManager/Snipaste_2022-07-23_20-13-19.png"></p><h2 id="創建類別"><a href="#創建類別" class="headerlink" title="創建類別"></a>創建類別</h2><p>這邊會透由一些管道去取得ResXManger內容，需要建立Function方便取得。我們創建一個 <code>LanguageHelper</code> 之後讓cshtml取的內容。</p><div class="note info flat"><h3 id="ResourceManager-設定"><a href="#ResourceManager-設定" class="headerlink" title="ResourceManager 設定"></a>ResourceManager 設定</h3><ol><li><code>dotnet_resXManager.Properties.ResourceLanguage</code>可以透由創建的resx檔點開取得。</li><li>CurrentUICulture 是Resource文化特性資源，如果要切換語言可以透由這東西去修改。</li></ol></div><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Web;</span><br><span class="line"><span class="keyword">using</span> System.Resources;</span><br><span class="line"><span class="keyword">using</span> dotnet_resXManager.Properties;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">dotnet_resXManager</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">LanguageHelper</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> ResourceManager _res &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">string</span> <span class="title">GetText</span>(<span class="params"><span class="built_in">string</span> name</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">string</span> lanString = <span class="string">&quot;en-US&quot;</span>;<span class="comment">//&quot;zh-TW&quot;;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//取得或設定 CultureInfo 物件，此物件代表 Resource Manager 用於執行階段查詢特定文化特性資源的目前使用者介面文化特性。</span></span><br><span class="line">            <span class="comment">//資源管理員用來在執行階段查詢特定文化特性資源的文化特性。</span></span><br><span class="line">            System.Threading.Thread.CurrentThread.CurrentUICulture =</span><br><span class="line">                <span class="keyword">new</span> System.Globalization.CultureInfo(lanString);</span><br><span class="line">            _res =</span><br><span class="line">                <span class="keyword">new</span> ResourceManager(<span class="string">&quot;dotnet_resXManager.Properties.ResourceLanguage&quot;</span>, <span class="keyword">typeof</span>(ResourceLanguage).Assembly);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> _res.GetString(name) ?? name;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>加入方式可以直接用 <code>GetText</code>取得想要的文字，這邊前置作業就完成了。</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">@&#123;</span><br><span class="line">    ViewBag.Title = <span class="string">&quot;Home Page&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;div <span class="keyword">class</span>=<span class="string">&quot;jumbotron&quot;</span>&gt;</span><br><span class="line">    &lt;h1&gt;ASP.NET&lt;/h1&gt;</span><br><span class="line">    &lt;p <span class="keyword">class</span>=<span class="string">&quot;lead&quot;</span>&gt;ASP.NET <span class="keyword">is</span> a free web framework <span class="keyword">for</span> building great Web sites <span class="keyword">and</span> Web applications <span class="keyword">using</span> HTML, CSS <span class="keyword">and</span> JavaScript.&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;&lt;a href=<span class="string">&quot;https://asp.net&quot;</span> <span class="keyword">class</span>=<span class="string">&quot;btn btn-primary btn-lg&quot;</span>&gt;@LanguageHelper.GetText(<span class="string">&quot;LearnMore&quot;</span>) &amp;raquo;&lt;/a&gt;&lt;/p&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/img/dotnet/cs/resXManager/Snipaste_2022-07-23_20-32-29.png"><br><img src="/img/dotnet/cs/resXManager/Snipaste_2022-07-23_20-33-36.png"></p><h2 id="新增resXManager項目"><a href="#新增resXManager項目" class="headerlink" title="新增resXManager項目"></a>新增resXManager項目</h2><p>我們可以直接用上方 [工具]&gt; [resXManager] 點選。如果要新增語言可以參考介面下方 Language 選項填寫，resXManager 使用方式跟Excel 很類似，如果自身有準備好excel可以嘗試用匯入方式。</p><p><img src="/img/dotnet/cs/resXManager/Snipaste_2022-07-23_20-34-30.png"><br><img src="/img/dotnet/cs/resXManager/Snipaste_2022-07-23_20-35-38.png"><br><img src="/img/dotnet/cs/resXManager/Snipaste_2022-07-23_20-35-52.png"></p><h2 id="結果"><a href="#結果" class="headerlink" title="結果"></a>結果</h2><h3 id="zh-TW"><a href="#zh-TW" class="headerlink" title="zh-TW"></a>zh-TW</h3><p><img src="/img/dotnet/cs/resXManager/Snipaste_2022-07-23_20-42-34.png"></p><h3 id="en-US"><a href="#en-US" class="headerlink" title="en-US"></a>en-US</h3><p><img src="/img/dotnet/cs/resXManager/Snipaste_2022-07-23_20-42-57.png"></p>]]></content>
      
      
      <categories>
          
          <category> 後端技術 </category>
          
          <category> C# </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VSC </tag>
            
            <tag> C# </tag>
            
            <tag> resXManager </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C# resXManager (二) - 操作方式</title>
      <link href="/2023/01/21/%E5%BE%8C%E7%AB%AF%E6%8A%80%E8%A1%93/CS/cs_14_resXManager_%E6%93%8D%E4%BD%9C%E6%96%B9%E5%BC%8F/"/>
      <url>/2023/01/21/%E5%BE%8C%E7%AB%AF%E6%8A%80%E8%A1%93/CS/cs_14_resXManager_%E6%93%8D%E4%BD%9C%E6%96%B9%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>上一章節已經說明完成使用方式，這次說明比較常用的幾的動作，分別為匯入、翻譯。</p><h1 id="匯入"><a href="#匯入" class="headerlink" title="匯入"></a>匯入</h1><p>使用前，不可能會一直使用這介面打資料在上面，這會大大影響執行效率，這時可以。<br>使用方式先到介面上面點選 Export All 將所有資料匯出即可。</p><h2 id="匯出範本"><a href="#匯出範本" class="headerlink" title="匯出範本"></a>匯出範本</h2><p>匯出有兩種模式，一種是指定方式匯出、另一種是全部匯出。<br><img src="/img/dotnet/cs/resXManager/Snipaste_2022-07-24_19-48-25.png"><br><img src="/img/dotnet/cs/resXManager/Snipaste_2022-07-24_10-35-50.png"></p><h2 id="加入項目並匯入"><a href="#加入項目並匯入" class="headerlink" title="加入項目並匯入"></a>加入項目並匯入</h2><p>在範本上面加入項目，目前加入項目為”匯入”。加入完畢後選擇 <code>Import</code>即可得到效果。</p><div class="note info flat"><h3 id="匯入沒效果"><a href="#匯入沒效果" class="headerlink" title="匯入沒效果"></a>匯入沒效果</h3><p>需要確認兩個地方。</p><ol><li>Project : 專案名稱。</li><li>File : Resource 位置，如果folder有數字記得要留意一下。</li></ol></div><p><img src="/img/dotnet/cs/resXManager/Snipaste_2022-07-24_10-37-21.png"><br><img src="/img/dotnet/cs/resXManager/Snipaste_2022-07-24_10-42-09.png"></p><h1 id="翻譯"><a href="#翻譯" class="headerlink" title="翻譯"></a>翻譯</h1><p>翻譯是resXManger 最大特色，使用上可能要自己評估這個字是否是你想要的文字。下方會使用四個項目進行轉換。</p><p><img src="/img/dotnet/cs/resXManager/Snipaste_2022-07-24_10-42-09.png"></p><h2 id="加入語言"><a href="#加入語言" class="headerlink" title="加入語言"></a>加入語言</h2><p>筆者使用日文來測試。<br><img src="/img/dotnet/cs/resXManager/Snipaste_2022-07-24_10-43-40.png"></p><h2 id="翻譯-轉換-文字"><a href="#翻譯-轉換-文字" class="headerlink" title="翻譯(轉換)文字"></a>翻譯(轉換)文字</h2><p>介面下方有介面選擇<code>Translate</code>，Source 使用來之前加入文字，Targets 是加入要翻譯的語言，Targets 內容是可以多選翻譯，翻譯必須要注意覆蓋的危機。</p><p>接下來，翻譯完畢的項目可以進行選擇是否更新，如果都翻得不錯可以直接用力按下<code>apply all </code> 按鈕。</p><p><img src="/img/dotnet/cs/resXManager/Snipaste_2022-07-24_10-44-02.png"><br><img src="/img/dotnet/cs/resXManager/Snipaste_2022-07-24_10-46-33.png"><br><img src="/img/dotnet/cs/resXManager/Snipaste_2022-07-24_10-47-16.png"></p><h2 id="結果"><a href="#結果" class="headerlink" title="結果"></a>結果</h2><p><img src="/img/dotnet/cs/resXManager/Snipaste_2022-07-24_10-49-07.png"></p>]]></content>
      
      
      <categories>
          
          <category> 後端技術 </category>
          
          <category> C# </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VSC </tag>
            
            <tag> C# </tag>
            
            <tag> resXManager </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C# 表單驗證 - FormsAuthentication 驗證自動登入</title>
      <link href="/2023/01/21/%E5%BE%8C%E7%AB%AF%E6%8A%80%E8%A1%93/CS/cs_06_FormsAuthentication%E5%AF%A6%E6%88%B0/"/>
      <url>/2023/01/21/%E5%BE%8C%E7%AB%AF%E6%8A%80%E8%A1%93/CS/cs_06_FormsAuthentication%E5%AF%A6%E6%88%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近需要開始撰寫 ASP.Net MVC，目前遇到Form驗證實例會有自動驗證登入，藉由這次機會來展現身手。</p><h1 id="FormsAuthenticationTicket"><a href="#FormsAuthenticationTicket" class="headerlink" title="FormsAuthenticationTicket"></a>FormsAuthenticationTicket</h1><p>功能主要紀錄使用者資訊，他會有一組Cookies暫存，內部值會經過加密編碼、解密。<br>如果第一次使用這個功能，千萬記住不要嘗試把密碼填入當中。</p><p>使用方式從 Client 點入登入網頁，這時Controllers可以進行驗證判斷，若有取得ticket成功會轉到首頁或是會員頁面;若驗證失敗則重新登入。</p><h2 id="Authorize-身分驗證"><a href="#Authorize-身分驗證" class="headerlink" title="Authorize 身分驗證"></a>Authorize 身分驗證</h2><p>確保不讓外界隨意登入，需要再 Controllers上方輸入 Authorize，如果沒有登入成功會有訊息提示。</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">namespace</span> <span class="title">ExampleForm.Controllers</span></span><br><span class="line">&#123;</span><br><span class="line">    [<span class="meta">Authorize()</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MainController</span> : <span class="title">Controller</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> View();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="WebConfig-設定"><a href="#WebConfig-設定" class="headerlink" title="WebConfig 設定"></a>WebConfig 設定</h2><p>這邊需要加入錯誤導向頁面設定。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;system.web&gt;</span><br><span class="line">    &lt;authentication mode=&quot;Forms&quot;&gt;</span><br><span class="line">        &lt;forms name=&quot;Demo_Site&quot; loginUrl=&quot;Login/Index&quot; cookieless=&quot;UseCookies&quot; timeout=&quot;2880&quot;/&gt;</span><br><span class="line">    &lt;/authentication&gt;</span><br><span class="line">&lt;/system.web&gt;</span><br></pre></td></tr></table></figure><h2 id="FormsAuthenticationTicket-1"><a href="#FormsAuthenticationTicket-1" class="headerlink" title="FormsAuthenticationTicket"></a>FormsAuthenticationTicket</h2><p>假設Login進去的時候，我會用下方方式存取一遍。UserData 則為存取相關資訊，例如 : email、電話等，通常存放不太重要的資料。</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Set_FormAuthenticationUser</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//登入成功 轉頁</span></span><br><span class="line">    FormsAuthenticationTicket  ticket = <span class="keyword">new</span> FormsAuthenticationTicket(</span><br><span class="line">    version: <span class="number">1</span>,</span><br><span class="line">    name: pUsrCode.ToString(), <span class="comment">//可以放使用者Id</span></span><br><span class="line">    issueDate: DateTime.UtcNow,<span class="comment">//現在UTC時間</span></span><br><span class="line">    expiration: DateTime.UtcNow.AddMinutes(<span class="number">30</span>),<span class="comment">//Cookie有效時間=現在時間往後+30分鐘</span></span><br><span class="line">    isPersistent: <span class="literal">true</span>,<span class="comment">// 是否要記住我 true or false</span></span><br><span class="line">    userData: <span class="string">&quot;&quot;</span>, <span class="comment">//存放資訊</span></span><br><span class="line">    cookiePath: FormsAuthentication.FormsCookiePath);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> encryptedTicket = FormsAuthentication.Encrypt(ticket); <span class="comment">//把驗證的表單加密</span></span><br><span class="line">    <span class="keyword">var</span> cookie = <span class="keyword">new</span> HttpCookie(FormsAuthentication.FormsCookieName, encryptedTicket);</span><br><span class="line">    Response.Cookies.Add(cookie);</span><br><span class="line">    Response.Cookies.Add(<span class="keyword">new</span> HttpCookie(<span class="string">&quot;usr_code&quot;</span>, pUsrCode));</span><br><span class="line"></span><br><span class="line">    <span class="comment">//會直接影響 userData 值</span></span><br><span class="line">    <span class="comment">//FormsAuthentication.RedirectFromLoginPage(pUsrCode, false);</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="驗證-Reload-Page"><a href="#驗證-Reload-Page" class="headerlink" title="驗證 (Reload Page)"></a>驗證 (Reload Page)</h2><p>減少登入次數，大多都會有記憶天數(7天、14天)，下方直接展示使用方式。<br>[Demo_Site] 是指Config設定，form標示的名稱。</p><p>這function使用概念，驗證是否有這角色，如果各位 FormsAuthenticationTicket 的 Name 用 UID 處理可以不用轉Json方式取得資料。</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="built_in">bool</span> <span class="title">IsFormAuthrizeUser</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">bool</span> isFormAuthrizeUser = <span class="literal">false</span>;</span><br><span class="line">    <span class="comment">//搜尋是否有 Demo_Site</span></span><br><span class="line">    <span class="keyword">if</span> (Request.Cookies.AllKeys.Where(x =&gt; x == <span class="string">&quot;Demo_Site&quot;</span>).Any())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//解碼(方便確認資料、資訊)</span></span><br><span class="line">        <span class="keyword">var</span> decr = FormsAuthentication.Decrypt(Request.Cookies[<span class="string">&quot;Demo_Site&quot;</span>].Value);</span><br><span class="line">        <span class="comment">//轉成 json 依據需求</span></span><br><span class="line">        <span class="built_in">string</span> json = decr.UserData;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">string</span>.IsNullOrEmpty(json))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//轉成DataTable</span></span><br><span class="line">            DataTable resultData = JsonConvert.DeserializeObject&lt;DataTable&gt;(<span class="string">$&quot;[<span class="subst">&#123;json&#125;</span>]&quot;</span>);</span><br><span class="line">            Set_UserBasic();</span><br><span class="line">            isFormAuthrizeUser = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> isFormAuthrizeUser;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="登出-Log-Out"><a href="#登出-Log-Out" class="headerlink" title="登出 (Log Out)"></a>登出 (Log Out)</h2><p>登出相對簡單，只需要使用<code> FormsAuthentication.SignOut()</code> 。提醒 : 記得要回到Login頁面喔~!</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ActionResult <span class="title">Index</span>()</span>&#123;</span><br><span class="line">    FormsAuthentication.SignOut();</span><br><span class="line">    <span class="keyword">return</span> Redirect(<span class="string">&quot;/Login&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="參考文件"><a href="#參考文件" class="headerlink" title="參考文件"></a>參考文件</h1><ol><li><a href="http://yu0410aries.blogspot.com/2018/03/formsauthenticationticket.html">ASP.NET MVC FormsAuthenticationTicket 驗證</a></li><li><a href="https://stackoverflow.com/questions/16594905/userdata-property-of-formsauthenticationticket-is-empty-despite-being-set">UserData property of FormsAuthenticationTicket is empty despite being set</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 後端技術 </category>
          
          <category> C# </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
            <tag> Form </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C# Net5 MVC - 使用 VSC</title>
      <link href="/2023/01/21/%E5%BE%8C%E7%AB%AF%E6%8A%80%E8%A1%93/CS/cs_07_dotnetMvcOnVSC/"/>
      <url>/2023/01/21/%E5%BE%8C%E7%AB%AF%E6%8A%80%E8%A1%93/CS/cs_07_dotnetMvcOnVSC/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>近期太多事情沒有時間創建、撰寫文件，分享近期為甚麼開始使用 <em>VSC ( Visual Studio Code )</em> 原因。<br>對於剛進去軟體公司的新人都會安裝環境，通常會用到VS 開發工具進行撰寫，衍生舊版本與新版本使用差異以及便捷度。如果使用環境使用CLI創建可能帶來一些便捷，這當然不是主要原因。</p><p>VSC 不是開發軟體需要畫區分，他的優勢上帶來不少。例如: 輕量、執行、快捷鍵、豐富外掛等，減少安裝時間。</p><hr><h1 id="使用VSC"><a href="#使用VSC" class="headerlink" title="使用VSC"></a>使用VSC</h1><p>不論是 VS2019、VS2022之類都很清楚有所謂版本，只要開發版本有落差就會需要學習時間。<strong>本章節會使用.net5.0</strong>。</p><h2 id="創建專案"><a href="#創建專案" class="headerlink" title="創建專案"></a>創建專案</h2><p>打開 VSC 輸入命令字元視窗 (快捷鍵 : <code>ctrl+ `</code> )。<br>因為要使用 net5.0 所以使用下方指令， -f : force 、 -o : output name。</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dotnet new mvc -f net5.0 -o dotnetMVC_itextsharp</span><br></pre></td></tr></table></figure><p>版本有很多種，可以參考下方網址可以知道使用方式。<br><a href="https://docs.microsoft.com/en-us/dotnet/core/tools/dotnet-new#console">https://docs.microsoft.com/en-us/dotnet/core/tools/dotnet-new#console</a></p><h3 id="指令參考"><a href="#指令參考" class="headerlink" title="指令參考"></a>指令參考</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dotnet new &lt;TEMPLATE&gt; [--dry-run] [--force] [-lang|--language &#123;&quot;C#&quot;|&quot;F#&quot;|VB&#125;]</span><br><span class="line">    [-n|--name &lt;OUTPUT_NAME&gt;] [--no-update-check] [-o|--output &lt;OUTPUT_DIRECTORY&gt;] [Template options]</span><br><span class="line"></span><br><span class="line">dotnet new -h|--help</span><br></pre></td></tr></table></figure><h2 id="套件"><a href="#套件" class="headerlink" title="套件"></a>套件</h2><h3 id="新增"><a href="#新增" class="headerlink" title="新增"></a>新增</h3><p>網站 : <a href="https://www.nuget.org/">Nuget</a><br>Nuget 是目前最常使用的package，使用方式也相對簡單。<br><img src="/img/dotnet/cs/cs_vsc_002.png"></p><p>選擇其中你要的package ，按下你目前要使用的Command進行使用即可。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dotnet add dotnetMVC_itextsharp package iTextSharp --version 5.5.13.3</span><br></pre></td></tr></table></figure><p><img src="/img/dotnet/cs/cs_vsc_001.png"></p><h3 id="移除"><a href="#移除" class="headerlink" title="移除"></a>移除</h3><p>移除套件可以參考下方指令 。</p><ol><li>Package Manager<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dotnet remove package iTextSharp</span><br></pre></td></tr></table></figure></li><li>.NET CLI<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uninstall-package iTextSharp</span><br></pre></td></tr></table></figure></li></ol><h2 id="檢視方式"><a href="#檢視方式" class="headerlink" title="檢視方式"></a>檢視方式</h2><p>[參閱]使用檔案監看員開發 ASP.NET Core 應用程式<br><a href="https://docs.microsoft.com/zh-tw/aspnet/core/tutorials/dotnet-watch?view=aspnetcore-6.0">https://docs.microsoft.com/zh-tw/aspnet/core/tutorials/dotnet-watch?view=aspnetcore-6.0</a></p><p>NET Core 近期更新多一個指令 <code> dotnet watch</code> 。這優點是可以在處理階段時可以修改，並呈現畫面效果。<br>之前開發時候都是使用Debugger 或是 Compiler影響很多行為上不便，各位有空可以嘗試。</p><h2 id="發行"><a href="#發行" class="headerlink" title="發行"></a>發行</h2><p>[參閱]dotnet publish<br><a href="https://docs.microsoft.com/zh-tw/dotnet/core/tools/dotnet-publish">https://docs.microsoft.com/zh-tw/dotnet/core/tools/dotnet-publish</a></p><h3 id="指令參考-1"><a href="#指令參考-1" class="headerlink" title="指令參考"></a>指令參考</h3><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">dotnet publish [&lt;PROJECT&gt;|&lt;SOLUTION&gt;] [-a|--arch &lt;ARCHITECTURE&gt;]</span><br><span class="line">    [-c|--configuration &lt;CONFIGURATION&gt;]</span><br><span class="line">    [-f|--framework &lt;FRAMEWORK&gt;] [--force] [--interactive]</span><br><span class="line">    [--manifest &lt;PATH_TO_MANIFEST_FILE&gt;] [--no-build] [--no-dependencies]</span><br><span class="line">    [--no-restore] [--nologo] [-o|--output &lt;OUTPUT_DIRECTORY&gt;]</span><br><span class="line">    [--os &lt;OS&gt;] [-r|--runtime &lt;RUNTIME_IDENTIFIER&gt;]</span><br><span class="line">    [--self-contained [true|false]] [--no-self-contained]</span><br><span class="line">     [-s|--source &lt;SOURCE&gt;] [-v|--verbosity &lt;LEVEL&gt;]</span><br><span class="line">    [--version-suffix &lt;VERSION_SUFFIX&gt;]</span><br><span class="line"></span><br><span class="line">dotnet publish -h|--help</span><br></pre></td></tr></table></figure><p>這邊用最簡單方式呈現如何發行，這邊要確認是否有沒有到專案底下。下方只用output即可非常簡單。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dotnet publish -o &quot;c:/core_publish/&quot;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 後端技術 </category>
          
          <category> C# </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VSC </tag>
            
            <tag> C# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C# itextsharp 套件 - 創建PDF 神器</title>
      <link href="/2023/01/21/%E5%BE%8C%E7%AB%AF%E6%8A%80%E8%A1%93/CS/cs_08_itextsharp%E5%A5%97%E4%BB%B6_%E5%89%B5%E5%BB%BAPDF%E7%A5%9E%E5%99%A8/"/>
      <url>/2023/01/21/%E5%BE%8C%E7%AB%AF%E6%8A%80%E8%A1%93/CS/cs_08_itextsharp%E5%A5%97%E4%BB%B6_%E5%89%B5%E5%BB%BAPDF%E7%A5%9E%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>PDF 不論甚麼場合都需要使用，包含公司都會需要有PDF轉出轉入的工具，這邊使用PDF轉檔進行作業。</p><h1 id="iTextSharp"><a href="#iTextSharp" class="headerlink" title="iTextSharp"></a>iTextSharp</h1><p>本函式庫原名是iText，主要是支援Java程式語言。之後針對Microsoft .NET C # 做了一個版本。</p><ul><li>Github 範例 : <a href="https://github.com/JontCont/dotnetCore_iTextSharp">點擊我</a></li></ul><h2 id="一、-初始設定"><a href="#一、-初始設定" class="headerlink" title="一、 初始設定"></a>一、 初始設定</h2><p>製作方式需要新增 <code>Document </code>內部內容都會以Document 才新增、寫入。<br>以下就是初始化設定。</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//設定PageSize</span></span><br><span class="line"><span class="comment">//Margin: left, right, top, bottom</span></span><br><span class="line">Document doc = <span class="keyword">new</span> Document(PageSize.A4, <span class="number">20</span>, <span class="number">20</span>, <span class="number">50</span>, <span class="number">50</span>); </span><br><span class="line"></span><br><span class="line"><span class="comment">//設定 Stream</span></span><br><span class="line">MemoryStream ms = <span class="keyword">new</span> MemoryStream();</span><br><span class="line">PdfWriter.GetInstance(doc, ms).CloseStream = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">doc.Open();</span><br><span class="line"><span class="comment">//內容</span></span><br><span class="line">doc.Close();</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>如果少掉 <code>CloseStream</code> 會遇到 <code>cannot access a closed Stream</code>問題，所以必須要小心。</p><h2 id="二、-設定文字內容"><a href="#二、-設定文字內容" class="headerlink" title="二、 設定文字內容"></a>二、 設定文字內容</h2><p>一般輸出文字會需要有標題、內容，這便需要使用 Paragraph 儲存文字。以下使用方式。</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//註冊Encode</span></span><br><span class="line">Encoding.RegisterProvider(CodePagesEncodingProvider.Instance);</span><br><span class="line"></span><br><span class="line"><span class="comment">//設定 Font</span></span><br><span class="line">BaseFont bfChinese = BaseFont.CreateFont(_hostEnvironment.WebRootPath + <span class="string">&quot;\\font\\KAIU.TTF&quot;</span>, BaseFont.IDENTITY_H, BaseFont.EMBEDDED);</span><br><span class="line"><span class="comment">//設定 Font (給粗體用)</span></span><br><span class="line">BaseFont chBaseFont = BaseFont.CreateFont(_hostEnvironment.WebRootPath + <span class="string">&quot;\\font\\KAIU.TTF&quot;</span>, BaseFont.IDENTITY_H, BaseFont.NOT_EMBEDDED);</span><br><span class="line">Font ChFont = <span class="keyword">new</span> Font(bfChinese, <span class="number">12</span>);</span><br></pre></td></tr></table></figure><p>iTextSharp 提供兩個類別 <code>  Paragraph</code> 、<code> Chunk</code>，如果要單獨設定Font內容也可以。</p><h3 id="2-1-Font"><a href="#2-1-Font" class="headerlink" title="2-1 Font"></a>2-1 Font</h3><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//粗體</span></span><br><span class="line">Font CbFont = <span class="keyword">new</span> Font(bfChinese, <span class="number">12</span>,<span class="number">1</span>);</span><br><span class="line"><span class="comment">//斜體</span></span><br><span class="line">Font CbFont = <span class="keyword">new</span> Font(bfChinese, <span class="number">12</span>,<span class="number">2</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2-2-Paragraph"><a href="#2-2-Paragraph" class="headerlink" title="2-2 Paragraph"></a>2-2 Paragraph</h3><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Paragraph title = <span class="keyword">new</span> Paragraph(<span class="string">&quot;This Title Area&quot;</span>,ChFont);</span><br><span class="line"></span><br><span class="line"><span class="comment">//字行位置</span></span><br><span class="line">title.Alignment = Element.ALIGN_CENTER;</span><br><span class="line"><span class="comment">//行距</span></span><br><span class="line">title.Leading = <span class="number">10</span>;</span><br><span class="line"><span class="comment">//上下空白</span></span><br><span class="line">title.SpacingAfter =<span class="number">50</span>;</span><br><span class="line">title.SpacingBefore =<span class="number">50</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//左右</span></span><br><span class="line">title.IndentationLeft=<span class="number">50</span>;</span><br><span class="line">title.IndentationRight=<span class="number">50</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//第一個空白</span></span><br><span class="line">title.FirstLineIndent =<span class="number">50</span>;</span><br></pre></td></tr></table></figure><h3 id="2-3-Chunk"><a href="#2-3-Chunk" class="headerlink" title="2-3 Chunk"></a>2-3 Chunk</h3><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Chunk chunk = <span class="keyword">new</span> Chunk(<span class="string">&quot;測試底線文字&quot;</span>, CbFont);</span><br><span class="line">chunk.SetUnderline(<span class="number">0.2f</span>, <span class="number">-2f</span>);</span><br><span class="line">doc.Add(chunk);</span><br></pre></td></tr></table></figure><h3 id="2-4-Error-‘windows-1252’-is-not-a-supported-encoding-name"><a href="#2-4-Error-‘windows-1252’-is-not-a-supported-encoding-name" class="headerlink" title="2-4 Error : ‘windows-1252’ is not a supported encoding name."></a>2-4 Error : ‘windows-1252’ is not a supported encoding name.</h3><p>[System.Text.Encoding.CodePages v5.0.0 ] : <a href="https://www.nuget.org/packages/System.Text.Encoding.CodePages/5.0.0">https://www.nuget.org/packages/System.Text.Encoding.CodePages/5.0.0</a></p><h2 id="三、-設定表格"><a href="#三、-設定表格" class="headerlink" title="三、 設定表格"></a>三、 設定表格</h2><p>創建表格是常常需要再Pdf 去設定，如何去使用這個必須要先知道你要幾個table欄位。</p><h3 id="3-1-一般表格"><a href="#3-1-一般表格" class="headerlink" title="3-1 一般表格"></a>3-1 一般表格</h3><p>下方用很簡單範例執行。</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//創建3行</span></span><br><span class="line">PdfPTable pt = <span class="keyword">new</span> PdfPTable(<span class="number">3</span>);</span><br><span class="line">pt.AddCell(<span class="keyword">new</span> PdfPCell(<span class="keyword">new</span> Phrase(<span class="string">$&quot; 第三欄 &quot;</span>,ChFont))&#123; Colspan=<span class="number">3</span> &#125;);</span><br><span class="line"><span class="comment">//產生 table</span></span><br><span class="line"><span class="keyword">for</span>(<span class="built_in">int</span> i = <span class="number">1</span> ; i &lt;= <span class="number">3</span>;++i)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="built_in">int</span> j = <span class="number">1</span> ; j &lt;= <span class="number">3</span>;++j)&#123;</span><br><span class="line">        Phrase text =  <span class="keyword">new</span> Phrase(<span class="string">$&quot;line<span class="subst">&#123;i&#125;</span>,cell<span class="subst">&#123;j&#125;</span>&quot;</span>);</span><br><span class="line">        PdfPCell cell= <span class="keyword">new</span> PdfPCell(text);</span><br><span class="line">        pt.AddCell(cell);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">doc.Add(<span class="keyword">new</span> Paragraph()&#123;pt&#125;);</span><br></pre></td></tr></table></figure><p>使用概念:</p><ol><li>Phrase : 儲存文字，如果有中文字眼記得要加入剛才的<code>Font</code>。</li><li>PdfPCell : 這邊是儲存cell方式(單欄)。後面可以細項設定，目前不用設定時候就會比較單存一點。</li><li>AddCell : 加入單欄內容。</li></ol><p><img src="/img/dotnet/cs/cs_itext_001.png"></p><h3 id="3-2-客製表格"><a href="#3-2-客製表格" class="headerlink" title="3-2 客製表格"></a>3-2 客製表格</h3><p>如果要自定義方式，可以參考下方。設定table 一定會用到</p><ol><li>Colspan : 行合併 </li><li>Rowspan : 列合併</li></ol><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">PdfPTable pt = <span class="keyword">new</span> PdfPTable(<span class="number">3</span>);</span><br><span class="line">pt.AddCell(<span class="keyword">new</span> PdfPCell(<span class="keyword">new</span> Phrase(<span class="string">$&quot; 所有第三欄合併 &quot;</span>,ChFont))&#123; Colspan=<span class="number">3</span> &#125;);</span><br><span class="line"><span class="keyword">for</span>(<span class="built_in">int</span> i = <span class="number">1</span> ; i &lt;= <span class="number">3</span>;++i)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="built_in">int</span> j = <span class="number">1</span> ; j &lt;= <span class="number">3</span>;++j)&#123;</span><br><span class="line">        Phrase text =  <span class="keyword">new</span> Phrase(<span class="string">$&quot;line<span class="subst">&#123;i&#125;</span>,cell<span class="subst">&#123;j&#125;</span>&quot;</span>);</span><br><span class="line">        PdfPCell cell= <span class="keyword">new</span> PdfPCell(text);</span><br><span class="line">        <span class="comment">//防止有重複設定</span></span><br><span class="line">        <span class="keyword">if</span>(i != <span class="number">1</span> &amp;&amp; j == <span class="number">3</span> ) &#123; <span class="keyword">continue</span>;&#125;</span><br><span class="line">        <span class="comment">//第三欄全部合併</span></span><br><span class="line">        <span class="keyword">if</span>(j == <span class="number">3</span> )&#123;</span><br><span class="line">            pt.AddCell(<span class="keyword">new</span> PdfPCell(<span class="keyword">new</span> Phrase(<span class="string">$&quot;cell<span class="subst">&#123;j&#125;</span>&quot;</span>))&#123; Rowspan=<span class="number">3</span> &#125;);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//font</span></span><br><span class="line">        pt.AddCell(cell);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">doc.Add(<span class="keyword">new</span> Paragraph()&#123;pt&#125;);</span><br></pre></td></tr></table></figure><p><img src="/img/dotnet/cs/cs_itext_002.png"></p><h3 id="3-3-使用建議"><a href="#3-3-使用建議" class="headerlink" title="3-3 使用建議"></a>3-3 使用建議</h3><p>如果第一次使用可以使用下方方式，一行一行創建可以知道使用方式。按照上方範例呈現方式會像下方一樣，概念是合併不能出現下一行，不然就會有多個 Rows畫面。</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">pt.AddCell(<span class="keyword">new</span> PdfPCell(<span class="keyword">new</span> Phrase(<span class="string">$&quot;line 1,cell 1&quot;</span>)));</span><br><span class="line">pt.AddCell(<span class="keyword">new</span> PdfPCell(<span class="keyword">new</span> Phrase(<span class="string">$&quot;line 1,cell 2&quot;</span>)));</span><br><span class="line">pt.AddCell(<span class="keyword">new</span> PdfPCell(<span class="keyword">new</span> Phrase(<span class="string">$&quot;line 1,cell 3&quot;</span>))&#123; Rowspan=<span class="number">3</span> &#125;);</span><br><span class="line"></span><br><span class="line">pt.AddCell(<span class="keyword">new</span> PdfPCell(<span class="keyword">new</span> Phrase(<span class="string">$&quot;line 2,cell 1&quot;</span>)));</span><br><span class="line">pt.AddCell(<span class="keyword">new</span> PdfPCell(<span class="keyword">new</span> Phrase(<span class="string">$&quot;line 2,cell 2&quot;</span>)));</span><br><span class="line"></span><br><span class="line">pt.AddCell(<span class="keyword">new</span> PdfPCell(<span class="keyword">new</span> Phrase(<span class="string">$&quot;line 3,cell 1&quot;</span>)));</span><br><span class="line">pt.AddCell(<span class="keyword">new</span> PdfPCell(<span class="keyword">new</span> Phrase(<span class="string">$&quot;line 3,cell 2&quot;</span>)));</span><br></pre></td></tr></table></figure><h2 id="四、-預覽效果"><a href="#四、-預覽效果" class="headerlink" title="四、 預覽效果"></a>四、 預覽效果</h2><p>下方為預覽效果，僅供參閱。</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> IActionResult <span class="title">Preview</span>()</span>&#123;</span><br><span class="line">  Document doc = <span class="keyword">new</span> Document(PageSize.A4);</span><br><span class="line">  MemoryStream ms = <span class="keyword">new</span> MemoryStream();</span><br><span class="line">  PdfWriter.GetInstance(doc, ms).CloseStream = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">  doc.Open();</span><br><span class="line">  ...</span><br><span class="line">  ...</span><br><span class="line">  doc.Close();</span><br><span class="line">          </span><br><span class="line">  ms.Seek(<span class="number">0</span>, SeekOrigin.Begin);</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> FileStreamResult(ms, <span class="string">&quot;application/pdf&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h1><p>使用 iTextSharp 就到這邊，目前遇到只有這幾些，使用 tables 還沒搞清楚先後順序，可能會卡非常久。</p>]]></content>
      
      
      <categories>
          
          <category> 後端技術 </category>
          
          <category> C# </category>
          
          <category> package </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VSC </tag>
            
            <tag> C# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C# .Net Core SignalR (1)- SignalR 使用方式</title>
      <link href="/2023/01/21/%E5%BE%8C%E7%AB%AF%E6%8A%80%E8%A1%93/CS/core/cs_11_SignalR/"/>
      <url>/2023/01/21/%E5%BE%8C%E7%AB%AF%E6%8A%80%E8%A1%93/CS/core/cs_11_SignalR/</url>
      
        <content type="html"><![CDATA[<h1 id="SignalR"><a href="#SignalR" class="headerlink" title="SignalR"></a>SignalR</h1><p>SignalRASP.NET Core是開放原始碼程式庫，可簡化將即時 Web 功能新增至應用程式。 即時 Web 功能可讓伺服器端程式碼立即將內容推送至用戶端。</p><p>SignalR 提供 API 來建立伺服器對用戶端 遠端程序呼叫， (RPC) 。 RPC 會從伺服器端 .NET Core 程式碼叫用用戶端上的函式。 有數個 支援的平臺，每個平臺都有各自的用戶端 SDK。 因此，RPC 呼叫所叫用的程式設計語言會有所不同。<br>適合的候選項目 SignalR ：</p><ul><li>需要經常從伺服器取得更新的應用程式。 例如遊戲、社交網路、投票、拍賣、地圖和 GPS 應用程式。</li><li>儀表板和監視應用程式。 範例包括公司儀表板、即時銷售更新或旅行警示。</li><li>共同作業應用程式。 共同作業應用程式的範例包括白板應用程式和小組會議軟體。</li><li>需要通知的應用程式。 社交網路、電子郵件、交談、遊戲、旅行警示和其他使用通- 知的應用程式。</li></ul><p>以下是 ASP.NET Core 的 SignalR 一些功能：</p><ul><li>自動處理連線管理。</li><li>同時將訊息傳送給所有連線的用戶端。 例如，聊天室。</li><li>將訊息傳送給特定用戶端或用戶端群組。</li><li>調整以處理增加的流量。</li></ul><h2 id="傳輸"><a href="#傳輸" class="headerlink" title="傳輸"></a>傳輸</h2><p>SignalR 支援下列技術來處理即時通訊 </p><ul><li>WebSocket</li><li>Sever-Sent 事件</li><li>長輪詢<br>SignalR 會自動選擇伺服器和用戶端功能內的最佳傳輸方法。</li></ul><h2 id="中樞"><a href="#中樞" class="headerlink" title="中樞"></a>中樞</h2><p>SignalR 會使用 中樞 在用戶端和伺服器之間進行通訊。中樞會傳送包含用戶端方法名稱和參數的訊息來呼叫用戶端程式代碼。 以方法參數方式傳送的物件會使用已設定的通訊協定還原序列化。 用戶端會嘗試將名稱與用戶端程式代碼中的方法相符。 當用戶端找到相符專案時，它會呼叫 方法，並將其傳遞至還原序列化參數資料</p><h1 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h1><h2 id="使用工具"><a href="#使用工具" class="headerlink" title="使用工具"></a>使用工具</h2><ul><li>Visual Studio Code : <a href="https://code.visualstudio.com/">請點選</a></li></ul><h2 id="創建專案"><a href="#創建專案" class="headerlink" title="創建專案"></a>創建專案</h2><p>創建專案可以使用下方語法，目前創建出來會是 net6.0若不太習慣可以使用 <code>-framework  &quot;net5.0&quot; </code>。</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dotnet new mvc</span><br><span class="line">dotnet run</span><br></pre></td></tr></table></figure><h2 id="創建Hub"><a href="#創建Hub" class="headerlink" title="創建Hub"></a>創建Hub</h2><p>創建Hub位置以及ChatHub.cs，內容請參考下方程式碼。</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> Microsoft.AspNetCore.SignalR;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">SignalR.Hubs</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ChatHub</span> : <span class="title">Hub</span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task <span class="title">SendMessage</span>(<span class="params"><span class="built_in">string</span> user, <span class="built_in">string</span> message</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">await</span> Clients.All.SendAsync(<span class="string">&quot;ReceiveMessage&quot;</span>, user, message);</span><br><span class="line">        &#125; <span class="comment">// SendMessage</span></span><br><span class="line">    &#125;<span class="comment">//class : ChartHub    </span></span><br><span class="line">&#125;<span class="comment">// namespace : SignalRChat</span></span><br></pre></td></tr></table></figure><p><img src="/image/Snipaste_2022-07-19_21-28-02.png"></p><h2 id="註冊SignalR服務"><a href="#註冊SignalR服務" class="headerlink" title="註冊SignalR服務"></a>註冊SignalR服務</h2><p>以下註冊方式提供參考。</p><h3 id="net6-0"><a href="#net6-0" class="headerlink" title="net6.0"></a>net6.0</h3><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">builder.Services.AddSignalR();</span><br><span class="line"></span><br><span class="line">app.MapHub&lt;ChatHub&gt;(<span class="string">&quot;/chathub&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="net5-x"><a href="#net5-x" class="headerlink" title="net5.x"></a>net5.x</h3><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">services.AddSignalR();</span><br><span class="line">app.UseEndpoints(endpoints =&gt;</span><br><span class="line">&#123;</span><br><span class="line">    endpoints.MapControllers();</span><br><span class="line">    endpoints.MapHub&lt;SampleHub&gt;(<span class="string">&quot;/chathub&quot;</span>); <span class="comment">//加入這行 代表連接SignalR的路由與配對的Hub</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><img src="/image/Snipaste_2022-07-19_21-34-47.png"></p><h2 id="創建html-頁面環境"><a href="#創建html-頁面環境" class="headerlink" title="創建html 頁面環境"></a>創建html 頁面環境</h2><p>加入後，就會彈出alert 視窗，後續再試試如何轉變成留言板。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">@&#123;</span><br><span class="line">    ViewData[&quot;Title&quot;] = &quot;Home Page&quot;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/6.0.5/signalr.min.js&quot;</span> <span class="attr">integrity</span>=<span class="string">&quot;sha512-Wj6cUe+56vJ4FtfeF4QqPHy4VGO9gZ2iU8GFlLRjawhx1f4sW3BezJLU1ewaZl3bZV8iya0EJOmRY5SD9XTwvw==&quot;</span> <span class="attr">crossorigin</span>=<span class="string">&quot;anonymous&quot;</span> <span class="attr">referrerpolicy</span>=<span class="string">&quot;no-referrer&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> connection = <span class="keyword">new</span> signalR.<span class="title class_">HubConnectionBuilder</span>().<span class="title function_">withUrl</span>(<span class="string">&quot;/chatHub&quot;</span>).<span class="title function_">build</span>();</span></span><br><span class="line"><span class="language-javascript">    connection.<span class="title function_">on</span>(<span class="string">&quot;ReceiveMessage&quot;</span>,<span class="keyword">function</span>(<span class="params">user,message</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">alert</span>(<span class="string">`Hi <span class="subst">$&#123;user&#125;</span>  , you said : <span class="subst">$&#123;message&#125;</span>`</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    connection.<span class="title function_">start</span>().<span class="title function_">then</span>(<span class="function">()=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript">        connection.<span class="title function_">invoke</span>(<span class="string">&quot;SendMessage&quot;</span>,<span class="string">&quot;Cons&quot;</span>,<span class="string">&quot;Hello World - 1  !!&quot;</span>).<span class="title function_">catch</span>(<span class="function">(<span class="params">err</span>)=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> <span class="variable language_">console</span>.<span class="title function_">error</span>(err.<span class="title function_">toString</span>());</span></span><br><span class="line"><span class="language-javascript">        &#125;);</span></span><br><span class="line"><span class="language-javascript">    &#125;).<span class="title function_">catch</span>(<span class="function">(<span class="params">err</span>)=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> <span class="variable language_">console</span>.<span class="title function_">error</span>(err.<span class="title function_">toString</span>());</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/img/dotnet/cs/signalr/Snipaste_2022-07-19_21-48-59.png"></p>]]></content>
      
      
      <categories>
          
          <category> 後端技術 </category>
          
          <category> C# </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VSC </tag>
            
            <tag> C# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C# .Net Core SignalR (2) - 留言板</title>
      <link href="/2023/01/21/%E5%BE%8C%E7%AB%AF%E6%8A%80%E8%A1%93/CS/core/cs_12_SignalR/"/>
      <url>/2023/01/21/%E5%BE%8C%E7%AB%AF%E6%8A%80%E8%A1%93/CS/core/cs_12_SignalR/</url>
      
        <content type="html"><![CDATA[<h1 id="Hub-類別"><a href="#Hub-類別" class="headerlink" title="Hub 類別"></a><a href="https://docs.microsoft.com/zh-tw/dotnet/api/microsoft.aspnetcore.signalr.hub?view=aspnetcore-6.0">Hub 類別</a></h1><h2 id="屬性"><a href="#屬性" class="headerlink" title="屬性"></a>屬性</h2><p>種類有以下三個。</p><ol><li>Clients</li></ol><p></p><ul><li>All : 在所有連線的用戶端上呼叫方法</li><li>Caller : 在客戶端上呼叫一個呼叫了hub方法的方法</li><li>Others : 在所有連接的客戶端上呼叫方法，但呼叫該方法的客戶端除外</li></ul><ol start="2"><li>Context</li><li>Groups</li></ol><p></p><p>上面列表中的每個屬性或方法的回傳值都提供呼叫SendAsync方法。SendAsync可以指定要呼叫用戶端的方法名稱，並傳入參數。</p><h1 id="留言板"><a href="#留言板" class="headerlink" title="留言板"></a>留言板</h1><h2 id="html"><a href="#html" class="headerlink" title="html"></a>html</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span><span class="symbol">&amp;nbsp;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-2&quot;</span>&gt;</span>User<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-4&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;userInput&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-2&quot;</span>&gt;</span>Message<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-4&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;messageInput&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span><span class="symbol">&amp;nbsp;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-6&quot;</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">id</span>=<span class="string">&quot;sendButton&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Send Message&quot;</span> /&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-12&quot;</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-6&quot;</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">&quot;messagesList&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/6.0.5/signalr.min.js&quot;</span> integrity=<span class="string">&quot;sha512-Wj6cUe+56vJ4FtfeF4QqPHy4VGO9gZ2iU8GFlLRjawhx1f4sW3BezJLU1ewaZl3bZV8iya0EJOmRY5SD9XTwvw==&quot;</span> crossorigin=<span class="string">&quot;anonymous&quot;</span> referrerpolicy=<span class="string">&quot;no-referrer&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">var</span> connection = <span class="keyword">new</span> signalR.<span class="title class_">HubConnectionBuilder</span>().<span class="title function_">withUrl</span>(<span class="string">&quot;/chatHub&quot;</span>).<span class="title function_">build</span>();</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    connection.<span class="title function_">on</span>(<span class="string">&quot;ReceiveMessage&quot;</span>,<span class="keyword">function</span>(<span class="params">user,message</span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">         <span class="keyword">var</span> li = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;li&quot;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;messagesList&quot;</span>).<span class="title function_">appendChild</span>(li);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// We can assign user-supplied strings to an element&#x27;s textContent because it</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// is not interpreted as markup. If you&#x27;re assigning in any other way, you </span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// should be aware of possible script injection concerns.</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        li.<span class="property">textContent</span> = <span class="string">`<span class="subst">$&#123;user&#125;</span> : <span class="subst">$&#123;message&#125;</span>`</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    connection.<span class="title function_">start</span>().<span class="title function_">then</span>(<span class="function">()=&gt;</span>&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;sendButton&quot;</span>).<span class="property">disabled</span> = <span class="literal">false</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;).<span class="title function_">catch</span>(<span class="function">(<span class="params">err</span>)=&gt;</span>&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">return</span> <span class="variable language_">console</span>.<span class="title function_">error</span>(err.<span class="title function_">toString</span>());</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;sendButton&quot;</span>).<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, <span class="keyword">function</span> (<span class="params">event</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">var</span> user = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;userInput&quot;</span>).<span class="property">value</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">var</span> message = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;messageInput&quot;</span>).<span class="property">value</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        connection</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            .<span class="title function_">invoke</span>(<span class="string">&quot;SendMessage&quot;</span>, user, message)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            .<span class="title function_">catch</span>(<span class="keyword">function</span> (<span class="params">err</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="keyword">return</span> <span class="variable language_">console</span>.<span class="title function_">error</span>(err.<span class="title function_">toString</span>());</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        event.<span class="title function_">preventDefault</span>();</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/img/dotnet/cs/signalr/Snipaste_2022-07-19_22-12-27.png"></p>]]></content>
      
      
      <categories>
          
          <category> 後端技術 </category>
          
          <category> C# </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VSC </tag>
            
            <tag> C# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Electron (一) - 安裝 MVC Core 設定</title>
      <link href="/2023/01/21/%E5%BE%8C%E7%AB%AF%E6%8A%80%E8%A1%93/CS/core/cs_Electron_01/"/>
      <url>/2023/01/21/%E5%BE%8C%E7%AB%AF%E6%8A%80%E8%A1%93/CS/core/cs_Electron_01/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Electron 是近年來有比較多人使用的架框，最大原因是在 Winform 跨平台上無法使用，因此誕生 Electron架框。</p><p>這是目前為止是Winform替代方案，後續再做相關範例。</p><hr><h1 id="Electron-介紹"><a href="#Electron-介紹" class="headerlink" title="Electron 介紹"></a>Electron 介紹</h1><p>Electron（原名為Atom Shell）是GitHub開發的一個開源框架。它通過使用Node.js（作為後端）和Chromium的彩現引擎（作為前端）完成跨平台的桌面GUI應用程式的開發。Electron現已被多個開源Web應用程式用於前端與後端的開發，著名專案包括GitHub的Atom和微軟的Visual Studio Code。</p><p>一個基礎的Electron包含三個檔案：package.json（元資料）、main.js（代碼）和index.html（圖形化使用者介面）。框架由Electron可執行檔（Windows中為electron.exe、macOS中為electron.app、Linux中為electron）提供。開發者可以自行添加標誌、自訂圖示、重新命名或編輯Electron可執行檔。</p><p>-取用於<a href="https://zh.wikipedia.org/wiki/Electron">維基百科</a></p><hr><h1 id="安裝Electron"><a href="#安裝Electron" class="headerlink" title="安裝Electron"></a>安裝Electron</h1><h2 id="一、創建專案"><a href="#一、創建專案" class="headerlink" title="一、創建專案"></a>一、創建專案</h2><p>Electron 原本沒有想過說用 MVC架框使用，因為需要遷入DLL檔案逼不得已需要用到c#撰寫。<br>如何安裝環境，請打開各位的 VS2019 或是 VS2022 都可以進行，切記按下[ ASP.NET  Core Web ]。</p><p><img src="/img/dotnet/Electron/01.jpg"></p><p>驗證類型自行考量後續發展進行勾選。<br><img src="/img/dotnet/Electron/02.jpg"></p><h2 id="二、新增套件-NuGet"><a href="#二、新增套件-NuGet" class="headerlink" title="二、新增套件 ( NuGet )"></a>二、新增套件 ( NuGet )</h2><p>對此專案按下右鍵並選擇管理 NuGet 套件選項。記得搜尋Electron。<br>找到ElectronNet.Api 並下載他。<br><img src="/img/dotnet/Electron/03.jpg"><br><img src="/img/dotnet/Electron/04.jpg"></p><h2 id="三、設定環境"><a href="#三、設定環境" class="headerlink" title="三、設定環境"></a>三、設定環境</h2><p>設定環境有兩個地方。依據下方範例新增上去。</p><ol><li>Program.cs<figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Program.cs</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> IHostBuilder <span class="title">CreateHostBuilder</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span> =&gt;</span><br><span class="line">  Host.CreateDefaultBuilder(args)</span><br><span class="line">  .ConfigureWebHostDefaults(webBuilder =&gt;</span><br><span class="line">  &#123;</span><br><span class="line">      <span class="comment">//需新增</span></span><br><span class="line">      webBuilder.UseElectron(args); </span><br><span class="line">      webBuilder.UseStartup&lt;Startup&gt;();</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure></li><li>Startup.cs<figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Startup.cs</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Configure</span>(<span class="params">IApplicationBuilder app, IWebHostEnvironment env</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">  ...</span><br><span class="line">  ...</span><br><span class="line">  <span class="comment">//需新增</span></span><br><span class="line">  Task.Run(<span class="keyword">async</span> () =&gt; <span class="keyword">await</span> Electron.WindowManager.CreateWindowAsync());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/img/dotnet/Electron/05.jpg"><br><img src="/img/dotnet/Electron/06.jpg"></li></ol><h2 id="四、初始化-Electronize"><a href="#四、初始化-Electronize" class="headerlink" title="四、初始化 Electronize"></a>四、初始化 Electronize</h2><p>請到 powershell 視窗輸入 <code>dotnet tool install ElectronNET.CLI -g</code> ，就會進行安裝 electronize 指令。<br><img src="/img/dotnet/Electron/07.jpg"><br>這是 electronize 指令內容，請各位參閱。<br><img src="/img/dotnet/Electron/08.jpg"></p><p>如果直接輸入<code>electronize init</code>突然報錯誤怎麼辦。<br><img src="/img/dotnet/Electron/09.jpg"></p><p>最大原因是路徑問題，<code>dir</code> 查看專案目前在哪個路徑。因為它不再真正的source路徑，所以引發路徑錯誤問題。<del>只要將cd 進入下一層即可</del>。<br><img src="/img/dotnet/Electron/10.jpg"><br><img src="/img/dotnet/Electron/11.jpg"></p><h2 id="五、執行"><a href="#五、執行" class="headerlink" title="五、執行"></a>五、執行</h2><p>安裝完畢之後， 輸入最後指令 <code> electronize start</code> 就完成 mvc + electronize環境。<br><img src="/img/dotnet/Electron/12.jpg"></p><hr><h1 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h1><p>這次補齊 Electron 環境設定，後續請讀者可以依據這裡面簡單範例產出環境。從winForm轉到 Electron 多少會不太適應，但能達到[ 網頁+form ]可以對客戶需求簡單調整。這篇文章告一段落後續開始準備撰寫 ReactJS。</p>]]></content>
      
      
      <categories>
          
          <category> 後端技術 </category>
          
          <category> C# </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
            <tag> MVC </tag>
            
            <tag> Core </tag>
            
            <tag> Electron </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(筆記) Winform - FolderBrowserDialog 轉換成 OpenFileDialog樣式</title>
      <link href="/2023/01/21/%E5%BE%8C%E7%AB%AF%E6%8A%80%E8%A1%93/CS/Winform/Winform_01_FolderBrowserDialog/"/>
      <url>/2023/01/21/%E5%BE%8C%E7%AB%AF%E6%8A%80%E8%A1%93/CS/Winform/Winform_01_FolderBrowserDialog/</url>
      
        <content type="html"><![CDATA[<h2 id="Winform-FolderBrowserDialog"><a href="#Winform-FolderBrowserDialog" class="headerlink" title="Winform FolderBrowserDialog"></a>Winform FolderBrowserDialog</h2><p>Winform 開發 FolderBrowserDialog 為預設畫面。FolderBrowserDialog主要是尋找檔案、畫面上不怎麼好用，用IFileOpenDialog接口實現類OpenFileDialog樣式。<br><img src="/img/dotnet/cs/winform/20221002_22-41-27.png"></p><h3 id="程式碼"><a href="#程式碼" class="headerlink" title="程式碼"></a>程式碼</h3><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">region</span> Editor</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> FolderBrowser 的设计器基类</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">FolderNameEditor</span> : <span class="title">UITypeEditor</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> UITypeEditorEditStyle <span class="title">GetEditStyle</span>(<span class="params">ITypeDescriptorContext context</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> UITypeEditorEditStyle.Modal;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">object</span> <span class="title">EditValue</span>(<span class="params">ITypeDescriptorContext context, IServiceProvider provider, <span class="built_in">object</span> <span class="keyword">value</span></span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        FolderBrowserDialog browser = <span class="keyword">new</span> FolderBrowserDialog();</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">value</span> != <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            browser.DirectoryPath = <span class="built_in">string</span>.Format(<span class="string">&quot;&#123;0&#125;&quot;</span>, <span class="keyword">value</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (browser.ShowDialog(<span class="literal">null</span>) == DialogResult.OK)</span><br><span class="line">            <span class="keyword">return</span> browser.DirectoryPath;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">value</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">endregion</span></span></span><br></pre></td></tr></table></figure><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">region</span> FolderBrowserDialog Base</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> Vista 樣式的選擇文件對話框的基類</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    [<span class="meta">Description(<span class="string">&quot;提供一個Vista樣式的選擇文件對話框&quot;</span>)</span>]</span><br><span class="line">    [<span class="meta">Editor(typeof(FolderNameEditor), typeof(UITypeEditor))</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">FolderBrowserDialog</span> : <span class="title">Component</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 初始化 FolderBrowser 的新實例</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">FolderBrowserDialog</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">#<span class="keyword">region</span> Public Property</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 獲取在 FolderBrowser 中選擇的文件夾路徑</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span> DirectoryPath &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 向用戶顯示 FolderBrowser 的對話框</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;owner&quot;&gt;</span>任何實現 System.Windows.Forms.IWin32Window（表示將擁有模式對話框的頂級窗口）的對象。<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> DialogResult <span class="title">ShowDialog</span>(<span class="params">IWin32Window owner</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            IntPtr hwndOwner = owner != <span class="literal">null</span> ? owner.Handle : GetActiveWindow();</span><br><span class="line">            IFileOpenDialog dialog = (IFileOpenDialog)<span class="keyword">new</span> FileOpenDialog();</span><br><span class="line">            <span class="keyword">try</span></span><br><span class="line">            &#123;</span><br><span class="line">                IShellItem item;</span><br><span class="line">                <span class="keyword">if</span> (!<span class="built_in">string</span>.IsNullOrEmpty(DirectoryPath))</span><br><span class="line">                &#123;</span><br><span class="line">                    IntPtr idl;</span><br><span class="line">                    <span class="built_in">uint</span> atts = <span class="number">0</span>;</span><br><span class="line">                    <span class="keyword">if</span> (SHILCreateFromPath(DirectoryPath, <span class="keyword">out</span> idl, <span class="keyword">ref</span> atts) == <span class="number">0</span>)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">if</span> (SHCreateShellItem(IntPtr.Zero, IntPtr.Zero, idl, <span class="keyword">out</span> item) == <span class="number">0</span>)</span><br><span class="line">                        &#123;</span><br><span class="line">                            dialog.SetFolder(item);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                dialog.SetOptions(FOS.FOS_PICKFOLDERS | FOS.FOS_FORCEFILESYSTEM);</span><br><span class="line">                <span class="built_in">uint</span> hr = dialog.Show(hwndOwner);</span><br><span class="line">                <span class="keyword">if</span> (hr == ERROR_CANCELLED)</span><br><span class="line">                    <span class="keyword">return</span> DialogResult.Cancel;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (hr != <span class="number">0</span>)</span><br><span class="line">                    <span class="keyword">return</span> DialogResult.Abort;</span><br><span class="line">                dialog.GetResult(<span class="keyword">out</span> item);</span><br><span class="line">                <span class="built_in">string</span> path;</span><br><span class="line">                item.GetDisplayName(SIGDN.SIGDN_FILESYSPATH, <span class="keyword">out</span> path);</span><br><span class="line">                DirectoryPath = path;</span><br><span class="line">                <span class="keyword">return</span> DialogResult.OK;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">finally</span></span><br><span class="line">            &#123;</span><br><span class="line">                Marshal.ReleaseComObject(dialog);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="meta">#<span class="keyword">endregion</span></span></span><br><span class="line"></span><br><span class="line">        <span class="meta">#<span class="keyword">region</span> BaseType</span></span><br><span class="line">        [<span class="meta">DllImport(<span class="string">&quot;shell32.dll&quot;</span>)</span>]</span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">extern</span> <span class="built_in">int</span> <span class="title">SHILCreateFromPath</span>(<span class="params">[MarshalAs(UnmanagedType.LPWStr</span>)] <span class="built_in">string</span> pszPath, <span class="keyword">out</span> IntPtr ppIdl, <span class="keyword">ref</span> <span class="built_in">uint</span> rgflnOut)</span>;</span><br><span class="line">        [<span class="meta">DllImport(<span class="string">&quot;shell32.dll&quot;</span>)</span>]</span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">extern</span> <span class="built_in">int</span> <span class="title">SHCreateShellItem</span>(<span class="params">IntPtr pidlParent, IntPtr psfParent, IntPtr pidl, <span class="keyword">out</span> IShellItem ppsi</span>)</span>;</span><br><span class="line">        [<span class="meta">DllImport(<span class="string">&quot;user32.dll&quot;</span>)</span>]</span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">extern</span> IntPtr <span class="title">GetActiveWindow</span>()</span>;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">const</span> <span class="built_in">uint</span> ERROR_CANCELLED = <span class="number">0x800704C7</span>;</span><br><span class="line">        [<span class="meta">ComImport</span>]</span><br><span class="line">        [<span class="meta">Guid(<span class="string">&quot;DC1C5A9C-E88A-4dde-A5A1-60F82A20AEF7&quot;</span>)</span>]</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">class</span> <span class="title">FileOpenDialog</span></span><br><span class="line">        &#123;</span><br><span class="line">        &#125;</span><br><span class="line">        [<span class="meta">ComImport</span>]</span><br><span class="line">        [<span class="meta">Guid(<span class="string">&quot;42f85136-db7e-439c-85f1-e4075d135fc8&quot;</span>)</span>]</span><br><span class="line">        [<span class="meta">InterfaceType(ComInterfaceType.InterfaceIsIUnknown)</span>]</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">interface</span> <span class="title">IFileOpenDialog</span></span><br><span class="line">        &#123;</span><br><span class="line">            [<span class="meta">PreserveSig</span>]</span><br><span class="line">            <span class="function"><span class="built_in">uint</span> <span class="title">Show</span>(<span class="params">[In] IntPtr parent</span>)</span>; <span class="comment">// IModalWindow</span></span><br><span class="line">            <span class="function"><span class="keyword">void</span> <span class="title">SetFileTypes</span>()</span>;  <span class="comment">// not fully defined</span></span><br><span class="line">            <span class="function"><span class="keyword">void</span> <span class="title">SetFileTypeIndex</span>(<span class="params">[In] <span class="built_in">uint</span> iFileType</span>)</span>;</span><br><span class="line">            <span class="function"><span class="keyword">void</span> <span class="title">GetFileTypeIndex</span>(<span class="params"><span class="keyword">out</span> <span class="built_in">uint</span> piFileType</span>)</span>;</span><br><span class="line">            <span class="function"><span class="keyword">void</span> <span class="title">Advise</span>()</span>; <span class="comment">// not fully defined</span></span><br><span class="line">            <span class="function"><span class="keyword">void</span> <span class="title">Unadvise</span>()</span>;</span><br><span class="line">            <span class="function"><span class="keyword">void</span> <span class="title">SetOptions</span>(<span class="params">[In] FOS fos</span>)</span>;</span><br><span class="line">            <span class="function"><span class="keyword">void</span> <span class="title">GetOptions</span>(<span class="params"><span class="keyword">out</span> FOS pfos</span>)</span>;</span><br><span class="line">            <span class="function"><span class="keyword">void</span> <span class="title">SetDefaultFolder</span>(<span class="params">IShellItem psi</span>)</span>;</span><br><span class="line">            <span class="function"><span class="keyword">void</span> <span class="title">SetFolder</span>(<span class="params">IShellItem psi</span>)</span>;</span><br><span class="line">            <span class="function"><span class="keyword">void</span> <span class="title">GetFolder</span>(<span class="params"><span class="keyword">out</span> IShellItem ppsi</span>)</span>;</span><br><span class="line">            <span class="function"><span class="keyword">void</span> <span class="title">GetCurrentSelection</span>(<span class="params"><span class="keyword">out</span> IShellItem ppsi</span>)</span>;</span><br><span class="line">            <span class="function"><span class="keyword">void</span> <span class="title">SetFileName</span>(<span class="params">[In, MarshalAs(UnmanagedType.LPWStr</span>)] <span class="built_in">string</span> pszName)</span>;</span><br><span class="line">            <span class="function"><span class="keyword">void</span> <span class="title">GetFileName</span>(<span class="params">[MarshalAs(UnmanagedType.LPWStr</span>)] <span class="keyword">out</span> <span class="built_in">string</span> pszName)</span>;</span><br><span class="line">            <span class="function"><span class="keyword">void</span> <span class="title">SetTitle</span>(<span class="params">[In, MarshalAs(UnmanagedType.LPWStr</span>)] <span class="built_in">string</span> pszTitle)</span>;</span><br><span class="line">            <span class="function"><span class="keyword">void</span> <span class="title">SetOkButtonLabel</span>(<span class="params">[In, MarshalAs(UnmanagedType.LPWStr</span>)] <span class="built_in">string</span> pszText)</span>;</span><br><span class="line">            <span class="function"><span class="keyword">void</span> <span class="title">SetFileNameLabel</span>(<span class="params">[In, MarshalAs(UnmanagedType.LPWStr</span>)] <span class="built_in">string</span> pszLabel)</span>;</span><br><span class="line">            <span class="function"><span class="keyword">void</span> <span class="title">GetResult</span>(<span class="params"><span class="keyword">out</span> IShellItem ppsi</span>)</span>;</span><br><span class="line">            <span class="function"><span class="keyword">void</span> <span class="title">AddPlace</span>(<span class="params">IShellItem psi, <span class="built_in">int</span> alignment</span>)</span>;</span><br><span class="line">            <span class="function"><span class="keyword">void</span> <span class="title">SetDefaultExtension</span>(<span class="params">[In, MarshalAs(UnmanagedType.LPWStr</span>)] <span class="built_in">string</span> pszDefaultExtension)</span>;</span><br><span class="line">            <span class="function"><span class="keyword">void</span> <span class="title">Close</span>(<span class="params"><span class="built_in">int</span> hr</span>)</span>;</span><br><span class="line">            <span class="function"><span class="keyword">void</span> <span class="title">SetClientGuid</span>()</span>;  <span class="comment">// not fully defined</span></span><br><span class="line">            <span class="function"><span class="keyword">void</span> <span class="title">ClearClientData</span>()</span>;</span><br><span class="line">            <span class="function"><span class="keyword">void</span> <span class="title">SetFilter</span>(<span class="params">[MarshalAs(UnmanagedType.Interface</span>)] IntPtr pFilter)</span>;</span><br><span class="line">            <span class="function"><span class="keyword">void</span> <span class="title">GetResults</span>(<span class="params">[MarshalAs(UnmanagedType.Interface</span>)] <span class="keyword">out</span> IntPtr ppenum)</span>; <span class="comment">// not fully defined</span></span><br><span class="line">            <span class="function"><span class="keyword">void</span> <span class="title">GetSelectedItems</span>(<span class="params">[MarshalAs(UnmanagedType.Interface</span>)] <span class="keyword">out</span> IntPtr ppsai)</span>; <span class="comment">// not fully defined</span></span><br><span class="line">        &#125;</span><br><span class="line">        [<span class="meta">ComImport</span>]</span><br><span class="line">        [<span class="meta">Guid(<span class="string">&quot;43826D1E-E718-42EE-BC55-A1E261C37BFE&quot;</span>)</span>]</span><br><span class="line">        [<span class="meta">InterfaceType(ComInterfaceType.InterfaceIsIUnknown)</span>]</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">interface</span> <span class="title">IShellItem</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="function"><span class="keyword">void</span> <span class="title">BindToHandler</span>()</span>; <span class="comment">// not fully defined</span></span><br><span class="line">            <span class="function"><span class="keyword">void</span> <span class="title">GetParent</span>()</span>; <span class="comment">// not fully defined</span></span><br><span class="line">            <span class="function"><span class="keyword">void</span> <span class="title">GetDisplayName</span>(<span class="params">[In] SIGDN sigdnName, [MarshalAs(UnmanagedType.LPWStr</span>)] <span class="keyword">out</span> <span class="built_in">string</span> ppszName)</span>;</span><br><span class="line">            <span class="function"><span class="keyword">void</span> <span class="title">GetAttributes</span>()</span>;  <span class="comment">// not fully defined</span></span><br><span class="line">            <span class="function"><span class="keyword">void</span> <span class="title">Compare</span>()</span>;  <span class="comment">// not fully defined</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">private</span> <span class="built_in">enum</span> SIGDN : <span class="built_in">uint</span></span><br><span class="line">        &#123;</span><br><span class="line">            SIGDN_DESKTOPABSOLUTEEDITING = <span class="number">0x8004c000</span>,</span><br><span class="line">            SIGDN_DESKTOPABSOLUTEPARSING = <span class="number">0x80028000</span>,</span><br><span class="line">            SIGDN_FILESYSPATH = <span class="number">0x80058000</span>,</span><br><span class="line">            SIGDN_NORMALDISPLAY = <span class="number">0</span>,</span><br><span class="line">            SIGDN_PARENTRELATIVE = <span class="number">0x80080001</span>,</span><br><span class="line">            SIGDN_PARENTRELATIVEEDITING = <span class="number">0x80031001</span>,</span><br><span class="line">            SIGDN_PARENTRELATIVEFORADDRESSBAR = <span class="number">0x8007c001</span>,</span><br><span class="line">            SIGDN_PARENTRELATIVEPARSING = <span class="number">0x80018001</span>,</span><br><span class="line">            SIGDN_URL = <span class="number">0x80068000</span></span><br><span class="line">        &#125;</span><br><span class="line">        [<span class="meta">Flags</span>]</span><br><span class="line">        <span class="keyword">private</span> <span class="built_in">enum</span> FOS</span><br><span class="line">        &#123;</span><br><span class="line">            FOS_ALLNONSTORAGEITEMS = <span class="number">0x80</span>,</span><br><span class="line">            FOS_ALLOWMULTISELECT = <span class="number">0x200</span>,</span><br><span class="line">            FOS_CREATEPROMPT = <span class="number">0x2000</span>,</span><br><span class="line">            FOS_DEFAULTNOMINIMODE = <span class="number">0x20000000</span>,</span><br><span class="line">            FOS_DONTADDTORECENT = <span class="number">0x2000000</span>,</span><br><span class="line">            FOS_FILEMUSTEXIST = <span class="number">0x1000</span>,</span><br><span class="line">            FOS_FORCEFILESYSTEM = <span class="number">0x40</span>,</span><br><span class="line">            FOS_FORCESHOWHIDDEN = <span class="number">0x10000000</span>,</span><br><span class="line">            FOS_HIDEMRUPLACES = <span class="number">0x20000</span>,</span><br><span class="line">            FOS_HIDEPINNEDPLACES = <span class="number">0x40000</span>,</span><br><span class="line">            FOS_NOCHANGEDIR = <span class="number">8</span>,</span><br><span class="line">            FOS_NODEREFERENCELINKS = <span class="number">0x100000</span>,</span><br><span class="line">            FOS_NOREADONLYRETURN = <span class="number">0x8000</span>,</span><br><span class="line">            FOS_NOTESTFILECREATE = <span class="number">0x10000</span>,</span><br><span class="line">            FOS_NOVALIDATE = <span class="number">0x100</span>,</span><br><span class="line">            FOS_OVERWRITEPROMPT = <span class="number">2</span>,</span><br><span class="line">            FOS_PATHMUSTEXIST = <span class="number">0x800</span>,</span><br><span class="line">            FOS_PICKFOLDERS = <span class="number">0x20</span>,</span><br><span class="line">            FOS_SHAREAWARE = <span class="number">0x4000</span>,</span><br><span class="line">            FOS_STRICTFILETYPES = <span class="number">4</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="meta">#<span class="keyword">endregion</span></span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">#<span class="keyword">endregion</span></span></span><br></pre></td></tr></table></figure><h2 id="參考文件"><a href="#參考文件" class="headerlink" title="參考文件"></a>參考文件</h2><ul><li><a href="https://www.twblogs.net/a/5b8058462b71772165a716f4">類似OpenFileDialog樣式的FolderBrowserDialog</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 後端技術 </category>
          
          <category> C# </category>
          
          <category> Winform </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
            <tag> Net FrameWork </tag>
            
            <tag> Winform </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C# Unit Test (一) - 使用Unit Test</title>
      <link href="/2023/01/21/%E5%BE%8C%E7%AB%AF%E6%8A%80%E8%A1%93/CS/core/UnitTest_01_%E4%BD%BF%E7%94%A8Unit%20Test/"/>
      <url>/2023/01/21/%E5%BE%8C%E7%AB%AF%E6%8A%80%E8%A1%93/CS/core/UnitTest_01_%E4%BD%BF%E7%94%A8Unit%20Test/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>目前開發至今已經快要邁向第二年，公司沒有人使用過單元測試，因此我決定要記錄Unit Test使用方式。紀錄主要原因是目前為止我尚未使用過Unit Test ，請各位見諒&lt;(＿　＿)&gt;。</p><hr><h1 id="單元測試-Unit-Test"><a href="#單元測試-Unit-Test" class="headerlink" title="單元測試 (Unit Test)"></a>單元測試 (Unit Test)</h1><p>單元測試可以稱模組測試，它主要針對程式模組正確性的驗證。它的優點開發過程可以用在早期開發抓到錯誤問題。</p><h2 id="使用-VS-C"><a href="#使用-VS-C" class="headerlink" title="使用 VS C#"></a>使用 VS C#</h2><p>這邊使用[主控台應用程式]展示UnitTest開啟方式。<br><img src="/img/UnitTest/Test01.jpg"><br>創建好之後輸入額外的Class並簡單撰寫Function。</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Arithmetic</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">decimal</span> <span class="title">Additon</span>(<span class="params"><span class="built_in">int</span> GetValue , <span class="built_in">int</span> SetValue</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">decimal</span> Result = GetValue + SetValue;</span><br><span class="line">        <span class="keyword">return</span> Result;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">decimal</span> <span class="title">Minus</span>(<span class="params"><span class="built_in">int</span> GetValue, <span class="built_in">int</span> SetValue</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">decimal</span> Result = GetValue - SetValue;</span><br><span class="line">        <span class="keyword">return</span> Result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="創建單元測試"><a href="#創建單元測試" class="headerlink" title="創建單元測試"></a>創建單元測試</h2><p>單元測試創建方式有兩種，一種是按下右鍵後，可以看見建立單元測試選項。這邊我就不展示這邊單元測試。<br><img src="/img/UnitTest/Test02.jpg"></p><p>請在我們的 [ 解決方案 ] 創建 [ MsTest 專案]，但要注意創建完沒有包含這區域裡面的專案中，所以要在[ 相容性 ]按下右鍵，在按下[ 新增專案參考 ]即可，通常會出現第一個選項。</p><p><img src="/img/UnitTest/Test03.jpg"><br><img src="/img/UnitTest/Test04.jpg"><br><img src="/img/UnitTest/Test05.jpg"></p><p>要非常要注意，相容性新增參考要注意不要加入到要進行測試的專案當中。</p><h2 id="撰寫測試Function"><a href="#撰寫測試Function" class="headerlink" title="撰寫測試Function"></a>撰寫測試Function</h2><p>這邊我們隨便在一個位置隨便輸入回傳值，進行查看測試樣子。</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> 測試四則運算_加號()</span><br><span class="line">&#123;</span><br><span class="line">    Arithmetic ari = <span class="keyword">new</span> Arithmetic();</span><br><span class="line">    <span class="built_in">decimal</span> result =  ari.Additon(<span class="number">3</span>, <span class="number">4</span>);</span><br><span class="line">    Assert.AreEqual(<span class="number">8</span>, result);<span class="comment">//</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>執行位置會在[測試]選項，選擇[執行所有測試]，會看到有錯誤訊息得知它會傳的內容。<br><img src="/img/UnitTest/Test06.jpg"><br><img src="/img/UnitTest/Test07.jpg"></p><p>如果改為正常後，就會如下圖。會明確知道這測試function是正常的，可以有效避免開發時意外錯誤問題。<br><img src="/img/UnitTest/Test08.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> 後端技術 </category>
          
          <category> C# </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
            <tag> core </tag>
            
            <tag> UnitTest </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C# Unit Test (2) - Assert method</title>
      <link href="/2023/01/21/%E5%BE%8C%E7%AB%AF%E6%8A%80%E8%A1%93/CS/core/UnitTest_02_Assert%20method/"/>
      <url>/2023/01/21/%E5%BE%8C%E7%AB%AF%E6%8A%80%E8%A1%93/CS/core/UnitTest_02_Assert%20method/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>上次使用 Unit Test 有注意到Assert的字眼，使用下來Assert主要判斷回傳值結果進行比較跟驗證，比較簡易的方式。<br>這次就來大概說幾個Assert method。</p><hr><h1 id="前置作業"><a href="#前置作業" class="headerlink" title="前置作業"></a>前置作業</h1><h2 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h2><p>目前我寫以下方式是取得自定義連線字串，記得去 <code>appsettings.json</code> 新增連線資訊。<br>繼上次使用新增專案方式，這次使用的是 <code>右鍵</code> &gt; <code>建立單元測試</code>方式。</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Comm</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">string</span> <span class="title">ConnectionString</span>(<span class="params"><span class="built_in">string</span> Connect</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        IConfiguration config = <span class="keyword">new</span> ConfigurationBuilder()</span><br><span class="line">            .SetBasePath(Directory.GetCurrentDirectory())</span><br><span class="line">            .AddJsonFile(<span class="string">&quot;appsettings.json&quot;</span>, optional: <span class="literal">true</span>, reloadOnChange: <span class="literal">true</span>)</span><br><span class="line">            .Build();</span><br><span class="line">        <span class="keyword">return</span> config.GetConnectionString(Connect);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下圖可以看到 [Project]Tests，[Project]會自動帶入你當前的Project名稱也相當的方便，其他欄位同等意思。</p><p><img src="/img/UnitTest/Test09.jpg"></p><p>進行測試內容</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">TestMethod()</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ConnectionStringTest</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    Comm comm = <span class="keyword">new</span> Comm();</span><br><span class="line">    <span class="built_in">string</span> str = comm.ConnectionString(<span class="string">&quot;Dev&quot;</span>);</span><br><span class="line">    <span class="built_in">string</span> result = <span class="string">&quot;Data Source=***;Initial Catalog=***;Persist Security Info=True;User ID=***;Password=***&quot;</span>;</span><br><span class="line">    Assert.AreEqual(result, str);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Assert-method"><a href="#Assert-method" class="headerlink" title="Assert method"></a>Assert method</h1><p>Assert 類別目的驗證特定功能。單元測試方法會執行應用程式程式碼中方法的程式碼，但只有在包含 Assert 時，才會報告程式碼行為的正確性。</p><h2 id="Assert-AreEqual"><a href="#Assert-AreEqual" class="headerlink" title="Assert.AreEqual"></a>Assert.AreEqual</h2><p>這function是用來比較 str 、 result 是否相符，也是上次使用第一個method。</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">TestMethod()</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ConnectionStringTest</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    Comm comm = <span class="keyword">new</span> Comm();</span><br><span class="line">    <span class="built_in">string</span> str = comm.ConnectionString(<span class="string">&quot;Dev&quot;</span>);</span><br><span class="line">    <span class="built_in">string</span> result = <span class="string">&quot;Data Source=***;Initial Catalog=***;Persist Security Info=True;User ID=***;Password=***&quot;</span>;</span><br><span class="line">    Assert.AreEqual(result, str);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Assert-AreNotEqual"><a href="#Assert-AreNotEqual" class="headerlink" title="Assert.AreNotEqual"></a>Assert.AreNotEqual</h2><p>剛好是AreEqual的相反意思，可以用來測試有沒有null或是””。</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">TestMethod()</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ConnectionStringTest</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    Comm comm = <span class="keyword">new</span> Comm();</span><br><span class="line">    <span class="built_in">string</span> str = comm.ConnectionString(<span class="string">&quot;Dev&quot;</span>);</span><br><span class="line">    <span class="built_in">string</span> result = <span class="string">&quot;Data Source=***;Initial Catalog=***;Persist Security Info=True;User ID=***;Password=***&quot;</span>;</span><br><span class="line">    Assert.AreNotEqual(result, str);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Assert-AreSame"><a href="#Assert-AreSame" class="headerlink" title="Assert.AreSame"></a>Assert.AreSame</h2><p>這邊AreSame比較物件屬性，但如果分別Option、Result一起比較會發生錯誤。<br>這邊特點是物件相同外、記憶體位置也必須要相同才可以。</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">[<span class="meta">TestMethod()</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">TestSame</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    List&lt;<span class="built_in">string</span>&gt; option = <span class="keyword">new</span> List&lt;<span class="built_in">string</span>&gt;() &#123; <span class="string">&quot;Hello&quot;</span>, <span class="string">&quot;UnitTest&quot;</span> &#125;;</span><br><span class="line">    List&lt;<span class="built_in">string</span>&gt; Result = <span class="keyword">new</span> List&lt;<span class="built_in">string</span>&gt;() &#123; <span class="string">&quot;Hello&quot;</span>, <span class="string">&quot;UnitTest&quot;</span> &#125;;</span><br><span class="line">    Assert.AreSame(option, option);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Assert-AreNoSame"><a href="#Assert-AreNoSame" class="headerlink" title="Assert.AreNoSame"></a>Assert.AreNoSame</h2><p>這邊如同上面一樣，當初以為會以物件屬性以及內值比較差異o(￣┰￣*)ゞ。</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">TestMethod()</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">TestSame</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    List&lt;<span class="built_in">string</span>&gt; option = <span class="keyword">new</span> List&lt;<span class="built_in">string</span>&gt;() &#123; <span class="string">&quot;Hello&quot;</span>, <span class="string">&quot;UnitTest&quot;</span> &#125;;</span><br><span class="line">    List&lt;<span class="built_in">string</span>&gt; Result = <span class="keyword">new</span> List&lt;<span class="built_in">string</span>&gt;() &#123; <span class="string">&quot;Hello&quot;</span>, <span class="string">&quot;UnitTest&quot;</span> &#125;;</span><br><span class="line">    Assert.AreNotSame(option, Result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Assert-Fail"><a href="#Assert-Fail" class="headerlink" title="Assert.Fail"></a>Assert.Fail</h2><p>Fail 為失敗意思。使用這方發可能遇到null或是Exception使用，可以配合try{}catch{}使用。</p><h2 id="Assert-Inconclusive"><a href="#Assert-Inconclusive" class="headerlink" title="Assert.Inconclusive"></a>Assert.Inconclusive</h2><p>這邊主要是忽略功能，如果從Test Explorer 打開，可以發現有驚嘆號，代表已經被忽略過了。</p><h2 id="Assert-IsFalse-amp-amp-Assert-IsTrue"><a href="#Assert-IsFalse-amp-amp-Assert-IsTrue" class="headerlink" title="Assert.IsFalse &amp;&amp; Assert.IsTrue"></a>Assert.IsFalse &amp;&amp; Assert.IsTrue</h2><p>下方範例判斷為是否為False。當然也會有IsTrue。</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">TestMethod()</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ConnectionStringTest</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    Comm comm = <span class="keyword">new</span> Comm();</span><br><span class="line">    <span class="built_in">string</span> str = comm.ConnectionString(<span class="string">&quot;Dev&quot;</span>);</span><br><span class="line">    <span class="built_in">string</span> result = <span class="string">&quot;Data Source=***;Initial Catalog=***;Persist Security Info=True;User ID=***;Password=***&quot;</span>;</span><br><span class="line">    Assert.IsFalse((str!=result));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Assert-IsInstanceOfType"><a href="#Assert-IsInstanceOfType" class="headerlink" title="Assert.IsInstanceOfType"></a>Assert.IsInstanceOfType</h2><p>這邊主要驗證對方預期類型的執行個體。</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">TestClass()</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">CommTests</span></span><br><span class="line">&#123;</span><br><span class="line">    [<span class="meta">TestMethod()</span>]</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ConnectionStringTest</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Comm comm = <span class="keyword">new</span> Comm();</span><br><span class="line">        <span class="built_in">string</span> str = comm.ConnectionString(<span class="string">&quot;Dev&quot;</span>);</span><br><span class="line">        <span class="built_in">string</span> result = <span class="string">&quot;Data Source=***;Initial Catalog=***;Persist Security Info=True;User ID=***;Password=***&quot;</span>;</span><br><span class="line">        Assert.IsInstanceOfType(str,<span class="keyword">typeof</span>(<span class="built_in">string</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Assert-IsNotInstanceOfType"><a href="#Assert-IsNotInstanceOfType" class="headerlink" title="Assert.IsNotInstanceOfType"></a>Assert.IsNotInstanceOfType</h2><p>這與上方相反，這兩種反而比較常會用到。</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">TestClass()</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">CommTests</span></span><br><span class="line">&#123;</span><br><span class="line">    [<span class="meta">TestMethod()</span>]</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ConnectionStringTest</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Comm comm = <span class="keyword">new</span> Comm();</span><br><span class="line">        <span class="built_in">string</span> str = comm.ConnectionString(<span class="string">&quot;Dev&quot;</span>);</span><br><span class="line">        <span class="built_in">string</span> result = <span class="string">&quot;Data Source=***;Initial Catalog=***;Persist Security Info=True;User ID=***;Password=***&quot;</span>;</span><br><span class="line">        Assert.IsNotInstanceOfType(str,<span class="keyword">typeof</span>(<span class="built_in">int</span>)));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Assert-IsNotNull-amp-amp-Assert-IsNull"><a href="#Assert-IsNotNull-amp-amp-Assert-IsNull" class="headerlink" title="Assert.IsNotNull &amp;&amp; Assert.IsNull"></a>Assert.IsNotNull &amp;&amp; Assert.IsNull</h2><p>這邊主要判斷使否為Null狀況，這也常常會用上。</p><h2 id="Assert-ThrowsException"><a href="#Assert-ThrowsException" class="headerlink" title="Assert.ThrowsException"></a>Assert.ThrowsException</h2><p>測試委派 action 所指定的程式碼會擲回 T 類型的確切指定例外狀況</p><h2 id="Assert-ReferenceEquals"><a href="#Assert-ReferenceEquals" class="headerlink" title="Assert.ReferenceEquals"></a>Assert.ReferenceEquals</h2><p>判斷指定的 Object 執行個體是否為相同的執行個體。<br>別懷疑內值並不會去做檢查。</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">TestMethod()</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ExceptionReuslt</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">object</span> a_obj = <span class="keyword">new</span> List&lt;<span class="built_in">string</span>&gt;() &#123; <span class="string">&quot;1&quot;</span>,<span class="string">&quot;5&quot;</span>&#125;;</span><br><span class="line">    List&lt;<span class="built_in">string</span>&gt; b_obj =<span class="keyword">new</span> List&lt;<span class="built_in">string</span>&gt;() &#123; <span class="string">&quot;3&quot;</span>, <span class="string">&quot;5&quot;</span> &#125;;</span><br><span class="line">    <span class="built_in">object</span> c_obj = <span class="keyword">new</span> <span class="built_in">object</span>();</span><br><span class="line">    Assert.ReferenceEquals(a_obj, b_obj);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 後端技術 </category>
          
          <category> C# </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
            <tag> UnitTest </tag>
            
            <tag> 單元測試 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C# NPOI (一) - 如何使用NPOI Excel</title>
      <link href="/2023/01/21/%E5%BE%8C%E7%AB%AF%E6%8A%80%E8%A1%93/CS/Package/NPOI_01_%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8NPOI%20Excel/"/>
      <url>/2023/01/21/%E5%BE%8C%E7%AB%AF%E6%8A%80%E8%A1%93/CS/Package/NPOI_01_%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8NPOI%20Excel/</url>
      
        <content type="html"><![CDATA[<h1 id="NPOI"><a href="#NPOI" class="headerlink" title="NPOI"></a>NPOI</h1><p>NPOI中N指代的是.Net，POI是一個完全開源的Java寫成的庫，能夠在沒有安裝微軟Office或者相應環境的情況下讀寫Excel、Word等微軟OLE2元件文件，幾乎支援所有的Office97~Office2007的檔案格式。所以NPOI就是POI專案的.Net版本。目前NPOI的最新版本是今年5月份釋出的V2.2.1，包含了.Net Framework2和.Net Framework4兩個版本。</p><h2 id="特點"><a href="#特點" class="headerlink" title="特點"></a>特點</h2><p>NPOI 是一個能夠快速讀取與產生Excel檔案的第三方套件，幫助程式開發人員在無安裝Microsoft Office的環境下讀寫Office 97-2003的文件，對於需要產生Excel報表非常好用。NPOI支援的檔案格式處理xls、xlsx外，還包括doc、ppt、vsd等，功能強大。</p><hr><h1 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h1><p>NPOI可透過兩種方式匯出Excel，一是使用Template，將Excel格式拉好存檔，透過NPOI讀取格式後，再將資料填入並另存新檔。</p><h2 id="EXCEL-分頁"><a href="#EXCEL-分頁" class="headerlink" title="EXCEL 分頁"></a>EXCEL 分頁</h2><p>使用前，請引用以下內容</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> NPOI.SS.UserModel;</span><br><span class="line"><span class="keyword">using</span> NPOI.HSSF.UserModel;</span><br><span class="line"><span class="keyword">using</span> NPOI.XSSF.UserModel;</span><br><span class="line"><span class="keyword">using</span> System.IO;</span><br></pre></td></tr></table></figure><div class="note info flat"><h2 id="HSSF-vs-XSSF"><a href="#HSSF-vs-XSSF" class="headerlink" title="HSSF  vs  XSSF"></a>HSSF  vs  XSSF</h2><p>HSSF中，是使用於2007之前的xls版本。XSSF中，適用於2007及其之後的xlsx版本。<br>雖然HSSF 只能使用(.xls) ，但可以得知XSSF 是可以使用(.xls)，但可能因為版本問題格式、內容有可能會被損毀。</p></div><p>以下程式新建一個Excel 2003 xls和一個2007 xlsx檔案，跟用Office建立的標準Excel格式一樣，每一個Excel檔案初始包含了3個工作表。<br>以下範例針對顯示分頁內容作排序，當然可以做自訂選擇排序，請讀者自行測試。</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Page</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Name &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> Order &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">NPOIprintf</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//自訂 Excel 工作分頁</span></span><br><span class="line">    List&lt;Page&gt; pages = <span class="keyword">new</span> List&lt;Page&gt; &#123; </span><br><span class="line">        <span class="keyword">new</span> Page &#123; Name = <span class="string">&quot;Sheet1&quot;</span>, Order= <span class="number">1</span> &#125;,</span><br><span class="line">        <span class="keyword">new</span> Page &#123; Name = <span class="string">&quot;Sheet2&quot;</span>, Order= <span class="number">2</span> &#125;,</span><br><span class="line">        <span class="keyword">new</span> Page &#123; Name = <span class="string">&quot;Sheet3&quot;</span>, Order= <span class="number">3</span> &#125;,</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//建立分頁</span></span><br><span class="line">    HSSFWorkbook workbook2003 = HSSFCreateSheet(pages);</span><br><span class="line">    XSSFWorkbook workbook2007 = XSSFCreateSheet(pages);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//寫入檔案</span></span><br><span class="line">    Write(workbook2003, <span class="string">@&quot;F:\NPOI_Excel\Excel2003.xls&quot;</span>);</span><br><span class="line">    Write(workbook2007, <span class="string">@&quot;F:\NPOI_Excel\Excel2007.xls&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以下函示範例請自行取用</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*以下函示*/</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> XSSFWorkbook <span class="title">XSSFCreateSheet</span>(<span class="params">List&lt;Page&gt; datas</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//如果是空值，直接剔除執行</span></span><br><span class="line">    <span class="keyword">if</span> (datas == <span class="literal">null</span>) &#123; <span class="keyword">return</span> <span class="literal">null</span>; &#125;</span><br><span class="line">    <span class="comment">//設定 HSSF</span></span><br><span class="line">    XSSFWorkbook _XSSF = <span class="keyword">new</span>();</span><br><span class="line">    <span class="comment">//LINQ 排序</span></span><br><span class="line">    IEnumerable&lt;Page&gt; pages = datas.OrderBy(row =&gt; row.Order);</span><br><span class="line">    <span class="comment">//設定分頁</span></span><br><span class="line">    <span class="keyword">foreach</span> (Page result <span class="keyword">in</span> pages)</span><br><span class="line">    &#123;</span><br><span class="line">        _XSSF.CreateSheet(result.Name);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//回傳 HSSFWorkbook</span></span><br><span class="line">    <span class="keyword">return</span> _XSSF;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> HSSFWorkbook <span class="title">HSSFCreateSheet</span>(<span class="params">List&lt;Page&gt; datas</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//如果是空值，直接剔除執行</span></span><br><span class="line">    <span class="keyword">if</span> (datas == <span class="literal">null</span> ) &#123; <span class="keyword">return</span> <span class="literal">null</span>; &#125;</span><br><span class="line">    <span class="comment">//設定 HSSF</span></span><br><span class="line">    HSSFWorkbook _HSSF = <span class="keyword">new</span>();</span><br><span class="line">    <span class="comment">//LINQ 排序</span></span><br><span class="line">    IEnumerable&lt;Page&gt; pages = datas.OrderBy(row =&gt; row.Order);</span><br><span class="line">    <span class="comment">//設定分頁</span></span><br><span class="line">    <span class="keyword">foreach</span>(Page result <span class="keyword">in</span> pages)</span><br><span class="line">    &#123;</span><br><span class="line">        _HSSF.CreateSheet(result.Name);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//回傳 HSSFWorkbook</span></span><br><span class="line">    <span class="keyword">return</span> _HSSF;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Write</span>(<span class="params">HSSFWorkbook HSSF,<span class="built_in">string</span> FilePath , <span class="built_in">string</span> Data=<span class="string">&quot;&quot;</span></span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    FileStream file = <span class="keyword">new</span> (FilePath, FileMode.Create);</span><br><span class="line">    HSSF.Write(file);</span><br><span class="line">    file.Close();  <span class="comment">//關閉檔案流</span></span><br><span class="line">    HSSF.Close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Write</span>(<span class="params">XSSFWorkbook XSSF, <span class="built_in">string</span> FilePath, <span class="built_in">string</span> Data = <span class="string">&quot;&quot;</span></span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    FileStream file = <span class="keyword">new</span>(FilePath, FileMode.Create);</span><br><span class="line">    XSSF.Write(file);</span><br><span class="line">    file.Close();  <span class="comment">//關閉檔案流</span></span><br><span class="line">    XSSF.Close();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*以上函示*/</span></span><br></pre></td></tr></table></figure><h2 id="取得Sheet-名稱"><a href="#取得Sheet-名稱" class="headerlink" title="取得Sheet 名稱"></a>取得Sheet 名稱</h2><p>如果要往回抓Sheet 名稱，又不想從 List抓取可以從XSSFWorkbook 、HSSFWorkbook抓取裡面的Sheet Name。</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Get_SheetName</span>(<span class="params">XSSFWorkbook Workbook</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">int</span> index = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (index &lt; Workbook.NumberOfSheets)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">string</span> sheet =  Workbook.GetSheetName(index);</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;Sheet Name : &quot;</span> + sheet.ToString());</span><br><span class="line">        index++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="寫入Excel檔案資料"><a href="#寫入Excel檔案資料" class="headerlink" title="寫入Excel檔案資料"></a>寫入Excel檔案資料</h2><p>寫資料要遵循一定的順序，可以概括為：</p><ol><li>讀取（或新建一個工作簿）</li><li>獲取工作表</li><li>對工作表新增行</li><li>對每一行新增單元格</li><li>對單元格賦值</li></ol><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">NPOIRead</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    ISheet sheet = ReadSheetAt(<span class="string">@&quot;F:\NPOI_Excel\Excel2007.xlsx&quot;</span>, <span class="number">0</span>);  <span class="comment">//獲取第一個工作表</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt;= sheet.LastRowNum; i++)  <span class="comment">//對工作表每一行</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (sheet.GetRow(i) == <span class="literal">null</span>) &#123; <span class="keyword">continue</span>; &#125; <span class="comment">//若有空就跳過以下執行</span></span><br><span class="line">        <span class="keyword">foreach</span> (ICell cell <span class="keyword">in</span> sheet.GetRow(i))<span class="comment">//</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(cell);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>ReadSheetAt 內容主要決定使用哪種版本(xls、xlsx)，再回傳Sheet 內容。方法可以使用(.NumberOfSheets)將所有Sheet 取出。</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*以下函示*/</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> ISheet <span class="title">ReadSheetAt</span>(<span class="params"><span class="built_in">string</span> fileName, <span class="built_in">int</span> index</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    FileStream fileStream = <span class="keyword">new</span>(fileName, FileMode.Open, FileAccess.Read);</span><br><span class="line"></span><br><span class="line">    IWorkbook workbook = fileName.IndexOf(<span class="string">&quot;.xls&quot;</span>) &gt; <span class="number">0</span> </span><br><span class="line">        ? <span class="keyword">new</span> HSSFWorkbook(fileStream)<span class="comment">// 2003版本 xls資料讀入workbook</span></span><br><span class="line">        : <span class="keyword">new</span> XSSFWorkbook(fileStream);<span class="comment">// 2007版本xlsx資料讀入workbook</span></span><br><span class="line"></span><br><span class="line">    fileStream.Close();</span><br><span class="line">    <span class="keyword">return</span> workbook.GetSheetAt(index);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*以上函示*/</span></span><br></pre></td></tr></table></figure><h2 id="隱藏工作表"><a href="#隱藏工作表" class="headerlink" title="隱藏工作表"></a>隱藏工作表</h2><p>如果要隱藏工作表，需要對XSSFWorkbook抓取哪個是要隱藏的工作表。<br>以下範例只針對最後一比工作表進行隱藏。</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//隱藏最後一個工作表</span></span><br><span class="line">Workbook.SetSheetHidden(Workbook.NumberOfSheets <span class="number">-1</span> , <span class="literal">true</span>);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 後端技術 </category>
          
          <category> C# </category>
          
          <category> Package </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C# NPOI (二) - 使用NPOI 處理 word 套版</title>
      <link href="/2023/01/21/%E5%BE%8C%E7%AB%AF%E6%8A%80%E8%A1%93/CS/Package/%E4%BD%BF%E7%94%A8NPOI%E8%99%95%E7%90%86%20word%20%E5%A5%97%E7%89%88/"/>
      <url>/2023/01/21/%E5%BE%8C%E7%AB%AF%E6%8A%80%E8%A1%93/CS/Package/%E4%BD%BF%E7%94%A8NPOI%E8%99%95%E7%90%86%20word%20%E5%A5%97%E7%89%88/</url>
      
        <content type="html"><![CDATA[<h1 id="使用NPOI"><a href="#使用NPOI" class="headerlink" title="使用NPOI"></a>使用NPOI</h1><p>目前使用npoi功能延伸使用方式，套版是最多人需要使用的部分，這邊只有簡述如何使用。<br>如果有需要詳細使用方式，歡迎在下方留言。<br>環境部分 ，我使用 Asp.Net Core Mvc ，這位可以自行使用自己的環境測試。</p><h2 id="Install"><a href="#Install" class="headerlink" title="Install"></a>Install</h2><p>請各位讀者自行取用，這部分可以用NuGet找到NPOI。<br><a href="https://www.nuget.org/packages/NPOI/">https://www.nuget.org/packages/NPOI/</a></p><h2 id="創建Word"><a href="#創建Word" class="headerlink" title="創建Word"></a>創建Word</h2><p><a href="/upload/template/word_npoi_temp.docx">下載點</a></p><p>這邊範例使用table以及一般輸入行數。</p><h2 id="讀取、下載"><a href="#讀取、下載" class="headerlink" title="讀取、下載"></a>讀取、下載</h2><p>功能未齊全狀況下，我們先把讀取文件、下載部分做出來。</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task&lt;IActionResult&gt; <span class="title">Index</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">string</span> docxPath = _env.WebRootPath + <span class="string">&quot;\\upload\\template.docx&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span> (System.IO.File.Exists(docxPath))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">await</span> Download(docxPath); </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> View();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task&lt;IActionResult&gt; <span class="title">DownloadAsync</span>(<span class="params"><span class="built_in">string</span> filePath</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> memoryStream = <span class="keyword">new</span> MemoryStream();</span><br><span class="line">    <span class="keyword">using</span> (<span class="keyword">var</span> stream = <span class="keyword">new</span> FileStream(filePath, FileMode.Open))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">await</span> stream.CopyToAsync(memoryStream);</span><br><span class="line">    &#125;</span><br><span class="line">    memoryStream.Seek(<span class="number">0</span>, SeekOrigin.Begin);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> FileStreamResult(memoryStream, <span class="string">&quot;application/vnd.openxmlformats-officedocument.wordprocessingml.document&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="抓取方式"><a href="#抓取方式" class="headerlink" title="抓取方式"></a>抓取方式</h2><h3 id="抓取一般的行數"><a href="#抓取一般的行數" class="headerlink" title="抓取一般的行數"></a>抓取一般的行數</h3><p>NPOI在這function中不會是有table，所以可以觀察到table是沒有執行成功。</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">FileStream fs = <span class="keyword">new</span> (docxPath, FileMode.Open, FileAccess.Read);</span><br><span class="line">XWPFDocument docx = <span class="keyword">new</span> (fs);</span><br><span class="line"><span class="keyword">foreach</span> (<span class="keyword">var</span> para <span class="keyword">in</span> docx.Paragraphs)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">string</span> oldtext = para.ParagraphText;</span><br><span class="line">    <span class="built_in">string</span> newText = <span class="string">&quot;測試欄位&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span> (oldtext == <span class="string">&quot;&quot;</span>) <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">string</span> temptext = para.ParagraphText;</span><br><span class="line">    <span class="comment">//以下為替換文件模版中的關鍵字</span></span><br><span class="line">    <span class="keyword">if</span> (temptext.Contains(<span class="string">&quot;[$name$]&quot;</span>))</span><br><span class="line">        temptext = temptext.Replace(<span class="string">&quot;[$name$]&quot;</span>, newText);</span><br><span class="line">    para.ReplaceText(oldtext, temptext);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="抓取TABLE"><a href="#抓取TABLE" class="headerlink" title="抓取TABLE"></a>抓取TABLE</h3><p>這邊先用很簡單方式使用，請各位不要按照這暴力方式直接使用他。</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">FileStream fs = <span class="keyword">new</span> (docxPath, FileMode.Open, FileAccess.Read);</span><br><span class="line">XWPFDocument docx = <span class="keyword">new</span> (fs);</span><br><span class="line"><span class="keyword">foreach</span> (XWPFTable dt <span class="keyword">in</span> docx.Tables)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">foreach</span> (XWPFTableRow dr <span class="keyword">in</span> dt.Rows)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">foreach</span> (XWPFTableCell dc <span class="keyword">in</span> dr.GetTableICells())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">foreach</span> (<span class="keyword">var</span> para <span class="keyword">in</span> dc.Paragraphs)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">string</span> oldtext = para.ParagraphText;</span><br><span class="line">                <span class="built_in">string</span> newText = <span class="string">&quot;測試欄位&quot;</span>;</span><br><span class="line">                <span class="keyword">if</span> (oldtext == <span class="string">&quot;&quot;</span>)</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                <span class="built_in">string</span> temptext = para.ParagraphText;</span><br><span class="line">                <span class="comment">//以下為替換文件模版中的關鍵字</span></span><br><span class="line">                <span class="keyword">if</span> (temptext.Contains(<span class="string">&quot;[$name$]&quot;</span>))</span><br><span class="line">                    temptext = temptext.Replace(<span class="string">&quot;[$name$]&quot;</span>, newText);</span><br><span class="line">                para.ReplaceText(oldtext, temptext);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用type方式取用"><a href="#使用type方式取用" class="headerlink" title="使用type方式取用"></a>使用type方式取用</h3><p>當然可以不用一個一個把Index function寫一堆迴圈，可以使用<code>docx.BodyElements</code>取出，可以直接得知body裡面是TABLE、PARAGRAPH、CONTENTCONTROL。</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> IActionResult <span class="title">Index</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">string</span> docxPath = _env.WebRootPath + <span class="string">&quot;\\upload\\template.docx&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span> (System.IO.File.Exists(docxPath))</span><br><span class="line">    &#123;</span><br><span class="line">        FileStream fs = <span class="keyword">new</span> (docxPath, FileMode.Open, FileAccess.Read);</span><br><span class="line">        XWPFDocument docx = <span class="keyword">new</span> (fs);</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="keyword">var</span> bodyItem <span class="keyword">in</span> docx.BodyElements)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">switch</span> (bodyItem.ElementType)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">case</span> BodyElementType.TABLE:</span><br><span class="line">                    Set_DocxTableText(bodyItem.Body);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> BodyElementType.PARAGRAPH:</span><br><span class="line">                    Set_DocxText(bodyItem.Body);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> BodyElementType.CONTENTCONTROL:<span class="keyword">break</span>;</span><br><span class="line">                <span class="literal">default</span>:<span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Download(docx); </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> View();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Set_DocxText</span>(<span class="params">IBody docx</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="keyword">var</span> para <span class="keyword">in</span> docx.Paragraphs)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">string</span> oldtext = para.ParagraphText;</span><br><span class="line">        <span class="built_in">string</span> newText = <span class="string">&quot;測試欄位&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span> (oldtext == <span class="string">&quot;&quot;</span>)</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        <span class="built_in">string</span> temptext = para.ParagraphText;</span><br><span class="line">        <span class="comment">//以下為替換文件模版中的關鍵字</span></span><br><span class="line">        <span class="keyword">if</span> (temptext.Contains(<span class="string">&quot;[$name$]&quot;</span>))</span><br><span class="line">            temptext = temptext.Replace(<span class="string">&quot;[$name$]&quot;</span>, newText);</span><br><span class="line">        para.ReplaceText(oldtext, temptext);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Set_DocxTableText</span>(<span class="params">IBody docx</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">foreach</span> (XWPFTable dt <span class="keyword">in</span> docx.Tables)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">foreach</span> (XWPFTableRow dr <span class="keyword">in</span> dt.Rows)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">foreach</span> (XWPFTableCell dc <span class="keyword">in</span> dr.GetTableICells())</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">foreach</span> (<span class="keyword">var</span> para <span class="keyword">in</span> dc.Paragraphs)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="built_in">string</span> oldtext = para.ParagraphText;</span><br><span class="line">                    <span class="built_in">string</span> newText = <span class="string">&quot;測試欄位&quot;</span>;</span><br><span class="line">                    <span class="keyword">if</span> (oldtext == <span class="string">&quot;&quot;</span>)</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    <span class="built_in">string</span> temptext = para.ParagraphText;</span><br><span class="line">                    <span class="comment">//以下為替換文件模版中的關鍵字</span></span><br><span class="line">                    <span class="keyword">if</span> (temptext.Contains(<span class="string">&quot;[$name$]&quot;</span>))</span><br><span class="line">                        temptext = temptext.Replace(<span class="string">&quot;[$name$]&quot;</span>, newText);</span><br><span class="line">                    para.ReplaceText(oldtext, temptext);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> IActionResult <span class="title">Download</span>(<span class="params">XWPFDocument fs</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> memoryStream = <span class="keyword">new</span> MemoryStream();</span><br><span class="line">    fs.Write(memoryStream);</span><br><span class="line">    memoryStream.Seek(<span class="number">0</span>, SeekOrigin.Begin);</span><br><span class="line">    <span class="comment">// 回傳檔案到 Client 需要附上 Content Type，否則瀏覽器會解析失敗。</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> FileStreamResult(memoryStream, <span class="string">&quot;application/vnd.openxmlformats-officedocument.wordprocessingml.document&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 後端技術 </category>
          
          <category> C# </category>
          
          <category> Package </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Line Bots (四) - Line Message設定</title>
      <link href="/2023/01/21/%E5%BE%8C%E7%AB%AF%E6%8A%80%E8%A1%93/CS/Line/Line_04_Message%E8%A8%AD%E5%AE%9A/"/>
      <url>/2023/01/21/%E5%BE%8C%E7%AB%AF%E6%8A%80%E8%A1%93/CS/Line/Line_04_Message%E8%A8%AD%E5%AE%9A/</url>
      
        <content type="html"><![CDATA[<p>如果有完成上篇，回覆訊息會發現有自動回覆的功能。<br>(P.S. 這邊主要是設定Line Message API )</p><h2 id="Line-Message-API-自動回覆設定"><a href="#Line-Message-API-自動回覆設定" class="headerlink" title="Line Message API 自動回覆設定"></a>Line Message API 自動回覆設定</h2><p>這邊我們需要切換到 <a href="https://developers.line.biz/en/">Line Developers</a>。Line Message API 需要關掉自動回覆訊息需要到 Basic Setting &gt; Line Official Account Manager。</p><h2 id="關閉自動回覆"><a href="#關閉自動回覆" class="headerlink" title="關閉自動回覆"></a>關閉自動回覆</h2><p>到下一個頁面後，位置位於回覆設定 &gt; 進階設定只要把自動回覆訊息關閉即可。</p><p><img src="/img/dotnet/Line/Snipaste_2022-09-11_12-20-34.png"><br><img src="/img/dotnet/Line/Snipaste_2022-09-11_12-20-14.png"><br><img src="/img/dotnet/Line/Snipaste_2022-09-11_12-21-06.png"></p><h3 id="創建自動回覆"><a href="#創建自動回覆" class="headerlink" title="創建自動回覆"></a>創建自動回覆</h3><p>如果不創建 Message API 這個是可以代替方案，可以參考以下操作。因為操作簡單就不向下說明了。<br><img src="/img/dotnet/Line/Snipaste_2022-09-11_14-35-08.png"><br><img src="/img/dotnet/Line/Snipaste_2022-09-11_14-37-49.png"><br><img src="/img/dotnet/Line/Snipaste_2022-09-11_14-38-11.png"><br><img src="/img/dotnet/Line/Snipaste_2022-09-11_14-45-47.png"></p><h2 id="圖文訊息"><a href="#圖文訊息" class="headerlink" title="圖文訊息"></a>圖文訊息</h2><p>圖文訊息是主要廣告、訊息方便使用者點選的動作之一，目前他規範圖片需要1040px*1040px 才能上傳圖片。</p><h3 id="創建圖文訊息"><a href="#創建圖文訊息" class="headerlink" title="創建圖文訊息"></a>創建圖文訊息</h3><p><img src="/img/dotnet/Line/Snipaste_2022-09-11_15-20-19.png"></p><h3 id="建立新訊息-群發訊息"><a href="#建立新訊息-群發訊息" class="headerlink" title="建立新訊息 (群發訊息)"></a>建立新訊息 (群發訊息)</h3><p>群發訊息可以訊息、貼圖之外可貼張貼優惠卷、問卷調查、多頁訊息。設定完成後傳送訊息即可。<br><img src="/img/dotnet/Line/Snipaste_2022-09-11_15-20-53.png"><br><img src="/img/dotnet/Line/Snipaste_2022-09-11_15-21-19.png"><br><img src="/img/dotnet/Line/Snipaste_2022-09-11_15-21-31.png"><br><img src="/img/dotnet/Line/Snipaste_2022-09-11_15-22-02.png"></p><h2 id="問卷調查"><a href="#問卷調查" class="headerlink" title="問卷調查"></a>問卷調查</h2><p>問卷調查部分，有幾些地方可能會不太方便使用。問答限制 “單選”、”選擇”，Line 問答上只有這兩種功能，目前要使用Text 方面就要考慮改用 Google Form 。</p><p>目前需要注意項目</p><ul><li>時間限制 : 明天才能使用問卷。</li><li>問答限制 : “單選”、”選擇”</li></ul><p>問卷發送訊息跟圖文訊息一樣到 “建立新訊息” 即可。<br><img src="/img/dotnet/Line/Snipaste_2022-09-11_15-52-57.png"><br><img src="/img/dotnet/Line/Snipaste_2022-09-11_15-53-23.png"><br><img src="/img/dotnet/Line/Snipaste_2022-09-11_15-53-32.png"></p>]]></content>
      
      
      <categories>
          
          <category> 後端技術 </category>
          
          <category> C# </category>
          
          <category> Line </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
            <tag> Line </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Line Notify - 使用 C# 創建 Line Notify</title>
      <link href="/2023/01/21/%E5%BE%8C%E7%AB%AF%E6%8A%80%E8%A1%93/CS/Line/Line_05_Notify/"/>
      <url>/2023/01/21/%E5%BE%8C%E7%AB%AF%E6%8A%80%E8%A1%93/CS/Line/Line_05_Notify/</url>
      
        <content type="html"><![CDATA[<p>之前有已經結束Line Bot 簡易製作、使用方式，這是會使用Nottify 使用方式。目前為止Bot 製作上，Notift 不論是創建、呼叫、API 測試相對的比Bot 友善許多，Notify 可以應用很多方式(Exmpale : 監控、提示訊息、警示資訊等)。若有使用常駐、監聽伺服方式可以不妨加入Notify 功能。</p><h2 id="Line-Notify"><a href="#Line-Notify" class="headerlink" title="Line Notify"></a>Line Notify</h2><p>Notify 是由 Line 官方提供，主要應用通知訊息使用與Bots應用上有所不同。Notify可以免費傳送訊息，若Bots 有意外錯誤訊息可以透過Notify 合併、協助。</p><h3 id="連動的服務"><a href="#連動的服務" class="headerlink" title="連動的服務"></a>連動的服務</h3><p>目前有提供項目有以下三個。</p><ul><li><a href="https://en.mackerel.io/">Mackerel</a></li><li><a href="https://github.com/">Github</a></li><li><a href="https://ifttt.com/line">IFTTT</a></li></ul><h3 id="前置作業、工具"><a href="#前置作業、工具" class="headerlink" title="前置作業、工具"></a>前置作業、工具</h3><ul><li><a href="https://notify-bot.line.me/zh_TW/">Line Notify 官方</a></li><li><a href="https://code.visualstudio.com/">Visual Studio Code</a></li></ul><h2 id="創建Line-Notify-Project"><a href="#創建Line-Notify-Project" class="headerlink" title="創建Line Notify Project"></a>創建Line Notify Project</h2><p>創建順序 : [Line Notify 官方] &gt; [個人頁面]  &gt;按下 [發行權杖(Token)] &gt; 選擇 [透過1對1聊天接收Line Notify 的通知] &gt; 複製 Line Notify Token<br><img src="/img/dotnet/LineNotify/Snipaste_2022-10-08_22-20-10.png"><br><img src="/img/dotnet/LineNotify/Snipaste_2022-10-08_22-21-24.png"><br><img src="/img/dotnet/LineNotify/Snipaste_2022-10-08_22-22-00.png"><br><img src="/img/dotnet/LineNotify/Snipaste_2022-10-08_22-22-48.png"></p><h2 id="使用C-WebApi"><a href="#使用C-WebApi" class="headerlink" title="使用C# WebApi"></a>使用C# WebApi</h2><h3 id="前置作業"><a href="#前置作業" class="headerlink" title="前置作業"></a>前置作業</h3><ol><li>使用 命令字元或是Powershell ，輸入下方網址創建專案。<br>備註 : 這邊範例使用 Net6.0。<figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dotnet new webapi</span><br></pre></td></tr></table></figure></li><li>準備Line Notify Token</li></ol><h3 id="程式碼-Program-cs"><a href="#程式碼-Program-cs" class="headerlink" title="程式碼 - Program.cs"></a>程式碼 - Program.cs</h3><p>加入 Cors 設定</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> builder = WebApplication.CreateBuilder(args);</span><br><span class="line"><span class="comment">//add cors</span></span><br><span class="line">builder.Services.AddCors(options =&gt;</span><br><span class="line">&#123;</span><br><span class="line">    options.AddDefaultPolicy(</span><br><span class="line">        builder =&gt;</span><br><span class="line">        &#123;</span><br><span class="line">            builder.AllowAnyHeader().AllowAnyOrigin().AllowAnyMethod();</span><br><span class="line">        &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> app = builder.Build();</span><br><span class="line">app.UseCors();</span><br></pre></td></tr></table></figure><h3 id="程式碼-NotifyController"><a href="#程式碼-NotifyController" class="headerlink" title="程式碼 - NotifyController"></a>程式碼 - NotifyController</h3><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> Microsoft.AspNetCore.Mvc;</span><br><span class="line"><span class="keyword">using</span> Newtonsoft.Json;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title">dotnetCore_LineNotify.Controllers</span>;</span><br><span class="line"></span><br><span class="line">[<span class="meta">ApiController</span>]</span><br><span class="line">[<span class="meta">Route(<span class="string">&quot;[controller]&quot;</span>)</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">NotifyController</span> : <span class="title">ControllerBase</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> notifyToken &#123; <span class="keyword">get</span>; <span class="keyword">private</span> <span class="keyword">set</span>; &#125; = <span class="string">&quot;輸入 Line Notify Token&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> ILogger&lt;NotifyController&gt; _logger;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">NotifyController</span>(<span class="params">ILogger&lt;NotifyController&gt; logger</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        _logger = logger;</span><br><span class="line">    &#125;</span><br><span class="line">    [<span class="meta">HttpGet</span>]</span><br><span class="line">    <span class="function"><span class="keyword">public</span> IActionResult <span class="title">Get</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">string</span> msg = <span class="string">&quot;測試阿!&quot;</span>;</span><br><span class="line">        isRock.LineNotify.Utility.SendNotify(notifyToken, msg);</span><br><span class="line">        <span class="keyword">return</span> Ok(msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/img/dotnet/LineNotify/Snipaste_2022-10-08_23-03-58.png"></p><p>以上步驟完成後，Notify 就已經可以正常回覆訊息，如果要更詳細使用方式可以參考官方提供的文件。</p><ul><li><a href="https://notify-bot.line.me/doc/en/">LINE Notify API Document</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 後端技術 </category>
          
          <category> C# </category>
          
          <category> Line </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
            <tag> Line </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Line Bots (二) - 使用C# Core API 加入 MessageAPI (使用 Push Message)</title>
      <link href="/2023/01/21/%E5%BE%8C%E7%AB%AF%E6%8A%80%E8%A1%93/CS/Line/Line_02_%E4%BD%BF%E7%94%A8CsharpMessageAPI/"/>
      <url>/2023/01/21/%E5%BE%8C%E7%AB%AF%E6%8A%80%E8%A1%93/CS/Line/Line_02_%E4%BD%BF%E7%94%A8CsharpMessageAPI/</url>
      
        <content type="html"><![CDATA[<p>Line Bots 使用方式會主要使用 C# 撰寫，如果是使用其他語言只僅供參考。繼上篇紀錄儲存相關資訊後，需要準備一個 <a href="/2022/08/11/Note/ngrok/">ngrok</a> 即可。</p><p>本章節範例 : </p><ul><li>Github <a href="https://github.com/JontCont/dotnetCore_LineBot">dotnetCore_LineBot</a></li></ul><h2 id="一、-創建-C-Web-API-專案"><a href="#一、-創建-C-Web-API-專案" class="headerlink" title="一、 創建 C# Web API 專案"></a>一、 創建 C# Web API 專案</h2><p>使用環境 Net6 WebAPI 來開發，dotnet 指令可以不用特別去設定 <code>-f net6.0</code>。<br>第一步、Cmd 指令下達 <code>dotnet new webapi</code>指令，後續再安裝重要的Nuget。<br>第二步、設定Cors就完成前置任務。</p><h3 id="安裝-Nuget"><a href="#安裝-Nuget" class="headerlink" title="安裝 Nuget"></a>安裝 Nuget</h3><p>專案部分需要安裝部分，如下:</p><ul><li><a href="https://www.nuget.org/packages/LineBotSDK">LineBotSDK</a></li><li><a href="https://www.nuget.org/packages/Newtonsoft.Json/13.0.2-beta2">Newtonsoft.Json</a></li></ul><h3 id="Cors-設定-Program-cs"><a href="#Cors-設定-Program-cs" class="headerlink" title="Cors 設定 (Program.cs)"></a>Cors 設定 (Program.cs)</h3><p>Net6.0 因為只有Program 可以設定，只要是 Mvc 、Blazor 、驗證等透過他設定。這邊我們為了方便測試先加入一小段 Cors ，後續排除問題動作可以減少。</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//add cors</span></span><br><span class="line">builder.Services.AddCors(options =&gt;</span><br><span class="line">&#123;</span><br><span class="line">    options.AddDefaultPolicy(</span><br><span class="line">        builder =&gt;</span><br><span class="line">        &#123;</span><br><span class="line">            builder.AllowAnyHeader().AllowAnyOrigin().AllowAnyMethod();</span><br><span class="line">        &#125;);</span><br><span class="line">&#125;);</span><br><span class="line">app.UseCors();</span><br></pre></td></tr></table></figure><h2 id="二、-Message-API-使用-Push-Message"><a href="#二、-Message-API-使用-Push-Message" class="headerlink" title="二、 Message API - 使用 Push Message"></a>二、 Message API - 使用 Push Message</h2><p>我們用非常簡單的範例。先加入MessageController.cs 並把自己得 Token、ID 加入上去。撰寫程式部分到這邊就結束了。</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">ApiController</span>]</span><br><span class="line">[<span class="meta">Route(<span class="string">&quot;[controller]&quot;</span>)</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MessageController</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> channelToken&#123;<span class="keyword">get</span>; <span class="keyword">private</span> <span class="keyword">set</span>;&#125; =<span class="string">@&quot;你的 Token &quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> adminUserID&#123;<span class="keyword">get</span>; <span class="keyword">private</span> <span class="keyword">set</span>;&#125;  =<span class="string">@&quot;你的 User ID&quot;</span>;</span><br><span class="line"></span><br><span class="line">    [<span class="meta">HttpPost</span>]</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">string</span> <span class="title">Post</span>()</span>&#123;</span><br><span class="line">        Bot bot = InitialBots();</span><br><span class="line">        bot.PushMessage(adminUserID, <span class="string">&quot;Push Message !!&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> JsonConvert.SerializeObject(<span class="keyword">new</span> &#123; success = <span class="literal">true</span>, message = <span class="string">&quot;&quot;</span> &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//-------------------------//</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Bot <span class="title">InitialBots</span>()</span>&#123;</span><br><span class="line">        <span class="built_in">string</span> channelToken = <span class="keyword">this</span>.channelToken;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Bot(channelToken);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="開啟-ngrok"><a href="#開啟-ngrok" class="headerlink" title="開啟 ngrok"></a>開啟 ngrok</h3><p>剩下最後一項工作，必須要加入ngrok。Line Bots Webhook URL 這個選像是待會再把ngrok網址貼在上面，這東西因為不能用<code>localhost</code> 必須要使用ngrok;</p><p>首先，先到launchSetting.json 修改一小段。暫時把原本applicationUrl註解，並往下加入你想要的Port。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;dotnetCore_LineBot&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;commandName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Project&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;dotnetRunMessages&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;launchBrowser&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;launchUrl&quot;</span><span class="punctuation">:</span> <span class="string">&quot;swagger&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="comment">// &quot;applicationUrl&quot;: &quot;https://localhost:7231;http://localhost:5196&quot;,</span></span><br><span class="line">  <span class="attr">&quot;applicationUrl&quot;</span><span class="punctuation">:</span> <span class="string">&quot;http://localhost:5196&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;environmentVariables&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;ASPNETCORE_ENVIRONMENT&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Development&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure><p>目前要長期使用又不想要開IIS ，暫時輸入 <code>dotnet watch</code>、<code>ngrok http 5196</code>即可。兩個指令建議用各自用<strong>指令視窗</strong>。</p><p>如果不會使用 ngrok 可以參考連結 : <a href="/2022/08/11/Note/ngrok/">點選我</a></p><h2 id="三、Line-Message-API-設定"><a href="#三、Line-Message-API-設定" class="headerlink" title="三、Line Message API 設定"></a>三、Line Message API 設定</h2><p>接下來，只要在<a href="https://developers.line.biz/zh-hant/">Line Developer</a> 設定。<br>回到我們的Line Developer ，把 ngrok Url 加入在 webhook setting 當中，務必別忘了加入 <code>Message</code>名稱。<br><img src="/img/dotnet/Line/Snipaste_2022-09-09_17-16-33.png"></p><p>設定完成後，建議點選 Verify 按鈕驗證API是不是有通，按下按鈕後出現 <code>Success </code>訊息代表順利完成了。題外話，官方網POST動作只看能不能傳回來，所以範例其實沒有特別撰寫內容。</p>]]></content>
      
      
      <categories>
          
          <category> 後端技術 </category>
          
          <category> C# </category>
          
          <category> Line </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
            <tag> Line </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Line Bots (三) - 使用C# Reply Message</title>
      <link href="/2023/01/21/%E5%BE%8C%E7%AB%AF%E6%8A%80%E8%A1%93/CS/Line/Line_03_ReplyMessage/"/>
      <url>/2023/01/21/%E5%BE%8C%E7%AB%AF%E6%8A%80%E8%A1%93/CS/Line/Line_03_ReplyMessage/</url>
      
        <content type="html"><![CDATA[<p>上一篇完成簡易版本的Push Message ，這邊要稍微注意一下使用量。Line 提供兩種模式給Message API使用 “Push”、”Reply”兩種模式，其中Push用來推廣方案銷售，所以次數限量上會限縮在500則，超過後需要付費才能使用。</p><p>Reply 目前使用上沒有任何限制，所以使用上可以不必要特別拘謹。</p><h2 id="前置作業、工具"><a href="#前置作業、工具" class="headerlink" title="前置作業、工具"></a>前置作業、工具</h2><p>處理步驟需要修改 <code>launchSetting.json</code> url ，並執行ngrok、<code>dotnet run</code>就可以使用。 </p><ul><li>launchSetting.json</li><li>ngrok </li><li>後端技術 run</li></ul><div class="note info flat"><h3 id="備註"><a href="#備註" class="headerlink" title="備註"></a>備註</h3><p>ngrok 只要不中途離開，即使當下”網頁失效” ngrok 是會繼續執行。</p></div><h3 id="程式碼範例"><a href="#程式碼範例" class="headerlink" title="程式碼範例"></a>程式碼範例</h3><ul><li>Github <a href="https://github.com/JontCont/dotnetCore_LineBot">dotnetCore_LineBot</a></li></ul><h2 id="Reply-Message-1-x2F-2"><a href="#Reply-Message-1-x2F-2" class="headerlink" title="Reply Message - 1&#x2F;2"></a>Reply Message - 1&#x2F;2</h2><p>Line Reply 需要使用者回覆訊息，Bots 部分會選擇適當回覆內容回覆給對方。當中 Reply 可以判別對方發的訊息是 Message 、Images 、貼圖 ，Json 回覆部分後續再探討。</p><p>完成Line Bots Reply Message 前置作業，需要完成三步驟。</p><h3 id="一、取得-JSON-Body"><a href="#一、取得-JSON-Body" class="headerlink" title="一、取得 JSON Body"></a>一、取得 JSON Body</h3><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">string</span> strBody = <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    <span class="comment">//取得 http Post </span></span><br><span class="line">    <span class="keyword">using</span> (StreamReader reader = <span class="keyword">new</span>(Request.Body, System.Text.Encoding.UTF8))</span><br><span class="line">    &#123;</span><br><span class="line">        strBody = reader.ReadToEndAsync().Result;</span><br><span class="line">        <span class="keyword">if</span> (reader == <span class="literal">null</span> || <span class="built_in">string</span>.IsNullOrEmpty(strBody))</span><br><span class="line">            <span class="keyword">return</span> JsonConvert.SerializeObject(<span class="keyword">new</span> &#123; success = <span class="literal">false</span>, message = <span class="string">&quot;error : message empty &quot;</span> &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">catch</span>(Exception ex)&#123;</span><br><span class="line">    bot.PushMessage(adminUserID, ex.Message);</span><br><span class="line">    <span class="keyword">return</span> JsonConvert.SerializeObject(<span class="keyword">new</span> &#123; success = <span class="literal">false</span>, message = ex.Message &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二、轉-JSON-Data"><a href="#二、轉-JSON-Data" class="headerlink" title="二、轉 JSON Data"></a>二、轉 JSON Data</h3><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//RawData(should be JSON)</span></span><br><span class="line"><span class="keyword">var</span> ReceivedMessage = Utility.Parsing(strBody);</span><br><span class="line"><span class="keyword">if</span> (ReceivedMessage == <span class="literal">null</span>) <span class="keyword">return</span> JsonConvert.SerializeObject(<span class="keyword">new</span> &#123; success = <span class="literal">false</span>, message = <span class="string">&quot;error : message empty &quot;</span> &#125;);</span><br></pre></td></tr></table></figure><h3 id="三、取得Line-Event"><a href="#三、取得Line-Event" class="headerlink" title="三、取得Line Event"></a>三、取得Line Event</h3><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> LineEvent = ReceivedMessage.events.FirstOrDefault();</span><br><span class="line"><span class="keyword">if</span> (LineEvent == <span class="literal">null</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> JsonConvert.SerializeObject(<span class="keyword">new</span> &#123; success = <span class="literal">false</span>, message = <span class="string">&quot;error : not found event ! &quot;</span> &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="Reply-Message-2-x2F-2"><a href="#Reply-Message-2-x2F-2" class="headerlink" title="Reply Message - 2&#x2F;2"></a>Reply Message - 2&#x2F;2</h2><p>完成以上作業後，我的處理方式是把Event拆開，Line 有提供 Event 可以取得狀態。以下處理方式只有加入Join 以及message。</p><div class="note info flat"><h3 id="備註"><a href="#備註" class="headerlink" title="備註"></a>備註</h3><p>如果使用這使用 images 貼上圖片，會直接執行到 message 。處理Line Event 方式需要留意一下</p></div><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ReplyBotsMessage</span>(<span class="params">Bot bot,Event lineEvent</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    TextMessage textMessage = <span class="keyword">new</span> (<span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">switch</span> (lineEvent.type)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;join&quot;</span>:</span><br><span class="line">            textMessage = <span class="keyword">new</span> TextMessage(<span class="string">$&quot;大家好啊~&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;message&quot;</span>:</span><br><span class="line">            <span class="built_in">string</span> text = lineEvent.message.text;</span><br><span class="line">            <span class="keyword">if</span> (text == <span class="literal">null</span>) <span class="keyword">break</span>;</span><br><span class="line">            textMessage =  <span class="keyword">new</span> TextMessage(<span class="string">$&quot;您回應是 : <span class="subst">&#123;text&#125;</span>&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">string</span>.IsNullOrEmpty(textMessage.text))&#123;</span><br><span class="line">        textMessage = <span class="keyword">new</span> (<span class="string">$&quot;你回覆的訊息無法判讀，請重新輸入!!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    bot.ReplyMessage(lineEvent.replyToken, textMessage);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="完整程式碼"><a href="#完整程式碼" class="headerlink" title="完整程式碼"></a>完整程式碼</h3><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> isRock.LineBot;</span><br><span class="line"><span class="keyword">using</span> Microsoft.AspNetCore.Mvc;</span><br><span class="line"><span class="keyword">using</span> Newtonsoft.Json;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">dotnetCore_LineBot.Controllers</span></span><br><span class="line">&#123;</span><br><span class="line">    [<span class="meta">ApiController</span>]</span><br><span class="line">    [<span class="meta">Route(<span class="string">&quot;[controller]&quot;</span>)</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MessageController</span>: <span class="title">ControllerBase</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span> channelToken&#123;<span class="keyword">get</span>; <span class="keyword">private</span> <span class="keyword">set</span>;&#125;=<span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span> adminUserID&#123;<span class="keyword">get</span>; <span class="keyword">private</span> <span class="keyword">set</span>;&#125;=<span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">        [<span class="meta">HttpPost</span>]</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="built_in">string</span> <span class="title">Post</span>()</span>&#123;</span><br><span class="line">            Bot bot = InitialBots();</span><br><span class="line">            List&lt;MessageBase&gt; repMessage = <span class="keyword">new</span> List&lt;MessageBase&gt;();</span><br><span class="line">            <span class="built_in">string</span> strBody = <span class="string">&quot;&quot;</span>;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">try</span>&#123;</span><br><span class="line">                <span class="comment">//取得 http Post </span></span><br><span class="line">                <span class="keyword">using</span> (StreamReader reader = <span class="keyword">new</span>(Request.Body, System.Text.Encoding.UTF8))</span><br><span class="line">                &#123;</span><br><span class="line">                    strBody = reader.ReadToEndAsync().Result;</span><br><span class="line">                    <span class="keyword">if</span> (reader == <span class="literal">null</span> || <span class="built_in">string</span>.IsNullOrEmpty(strBody))</span><br><span class="line">                        <span class="keyword">return</span> JsonConvert.SerializeObject(<span class="keyword">new</span> &#123; success = <span class="literal">false</span>, message = <span class="string">&quot;error : message empty &quot;</span> &#125;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">catch</span>(Exception ex)&#123;</span><br><span class="line">                bot.PushMessage(adminUserID, ex.Message);</span><br><span class="line">                <span class="keyword">return</span> JsonConvert.SerializeObject(<span class="keyword">new</span> &#123; success = <span class="literal">false</span>, message = ex.Message &#125;);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//RawData(should be JSON)</span></span><br><span class="line">            <span class="keyword">var</span> ReceivedMessage = Utility.Parsing(strBody);</span><br><span class="line">            <span class="keyword">if</span> (ReceivedMessage == <span class="literal">null</span>) <span class="keyword">return</span> JsonConvert.SerializeObject(<span class="keyword">new</span> &#123; success = <span class="literal">false</span>, message = <span class="string">&quot;error : message empty &quot;</span> &#125;);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> LineEvent = ReceivedMessage.events.FirstOrDefault();</span><br><span class="line">            <span class="keyword">if</span> (LineEvent == <span class="literal">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> JsonConvert.SerializeObject(<span class="keyword">new</span> &#123; success = <span class="literal">false</span>, message = <span class="string">&quot;error : not found event ! &quot;</span> &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">            ReplyBotsMessage(bot,LineEvent);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> JsonConvert.SerializeObject(<span class="keyword">new</span> &#123; success = <span class="literal">true</span>, message = <span class="string">&quot;&quot;</span> &#125;);</span><br><span class="line">        &#125;<span class="comment">//public : Post</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//-------------------------//</span></span><br><span class="line">        <span class="function"><span class="keyword">private</span> Bot <span class="title">InitialBots</span>()</span>&#123;</span><br><span class="line">            <span class="built_in">string</span> channelToken = <span class="keyword">this</span>.channelToken;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Bot(channelToken);</span><br><span class="line">        &#125;<span class="comment">//private: InitialBots</span></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ReplyBotsMessage</span>(<span class="params">Bot bot,Event lineEvent</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            TextMessage textMessage = <span class="keyword">new</span> (<span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">switch</span> (lineEvent.type)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;join&quot;</span>:</span><br><span class="line">                    textMessage = <span class="keyword">new</span> TextMessage(<span class="string">$&quot;大家好啊~&quot;</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;message&quot;</span>:</span><br><span class="line">                    <span class="built_in">string</span> text = lineEvent.message.text;</span><br><span class="line">                    <span class="keyword">if</span> (text == <span class="literal">null</span>) <span class="keyword">break</span>;</span><br><span class="line">                    textMessage =  <span class="keyword">new</span> TextMessage(<span class="string">$&quot;您回應是 : <span class="subst">&#123;text&#125;</span>&quot;</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">string</span>.IsNullOrEmpty(textMessage.text))&#123;</span><br><span class="line">                textMessage = <span class="keyword">new</span> (<span class="string">$&quot;你回覆的訊息無法判讀，請重新輸入!!&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            bot.ReplyMessage(lineEvent.replyToken, textMessage);</span><br><span class="line">        &#125;<span class="comment">//private: ReplyBotsMessage</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;<span class="comment">//class : MessageController</span></span><br><span class="line">&#125;<span class="comment">//namespace</span></span><br></pre></td></tr></table></figure><h2 id="參考文件"><a href="#參考文件" class="headerlink" title="參考文件"></a>參考文件</h2><ul><li><a href="https://tw.linebiz.com/e-learning/oa/Messaging-API-application/">活用 Messaging API 打造客製化的官方帳號</a></li><li><a href="https://blog.omnichat.ai/2020/01/line-2-0-official-account-pricing/">LINE@ 收費計算機（2022 最新）LINE2.0 官方帳號費用線上試算</a></li><li><a href="http://studyhost.blogspot.com/2019/07/cline-bot32-net-core-22-webhook.html">使用C#開發LINE Bot(32) – .net core 2.2 WebHook 範例</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 後端技術 </category>
          
          <category> C# </category>
          
          <category> Line </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
            <tag> Line </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Line Bots (一) - 環境建立、註冊</title>
      <link href="/2023/01/21/%E5%BE%8C%E7%AB%AF%E6%8A%80%E8%A1%93/CS/Line/Line_01_%E7%92%B0%E5%A2%83%E5%BB%BA%E7%AB%8B%E3%80%81%E8%A8%BB%E5%86%8A/"/>
      <url>/2023/01/21/%E5%BE%8C%E7%AB%AF%E6%8A%80%E8%A1%93/CS/Line/Line_01_%E7%92%B0%E5%A2%83%E5%BB%BA%E7%AB%8B%E3%80%81%E8%A8%BB%E5%86%8A/</url>
      
        <content type="html"><![CDATA[<p>Line Bots 是台灣最多的使用之一的APP，如果要向外推廣必須要從 Line 下手是最好的選擇。本次計畫會撰寫Line Message 使用方式，大致上只有簡單如何創建 Message API。</p><h2 id="Line-Developers"><a href="#Line-Developers" class="headerlink" title="Line Developers"></a><a href="https://developers.line.biz/zh-hant/">Line Developers</a></h2><p>Line Developers 是 Line 提供的開發環境。詳細介紹 : <a href="https://engineering.linecorp.com/zh-hant/blog/line-bot-guideline-1/">LINE Bot 開發者指南詳解</a></p><h2 id="註冊、創建環境"><a href="#註冊、創建環境" class="headerlink" title="註冊、創建環境"></a>註冊、創建環境</h2><p>創建方式需要透過 Line Developers : <a href="https://developers.line.biz/zh-hant/">請點選</a> 這個來進行註冊。這邊使用個人帳號即可。接下來，需要創建 “Project” 專案，如下圖。</p><p><img src="/img/dotnet/Line/Snipaste_2022-09-09_10-06-48.png"><br><img src="/img/dotnet/Line/Snipaste_2022-09-09_10-13-48.png"><br><img src="/img/dotnet/Line/Snipaste_2022-09-09_10-16-42.png"></p><p>因為我們下一個主題式 Message API 所以請選擇它。</p><p><img src="/img/dotnet/Line/Snipaste_2022-09-09_10-24-50.png"></p><h2 id="創建-Message-API-Channel"><a href="#創建-Message-API-Channel" class="headerlink" title="創建 Message API Channel"></a>創建 Message API Channel</h2><p>創建部份Url 部分可以先不填入，後續有需要後面章節會在說明。</p><p><img src="/img/dotnet/Line/Snipaste_2022-09-09_10-30-47.png"><br><img src="/img/dotnet/Line/Snipaste_2022-09-09_10-32-03.png"></p><p>創建完畢後，現在有兩個重要資訊，務必要存起來。</p><ol><li>Channel ID </li><li>Channel secret </li><li>Your user ID </li><li>Channel access token</li></ol><p>Channel access token 位置在於 Message API 分頁最下方點選即可。<br><img src="/img/dotnet/Line/Snipaste_2022-09-09_11-54-52.png"></p><p>以上資訊存檔資後，記得把機器人加入在Line 上面。<br><img src="/img/dotnet/Line/Snipaste_2022-09-09_10-36-59.png"></p>]]></content>
      
      
      <categories>
          
          <category> 後端技術 </category>
          
          <category> C# </category>
          
          <category> Line </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
            <tag> Line </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>三大前端框架 (一) - 安裝/環境設定</title>
      <link href="/2023/01/21/%E5%89%8D%E7%AB%AF%E6%8A%80%E8%A1%93/fron_end_01_install/"/>
      <url>/2023/01/21/%E5%89%8D%E7%AB%AF%E6%8A%80%E8%A1%93/fron_end_01_install/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>近期安排特殊的行程，我會把 React、Vue 、Angular 三大架框玩過一輪，在分析各式的架框使用的方式。我們就直接先從React先下手。<br>本篇教學如何安裝 三大架框環境，後續再針對架構探討。</p><hr><h1 id="基本安裝"><a href="#基本安裝" class="headerlink" title="基本安裝"></a>基本安裝</h1><p>以下我會使用的工具，依據讀者的習慣分配自己的工具。</p><ol><li><a href="https://nodejs.org/en/">Node.js</a> (必)</li><li><a href="https://git-scm.com/">Git</a></li><li><a href="https://code.visualstudio.com/">VS Code</a></li></ol><p>安裝環境時，請確認 node 版本在進行下方作業。 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm -v</span><br></pre></td></tr></table></figure><h1 id="一、React"><a href="#一、React" class="headerlink" title="一、React"></a>一、React</h1><p>官方網連結：[ <a href="https://zh-hant.reactjs.org/">https://zh-hant.reactjs.org/</a> ]</p><h2 id="1-安裝-x2F-創建-React"><a href="#1-安裝-x2F-創建-React" class="headerlink" title="1 安裝&#x2F;創建 React"></a>1 安裝&#x2F;創建 React</h2><p>安裝 React 請輸入<code>npx create-react-app [名稱]</code> ，如果有遇到下方錯誤訊息，請參考下方處理方式。<br><img src="/img/React/01.jpg"></p><ul><li><a href="https://blog.csdn.net/weixin_38610651/article/details/107021204">解决npm安装时出现run <code>npm audit fix</code> to fix them, or <code>npm audit</code> for details</a></li></ul><p>安裝完畢後，請移動到指定PATH，指令 :<code>cd [名稱]</code>，再來進行<code>npm start</code>開啟網站。<br><img src="/img/react/02.jpg"></p><h2 id="2-結果畫面"><a href="#2-結果畫面" class="headerlink" title="2 結果畫面"></a>2 結果畫面</h2><p><img src="/img/react/03.jpg"></p><hr><h1 id="二、Angular"><a href="#二、Angular" class="headerlink" title="二、Angular"></a>二、Angular</h1><p>官方網連結：[ <a href="https://angular.io/">https://angular.io/</a> ]</p><h2 id="1-安裝-x2F-創建-Angular"><a href="#1-安裝-x2F-創建-Angular" class="headerlink" title="1 安裝&#x2F;創建 Angular"></a>1 安裝&#x2F;創建 Angular</h2><p>安裝方式需要注意。 Angular需要安裝 Angular-cli套件，尚未安裝會影響創建問題。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -g @angular/cli</span><br></pre></td></tr></table></figure><p>接下來，再用創建專案如同React一樣，如果未輸入名稱會系統會自動帶入名稱。<br>安裝需要一些時間，請各位耐心等候。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ng new [Angular-name]</span><br></pre></td></tr></table></figure><p><img src="/img/angular/01.jpg"><br><img src="/img/angular/02.jpg"></p><h2 id="2-執行-Angular"><a href="#2-執行-Angular" class="headerlink" title="2 執行 Angular"></a>2 執行 Angular</h2><p>完成後，移動創好的專案並執行他。官方網有提到 –open 可以改為 -o 。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd [Angular-name]</span><br><span class="line">ng serve --open </span><br></pre></td></tr></table></figure><p><img src="/img/angular/03.jpg"></p><h2 id="3-結果畫面"><a href="#3-結果畫面" class="headerlink" title="3 結果畫面"></a>3 結果畫面</h2><p><img src="/img/angular/04.jpg"></p><h1 id="三、VueJs"><a href="#三、VueJs" class="headerlink" title="三、VueJs"></a>三、VueJs</h1><p>官方網連結： [ <a href="https://vuejs.org/">https://vuejs.org/</a> ]</p><h2 id="1-安裝-VueJs"><a href="#1-安裝-VueJs" class="headerlink" title="1 安裝 VueJs"></a>1 安裝 VueJs</h2><p>vueJs 需要安裝 Vue-Cli 套件，如同Angular一樣。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -g @vue/cli</span><br></pre></td></tr></table></figure><p>安裝完畢後，創建 vue 專案並進入vue專案內中，並直接執行即可。 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vue create [vue-name]</span><br><span class="line">cd [vue-name]</span><br><span class="line">npm run serve</span><br></pre></td></tr></table></figure><p><img src="/img/vue/01.jpg"><br><img src="/img/vue/02.jpg"><br><img src="/img/vue/03.jpg"></p><h2 id="2-結果畫面-1"><a href="#2-結果畫面-1" class="headerlink" title="2 結果畫面"></a>2 結果畫面</h2><p><img src="/img/vue/04.jpg"></p><hr><h1 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h1><p>操作下來，安裝部分常常遇到版本需要更新才能進行使用或是創建專案，<br>近年來 angular 、 react 、vue 開始很多人使用，文件參考也慢慢變多<br>，也歡迎大家來嘗試這幾些架框。</p><p>後續會先介紹 Electron + MVC 環境安裝，才正式慢慢進入[三大架框]使用方式。</p>]]></content>
      
      
      <categories>
          
          <category> 前端技術 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ReactJs </tag>
            
            <tag> Angular </tag>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React (一) - JSX 使用方式、介紹</title>
      <link href="/2023/01/21/%E5%89%8D%E7%AB%AF%E6%8A%80%E8%A1%93/REACT/react_01/"/>
      <url>/2023/01/21/%E5%89%8D%E7%AB%AF%E6%8A%80%E8%A1%93/REACT/react_01/</url>
      
        <content type="html"><![CDATA[<h1 id="React-介紹"><a href="#React-介紹" class="headerlink" title="React 介紹"></a>React 介紹</h1><p>React 可稱 ReactJs ，主要由Facebook、Instagram 和一個由個人開發者和企業組成的社群維護。</p><p>React為程式設計師提供了一種子組件不能直接影響外層組件（”data flows down”）的模型，資料改變時對HTML文件的有效更新，和現代單頁應用中組件之間乾淨的分離。</p><p>手機開發為 React Native : <a href="https://reactnative.dev/">https://reactnative.dev/</a></p><h2 id="JSX-語法"><a href="#JSX-語法" class="headerlink" title="JSX 語法"></a>JSX 語法</h2><p>JSX語法是開發React的核心語法，是一個 JavaScript 的語法擴充，X為Xml之意。<br>使用方式會與js不同，React能使用方式如下。</p><div class="note info flat"><p>🎈 注意 : 以下範例為 index.js 輸入的方式，並非在App.js所使用。</p></div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> el = <span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Hello React !!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="title class_">ReactDom</span>.<span class="title function_">render</span>(</span><br><span class="line">  el,</span><br><span class="line">  <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>)</span><br><span class="line">);</span><br><span class="line"></span><br></pre></td></tr></table></figure><div class="note info flat"><h3 id="StrictMode"><a href="#StrictMode" class="headerlink" title="StrictMode"></a>StrictMode</h3><p> 主要用來檢查component有無錯誤的方式<br> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">React.StrictMode</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">App</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">React.StrictMode</span>&gt;</span></span>,</span><br><span class="line">  <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure></p></div><hr><h2 id="JSX-使用方式"><a href="#JSX-使用方式" class="headerlink" title="JSX 使用方式"></a>JSX 使用方式</h2><p>請創建一個js檔案測試React規則，並使用下方範例。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*index.js*/</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ReactDOM</span> <span class="keyword">from</span> <span class="string">&#x27;react-dom&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Ex01</span> <span class="keyword">from</span> <span class="string">&#x27;./ex_01&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> el = <span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Hello React !!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">React.StrictMode</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">Ex01</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">React.StrictMode</span>&gt;</span></span>,</span><br><span class="line">  <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>)</span><br><span class="line">);</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//ex_01</span></span><br><span class="line"><span class="keyword">const</span> el = <span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>使用這方式也能正常產生文字<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">example_01</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        el</span><br><span class="line">    );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> example_01;</span><br></pre></td></tr></table></figure><p>基本上，React需要注意render() return要加上<code>&lt;div&gt;</code>。</p><p>注意是 jsx 是 function 不能用表達是方式使用，會造成意外的錯誤。若是使用變數方式是可以正常使用。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">example_01</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>使用這方式也能正常產生文字<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> example_01;</span><br></pre></td></tr></table></figure><hr><h2 id="事件使用"><a href="#事件使用" class="headerlink" title="事件使用"></a>事件使用</h2><p>JSX使用方式可以設定onClick方式。這邊我使用<code>&#123;&#125;</code>表示法，內容使用function名稱即可使用。 </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//按下事件</span></span><br><span class="line"><span class="keyword">let</span> <span class="title function_">clickAlert</span> = (<span class="params"></span>)=&gt;&#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&#x27;你已經點下我了&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//設定預設按鈕</span></span><br><span class="line"><span class="keyword">let</span> <span class="title function_">btnFunctionDemo</span> =(<span class="params"></span>)=&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span>( </span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;clickAlert&#125;</span>&gt;</span>請點我<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span> );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> btnFunctionDemo;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>這邊的<code>&#123;&#125;</code>表示法可以使用在css方式。<br>例如 : </p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> style_bg_blue = &#123; <span class="attr">background</span>: <span class="string">&#x27;blue&#x27;</span>, <span class="attr">margin</span>: <span class="string">&#x27;10px&#x27;</span>&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h1><p>花了第一天用 React JSX使用一遍，多少會有點操作上不太習慣。這邊比較像是說明如何使用JSX，後續會再研究看看如何更深入使用React。</p><p>(P.S. 本人JS不太強，講解無法太深入，請見諒&lt;(＿　＿)&gt;。)</p>]]></content>
      
      
      <categories>
          
          <category> 前端技術 </category>
          
          <category> ReactJs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ReactJs </tag>
            
            <tag> Angular </tag>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript - 停止事件 preventDefault()</title>
      <link href="/2023/01/21/%E5%89%8D%E7%AB%AF%E6%8A%80%E8%A1%93/JS/js_09_%E5%81%9C%E6%AD%A2%E4%BA%8B%E4%BB%B6/"/>
      <url>/2023/01/21/%E5%89%8D%E7%AB%AF%E6%8A%80%E8%A1%93/JS/js_09_%E5%81%9C%E6%AD%A2%E4%BA%8B%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<p>近期遇到比較麻煩的問題”非同步”問題，像是form submit之前不能確保一定完成執行，相對需要使用所謂的sleep相關作法，一開始以為可以成功結果一觸發事件就會submit 事件…。</p><h2 id="停止事件"><a href="#停止事件" class="headerlink" title="停止事件"></a>停止事件</h2><p>JavaScript事件，最常用的是onclick、onchange之類，本身事件中可以呼叫出event 事件。event 事件會紀錄著事件觸發的狀態。</p><h2 id="event-preventDefault"><a href="#event-preventDefault" class="headerlink" title="event.preventDefault()"></a>event.preventDefault()</h2><p>這做法可以延遲提交內容，如果用<code>return false</code> 會讓他失效，比較有效方式可以使用這個，先讓他把事件暫停加入我們想要的功能即可。目前遇到非同步時候最有效的做法。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&#x27;form&#x27;</span>).<span class="title function_">submit</span>(<span class="function">(<span class="params">event</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> form = <span class="variable language_">this</span>;</span><br><span class="line">  event.<span class="title function_">preventDefault</span>();</span><br><span class="line">  </span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">      form.<span class="title function_">submit</span>();</span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="測試範例"><a href="#測試範例" class="headerlink" title="測試範例"></a>測試範例</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&#x27;button&#x27;</span>).<span class="title function_">click</span>(<span class="function">(<span class="params">event</span>)=&gt;</span>&#123;</span><br><span class="line">  event.<span class="title function_">preventDefault</span>();</span><br><span class="line">  </span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;一秒後執行&#x27;</span>);</span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h2 id="event-stopPropagation"><a href="#event-stopPropagation" class="headerlink" title="event.stopPropagation()"></a>event.stopPropagation()</h2><p>這事件是針對多個div 重疊後，啟動click會產”事件冒泡”。功能主要是阻止事件冒泡，後續在補充。</p>]]></content>
      
      
      <categories>
          
          <category> 前端技術 </category>
          
          <category> javascript </category>
          
          <category> ES6 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript - AJAX</title>
      <link href="/2023/01/21/%E5%89%8D%E7%AB%AF%E6%8A%80%E8%A1%93/JS/js_10_ajax/"/>
      <url>/2023/01/21/%E5%89%8D%E7%AB%AF%E6%8A%80%E8%A1%93/JS/js_10_ajax/</url>
      
        <content type="html"><![CDATA[<h2 id="什麼是-AJAX-？"><a href="#什麼是-AJAX-？" class="headerlink" title="什麼是 AJAX ？"></a>什麼是 AJAX ？</h2><p>AJAX 是「Asynchronous JavaScript and XML」（非同步的 JavaScript 與 XML 技術）的縮寫，簡單說就是網頁不用重新整理，就能即時地透過瀏覽器去跟伺服器溝通，撈出資料。</p><ul><li>Asynchronous：非同步</li><li>JavaScript：使用的程式語言</li><li>XML：Client 與 Server 交換資料用的資料與方法，近年由於 JSON 等格式的流行，使用 Ajax 處理的資料並不限於 XML。</li></ul><h2 id="同步請求-v-s-非同步請求"><a href="#同步請求-v-s-非同步請求" class="headerlink" title="同步請求 v.s. 非同步請求"></a>同步請求 v.s. 非同步請求</h2><p>接著讓我們引入客戶端與伺服器端的概念，來看看「同步請求」和「非同步請求」的對比：</p><ul><li><p>同步請求 (Synchronous request)： 客戶端 (client) 對伺服器端 (server) 送出 request ，並且在收到伺服器端的 response 之後才會繼續下一步的動作，等待的期間無法處理其他事情。這個作法並不理想，因為通常伺服器端的運算速度比本地電腦慢上好幾倍。</p></li><li><p>非同步請求 (Asynchronous request)：客戶端 (client) 對伺服器端 (server) 送出 request 之後，不需要等待結果，仍可以持續處理其他事情，甚至繼續送出其他 request。Responese 傳回之後，就被融合進當下頁面或應用中。</p></li></ul><h2 id="常見問題-get-與-post-的差異"><a href="#常見問題-get-與-post-的差異" class="headerlink" title="常見問題 : get 與 post 的差異"></a>常見問題 : get 與 post 的差異</h2><ul><li>get：從瀏覽器發出請求，伺服器會回傳資料（在 responseText 裡面回傳一個物件）。</li><li>post：從瀏覽器發出請求，傳送資料時註明格式，若選擇用表單格式，則傳送資料的內容要仿照表單傳送後的網址*。<br>*也就是欄位1 name &#x3D; 使用者輸入的值1 &amp; 欄位2 name &#x3D; 使用者輸入的值2 etc.</li></ul><h2 id="Ajax-Method"><a href="#Ajax-Method" class="headerlink" title="Ajax Method"></a>Ajax Method</h2><p>Api 設計過程中，很常需要配合幾個medth 互換使用。API設計模式可以參考 <a href="https://hackmd.io/@mopcon/2020/%2F%40mopcon%2FB17d5KSww"><code>RESTful </code></a></p><ul><li>POST : 新增</li><li>GET : 讀取</li><li>PUT&#x2F;PATCH : 更新</li><li>DELECT :刪除</li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端技術 </category>
          
          <category> javascript </category>
          
          <category> ES6 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript 參數（Param） - Param()</title>
      <link href="/2023/01/21/%E5%89%8D%E7%AB%AF%E6%8A%80%E8%A1%93/JS/js_08_%E5%8F%83%E6%95%B8_Param/"/>
      <url>/2023/01/21/%E5%89%8D%E7%AB%AF%E6%8A%80%E8%A1%93/JS/js_08_%E5%8F%83%E6%95%B8_Param/</url>
      
        <content type="html"><![CDATA[<h1 id="參數（Param）"><a href="#參數（Param）" class="headerlink" title="參數（Param）"></a>參數（Param）</h1><h2 id="什麼是參數-parameters"><a href="#什麼是參數-parameters" class="headerlink" title="什麼是參數(parameters)"></a>什麼是參數(parameters)</h2><p>要了解arguments之前，我們必須要先了解什麼是參數(parameter)。參數其實就是我們會帶入函式的變數，以下面程式的例子來說，”phone”、”food”、”job”，就是我們在執行函式的時候可以任意填入的參數。不給任何參數值還是可以執行該函式。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">MyFavorite</span> (phone ,food ,job)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(&#123;</span><br><span class="line">        phone : phone,</span><br><span class="line">        food : food,</span><br><span class="line">        job : job</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Param"><a href="#Param" class="headerlink" title="Param()"></a>Param()</h2><p>序列化一個key&#x2F;value對象，該序列化值可以進行AJAX請求時在URL查詢字串中使用。</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>object</td><td>要進行序列化的數值或對象。</td></tr><tr><td>traditional</td><td>規定是否使用傳統的方式淺層進行序列化（参數序列化）。</td></tr></tbody></table><h3 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jQuery.<span class="title function_">param</span>(object,traditional)</span><br></pre></td></tr></table></figure><p>以下範例執行結果width&#x3D;1680&amp;height&#x3D;1050，應用方面可以傳入給ajax。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> params = &#123; <span class="attr">width</span>:<span class="number">1900</span>, <span class="attr">height</span>:<span class="number">1200</span> &#125;;</span><br><span class="line"><span class="keyword">var</span> str = jQuery.<span class="title function_">param</span>(params);</span><br><span class="line">$(<span class="string">&quot;#results&quot;</span>).<span class="title function_">text</span>(str);</span><br></pre></td></tr></table></figure><h3 id="範例"><a href="#範例" class="headerlink" title="範例"></a>範例</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;/jquery/jquery.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      $(<span class="variable language_">document</span>).<span class="title function_">ready</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">      </span></span><br><span class="line"><span class="language-javascript">        personObj=<span class="keyword">new</span> <span class="title class_">Object</span>();</span></span><br><span class="line"><span class="language-javascript">        personObj.<span class="property">firstname</span>=<span class="string">&quot;Bill&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">        personObj.<span class="property">lastname</span>=<span class="string">&quot;Gates&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">        personObj.<span class="property">age</span>=<span class="number">60</span>;</span></span><br><span class="line"><span class="language-javascript">        personObj.<span class="property">eyecolor</span>=<span class="string">&quot;blue&quot;</span>; </span></span><br><span class="line"><span class="language-javascript">        </span></span><br><span class="line"><span class="language-javascript">        $(<span class="string">&quot;button&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">          $(<span class="string">&quot;div&quot;</span>).<span class="title function_">text</span>($.<span class="title function_">param</span>(personObj));</span></span><br><span class="line"><span class="language-javascript">        &#125;);</span></span><br><span class="line"><span class="language-javascript">        </span></span><br><span class="line"><span class="language-javascript">      &#125;);</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span>&gt;</span>序列化对象<span class="tag">&lt;/<span class="name">button</span>&gt;</span>S</span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端技術 </category>
          
          <category> javascript </category>
          
          <category> ES6 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript - 正規表示法(一) Regular Expression</title>
      <link href="/2023/01/21/%E5%89%8D%E7%AB%AF%E6%8A%80%E8%A1%93/JS/js_05_regex/"/>
      <url>/2023/01/21/%E5%89%8D%E7%AB%AF%E6%8A%80%E8%A1%93/JS/js_05_regex/</url>
      
        <content type="html"><![CDATA[<p>這裡主要紀錄使用規則，後續補上使用說明。</p><h1 id="正規表示式"><a href="#正規表示式" class="headerlink" title="正規表示式"></a>正規表示式</h1><p>正規表示法（英語：Regular Expression，常簡寫為regex、regexp或RE），又稱正規表達式、正規表示式、規則運算式、常規表示法，是電腦科學的一個概念。正規表示式使用單個字串來描述、符合一系列符合某個句法規則的字串。在很多文字編輯器裡，正則表達式通常被用來檢索、替換那些符合某個模式的文字。</p><p>正規表達式是被用來匹配字串中字元組合的模式。在 JavaScript 中，正規表達式也是物件，這些模式在 RegExp 的 exec (en-US) 和 test (en-US) 方法中，以及 String 的 match、replace、search (en-US)、split (en-US) 等方法中被運用。</p><h2 id="中介字元（Metacharacters）"><a href="#中介字元（Metacharacters）" class="headerlink" title="中介字元（Metacharacters）"></a>中介字元（Metacharacters）</h2><table><thead><tr><th>中介字元</th><th>說明</th><th>範例</th><th>說明</th></tr></thead><tbody><tr><td>[]</td><td>字元的集合。</td><td>[a-m]</td><td>a~m之間的小寫英文字</td></tr><tr><td>\</td><td>發出特殊序列的信號（也可以用於轉義特殊字符）。</td><td>\d</td><td>只要數字</td></tr><tr><td>.</td><td>除了新行符號外的任意字元。</td><td>he…o</td><td>he字串後接著兩個字元，然後接著是o</td></tr><tr><td>^</td><td>字串以此為開頭。</td><td>^hello</td><td>字串開頭為hello</td></tr><tr><td>$</td><td>以此為結尾的字串。</td><td>world$</td><td>字串結尾為world</td></tr><tr><td>*</td><td>字元或字串出現任意次數（包含０次）。</td><td>aix*</td><td>ai、aix、aix和aixx或更多x都符合。</td></tr><tr><td>?</td><td>字元或字串出現 0 或 1 次。</td><td>aix?</td><td>僅ai、aix符合。</td></tr><tr><td>+</td><td>字元或字串至少出現一次。</td><td>aix+</td><td>僅aix符合。</td></tr><tr><td>{m,n}</td><td>指定字元或字串出現的m~n之間的次數。</td><td>al{2} al{3,6}</td><td>a後面連續2個l的字串 a後面連續3到6個l的字串</td></tr><tr><td>|</td><td>單一字元或群組的或，例如 ‘a|b’ 為 ‘a’ 或 ‘b’ 。</td><td>falls|stays</td><td>字串包含falls或是stays</td></tr><tr><td>()</td><td>對小括弧內的字元形成群組。</td><td></td><td></td></tr></tbody></table><h2 id="特別序列（Special-Sequences）"><a href="#特別序列（Special-Sequences）" class="headerlink" title="特別序列（Special Sequences）"></a>特別序列（Special Sequences）</h2><table><thead><tr><th>特別序列</th><th>說明</th></tr></thead><tbody><tr><td>\A</td><td>字串的開頭字元。</td></tr><tr><td>\b</td><td>單字的界線字元。</td></tr><tr><td>\B</td><td>字元的界線字元。</td></tr><tr><td>\d</td><td>數字，從 0 到 9 。</td></tr><tr><td>\D</td><td>非數字。</td></tr><tr><td>\s</td><td>各種空白符號，包含換行符號 \n 。</td></tr><tr><td>\S</td><td>非空白符號。</td></tr><tr><td>\w</td><td>任意文字字元，包括數字。</td></tr><tr><td>\W</td><td>非文字字元，包括空白符號。</td></tr><tr><td>\Z</td><td>字串的結尾字元。</td></tr></tbody></table><h2 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h2><table><thead><tr><th>集合</th><th>說明</th></tr></thead><tbody><tr><td>[arn]</td><td>回傳字串中含有a、r或n的小寫字元。</td></tr><tr><td>[a-n]</td><td>回傳字串中含有a~n之間的任意小寫字元。</td></tr><tr><td>[^arn]</td><td>回傳任意字元，除了，a、r和n。</td></tr><tr><td>[0123]</td><td>回傳字串中含有0、1、2或3的數字。</td></tr><tr><td>[0-9]</td><td>回傳字串中含有0~9之間的數字。</td></tr><tr><td>[0-5][0-9]</td><td>回傳00~59之間的數字。</td></tr><tr><td>[a-zA-Z]</td><td>回傳a~z之間的大寫和小寫字元。</td></tr><tr><td>[+]</td><td>回傳字串中的+號（+, *, ., &#96;</td></tr><tr><td>\W</td><td>非文字字元，包括空白符號。</td></tr><tr><td>\Z</td><td>字串的結尾字元。</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 前端技術 </category>
          
          <category> javascript </category>
          
          <category> ES6 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript - 正規表示式(二) Regular Expression</title>
      <link href="/2023/01/21/%E5%89%8D%E7%AB%AF%E6%8A%80%E8%A1%93/JS/js_06_regex_(02)/"/>
      <url>/2023/01/21/%E5%89%8D%E7%AB%AF%E6%8A%80%E8%A1%93/JS/js_06_regex_(02)/</url>
      
        <content type="html"><![CDATA[<p>正規表示式是最常見的一個功能，不論是字串過濾、轉換、判斷相當實用。這篇使用JS方式使用，後續如果有空就會撰寫其他版本的寫法。</p><h1 id="JS-正規表示式"><a href="#JS-正規表示式" class="headerlink" title="JS 正規表示式"></a>JS 正規表示式</h1><h2 id="使用工具"><a href="#使用工具" class="headerlink" title="使用工具"></a>使用工具</h2><p>本篇使用方式是大家都可以使用的<code>DevTools</code>，如果不知道這東西可以點開瀏覽器並按下F12。</p><p>第一次發現視窗太小，可以參考下方圖片。</p><p><img src="/img/js/context/DevTools_001.png"><br><img src="/img/js/context/DevTools_002.png"></p><h2 id="開始使用"><a href="#開始使用" class="headerlink" title="開始使用"></a>開始使用</h2><p>使用方式是需要選擇主控台即可，其餘的先暫時不理會。</p><p><img src="/img/js/context/DevTools_003.png"></p><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><p>初始化方式可使用下面兩種寫法，一種前後加入斜線就可以達成效果。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> re = <span class="regexp">/Hello/</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> reg = <span class="keyword">new</span> <span class="title class_">RegExp</span>(<span class="string">&#x27;Hello world in JavaScript&#x27;</span>);</span><br></pre></td></tr></table></figure><h2 id="text、exec、search-使用方式"><a href="#text、exec、search-使用方式" class="headerlink" title="text、exec、search 使用方式"></a>text、exec、search 使用方式</h2><p>text 測試字串是否有府和字串，回傳方式會是boolean。<br>以下測試可以使用 <code>/i</code>：不區分大小寫，<code>/g</code>：比對字串所有位置 </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> re = <span class="regexp">/Hello/i</span>;</span><br><span class="line">re.<span class="title function_">test</span>(<span class="string">&#x27;hello&#x27;</span>); <span class="comment">//true</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> re = <span class="regexp">/Hello/g</span>;</span><br><span class="line">re.<span class="title function_">test</span>(<span class="string">&#x27;hello&#x27;</span>); <span class="comment">//false</span></span><br></pre></td></tr></table></figure><hr><p>exec 與test 不同於可以顯示比較詳細的內容，若不存在會以null方式呈現。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> re = <span class="regexp">/Hello/i</span>;</span><br><span class="line">re.<span class="title function_">exec</span>(<span class="string">&#x27;hello&#x27;</span>); <span class="comment">//[&#x27;hello&#x27;, index: 0, input: &#x27;hello&#x27;, groups: undefined]</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> re = <span class="regexp">/Hello/g</span>;</span><br><span class="line">re.<span class="title function_">exec</span>(<span class="string">&#x27;hello&#x27;</span>); <span class="comment">//null</span></span><br></pre></td></tr></table></figure><hr><p>search 與 indexOf 相同，找尋字串中會去抓取第幾位個位置，主要是數值呈現。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str =<span class="string">&#x27;hello world in JavaScript&#x27;</span>;</span><br><span class="line">str.<span class="title function_">search</span>(<span class="string">&#x27;he&#x27;</span>);     <span class="comment">//0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//indeOf比較</span></span><br><span class="line">str.<span class="title function_">search</span>(<span class="string">&#x27;world&#x27;</span>);  <span class="comment">//6</span></span><br><span class="line">str.<span class="title function_">indexOf</span>(<span class="string">&#x27;world&#x27;</span>); <span class="comment">//6</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//找不到</span></span><br><span class="line">str.<span class="title function_">search</span>(<span class="string">&#x27;world1&#x27;</span>); <span class="comment">//-1</span></span><br></pre></td></tr></table></figure><h2 id="特殊字元"><a href="#特殊字元" class="headerlink" title="特殊字元"></a>特殊字元</h2><p>特殊字元有很多種類可以使用看看效果，像是上一張標中有提到 <code>^</code>匹配輸入的開頭。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str =<span class="string">&#x27;hello world in JavaScript&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> re = <span class="regexp">/^hello/</span>;</span><br><span class="line">str.<span class="title function_">match</span>(re); <span class="comment">//[&#x27;hello&#x27;, index: 0, input: &#x27;hello world in JavaScript&#x27;, groups: undefined]</span></span><br><span class="line"></span><br><span class="line">str.<span class="title function_">match</span>(<span class="regexp">/^Hello/</span>); <span class="comment">//null</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>如果是 <code>$</code>用法則會在結尾時取得。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str =<span class="string">&#x27;hello world in JavaScript&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> re = <span class="regexp">/pt$/</span>;</span><br><span class="line">str.<span class="title function_">match</span>(re); <span class="comment">//[&#x27;pt&#x27;, index: 23, input: &#x27;hello world in JavaScript&#x27;, groups: undefined]</span></span><br><span class="line"></span><br><span class="line">str.<span class="title function_">match</span>(<span class="regexp">/pt4/</span>); <span class="comment">//null</span></span><br></pre></td></tr></table></figure><p>有時候常常遇到需要用<code>\b</code>使用這方式，可以參考下方。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> regex = <span class="regexp">/./</span>   <span class="comment">// 比對換行符號外的任意一個字元</span></span><br><span class="line"><span class="keyword">const</span> regex = <span class="regexp">/\d/</span>  <span class="comment">// 比對一個數字，相等於 /[0-9]/</span></span><br><span class="line"><span class="keyword">const</span> regex = <span class="regexp">/\w/</span>  <span class="comment">// 比對一個英文、數字或底線，相等於 /[A-Za-z0-9_]/</span></span><br><span class="line"><span class="keyword">const</span> regex = <span class="regexp">/\s/</span>  <span class="comment">// 比對一個的空格 (ex: space, tab, 換行, ...)</span></span><br><span class="line"><span class="keyword">const</span> regex = <span class="regexp">/[^\w]/</span></span><br></pre></td></tr></table></figure><h2 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h2><p>這邊就會比較多人需要使用這段，原則上如果要判斷序號、數值就可以用這個來排除。<br>下方範例兩種寫法是都可以呈現A-Z效果。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> regex = <span class="regexp">/[ABCDEFGHIJKLMNOPQRSTUVWXYZ]/</span></span><br><span class="line"><span class="keyword">let</span> regex = <span class="regexp">/[A-Z]/</span></span><br></pre></td></tr></table></figure><p>同樣數字也可以呈現，特別需求可以將數字跟英文字合併。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> regex = <span class="regexp">/[0123456789]/</span></span><br><span class="line"><span class="keyword">let</span> regex = <span class="regexp">/[0-9]/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> regex = <span class="regexp">/[A-Za-z0-9]/</span></span><br></pre></td></tr></table></figure><h2 id="量詞"><a href="#量詞" class="headerlink" title="量詞 {}"></a>量詞 {}</h2><p>量詞方式會由{}修飾  <code>/\d\d\d\d\d/ </code> 可以變成 <code>/\d&#123;5&#125;/</code>。 </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用 &#123;5&#125; 表示連續出現 5 次</span></span><br><span class="line"><span class="keyword">let</span> regex = <span class="regexp">/\d&#123;5&#125;/</span></span><br><span class="line">regex.<span class="title function_">exec</span>(<span class="string">&#x27;abcde12345&#x27;</span>) <span class="comment">// [&quot;12345&quot;, index: 5, ...]</span></span><br><span class="line">regex.<span class="title function_">exec</span>(<span class="string">&#x27;a1b2c3d4e5&#x27;</span>) <span class="comment">// null</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用 ? 表示出現 0 或 1 次，等同於 &#123;0,1&#125;</span></span><br><span class="line"><span class="keyword">const</span> regex = <span class="regexp">/\w?/</span></span><br><span class="line"><span class="comment">// 使用 + 表示出現 1 次或以上，等同於 &#123;1,&#125;</span></span><br><span class="line"><span class="keyword">const</span> regex = <span class="regexp">/\w+/</span></span><br><span class="line"><span class="comment">// 使用 * 表示出現 0 次或以上，等同於 &#123;0,&#125;</span></span><br><span class="line"><span class="keyword">const</span> regex = <span class="regexp">/\w*/</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// &#x27;+&#x27; 出現的次數越多優先</span></span><br><span class="line"><span class="keyword">const</span> regex = <span class="regexp">/a\+&#123;2,&#125;/</span></span><br><span class="line">regex.<span class="title function_">exec</span>(<span class="string">&#x27;a+++++&#x27;</span>) <span class="comment">// [&quot;a+++++&quot;, index: 0, ...]</span></span><br><span class="line"><span class="comment">// &#x27;+&#x27; 出現的次數越少優先</span></span><br><span class="line"><span class="keyword">const</span> regex = <span class="regexp">/a\+&#123;2,&#125;?/</span></span><br><span class="line">regex.<span class="title function_">exec</span>(<span class="string">&#x27;a+++++&#x27;</span>) <span class="comment">// [&quot;a++&quot;, index: 0, ...]</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端技術 </category>
          
          <category> javascript </category>
          
          <category> ES6 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript 定時器（timer） - setTimeout() VS setInterval()</title>
      <link href="/2023/01/21/%E5%89%8D%E7%AB%AF%E6%8A%80%E8%A1%93/JS/js_07_%E5%AE%9A%E6%99%82%E5%99%A8_time/"/>
      <url>/2023/01/21/%E5%89%8D%E7%AB%AF%E6%8A%80%E8%A1%93/JS/js_07_%E5%AE%9A%E6%99%82%E5%99%A8_time/</url>
      
        <content type="html"><![CDATA[<h1 id="定時器（timer）"><a href="#定時器（timer）" class="headerlink" title="定時器（timer）"></a>定時器（timer）</h1><p>定時器在javascript 當中會不知道如何處理定時問題。 不少人會因為要理解使用 Javascript 如何計數相當懊惱，這邊先簡單介紹兩個function熟悉這兩個定義。</p><h2 id="setTimeout-vs-setInterval"><a href="#setTimeout-vs-setInterval" class="headerlink" title="setTimeout vs setInterval"></a>setTimeout vs setInterval</h2><p>這兩個function 功能上有不相同問題，兩種function定義如下。</p><ol><li>setTimeout  : 用於在指定的毫秒數後呼叫函式或計算表示式 - (延遲)</li><li>setInterval : 在播放動畫的時，每隔一定時間就呼叫函式，方法或物件 - (週期)</li></ol><h2 id="setTimeout"><a href="#setTimeout" class="headerlink" title="setTimeout"></a>setTimeout</h2><p>timeout 目前是程式界最常看到的詞，定義上有延遲效果，相對可以使用在時間範圍，後面用AJAX說明。</p><p>下方範例是透過 setTimeout 指定一段程式碼或函式在多少毫秒(ms)後執行，並回傳此定時器的編號。可以透過 clearTimeout 取消程式碼的執行。<br>例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 函式會將第一個參數字串使用eval轉換為可執行之程式碼</span></span><br><span class="line"><span class="comment">// 三秒後在 console 印出 &quot;test123&quot;</span></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="string">&#x27;console.log(&quot;test123&quot;);&#x27;</span>,<span class="number">3000</span>);</span><br><span class="line"><span class="comment">// 你也可以寫成function</span></span><br><span class="line"><span class="built_in">setTimeout</span>(</span><br><span class="line">    <span class="keyword">function</span>(<span class="params"></span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;test123&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">,<span class="number">3000</span>);</span><br></pre></td></tr></table></figure><p>setTimeout()執行方法其實是將須執行程式碼加入任務佇列，直到輪到此程式碼執行時，檢查時間是否到達，若到達則執行程式碼。 舉例來說：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 單純執行這段程式碼，可以看到實際所執行任務的時間</span></span><br><span class="line"><span class="keyword">var</span> startTime= <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">new</span> <span class="title class_">Date</span>()-startTime);&#125;,<span class="number">100</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;<span class="number">1000000000</span>; i++)&#123;&#125;</span><br></pre></td></tr></table></figure><p>可以發現 setTimeout 所設定的程式碼，會因為目前任務佇列所執行的程式碼而可能發生延誤執行的狀況。從下方程式碼，可以看到執行 func 的 end 與 start 時間基本上是符合我們所設定的 100 ms。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> startTime=<span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line"><span class="keyword">var</span> func = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;start: &#x27;</span> + (<span class="keyword">new</span> <span class="title class_">Date</span>()-startTime));</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;<span class="number">1000000000</span>; i++)&#123;&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;end: &#x27;</span> + (<span class="keyword">new</span> <span class="title class_">Date</span>()-startTime));</span><br><span class="line"><span class="built_in">setTimeout</span>(func,<span class="number">100</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">setTimeout</span>(func,<span class="number">100</span>);</span><br><span class="line"><span class="comment">// start: 2515</span></span><br><span class="line"><span class="comment">// end: 3457</span></span><br><span class="line"><span class="comment">// start: 3558</span></span><br><span class="line"><span class="comment">// end: 4503</span></span><br><span class="line"><span class="comment">// start: 4604</span></span><br><span class="line"><span class="comment">// end: 5543</span></span><br><span class="line"><span class="comment">// ....</span></span><br></pre></td></tr></table></figure><h2 id="setInterval"><a href="#setInterval" class="headerlink" title="setInterval"></a>setInterval</h2><p>綁定在瀏覽器 window 的一個方法，可以透過 setInterval 指定一段程式碼或函式定時在多少毫秒(ms)後執行，並回傳此定時器的編號。可以透過 clearInterval 取消程式碼的執行。<br>大致用法與 setTimeout 相同，只差在定時執行，因此這邊我們同樣測試延遲執行的問題。可以發現與 setTimeout 一樣是有延遲的狀況發生。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> startTime=<span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line"><span class="keyword">var</span> func = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;start: &#x27;</span> + (<span class="keyword">new</span> <span class="title class_">Date</span>()-startTime));</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;<span class="number">1000000000</span>; i++)&#123;&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;end: &#x27;</span> + (<span class="keyword">new</span> <span class="title class_">Date</span>()-startTime));</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">setInterval</span>(func,<span class="number">100</span>);</span><br><span class="line"><span class="comment">// start: 2520</span></span><br><span class="line"><span class="comment">// end: 3465</span></span><br><span class="line"><span class="comment">// start: 3466</span></span><br><span class="line"><span class="comment">// end: 4409</span></span><br><span class="line"><span class="comment">// start: 4409</span></span><br><span class="line"><span class="comment">// end: 5350</span></span><br><span class="line"><span class="comment">// start: 5351</span></span><br><span class="line"><span class="comment">// end: 6291</span></span><br><span class="line"><span class="comment">// start: 6292</span></span><br></pre></td></tr></table></figure><p>上面這段程式碼的執行結果，與上面的 setTimeout 比較，你會發現 setInterval 的 end 與 start 時間跳動非常大，並不是我們所設定的 100 ms。<br>由於 setInterval 是一開始就標定了執行時間點，當所註冊的函式(func)超過執行的時間點，結束時則會馬上觸發(func)，因此並不會是固定的 100 ms。</p><h2 id="補充"><a href="#補充" class="headerlink" title="補充"></a>補充</h2><h3 id="AJAX-Timeout"><a href="#AJAX-Timeout" class="headerlink" title="AJAX Timeout"></a>AJAX Timeout</h3><p>很多function 常常會遇到延遲或讀取值無法返回問題，當然這邊定義也是可以視為延遲，效果就會從開始到結束相當實用。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&quot;POST&quot;</span>,</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&quot;xxxx&quot;</span>,</span><br><span class="line">    <span class="attr">timeout</span>: <span class="number">30000</span>, <span class="comment">//超時時間：30秒</span></span><br><span class="line">    <span class="attr">dataType</span>: <span class="string">&#x27;json&#x27;</span></span><br><span class="line">    <span class="attr">success</span>: <span class="keyword">function</span>(<span class="params">result</span>) &#123;</span><br><span class="line">        <span class="comment">// <span class="doctag">TODO:</span> check result</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">error</span>: <span class="keyword">function</span>(<span class="params">XMLHttpRequest, textStatus, errorThrown</span>)&#123;</span><br><span class="line">        <span class="comment">//<span class="doctag">TODO:</span> 處理status， http status code，超時 408</span></span><br><span class="line">        <span class="comment">// 注意：如果發生了錯誤，錯誤資訊（第二個引數）除了得到null之外，還可能</span></span><br><span class="line">        <span class="comment">//是&quot;timeout&quot;, &quot;error&quot;, &quot;notmodified&quot; 和 &quot;parsererror&quot;。</span></span><br><span class="line">    &#125;, </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>注意事項</p><ol><li>預設的timeout為0，代表永不超時</li><li>資料讀取環境。 (如果是遇到 server網路受限或是寬頻受限可以考慮使用此方式)</li><li>超時處理</li></ol><p>XMLHttpRequest.readyState: 狀態碼</p><ul><li>0 － （未初始化）還沒有呼叫send()方法</li><li>1 － （載入）已呼叫send()方法，正在傳送請求</li><li>2 － （載入完成）send()方法執行完成，已經接收到全部響應內容</li><li>3 － （互動）正在解析響應內容</li><li>4 － （完成）響應內容解析完成，可以在客戶端呼叫了</li></ul><h2 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h2><p>最後，利用前面提到的延遲執行(將 setTimeout 與 setInterval 事件放進 task queue)特性，我們可以應用在程式碼執行的順序(比如等 innerHTML 執行完才 document.getElementById)。 舉例來說：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;想最後執行的一段程式碼(getElementById)&quot;</span>);</span><br><span class="line">&#125;, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">a</span>(<span class="params">x</span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;a() 開始 innerHTML&quot;</span>);</span><br><span class="line"><span class="title function_">b</span>(x);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;a() 結束 innerHTML&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">function</span> <span class="title function_">b</span>(<span class="params">y</span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;b() 開始&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;傳入的值&quot;</span> + y);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;b() 結束&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;程式碼開始&quot;</span>);</span><br><span class="line"><span class="title function_">a</span>(<span class="number">42</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;程式碼結束&quot;</span>);</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 執行結果：</span></span><br><span class="line"><span class="comment">// 程式碼開始</span></span><br><span class="line"><span class="comment">// a() 開始 innerHTML</span></span><br><span class="line"><span class="comment">// b() 開始</span></span><br><span class="line"><span class="comment">// 傳入的值42</span></span><br><span class="line"><span class="comment">// b() 結束</span></span><br><span class="line"><span class="comment">// a() 結束 innerHTML</span></span><br><span class="line"><span class="comment">// 程式碼結束</span></span><br><span class="line"><span class="comment">// 想最後執行的一段程式碼(getElementById)</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端技術 </category>
          
          <category> javascript </category>
          
          <category> ES6 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript - Fetch</title>
      <link href="/2023/01/21/%E5%89%8D%E7%AB%AF%E6%8A%80%E8%A1%93/JS/js_02_Fetch/"/>
      <url>/2023/01/21/%E5%89%8D%E7%AB%AF%E6%8A%80%E8%A1%93/JS/js_02_Fetch/</url>
      
        <content type="html"><![CDATA[<p>前陣子，同事需要做一個能在Url判斷是否能連上或是存在的網址，才進行轉頁面。因此我們直接來實作有幾種方式可以知道已存在網址或是不存在。</p><h1 id="遠端資料方法"><a href="#遠端資料方法" class="headerlink" title="遠端資料方法"></a>遠端資料方法</h1><p>JavaScript 中可以使用 <a href="https://developer.mozilla.org/zh-TW/docs/Web/API/XMLHttpRequest">XMLHttpRequest</a> 的方法。</p><h2 id="XMLHttpRequest"><a href="#XMLHttpRequest" class="headerlink" title="XMLHttpRequest"></a>XMLHttpRequest</h2><p>JavaScript 沒有jquery 使用，會如同下方處理方式。 針對[url]變數舉得網址，load中會取得status方式，算是很久的寫法。</p><div class="note blue icon-padding simple"><i class="note-icon fas fa-bullhorn"></i><p>備註 : (這部分可以寫成 ajax 方式，如果遇到 CORS 之後章節會在細說。)</p></div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> url = <span class="string">&#x27;https://randomuser.me/api/&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> req = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line">req.<span class="title function_">open</span>(<span class="string">&#x27;get&#x27;</span>, url, <span class="literal">false</span>);</span><br><span class="line">req.<span class="property">onload</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> $div = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#response-result&#x27;</span>);</span><br><span class="line">  $div.<span class="property">textContent</span> += <span class="string">&#x27;DONE : &#x27;</span>+ req.<span class="property">status</span>;</span><br><span class="line">&#125;;</span><br><span class="line">req.<span class="title function_">send</span>(<span class="literal">null</span>);</span><br></pre></td></tr></table></figure><h2 id="Fetch"><a href="#Fetch" class="headerlink" title="Fetch"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Fetch_API/Using_Fetch">Fetch</a></h2><p>這裡Fetch提供簡單的範例來取得遠端的資料，fetch 會使用 ES6 的 Promise 作回應，then 作為下一步，catch 作為錯誤回應 (404, 500…)。<br>回傳的為 ReadableStream 物件，需要使用不同資料類型使用對應方法，才能正確取得資料物件。</p><p><img src="/img/Web/js/js-fetch/xhr.PNG"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> url =</span><br><span class="line">  <span class="string">&#x27;https://randomuser.me/api/&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_">fetch</span>(url,&#123;&#125;).<span class="title function_">then</span>(<span class="function">(<span class="params">rep</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(rep.<span class="property">status</span>);</span><br><span class="line">  <span class="keyword">let</span> $div = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#response-result&#x27;</span>);</span><br><span class="line">  $div.<span class="property">textContent</span> += <span class="string">&#x27;DONE : &#x27;</span>+ rep.<span class="property">status</span>;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>fetch 後方會接 then()，這是 Promise 的特性，資料取得後可在 then 裡面接收。<code>return response.json();</code> 的資料則會傳到下一個 then()。<br>then方法會得到一個帶有Response(回應)物件值的已實現狀態的Promise物件。Response 物件通常都是從外部資源要求所得到，自訂Response物件算是會在特殊的情況下才會作的事情。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> url =</span><br><span class="line">  <span class="string">&#x27;https://randomuser.me/api/&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_">fetch</span>(url,&#123;&#125;).<span class="title function_">then</span>(<span class="function">(<span class="params">rep</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(rep.<span class="property">status</span>);</span><br><span class="line">  <span class="keyword">let</span> $div = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#response-result&#x27;</span>);</span><br><span class="line">  $div.<span class="property">textContent</span> += <span class="string">&#x27;DONE : &#x27;</span>+ rep.<span class="property">status</span>;</span><br><span class="line">  <span class="keyword">return</span> res.<span class="title function_">json</span>(); </span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function">(<span class="params">jsonData</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(jsonData);</span><br><span class="line">&#125;).<span class="title function_">catch</span>(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;錯誤:&#x27;</span>, err);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="Fetch相關介面說明"><a href="#Fetch相關介面說明" class="headerlink" title="Fetch相關介面說明"></a>Fetch相關介面說明</h1><p>fetch的核心由GlobalFetch、Request、Response與Headers四個介面(物件)與一個Body(Mixin混合)。概略的內容說明如下:</p><ul><li>GlobalFetch: 提供全域的fetch方法</li><li>Request: 要求，其中包含method、url、headers、context、body等等屬性與clone方法</li><li>Response: 回應，其中包含headers、ok、status、statusText、type、body等等屬性與clone方法</li><li>Headers: 執行Request與Response中所包含的headers的各種動作，例如取回、增加、移除、檢查等等。設計這個介面的原因有一部份是為了安全性。</li><li>Body: 同時在Request與Response中均有實作，裡面有包含主體內容的資料，是一種ReadableStream(可讀取串流)的物件</li></ul><h2 id="Request-要求"><a href="#Request-要求" class="headerlink" title="Request(要求)"></a>Request(要求)</h2><p>Request 物件中可以包含的屬性值，可以看到設定值相當多，可以依使用情況設定到很細:</p><ul><li>method: GET, POST, PUT, DELETE, HEAD。</li><li>url: 要求的網址。</li><li>headers: 與要求相關的Headers物件。</li><li>referrer - no-referrer, client或一個網址。預設為client。</li><li>mode - cors, no-cors, same-origin, navigate。預設為cors。Chrome(v47~)目前的預設值是same-origin。</li><li>credentials - omit, same-origin, include。預設為omit。Chrome(v47~)目前的預設值是include。</li><li>redirect - follow, error, manual。Chrome(v47~)目前的預設值是。manual。</li><li>integrity - Subresource Integrity(子資源完整性, SRI)的值</li><li>cache - default, no-store, reload, no-cache, 或 force-cache</li><li>body: 要加到要求中的內容。注意，method為GET或HEAD時不使用這個值。</li></ul><h2 id="Response-回應"><a href="#Response-回應" class="headerlink" title="Response(回應)"></a>Response(回應)</h2><ul><li>Response 物件中包含的屬性摘要如下:</li><li>type: basic, cors</li><li>url: 回應網址</li><li>useFinalURL: 布林值，代表這個網址是否為最後的網址(也可能是重新導向的網址)</li><li>status: 狀態碼 (例如: 200, 404, 500…)</li><li>ok: 代表成功的狀態碼 (狀態碼介於200-299)</li><li>statusText: 狀態碼的文字 (例如: OK)</li><li>headers: 與回應相關的Headers物件</li></ul><h1 id="參考文件"><a href="#參考文件" class="headerlink" title="參考文件"></a>參考文件</h1><ul><li><a href="https://eyesofkids.gitbooks.io/javascript-start-from-es6/content/part4/ajax_fetch.html">https://eyesofkids.gitbooks.io/javascript-start-from-es6/content/part4/ajax_fetch.html</a></li><li><a href="https://wcc723.github.io/javascript/2017/12/28/javascript-fetch/">https://wcc723.github.io/javascript/2017/12/28/javascript-fetch/</a></li><li><a href="https://shubo.io/what-is-cors/">https://shubo.io/what-is-cors/</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端技術 </category>
          
          <category> javascript </category>
          
          <category> ES6 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
            <tag> ES6 Web 技術 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript - serialize() 方法</title>
      <link href="/2023/01/21/%E5%89%8D%E7%AB%AF%E6%8A%80%E8%A1%93/JS/js_03_serialize/"/>
      <url>/2023/01/21/%E5%89%8D%E7%AB%AF%E6%8A%80%E8%A1%93/JS/js_03_serialize/</url>
      
        <content type="html"><![CDATA[<p>近期整理公司的 JavaScript 發現很多人使用著直接抓取 val()，繼上一篇提到 typeof 後，我又馬上做出 <code>serialize()</code> 章節，希望大家只要是全讀範圍的 input 請使用 <code>serialize()</code> 減少 <code>undefined</code>問題。 </p><h1 id="serialize-方法"><a href="#serialize-方法" class="headerlink" title="serialize()方法"></a>serialize()方法</h1><p>簡單來說是一種序列化，目的是為了將input 、select 、textarea等輸入框轉成序列化方式。</p><h2 id="序列化"><a href="#序列化" class="headerlink" title="序列化"></a>序列化</h2><p>序列化是將物件狀態轉換為<em>可保存</em>或<em>可傳輸格式</em>的形式。[ps : 下次章節會詳細介紹 序列化 VS 反序列化]</p><ul><li>檢視 $(‘form’).serialize() 內容<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&#x27;#submit&#x27;</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> form = $(<span class="string">&#x27;form&#x27;</span>).<span class="title function_">serialize</span>();</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(form);<span class="comment">// name=john&amp;old=21&amp;date=2021/12/11</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><h2 id="使用範例"><a href="#使用範例" class="headerlink" title="使用範例"></a>使用範例</h2><p>簡單創建幾個input值以及form，如果有強迫症請自行排版。清楚看到這是我們平常讓User去Key時候，常用到的樣板。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">role</span>=<span class="string">&quot;form&quot;</span> <span class="attr">action</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;name&quot;</span> <span class="attr">name</span>=<span class="string">&#x27;text1&#x27;</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;name&quot;</span>&gt;</span>年齡<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;number&quot;</span> <span class="attr">name</span>=<span class="string">&quot;old&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;date&quot;</span> <span class="attr">name</span>=<span class="string">&quot;date&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;submit&quot;</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;index.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>未來遇到 submit 傳到ajax額外新增，又不想自動submit如下方寫法。如果你是這麼撰寫js會不時遇到資料庫內容有 <code>undefined</code>，原因可能是不存在的物件、變數，請避免使用下方範例。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">AjaxForm</span>(<span class="params">select</span>) &#123;</span><br><span class="line">    $.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">        <span class="attr">async</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">url</span>: url,</span><br><span class="line">        <span class="attr">data</span>: &#123;</span><br><span class="line">            <span class="string">&quot;name&quot;</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123; <span class="keyword">return</span> $(<span class="string">&#x27;[name=&quot;name&quot;]&#x27;</span>).<span class="title function_">val</span>(); &#125;,</span><br><span class="line">            <span class="string">&quot;old&quot;</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123; <span class="keyword">return</span> $(<span class="string">&#x27;[name=&quot;old&quot;]&#x27;</span>).<span class="title function_">val</span>(); &#125;,</span><br><span class="line">            <span class="string">&quot;date&quot;</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123; <span class="keyword">return</span> $(<span class="string">&#x27;[name=&quot;date&quot;]&#x27;</span>).<span class="title function_">val</span>(); &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>這樣就完成傳值了，下方範例意思為 form 會將裡面的input 所有的值轉換成序列，效果如同上方範例。上下方法內容回傳一樣，下方可以減少錯字的危機、減少行數，請各好好善用.serialize()功能。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">AjaxForm</span>(<span class="params">select</span>) &#123;</span><br><span class="line">    $.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">        <span class="attr">async</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">url</span>: url,</span><br><span class="line">        <span class="attr">data</span>: $(<span class="string">&#x27;form&#x27;</span>).<span class="title function_">serialize</span>()</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端技術 </category>
          
          <category> javascript </category>
          
          <category> ES6 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript - typeof 運算子</title>
      <link href="/2023/01/21/%E5%89%8D%E7%AB%AF%E6%8A%80%E8%A1%93/JS/js_04_typeof/"/>
      <url>/2023/01/21/%E5%89%8D%E7%AB%AF%E6%8A%80%E8%A1%93/JS/js_04_typeof/</url>
      
        <content type="html"><![CDATA[<p>近期看到 JavaScript 中，有很多人使用 typeof 讓我想要玩玩看 typeof 是什麼特性。typeof 使用範圍常常是在 if 當中使用，讓我們直接實作typeof吧!</p><h1 id="typeof-簡介"><a href="#typeof-簡介" class="headerlink" title="typeof 簡介"></a>typeof 簡介</h1><h2 id="一、使用方式"><a href="#一、使用方式" class="headerlink" title="一、使用方式"></a>一、使用方式</h2><p>typeof 是一個 運算子(operator)。使用時機是查看 value 是什麼型態，也能把它當成除錯的(typeof)關鍵詞。 </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typeof</span> operand</span><br></pre></td></tr></table></figure><h2 id="二、文件說明"><a href="#二、文件說明" class="headerlink" title="二、文件說明"></a>二、文件說明</h2><p>以下為 MDN Web typeof operator result 說明。<br><img src="/img/Web/js/js-typeof/typeof_desc.jpg"></p><h1 id="使用-typeof"><a href="#使用-typeof" class="headerlink" title="使用 typeof"></a>使用 typeof</h1><p>看範例可以發現使用難易度不大。這邊範例我使用 var 變數，有用過JavaScript都知道，var是非常難控管常常會有過不是自己想要的結果。<br>從下方範例 str 我給它初始賦值為 “”，想必知道 result 為 string 。 </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str =<span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> str); <span class="comment">// string</span></span><br></pre></td></tr></table></figure><p>範例是明確給予初始賦值。當如果沒有給予初始賦值情況如下:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> str); <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><p>可以發現範例中，沒有明確給予賦值回傳結果為<code>undefined</code>，這個特性可以利用這個typeof預防undefined問題。</p><blockquote><p>[補充] : 這裡可以理解為尚未分配的初始變數(初始賦值) Typeof 視為 <code>undefined</code> 不會是 <code>null</code>。</p></blockquote><h2 id="一、輸出範例"><a href="#一、輸出範例" class="headerlink" title="一、輸出範例"></a>一、輸出範例</h2><p>** 注意: <code>null</code> 在typeof為 object 。 ** </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> result;</span><br><span class="line"></span><br><span class="line">result = <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;typeof return : &quot;</span> + <span class="keyword">typeof</span> result);</span><br><span class="line"><span class="comment">//typeof return : string</span></span><br><span class="line"></span><br><span class="line">result = <span class="number">1</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;typeof return : &quot;</span> +<span class="keyword">typeof</span> result);</span><br><span class="line"><span class="comment">//typeof return : number</span></span><br><span class="line"></span><br><span class="line">result = <span class="literal">true</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;typeof return : &quot;</span> +<span class="keyword">typeof</span> result);</span><br><span class="line"><span class="comment">//typeof return : boolean</span></span><br><span class="line"></span><br><span class="line">result = []; <span class="comment">//或是使用null</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;typeof return : &quot;</span> +<span class="keyword">typeof</span> result);</span><br><span class="line"><span class="comment">//typeof return : object</span></span><br><span class="line"></span><br><span class="line">result = <span class="literal">undefined</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;typeof return : &quot;</span> +<span class="keyword">typeof</span> result);</span><br><span class="line"><span class="comment">//typeof return : undefined</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="二、typeof-取得-Function-型別"><a href="#二、typeof-取得-Function-型別" class="headerlink" title="二、typeof 取得 Function 型別"></a>二、typeof 取得 Function 型別</h2><p>Typeof 對上 function 也能使用typeof取得型態，寫法如同上方一樣，請各位參閱下方範例。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Get_StrData</span>(<span class="params">str</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">str</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> result = <span class="title class_">Get</span>_StrData(<span class="string">&quot;John&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;typeof return : &quot;</span> + <span class="keyword">typeof</span> result)</span><br></pre></td></tr></table></figure><p>範例中需要小心 Reuslt 內容， 如果建構子所建立出來的物件為 object，不注意使用會遇到 null &#x2F; undefined 。<br>這需要請各位使用判斷需要留意的點。</p><h2 id="三、補充"><a href="#三、補充" class="headerlink" title="三、補充"></a>三、補充</h2><h3 id="1-undefined表示"><a href="#1-undefined表示" class="headerlink" title="1. undefined表示"></a>1. undefined表示</h3><p>undefined表示”缺少值”，就是此處應該有一個值，但是還沒有定義。典型用法是：</p><ul><li>變數被聲明了，但沒有賦值時，就等於 undefined。</li><li>呼叫函式時，應該提供的參數沒有提供，該參數等於 undefined。</li><li>物件沒有 “沒有賦值”的屬性，該屬性的值為 undefined。</li><li>函式沒有回傳值時，預設回傳 undefined。</li></ul><div class="note info flat"><h3 id="Ashe-Li-對-Host-object-使用-typeof"><a href="#Ashe-Li-對-Host-object-使用-typeof" class="headerlink" title="[Ashe Li] - 對 Host object 使用 typeof"></a>[Ashe Li] - 對 Host object 使用 typeof</h3><p>Host object 前提是沒有實作 Call，因為有實作就視為 function</p><ul><li>如果是 typeof new val(建構式) ，回傳 Object</li><li>如果是 typeof 包裝物件(wrapper objects) ，回傳 包裝物件(wrapper objects) 之後的型別。</li></ul></div><h3 id="2-使用方向"><a href="#2-使用方向" class="headerlink" title="2. 使用方向"></a>2. 使用方向</h3><p>typeof 不單單查看型態，可以判斷使用者輸入的值是否允許的型態。例如 : 輸入年齡、數量、體種可以卡 “number” 判斷。</p><p>必須要小心使用 object 部分，因為值為 null 並非是缺少值的一種在判斷中，需要防null的問題。</p><h3 id="3-參考文件"><a href="#3-參考文件" class="headerlink" title="3. 參考文件"></a>3. 參考文件</h3><ul><li><p><a href="https://ithelp.ithome.com.tw/articles/10218815">YDKJS (Type) : 初學者第一坑 - typeof 運算子, 詳解 undefined 11th鐵人賽</a></p></li><li><p><a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Operators/typeof">MDN Web Docs</a></p></li><li><p><a href="https://pjchender.blogspot.com/2016/07/javascript-typeof.html">[筆記] JavaScript 中利用 typeof 檢驗運算元所代表的型別</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端技術 </category>
          
          <category> javascript </category>
          
          <category> ES6 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端遇到的基本問題</title>
      <link href="/2023/01/21/%E5%89%8D%E7%AB%AF%E6%8A%80%E8%A1%93/JS/js_01/"/>
      <url>/2023/01/21/%E5%89%8D%E7%AB%AF%E6%8A%80%E8%A1%93/JS/js_01/</url>
      
        <content type="html"><![CDATA[<p>進入網頁世界時候，常常問到什麼是 CDN、什麼是 .min.js或者是Reset Css，此章節為定期維護不定時會在這裡更新。</p><h1 id="1-CDN-內容傳遞網路-Content-delivery-network"><a href="#1-CDN-內容傳遞網路-Content-delivery-network" class="headerlink" title="1. CDN -內容傳遞網路  (Content delivery network)"></a>1. CDN -內容傳遞網路  (Content delivery network)</h1><p>是指一種透過網際網路互相連接的電腦網路系統，利用最靠近每位使用者的伺服器，更快、更可靠地將音樂、圖片、影片、應用程式及其他檔案傳送給使用者，來提供高效能、可擴展性及低成本的網路內容傳遞給使用者。<br>這是一種內容在網路上傳輸的快取機制。</p><h2 id="優點"><a href="#優點" class="headerlink" title="優點"></a>優點</h2><ol><li>加速網頁瀏覽效能：因為已經將緩存資料放在最近的機房中，不需要重新像伺服器讀取</li><li>有效分流(頻寬)：當所有用戶都不再向同一個伺服器讀取資料，大幅降低集中流量</li><li>網站穩定度：網站流量分散後，網站的穩定度大幅提高，即使短暫當機也不怕用戶無法使用</li><li>安全性增加：因網站透過CDN分散出去，駭客較難直接攻擊網站本體</li></ol><h2 id="2-Reset-Css"><a href="#2-Reset-Css" class="headerlink" title="2. Reset Css"></a>2. Reset Css</h2><p>在 W3C 制訂 HTML 與 CSS 規格時，並沒有強制規定各家瀏覽器應該怎樣實作每一個 HTML tag 的 CSS 預設樣式，只有提供資訊參考的範例，加上IE 獨霸的時期，那時候還沒有其他瀏覽器， CSS Reset 的需求主要落在 IE 各版本之間的調整，後來 Firefox、safari、Chrome 陸續出現，網頁設計師必須要針對每個瀏覽器去做調整，因此 CSS Reset 的需求漸漸增加。</p><p>有幾套常見的 CSS Reset，提供各位參閱。</p><ul><li><a href="https://meyerweb.com/eric/tools/css/reset/">Reset CSS</a>，此為 Eric Meyer 的版本</li><li><a href="http://html5doctor.com/html-5-reset-stylesheet/">HTML5 Reset Stylesheet，HTML5 Doctor</a> 網站修改自 Eric A. Meyer 的版本。</li><li><a href="https://clarle.github.io/yui3/yui/docs/cssreset/">CSS Reset - YUI Library</a> ，由 Yahoo UI Library v3 所提供的 CSS Reset 版本。</li></ul><h2 id="3-css命名規則"><a href="#3-css命名規則" class="headerlink" title="3.css命名規則"></a>3.css命名規則</h2><h3 id="OOCSS（Object-Oriented-CSS）"><a href="#OOCSS（Object-Oriented-CSS）" class="headerlink" title="OOCSS（Object Oriented CSS）"></a>OOCSS（Object Oriented CSS）</h3><ol><li>分離結構與樣式（Separate container and content）：結構是元素標籤，樣式是指顏色，減少依賴結構與樣式間的影響，應該要增加樣式的可重覆性。</li><li>分離HTML與CSS（Separate structure and skin）：是指盡量將可共用的樣式單獨抽離出來給class。</li></ol><h3 id="SMACSS"><a href="#SMACSS" class="headerlink" title="SMACSS"></a>SMACSS</h3><p>（Scalable &amp; Modular Architecture for CSS）更具結構與命名規則的限制，透過以下五種分類概念，把class的命成拆的更細節。</p><ul><li>SMACSS把CSS分成五種結構：（Categorizing CSS Rules）： <code>Base</code>、<code>Layout</code>、<code>Module</code>、<code>State</code>、<code>Theme</code></li><li>命名規則：為CSS做分類，id與css的使用不會是獨立性，會透過dash 去做分類，命名規則（Naming Rules）對於SMACSS是很重要的。</li></ul><h3 id="BEM（Block，Element，Modifier）"><a href="#BEM（Block，Element，Modifier）" class="headerlink" title="BEM（Block，Element，Modifier）"></a>BEM（Block，Element，Modifier）</h3><p>由區塊、元素與修飾狀態 </p><ul><li>Block：　是頁面獨立的區塊，每個頁面都可以看成很多區塊的組合。</li><li>Element：是指區塊中的元素</li><li>Modifier：是指描述Block或者Element的屬性或狀態<br>透過上面三點，結合再一起的class命名就是BEM</li></ul><h1 id="4-JS-中-min-js-和-js-檔案的區別"><a href="#4-JS-中-min-js-和-js-檔案的區別" class="headerlink" title="4. JS 中 .min.js 和.js 檔案的區別"></a>4. JS 中 .min.js 和.js 檔案的區別</h1><h2 id="一、-js和-min-js檔案分別是什麼"><a href="#一、-js和-min-js檔案分別是什麼" class="headerlink" title="一、.js和.min.js檔案分別是什麼"></a>一、.js和.min.js檔案分別是什麼</h2><p>.js是JavaScript 原始碼檔案， .min.js是壓縮版的js檔案。<br>.min.js檔案經過壓縮，相對編譯前的js檔案體積較小，傳輸效率快。 防止窺視和竊取原始碼 經過編碼將變數和函式原命名改為毫無意義的命名，以防止他人窺視和竊取 js 原始碼</p><h2 id="二、-js-和-min-js檔案的優缺點"><a href="#二、-js-和-min-js檔案的優缺點" class="headerlink" title="二、 .js 和.min.js檔案的優缺點"></a>二、 .js 和.min.js檔案的優缺點</h2><table><thead><tr><th>TYPE</th><th align="center">優點</th><th align="right">缺點</th></tr></thead><tbody><tr><td>.js</td><td align="center">可讀性較好，易於debug和更改</td><td align="right">體積較大，傳輸時間長</td></tr><tr><td>.min.js</td><td align="center">體積較小傳輸快, 原始碼防竊</td><td align="right">可讀性差</td></tr></tbody></table><h2 id="三、-壓縮原理"><a href="#三、-壓縮原理" class="headerlink" title="三、 壓縮原理"></a>三、 壓縮原理</h2><p>壓縮：刪除 js 程式碼中所有註釋、跳格符號、換行符號及無用的空格，從而壓縮 JS 檔案大小。<br>混淆：經過編碼將變數和函式原命名改為毫無意義的命名，刪除無用程式碼，行內函數，等價語句替換等(以防止他人窺視和竊取原始碼)</p>]]></content>
      
      
      <categories>
          
          <category> 前端技術 </category>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(套件) Html 指引套件  - 簡易操作 IntroJs、DriverJs</title>
      <link href="/2023/01/21/%E5%89%8D%E7%AB%AF%E6%8A%80%E8%A1%93/HTML/Html_04_%E6%8C%87%E5%BC%95%E5%A5%97%E4%BB%B6IntroJs%E3%80%81DriverJs/"/>
      <url>/2023/01/21/%E5%89%8D%E7%AB%AF%E6%8A%80%E8%A1%93/HTML/Html_04_%E6%8C%87%E5%BC%95%E5%A5%97%E4%BB%B6IntroJs%E3%80%81DriverJs/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>近期整理一些文章，看到還有指引套件部分忘記處理，這邊大概簡述兩個比較常見的套件。以兩種套件來說各有好壞，使用指引套件必須要留意Css可能遇到<code>z-index</code>順序問題，如果是DriverJs部分可能需要注意css方面比較多一些…。</p><ul><li><a href="https://github.com/JontCont/html_guideJs_template">github 範例</a></li><li><a href="https://dotblogs.com.tw/wellwind/2016/12/15/front-end-intro-js">[前端軍火庫]Intro.js - 把建好的UI直接變成說明文件</a></li></ul><h1 id="IntroJs"><a href="#IntroJs" class="headerlink" title="IntroJs"></a>IntroJs</h1><p>IntroJs 是用在 html mark當中，設定上相當簡單、快速 。IntroJs 如果是商業用途可能要索取費用。</p><h2 id="安裝"><a href="#安裝" class="headerlink" title="安裝"></a>安裝</h2><ol><li>Github :<code> git clone https://github.com/usablica/intro.js.git</code></li><li>npm :  <code>npm install intro.js --save</code></li><li>yarn  : <code>yarn add intro.js</code></li></ol><h2 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h2><p>依據IntroJs 使用方式，需要設定幾點。</p><ol><li>順序 : <code>data-step</code></li><li>內容 : <code>data-intro</code></li><li>提示 : <code>data-hint</code> (必須要配合 <code>introJs().addHints();</code>處理。)</li></ol><p>此套件會依據 step 順序呈現下一步提示，如果要使用”提示點”表示，可以使用使用<code>data-hint</code>標記。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;card card-body&quot;</span> <span class="attr">data-step</span>=<span class="string">&quot;1&quot;</span> <span class="attr">data-intro</span>=<span class="string">&quot;這是 card style。由NFC作者取得&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;imgBx&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://raw.githubusercontent.com/JontCont/Html-BlogUI/main/card-ui/images/1.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;img-item&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;card-content&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;card-content--title&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">h2</span>&gt;</span>John Contel&#x27;s<span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>Senior Designer<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;card-content--icon&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;li-item&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fab fa-twitter&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;li-item&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fab fa-instagram&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;li-item&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;far fa-envelope&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;li-item&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fab fa-facebook&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">    introJs().start();</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="DriverJs"><a href="#DriverJs" class="headerlink" title="DriverJs"></a><a href="https://kamranahmed.info/driver.js/">DriverJs</a></h1><p>DriverJs 是另一種指引套件，如果是商業使用這個部分可能是參考之一。</p><h2 id="安裝-1"><a href="#安裝-1" class="headerlink" title="安裝"></a>安裝</h2><ol><li>Github :<code> git clone https://github.com/kamranahmedse/driver.js.git</code></li><li>npm :  <code>npm install driver.js</code></li><li>yarn  : <code>yarn add driver.js</code></li></ol><h2 id="開始使用"><a href="#開始使用" class="headerlink" title="開始使用"></a>開始使用</h2><h3 id="highlight"><a href="#highlight" class="headerlink" title="highlight"></a>highlight</h3><p>這邊使用方式是透過html selector 抓取，所以會比IntroJs設定方面可能比較多一些。論單體彈出視窗使用<code>highlight</code>即可，如下方範例。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> driver = <span class="keyword">new</span> <span class="title class_">Driver</span>();</span><br><span class="line"><span class="keyword">let</span> option = </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">element</span>: <span class="string">&#x27;.card-body&#x27;</span>, </span><br><span class="line">        <span class="attr">popover</span>: &#123;</span><br><span class="line">            <span class="attr">title</span>: <span class="string">&#x27;Title for the Popover!&#x27;</span>,</span><br><span class="line">            <span class="attr">description</span>: <span class="string">&#x27;Description for it&#x27;</span>,</span><br><span class="line">            <span class="attr">position</span>: <span class="string">&#x27;top&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">driver.<span class="title function_">highlight</span>(option);</span><br><span class="line">driver.<span class="title function_">start</span>();</span><br></pre></td></tr></table></figure><h3 id="defineSteps"><a href="#defineSteps" class="headerlink" title="defineSteps"></a>defineSteps</h3><p>如果要呈現上下指引需要跟改為defineSteps，title、description 部分可以使用html方式撰寫。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> driver = <span class="keyword">new</span> <span class="title class_">Driver</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Define the steps for introduction</span></span><br><span class="line">driver.<span class="title function_">defineSteps</span>([</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">element</span>: <span class="string">&#x27;.card-body&#x27;</span>,</span><br><span class="line">    <span class="attr">popover</span>: &#123;</span><br><span class="line">        <span class="attr">className</span>: <span class="string">&#x27;first-step-popover-class&#x27;</span>,</span><br><span class="line">        <span class="attr">title</span>: <span class="string">&#x27;Title on Popover&#x27;</span>,</span><br><span class="line">        <span class="attr">description</span>: <span class="string">&#x27;Body of the popover&#x27;</span>,</span><br><span class="line">        <span class="attr">position</span>: <span class="string">&#x27;left&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">element</span>: <span class="string">&#x27;.card-content--icon&#x27;</span>,</span><br><span class="line">    <span class="attr">popover</span>: &#123;</span><br><span class="line">        <span class="attr">title</span>: <span class="string">&#x27;Title on Popover&#x27;</span>,</span><br><span class="line">        <span class="attr">description</span>: <span class="string">&#x27;Body of the popover&#x27;</span>,</span><br><span class="line">        <span class="attr">position</span>: <span class="string">&#x27;top&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">element</span>: <span class="string">&#x27;.imgBx&#x27;</span>,</span><br><span class="line">    <span class="attr">popover</span>: &#123;</span><br><span class="line">        <span class="attr">title</span>: <span class="string">&#x27;Title on Popover&#x27;</span>,</span><br><span class="line">        <span class="attr">description</span>: <span class="string">&#x27;Body of the popover&#x27;</span>,</span><br><span class="line">        <span class="attr">position</span>: <span class="string">&#x27;right&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br><span class="line">]);</span><br><span class="line"><span class="comment">// Start the introduction</span></span><br><span class="line">driver.<span class="title function_">start</span>();</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端技術 </category>
          
          <category> html </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
            <tag> 套件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>製作 Scanner (二) - 快速使用讀取器/掃描器 (使用 html5-qrcode )</title>
      <link href="/2023/01/21/%E5%89%8D%E7%AB%AF%E6%8A%80%E8%A1%93/HTML/Html-06-ScannerQR/"/>
      <url>/2023/01/21/%E5%89%8D%E7%AB%AF%E6%8A%80%E8%A1%93/HTML/Html-06-ScannerQR/</url>
      
        <content type="html"><![CDATA[<p>本次使用 html-qrcode 快速完成掃描工具，此套件已經把版面建立完成，所以只需要測試鏡頭有沒有進去在選項中即可。</p><h2 id="html5-qrcode"><a href="#html5-qrcode" class="headerlink" title="html5-qrcode"></a>html5-qrcode</h2><p>Github : <a href="https://github.com/mebjas/html5-qrcode">https://github.com/mebjas/html5-qrcode</a></p><h3 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h3><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i html5-qrcode</span><br></pre></td></tr></table></figure><h3 id="程式碼"><a href="#程式碼" class="headerlink" title="程式碼"></a>程式碼</h3><p>以下範例有新增聲音，使用後就會達到抓取的感覺。<br>聲音檔 : <a href="/files/scanner-Demo-01.mp3">點擊我</a></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=6+359999, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;/node_modules/jquery/dist/jquery.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;/node_modules/html5-qrcode/html5-qrcode.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;reader&quot;</span> <span class="attr">width</span>=<span class="string">&quot;600px&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Scanner Log<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;log&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">onScanSuccess</span>(<span class="params">decodedText, decodedResult</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">       <span class="comment">// 加入聲音</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> audios = <span class="keyword">new</span> <span class="title class_">Audio</span>(<span class="string">&#x27;scanner-Demo-01.mp3&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        audios.<span class="title function_">play</span>();</span></span><br><span class="line"><span class="language-javascript">        audios.<span class="title function_">stop</span>();</span></span><br><span class="line"><span class="language-javascript">        $(<span class="string">&#x27;.log&#x27;</span>).<span class="title function_">append</span>(</span></span><br><span class="line"><span class="language-javascript">            <span class="string">`&lt;div&gt;<span class="subst">$&#123;decodedText&#125;</span>&lt;/div&gt;`</span></span></span><br><span class="line"><span class="language-javascript">        );</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">onScanFailure</span>(<span class="params">error</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// handle scan failure, usually better to ignore and keep scanning.</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// for example:</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">`Code scan error = <span class="subst">$&#123;error&#125;</span>`</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> html5QrcodeScanner = <span class="keyword">new</span> <span class="title class_">Html5QrcodeScanner</span>(</span></span><br><span class="line"><span class="language-javascript">    <span class="string">&quot;reader&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">    &#123; <span class="attr">fps</span>: <span class="number">30</span>, <span class="attr">qrbox</span>: &#123;<span class="attr">width</span>: <span class="number">500</span>, <span class="attr">height</span>: <span class="number">500</span>&#125; &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">/* verbose= */</span> <span class="literal">false</span>);</span></span><br><span class="line"><span class="language-javascript">    html5QrcodeScanner.<span class="title function_">render</span>(onScanSuccess, onScanFailure);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="無法抓取畫面"><a href="#無法抓取畫面" class="headerlink" title="無法抓取畫面"></a>無法抓取畫面</h3><p>通常預設攝影機選項是關閉的，請將這功能開啟即可。<br><img src="/image/20221228_22-51-17.png"><br><img src="/image/20221228_22-51-50.png"></p>]]></content>
      
      
      <categories>
          
          <category> 前端技術 </category>
          
          <category> html </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML - Enter Key Hint</title>
      <link href="/2023/01/21/%E5%89%8D%E7%AB%AF%E6%8A%80%E8%A1%93/HTML/Html_01_EnterKeyHint/"/>
      <url>/2023/01/21/%E5%89%8D%E7%AB%AF%E6%8A%80%E8%A1%93/HTML/Html_01_EnterKeyHint/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近看到有一篇有關EnterKeyHint文章，整個手癢跑去玩玩看，官方說明這方式是針對虛擬鍵盤才會出現的效果，如下面表格:</p><table><thead><tr><th>Keyword</th><th>Description</th></tr></thead><tbody><tr><td><code>enter</code></td><td>The user agent should present a cue for the operation ‘enter’, typically inserting a new line.</td></tr><tr><td><code>done</code></td><td>The user agent should present a cue for the operation ‘done’, typically meaning there is nothing more to input and the input method editor (IME) will be closed.</td></tr><tr><td><code>go</code></td><td>The user agent should present a cue for the operation ‘go’, typically meaning to take the user to the target of the text they typed.</td></tr><tr><td><code>next</code></td><td>The user agent should present a cue for the operation ‘next’, typically taking the user to the next field that will accept text.</td></tr><tr><td><code>previous</code></td><td>The user agent should present a cue for the operation ‘previous’, typically taking the user to the previous field that will accept text.</td></tr><tr><td><code>search</code></td><td>The user agent should present a cue for the operation ‘search’, typically taking the user to the results of searching for the text they have typed.</td></tr><tr><td><code>send</code></td><td>The user agent should present a cue for the operation ‘send’, typically delivering the text to its target.</td></tr></tbody></table><p>這功能只有手機版本的虛擬鍵盤才看得見，若你要用windows的虛擬鍵盤是看不見的歐!!ヽ(*。&gt;Д&lt;)o゜</p><h1 id="創建Html"><a href="#創建Html" class="headerlink" title="創建Html"></a>創建Html</h1><p>我們創建簡單易點的html，不需要殘虐自己一定要把版面排很齊。參考以下範例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">div</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">div</span>&gt;<span class="selector-tag">label</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: block;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span>&gt;</span>Enter:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span> <span class="attr">enterkeyhint</span>=<span class="string">&quot;enter&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span>&gt;</span>Done:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span> <span class="attr">enterkeyhint</span>=<span class="string">&quot;done&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span>&gt;</span>Go:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span> <span class="attr">enterkeyhint</span>=<span class="string">&quot;go&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span>&gt;</span>Next:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span> <span class="attr">enterkeyhint</span>=<span class="string">&quot;next&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span>&gt;</span>Previous:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span> <span class="attr">enterkeyhint</span>=<span class="string">&quot;previous&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span>&gt;</span>Search:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span> <span class="attr">enterkeyhint</span>=<span class="string">&quot;search&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span>&gt;</span>Send:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span> <span class="attr">enterkeyhint</span>=<span class="string">&quot;send&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>這幾些都是要focus在輸入框裡面就可以看得見，如下圖，這樣就會提升UI操作順暢。<br>依據自己評估，決定在使用。</p><div class="fj-gallery"><p><img src="/img/html-enterkeyHint/01.png"><br><img src="/img/html-enterkeyHint/02.png"><br><img src="/img/html-enterkeyHint/03.png"><br><img src="/img/html-enterkeyHint/04.png"><br><img src="/img/html-enterkeyHint/05.png"><br><img src="/img/html-enterkeyHint/06.png"><br><img src="/img/html-enterkeyHint/07.png"></p>          </div><h2 id="題外話"><a href="#題外話" class="headerlink" title="題外話"></a>題外話</h2><p>Stefan Judis 曾經在2020年有提到 Enterkeyhint ，有支援 Safari 瀏覽器(IOS)，有興趣的人可以實驗看看。FireFox事實上是有出現，只是不像是Chrome一樣馬上出現，必須要按下去(Enter)才會出現，使用上需要自己拿捏使用方式，以免被客戶要求強迫修改。</p><blockquote class="twitter-tweet"><p lang="en" dir="ltr">Safari now supports `enterkeyhint`. 👏 <br><br>I always like it when the enter key gives me more context. 👇<br><br>🔗 Spec: <a href="https://t.co/IOQkUsjB6f">https://t.co/IOQkUsjB6f</a><a href="https://twitter.com/hashtag/devsheets?src=hash&amp;ref_src=twsrc%5Etfw">#devsheets</a> <a href="https://t.co/7HHX77Jow7">pic.twitter.com/7HHX77Jow7</a></p>&mdash; Stefan @ goto CPH 🇩🇰 (@stefanjudis) <a href="https://twitter.com/stefanjudis/status/1249958064041734144?ref_src=twsrc%5Etfw">April 14, 2020</a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script><h2 id="文件參考"><a href="#文件參考" class="headerlink" title="文件參考"></a>文件參考</h2><h3 id="MDN-EnterKeyHint"><a href="#MDN-EnterKeyHint" class="headerlink" title="MDN -  EnterKeyHint"></a>MDN - <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/enterKeyHint"> EnterKeyHint</a></h3><h3 id="CSS-TRICKS-enterkeyhint"><a href="#CSS-TRICKS-enterkeyhint" class="headerlink" title="CSS-TRICKS - enterkeyhint"></a>CSS-TRICKS - <a href="https://css-tricks.com/enterkeyhint/">enterkeyhint</a></h3>]]></content>
      
      
      <categories>
          
          <category> 前端技術 </category>
          
          <category> html </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
            <tag> Web 技術 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML - 滾動條 Scrollbar</title>
      <link href="/2023/01/21/%E5%89%8D%E7%AB%AF%E6%8A%80%E8%A1%93/HTML/Html_02_Scrollbar/"/>
      <url>/2023/01/21/%E5%89%8D%E7%AB%AF%E6%8A%80%E8%A1%93/HTML/Html_02_Scrollbar/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>近期遇到很多UI介面 scrollbar 都不同樣式或是將 scrollbar 用消失減少版面佔住的機會。<br>可以參考下方滾動條樣式，我再慢慢展示出效果來。</p><h1 id="如何讓scrollbar出現"><a href="#如何讓scrollbar出現" class="headerlink" title="如何讓scrollbar出現"></a>如何讓scrollbar出現</h1><p>第一次用網頁常常遇到 scrollbar 不知道怎樣叫出來，反而不斷跑版。<br>網頁有分父(容器)層跟子(容器)層，當子層超過父層時候，可以使用 <code>overflow</code>。</p><p>以下範例 :</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;block-1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;block-2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">margin-left</span>: auto;</span><br><span class="line">    <span class="attribute">margin-right</span>: auto;</span><br><span class="line">    <span class="attribute">overflow</span>: scroll;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.block-1</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">50vh</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#111</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.block-2</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">50vh</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#ccc</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>這樣就得到我們的 scrollbar 。</p><div class="note info flat"><p>補充 : overflow 設定屬性</p></div><table><thead><tr><th>屬性</th><th>功能</th></tr></thead><tbody><tr><td>visible</td><td>預設值。內容不會被修剪，會呈現在元素框之外。</td></tr><tr><td>hidden</td><td>內容會被修剪，並且其餘內容是不可見的。</td></tr><tr><td>scroll</td><td>內容會被修剪，但是流覽器會顯示捲軸以便查看其餘的內容。</td></tr><tr><td>auto</td><td>如果內容被修剪，則流覽器會顯示捲軸以便查看其餘的內容。</td></tr><tr><td>inherit</td><td>規定應該從父元素繼承 overflow 屬性的值。</td></tr></tbody></table><h1 id="使用-scrollbar"><a href="#使用-scrollbar" class="headerlink" title="使用 scrollbar"></a>使用 scrollbar</h1><p>如果要設定修改變更 scrollbar，需要知道webkit設定。<br>題外話: 前陣子報導駭客組織利用Safari核心引擎WebKit漏洞,讓用戶導向詐騙網站索取個資。<br>連結 : <a href="https://www.ithome.com.tw/news/142770">https://www.ithome.com.tw/news/142770</a></p><h2 id="webkit"><a href="#webkit" class="headerlink" title="webkit"></a>webkit</h2><p>WebKit是一種用來讓網頁瀏覽器繪製網頁的排版引擎。通用瀏覽器內核有 chrome、safari、Blink、Trident等。<br>目前主流的移動瀏覽器渲染引擎，主要設計是用來讓網頁瀏覽器繪製網頁。</p><h2 id="設定滾動條樣式"><a href="#設定滾動條樣式" class="headerlink" title="設定滾動條樣式"></a>設定滾動條樣式</h2><table><thead><tr><th>偽元素（ Pseudo-element ）</th><th>功能</th></tr></thead><tbody><tr><td>::-webkit-scrollbar</td><td>滾動條</td></tr><tr><td>::-webkit-scrollbar-button</td><td>滾動條按鈕(上下箭頭)</td></tr><tr><td>::-webkit-scrollbar-thumb</td><td>可拖動滾動滑塊</td></tr><tr><td>::-webkit-scrollbar-track</td><td>滾動條軌跡</td></tr><tr><td>::-webkit-scrollbar-track-piece</td><td>軌道沒有滑塊部份</td></tr><tr><td>::-webkit-scrollbar-corner</td><td>滾動條抵繳</td></tr><tr><td>::-webkit-resizer</td><td>可拖動的調整大小手把</td></tr></tbody></table><h2 id="展示滾動條樣式"><a href="#展示滾動條樣式" class="headerlink" title="展示滾動條樣式"></a>展示滾動條樣式</h2><h3 id="隱藏-scrollbar"><a href="#隱藏-scrollbar" class="headerlink" title="隱藏 scrollbar"></a>隱藏 scrollbar</h3><p>依照上面的方式，結論是加上 display就會達到隱藏效果。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">::-webkit-scrollbar &#123;</span><br><span class="line">    <span class="attribute">display</span> :none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="scrollbar-滾動條"><a href="#scrollbar-滾動條" class="headerlink" title="scrollbar 滾動條"></a>scrollbar 滾動條</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> ::-webkit-scrollbar-thumb &#123;</span><br><span class="line">   <span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(to bottom right, <span class="number">#0080ff</span>, <span class="number">#1a6d0f</span>, <span class="number">#bfff0e</span>, <span class="built_in">rgb</span>(<span class="number">255</span>, <span class="number">122</span>, <span class="number">89</span>));</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="scrollbar-軌道"><a href="#scrollbar-軌道" class="headerlink" title="scrollbar 軌道"></a>scrollbar 軌道</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">::-webkit-scrollbar-track-piece &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="built_in">rgb</span>(<span class="number">255</span>, <span class="number">212</span>, <span class="number">249</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/img/html-srcollbar/img02.PNG"></p><h3 id="scrollbar-button"><a href="#scrollbar-button" class="headerlink" title="scrollbar-button"></a>scrollbar-button</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">::-webkit-scrollbar-button &#123;</span><br><span class="line"> <span class="attribute">width</span>: <span class="number">10px</span>;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">10px</span>;</span><br><span class="line"><span class="attribute">background-color</span>: <span class="built_in">rgb</span>(<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/img/html-srcollbar/img01.PNG"></p><h3 id="scrollbar-corner"><a href="#scrollbar-corner" class="headerlink" title="scrollbar-corner"></a>scrollbar-corner</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">::-webkit-scrollbar-corner &#123;</span><br><span class="line"><span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">241</span>, <span class="number">89</span>, <span class="number">89</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/img/html-srcollbar/img03.PNG"></p><h2 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h2><p>以上是 scrollbar 調整，如果像是firefox、ie、edge 就會遇到沒有效果的問題。<br>這幾些功能對付公司網頁 scrollbar 應該是綽綽有餘。<br>下一期會來探討 [ 瀏覽器內核 ] 有哪些。</p>]]></content>
      
      
      <categories>
          
          <category> 前端技術 </category>
          
          <category> html </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
            <tag> Web 技術 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML - 何謂 robots.txt</title>
      <link href="/2023/01/21/%E5%89%8D%E7%AB%AF%E6%8A%80%E8%A1%93/HTML/Html_03_Rebots/"/>
      <url>/2023/01/21/%E5%89%8D%E7%AB%AF%E6%8A%80%E8%A1%93/HTML/Html_03_Rebots/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>許多前端工程師都有相關rebots使用經驗，為了增加 SEO 通常會使用robots，讓使用者可以快速查自己的網站，robots.txt 可以從各樣的網站可以看到。本篇會簡述rebots ，若需要細項說明可以請至下方點選查詢。</p><h1 id="robots-簡介"><a href="#robots-簡介" class="headerlink" title="robots 簡介"></a>robots 簡介</h1><p>robots 是主要功用哪個頁面可以檢索、索引。使用方面會直接影響 SEO 。</p><h2 id="何謂-SEO-搜尋引擎最佳化"><a href="#何謂-SEO-搜尋引擎最佳化" class="headerlink" title="何謂 SEO 搜尋引擎最佳化"></a>何謂 SEO 搜尋引擎最佳化</h2><p>SEO(Search Engine Optimization)，透過搜尋引擎運作規則調整網站，提高網站相關搜尋引擎排名。搜尋引擎針對檢索(Crawl)、索引(Index)的網站資訊，進行演算法排序提供使用者查詢。</p><h2 id="robots-使用方式"><a href="#robots-使用方式" class="headerlink" title="robots 使用方式"></a>robots 使用方式</h2><p>robots 只需要使用 txt 撰寫，必須要留意要使用<strong>UTF-8</strong>編碼的文字檔。設定方式預設允許所有搜尋引擎檢索所有內容，有兩種做法。</p><h3 id="不填入disallow內容"><a href="#不填入disallow內容" class="headerlink" title="不填入disallow內容"></a>不填入disallow內容</h3><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">User-agent: *</span><br><span class="line">Disallow:</span><br></pre></td></tr></table></figure><h3 id="allow-使用-x2F-符號"><a href="#allow-使用-x2F-符號" class="headerlink" title="allow 使用 &#x2F;符號"></a>allow 使用 &#x2F;符號</h3><p>&#x2F; : root 根目錄，在這可以解釋從root開始都允許檢索所有檔案。</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">User-agent: *</span><br><span class="line">Allow: /</span><br></pre></td></tr></table></figure><h3 id="檢測方式"><a href="#檢測方式" class="headerlink" title="檢測方式"></a>檢測方式</h3><p>如果你要查詢網站是否有沒有 robots 可以在每個 url 後面加上 robots.txt 就可以查看到</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://www.google.com/robots.txt</span><br></pre></td></tr></table></figure><h2 id="網頁爬蟲影響"><a href="#網頁爬蟲影響" class="headerlink" title="網頁爬蟲影響"></a>網頁爬蟲影響</h2><p>需要進行爬蟲時候，通常會先查閱內部會不會有主檔需要爬的內容，目前爬蟲使用方式很多種，相關應用後續會執行一遍給各位參考。</p><h1 id="文件參考"><a href="#文件參考" class="headerlink" title="文件參考"></a>文件參考</h1><ol><li>Google 說明文件 : <a href="https://developers.google.com/search/docs/advanced/robots/create-robots-txt?hl=zh-tw">https://developers.google.com/search/docs/advanced/robots/create-robots-txt?hl=zh-tw</a></li><li>robots.txt用途與使用範例教學，釐清SEO收錄觀念！: <a href="https://awoo.ai/zh-hant/blog/robotstxt-crawl/">https://awoo.ai/zh-hant/blog/robotstxt-crawl/</a></li><li>搜尋引擎最佳化 : <a href="https://zh.wikipedia.org/wiki/%E6%90%9C%E5%B0%8B%E5%BC%95%E6%93%8E%E6%9C%80%E4%BD%B3%E5%8C%96">https://zh.wikipedia.org/wiki/%E6%90%9C%E5%B0%8B%E5%BC%95%E6%93%8E%E6%9C%80%E4%BD%B3%E5%8C%96</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 前端技術 </category>
          
          <category> html </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Angular (三) - 發佈 (error Unknow argument prod)</title>
      <link href="/2023/01/21/%E5%89%8D%E7%AB%AF%E6%8A%80%E8%A1%93/Angular/Angular-03-%E7%99%BC%E4%BD%88%20prod/"/>
      <url>/2023/01/21/%E5%89%8D%E7%AB%AF%E6%8A%80%E8%A1%93/Angular/Angular-03-%E7%99%BC%E4%BD%88%20prod/</url>
      
        <content type="html"><![CDATA[<h2 id="Error-Unknow-argument-prod"><a href="#Error-Unknow-argument-prod" class="headerlink" title="Error Unknow argument prod"></a>Error Unknow argument prod</h2><p>當初使用時， <code>ng build --prod</code>已經無法使用這指令，請使用下方指令排除現狀。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ng build --configuration production</span><br></pre></td></tr></table></figure><h2 id="Angular-Cli"><a href="#Angular-Cli" class="headerlink" title="Angular Cli"></a>Angular Cli</h2><p><img src="/imgage/20221201_16-10-33.png"></p><h2 id="參考文件"><a href="#參考文件" class="headerlink" title="參考文件"></a>參考文件</h2><ul><li>ithome : <a href="https://ithelp.ithome.com.tw/articles/10195372">https://ithelp.ithome.com.tw/articles/10195372</a></li><li>stackoverflow : <a href="https://stackoverflow.com/questions/73156911/ng-build-prod-error-unknown-argument-prod">https://stackoverflow.com/questions/73156911/ng-build-prod-error-unknown-argument-prod</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端技術 </category>
          
          <category> Angular </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Angular </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>製作 Scanner (一) - 把手機轉換電腦攝影機</title>
      <link href="/2023/01/21/%E5%89%8D%E7%AB%AF%E6%8A%80%E8%A1%93/HTML/Html-05-ScannerQR/"/>
      <url>/2023/01/21/%E5%89%8D%E7%AB%AF%E6%8A%80%E8%A1%93/HTML/Html-05-ScannerQR/</url>
      
        <content type="html"><![CDATA[<p>近期 “電腦攝影機” 可是說需要與人視訊時候最重要的設備，對於我來說這東西可能是不常使用的消耗品，本次案例使用手機轉到電腦設備把它當作我們本次作品。<br>本次工具 “Dev47Apps” 作為 手機與電腦溝通App，也可以套用 OBS 相當方便。</p><h2 id="前置作業"><a href="#前置作業" class="headerlink" title="前置作業"></a>前置作業</h2><ol><li>Dev47Apps</li><li>準備QR Code</li></ol><h2 id="安裝方式-Dev47Apps"><a href="#安裝方式-Dev47Apps" class="headerlink" title="安裝方式 Dev47Apps"></a>安裝方式 Dev47Apps</h2><h3 id="Dev47Apps"><a href="#Dev47Apps" class="headerlink" title="Dev47Apps"></a>Dev47Apps</h3><p>下載網址 : <a href="https://www.dev47apps.com/">https://www.dev47apps.com/</a><br>下載方式必須要 App與pc都需要安裝才能完成下一個步驟，安裝步驟請自行處理不另外操作。</p><h3 id="連線方式"><a href="#連線方式" class="headerlink" title="連線方式"></a>連線方式</h3><p>使用步驟如下</p><ol><li>打開Android “DroidCamApp”</li><li>打開 PC “DroidCamApp.exe” </li><li>Pc “DroidCamApp”裡面輸入 Android 顯示的 “Wifi ip” 或是 “drive ip” 即可完成<br><img src="/image/20221225_11-00-59.png"><br><img src="/image/20221225_11-02-47.png"></li></ol><h3 id="完成"><a href="#完成" class="headerlink" title="完成"></a>完成</h3><p>完成後，會變成如下面圖片一樣，如果想要變成直播工作也是不成問題，使用下來非常省成本。<br><img src="/image/20221225_11-25-40.png"><br><img src="/image/20221225_11-29-27.png"></p><h2 id="jquery-qrcode"><a href="#jquery-qrcode" class="headerlink" title="jquery-qrcode"></a>jquery-qrcode</h2><p>既然完成後，緊接著製作 “QR Code” 玩玩看，若覺得麻煩可以跳過這篇 (本文目的模擬與各家收營刷讀條碼機)。</p><ul><li>jquery-qrcode 參考文件 : <a href="https://ithelp.ithome.com.tw/articles/10185571">https://ithelp.ithome.com.tw/articles/10185571</a></li><li>Github : <a href="https://github.com/jeromeetienne/jquery-qrcode">https://github.com/jeromeetienne/jquery-qrcode</a></li></ul><h3 id="安裝方式"><a href="#安裝方式" class="headerlink" title="安裝方式"></a>安裝方式</h3><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm i jquery</span><br><span class="line">npm i jquery.qrcode</span><br></pre></td></tr></table></figure><h2 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h2><h3 id="一-、-加入-div標籤"><a href="#一-、-加入-div標籤" class="headerlink" title="一 、 加入 div標籤"></a>一 、 加入 div標籤</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;qrcode&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="二、加入-Js"><a href="#二、加入-Js" class="headerlink" title="二、加入 Js"></a>二、加入 Js</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&#x27;.qrcode&#x27;</span>).<span class="title function_">qrcode</span>(&#123;</span><br><span class="line">    text: <span class="string">&quot;jqury qrcode&quot;</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>備註 : </p><ol><li>如果是單文字 可以使用 <code>$(&#39;.qrcode&#39;).qrcode(&#39;123&#39;);</code></li><li>舊版瀏覽器需求可以使用 <code> render: table</code> 參數</li><li>大小設定可以使用 <code>width</code>、<code>height</code>修飾</li><li>以下參數<table><thead><tr><th>名稱</th><th>說明</th></tr></thead><tbody><tr><td>render</td><td>html 標籤轉換，預設 “canvas”</td></tr><tr><td>width</td><td>寬度</td></tr><tr><td>height</td><td>高度</td></tr><tr><td>background</td><td>背景顏色</td></tr><tr><td>foreground</td><td>Qrocode 顏色</td></tr><tr><td>correctLevel</td><td>尺寸 ，預設 “QRErrorCorrectLevel.H,”</td></tr></tbody></table></li></ol><h3 id="三、Source-Code"><a href="#三、Source-Code" class="headerlink" title="三、Source Code"></a>三、Source Code</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;/node_modules/jquery/dist/jquery.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;/node_modules/jquery.qrcode/src/jquery.qrcode.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;/node_modules/jquery.qrcode/src/qrcode.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>QrCode - for jquery qrcode<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;qrcode&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        $(<span class="string">&#x27;.qrcode&#x27;</span>).<span class="title function_">qrcode</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">            text: <span class="string">&quot;jqury qrcode&quot;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;);</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端技術 </category>
          
          <category> html </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Angular (一) - 使用Angular Router</title>
      <link href="/2023/01/21/%E5%89%8D%E7%AB%AF%E6%8A%80%E8%A1%93/Angular/Angular-01-use-router/"/>
      <url>/2023/01/21/%E5%89%8D%E7%AB%AF%E6%8A%80%E8%A1%93/Angular/Angular-01-use-router/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>Angular 近期蠻多公司願意使用的一項框架，他使用Type-Script 來開發是一個好的選擇，後期其他前台框架陸續更近所以差異就不會太大。PS: 目前不介紹TS使用方式。</p><h1 id="Angular"><a href="#Angular" class="headerlink" title="Angular"></a>Angular</h1><p>Angular 是基於 TypeScript 的開發平台。通常是指 “Angular 2+” 或 “Angular v2 及更高版本，框架由 Google 的 Angular 團隊以及社群共同領導。</p><p><img src="/img/Web/angular/Architecture_of_an_Angular_2_application.png"></p><p>上圖。Angular 應用的架構。其主要的構造塊是模組、組件、模板、元資料、資料繫結、指令、服務和依賴注入。</p><h2 id="前置作業"><a href="#前置作業" class="headerlink" title="前置作業"></a>前置作業</h2><ul><li><a href="https://nodejs.org/en/">NodeJs</a></li><li><a href="https://code.visualstudio.com/">VSC</a></li><li><a href="https://marketplace.visualstudio.com/items?itemName=doggy8088.angular-extension-pack">VSC Marketplace</a></li><li>安裝指令:<br>必須要先安裝NodeJs才能執行。<code>npm install @angular/cli</code></li></ul><h2 id="創建專案"><a href="#創建專案" class="headerlink" title="創建專案"></a>創建專案</h2><p>創建專案也是相對簡單，本篇範例是用 version 14 如果不知道自己版本可以使用<code>ng v</code>。</p><p>指令為 <code> ng new [source name]</code> 即可，14版本會詢問是否要routing 以及css，記得要把routing 允許以及選擇自己比較熟悉的css。 </p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ng new useAngular</span><br></pre></td></tr></table></figure><p><img src="/img/Web/angular/Snipaste_2022-06-12_09-50-37.png"></p><h2 id="創建Pages"><a href="#創建Pages" class="headerlink" title="創建Pages"></a>創建Pages</h2><p>第一次使用會不知道如何開始使用Angular，進入專案只有用到App資料夾。這邊範例使用VSC套件用<a href="https://marketplace.visualstudio.com/items?itemName=doggy8088.angular-extension-pack">Angular Extension Pack</a>。</p><p><img src="/img/Web/angular/Snipaste_2022-06-12_09-51-47.png"></p><p>下圖可以使用右鍵點選就可以快速道終端機，並幫你下好<code>ng g c </code>指令。這邊我們創建一個Pages 為About。</p><p><img src="/img/Web/angular/Snipaste_2022-06-12_10-00-48.png"><br><img src="/img/Web/angular/Snipaste_2022-06-12_10-01-03.png"><br><img src="/img/Web/angular/Snipaste_2022-06-12_10-03-25.png"></p><h2 id="設定router"><a href="#設定router" class="headerlink" title="設定router"></a>設定router</h2><p>router 在Angular為app-Routing.module.ts，如果有使用dotnet MVC 會比較熟悉一點。<br><img src="/img/Web/angular/Snipaste_2022-06-12_10-05-06.png"></p><p>Angular routing 是設定頁面位置。這邊我們用app-routing.module 加入我們剛才的pages，如下方寫法。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">AboutComponent</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./about/about.component&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">NgModule</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">RouterModule</span>, <span class="title class_">Routes</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/router&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//本篇重點</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">routes</span>: <span class="title class_">Routes</span> = [</span><br><span class="line">  &#123; <span class="attr">path</span>:<span class="string">&#x27;about&#x27;</span> ,<span class="attr">component</span>: <span class="title class_">AboutComponent</span> &#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="meta">@NgModule</span>(&#123;</span><br><span class="line">  <span class="attr">imports</span>: [<span class="title class_">RouterModule</span>.<span class="title function_">forRoot</span>(routes)],</span><br><span class="line">  <span class="attr">exports</span>: [<span class="title class_">RouterModule</span>]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">AppRoutingModule</span> &#123; &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>需要留意上router是不可以遺漏掉，如果忘記寫上router 會無法連上pages 。path是指頁面路徑，可以指定那些component存放路徑。</p><h2 id="首頁選單"><a href="#首頁選單" class="headerlink" title="首頁選單"></a>首頁選單</h2><p>上方完成後，可以到app.component.html中加上選單，撰寫方式很簡單只需要加入<code>&lt;a routerLink=&quot;/about&quot;&gt;about&lt;/a&gt;</code>即可完成。但是別忘了需要加入<code>&lt;router-outlet&gt;&lt;/router-outlet&gt;</code>，這個東西會呈現component畫面，就會有畫面轉換的效果。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span>&gt;</span>&#123;&#123;title&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">routerLink</span>=<span class="string">&quot;/about&quot;</span>&gt;</span>about<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">router-outlet</span>&gt;</span><span class="tag">&lt;/<span class="name">router-outlet</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端技術 </category>
          
          <category> Angular </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Angular </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Angular (二) - 錯誤問題排解</title>
      <link href="/2023/01/21/%E5%89%8D%E7%AB%AF%E6%8A%80%E8%A1%93/Angular/Angular-02-%E9%8C%AF%E8%AA%A4%E5%95%8F%E9%A1%8C%E6%8E%92%E8%A7%A3/"/>
      <url>/2023/01/21/%E5%89%8D%E7%AB%AF%E6%8A%80%E8%A1%93/Angular/Angular-02-%E9%8C%AF%E8%AA%A4%E5%95%8F%E9%A1%8C%E6%8E%92%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h1 id="疑難排解"><a href="#疑難排解" class="headerlink" title="疑難排解"></a>疑難排解</h1><h2 id="Q1-npm-WARN-config-global-global-–local-are-deprecated-Use-–location-x3D-global-instead"><a href="#Q1-npm-WARN-config-global-global-–local-are-deprecated-Use-–location-x3D-global-instead" class="headerlink" title="Q1. npm WARN config global --global, –local are deprecated. Use –location&#x3D;global instead"></a>Q1. npm WARN config global <code>--global</code>, –local are deprecated. Use –location&#x3D;global instead</h2><p>處理方式 :  </p><ol><li>需要到\nodejs 資料夾底下打開下方兩個檔案<ul><li>npm.cmd</li><li>npm</li></ul></li><li>將 <code>prefix -g</code>換成 <code>prefix --location=global</code>即可。</li></ol><h2 id="Q2-updating-angular-cli-1-0-0-beta-28-3-to-angular-x2F-cli-latest-failed"><a href="#Q2-updating-angular-cli-1-0-0-beta-28-3-to-angular-x2F-cli-latest-failed" class="headerlink" title="Q2. updating angular-cli 1.0.0-beta 28.3 to @angular&#x2F;cli@latest failed"></a>Q2. updating angular-cli 1.0.0-beta 28.3 to @angular&#x2F;cli@latest failed</h2><p>原則上處理完下方command 會完成。</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm uninstall angular-cli -g</span><br><span class="line">npm cache clear</span><br><span class="line">npm install @angular/cli -g</span><br></pre></td></tr></table></figure><p>如果無法正常 clear cache </p><ol><li><code>npm cache clean --force </code><br>(可能會出現 npm WARN using –force Recommended protections disabled.)</li><li><code>npm cache verify</code></li></ol><p>排除完畢後，記得把node_modules 刪除。如果不再prject 裡面可以無需處理。<br><code>rd /s /q node_modules</code></p><p>最後一步重新載入 npm package 就輸入 <code>npm install</code></p><h2 id="Q3-初始angular專案，如何download-node-module"><a href="#Q3-初始angular專案，如何download-node-module" class="headerlink" title="Q3. 初始angular專案，如何download node_module"></a>Q3. 初始angular專案，如何download node_module</h2><p>只要輸入 <code>npm install</code> 就會幫你把所有相關檔案 download下載。</p><h2 id="Q4-PowerShell-無法使用-ng-ps1"><a href="#Q4-PowerShell-無法使用-ng-ps1" class="headerlink" title="Q4. PowerShell 無法使用 ng.ps1"></a>Q4. PowerShell 無法使用 ng.ps1</h2><p>設定方式為</p><ol><li>打開powershell</li><li>輸入 <code>set-ExecutionPolicy RemoteSigned -Scope CurrentUser </code></li><li>確認是否改變 ，請輸入 <code>Get-ExecutionPolicy</code>如果要看清單加入 <code>--list</code>即可。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 前端技術 </category>
          
          <category> Angular </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Angular </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用 Github Action (三) - 自動發行至指定 repository</title>
      <link href="/2023/01/21/DevOps/Github/%E4%BD%BF%E7%94%A8%20Github%20Action%20(%E4%B8%89)%20-%20%E8%87%AA%E5%8B%95%E7%99%BC%E8%A1%8C%E8%87%B3%E6%8C%87%E5%AE%9A%20repository/"/>
      <url>/2023/01/21/DevOps/Github/%E4%BD%BF%E7%94%A8%20Github%20Action%20(%E4%B8%89)%20-%20%E8%87%AA%E5%8B%95%E7%99%BC%E8%A1%8C%E8%87%B3%E6%8C%87%E5%AE%9A%20repository/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>近期希望可以有不同的 Server 可以去 clone 相對應的 repository 找很多使用方式，這邊使用 git 方式偏向新手使用方式，歡迎各位可以用自己方式使用 github actions。這邊使用asp.net mvc framework 4.7.3 舊型專案，經歷這連假三天不斷測試、實驗，終於成功執行相當感動，也慢慢提升一些git command 使用方式。</p><h1 id="一、-Github-Actions-操作方式"><a href="#一、-Github-Actions-操作方式" class="headerlink" title="一、 Github Actions 操作方式"></a>一、 Github Actions 操作方式</h1><h2 id="✔前置作業"><a href="#✔前置作業" class="headerlink" title="✔前置作業"></a>✔前置作業</h2><p>這邊我們先建立 兩個環境。</p><ol><li>專案 : ASP.net MVC </li><li>發行 : 存放 Deploy 位置</li></ol><h2 id="✔製作流程"><a href="#✔製作流程" class="headerlink" title="✔製作流程"></a>✔製作流程</h2><ol><li>創建 token key - 請點選: <a href="https://jontcont.github.io/2022/03/21/Github_UseToken/">參考章節</a></li><li>設定 repository secrets  - for 專案 repository</li><li>創建 workflows - 請點選: <a href="https://jontcont.github.io/2022/03/13/GithubActions(1)/">參考章節</a><br>介於設定 workflows 內容有摻雜很多語法、指令，本篇會用簡述方式帶過。</li></ol><h1 id="二、開始操作"><a href="#二、開始操作" class="headerlink" title="二、開始操作"></a>二、開始操作</h1><h2 id="1-創建-token-key"><a href="#1-創建-token-key" class="headerlink" title="1. 創建 token key"></a>1. 創建 token key</h2><p>創造目的是為了可以取得repository權限，如果有時間長短設定就請使用者自行評估。</p><h2 id="2-設定-repository-secrets"><a href="#2-設定-repository-secrets" class="headerlink" title="2. 設定 repository secrets"></a>2. 設定 repository secrets</h2><p>設定secrets 需要到 repository &gt; settings &gt; secrets &gt; Action<br>name : 輸入可識別的名稱 ,ex : commit_secret<br>value : token key<br><img src="/img/GitHub/action/3-1.jpg"><br><img src="/img/GitHub/action/3-2.jpg"><br><img src="/img/GitHub/action/3-3.jpg"></p><h2 id="3-創建-workflows"><a href="#3-創建-workflows" class="headerlink" title="3. 創建 workflows"></a>3. 創建 workflows</h2><p>這邊我直接奉上設定檔，如果讀者想要創建方式可以參考上一篇。 下方設定逐一說明。</p><h3 id="3-1-設定環境"><a href="#3-1-設定環境" class="headerlink" title="3-1. 設定環境"></a>3-1. 設定環境</h3><p>環境 mvc framework 4.7.3  環境一定要設定 windows ，如果需要linux環境請自行爬文。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">build:</span></span><br><span class="line">    <span class="comment"># for asp.net mvc msbuild 專用</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">windows-latest</span></span><br><span class="line">  <span class="attr">step:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br></pre></td></tr></table></figure><h3 id="3-2-新增參數"><a href="#3-2-新增參數" class="headerlink" title="3-2. 新增參數"></a>3-2. 新增參數</h3><p>如果想要隨時改參數設定，可以使用env 後續再介紹如何使用env。理論上，上面參數是待會一定會用到的參數，設定上先知道 publish 路徑位置以及sln後，再填入workflows當中。<br>USER_NAME、USER_EMAIL的參數並非是亂填，本案例是為了不要洩漏我的信箱、名稱才這樣創建，優點是查詢時候就可以區別commit角色。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">build:</span></span><br><span class="line">    <span class="comment"># for asp.net mvc msbuild 專用</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">windows-latest</span></span><br><span class="line">    <span class="attr">env:</span></span><br><span class="line">      <span class="attr">MY_SECRET   :</span> <span class="string">$&#123;&#123;secrets.commit_secret&#125;&#125;</span></span><br><span class="line">      <span class="attr">USER_NAME   :</span> <span class="string">github-actions[bot]</span></span><br><span class="line">      <span class="attr">USER_EMAIL  :</span> <span class="number">41898282</span><span class="string">+github-actions[bot]@users.noreply.github.com</span></span><br><span class="line">      <span class="attr">PUBLISH_DIR :</span> <span class="string">./dotnetMVC/dotnetMVC/bin/publish</span></span><br><span class="line">      <span class="attr">PRJ_SLN     :</span> <span class="string">./dotnetMVC/dotnetMVC.sln</span></span><br><span class="line">  <span class="attr">step:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br></pre></td></tr></table></figure><div class="note info flat"><h3 id="GithubAction-Bot"><a href="#GithubAction-Bot" class="headerlink" title="GithubAction Bot"></a>GithubAction Bot</h3><p>官方網有提供Bots 信箱、名稱，在論壇上也能查得到。<br>使用方式 :</p><ul><li>取得 GithubAction bot Url : <a href="https://api.github.com/users/github-actions%5Bbot%5D">https://api.github.com/users/github-actions%5Bbot%5D</a></li><li>name &#x3D; 可以任意更改，這邊我則是用 <code>[  github-actions[bot] ]</code></li><li>email &#x3D; 格式為 <code>id +github-actions[bot]@users.noreply.github.com</code>，如果看到api出來的id值為41898282 就是這樣輸入 <code>41898282+github-actions[bot]@users.noreply.github.com</code></li></ul><p>參考文件 : <a href="https://github.community/t/github-actions-bot-email-address/17204/4">https://github.community/t/github-actions-bot-email-address/17204/4</a></p></div><h3 id="3-3-新增流程順序"><a href="#3-3-新增流程順序" class="headerlink" title="3-3. 新增流程順序"></a>3-3. 新增流程順序</h3><p>這邊輸入完畢之後，就是從 action -&gt; bulid 這時需要加入git 元素。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">build:</span></span><br><span class="line">    <span class="comment"># for asp.net mvc msbuild 專用</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">windows-latest</span></span><br><span class="line">    <span class="attr">env:</span></span><br><span class="line">      <span class="attr">MY_SECRET   :</span> <span class="string">$&#123;&#123;secrets.commit_secret&#125;&#125;</span></span><br><span class="line">      <span class="attr">USER_NAME   :</span> <span class="string">github-actions[bot]</span></span><br><span class="line">      <span class="attr">USER_EMAIL  :</span> <span class="number">41898282</span><span class="string">+github-actions[bot]@users.noreply.github.com</span></span><br><span class="line">      <span class="attr">PUBLISH_DIR :</span> <span class="string">./dotnetMVC/dotnetMVC/bin/publish</span></span><br><span class="line">      <span class="attr">PRJ_SLN     :</span> <span class="string">./dotnetMVC/dotnetMVC.sln</span></span><br><span class="line">          </span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line">      </span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">setup-msbuild</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">microsoft/setup-msbuild@v1.1</span></span><br><span class="line">      </span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Setup</span> <span class="string">NuGet.exe</span> <span class="string">for</span> <span class="string">use</span> <span class="string">with</span> <span class="string">actions</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">NuGet/setup-nuget@v1.0.5</span></span><br><span class="line">      </span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Restore</span> <span class="string">NuGet</span> <span class="string">Packages</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">nuget</span> <span class="string">restore</span> <span class="string">$&#123;&#123;env.PRJ_SLN&#125;&#125;</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Build</span> <span class="string">and</span> <span class="string">Publish</span> <span class="string">Web</span> <span class="string">App</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">msbuild</span> <span class="string">$&#123;&#123;env.PRJ_SLN&#125;&#125;</span> <span class="string">/p:Configuration=Release</span> <span class="string">/p:DeployOnBuild=true</span> <span class="string">/p:PublishProfile=FolderProfile</span></span><br></pre></td></tr></table></figure><p>下方用git 方式取得。說明一下使用順序。</p><ol><li>創建publish (原因是專案裡面是沒有那個資料夾)</li><li>初始git 環境，並加入 遠端repository 環境</li><li>設定角色後，自動pull一次資料</li><li>Build之後，在commits 、push上去。</li></ol><p>這邊流程比較單純不會複雜，原本有考慮使用 push –force 但我還是堅持要使用有正常的commits 流程，因此有pull載入時間。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">steps:</span></span><br><span class="line">     <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line">     </span><br><span class="line">     <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">setup-msbuild</span></span><br><span class="line">       <span class="attr">uses:</span> <span class="string">microsoft/setup-msbuild@v1.1</span></span><br><span class="line">     </span><br><span class="line">     <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Setup</span> <span class="string">NuGet.exe</span> <span class="string">for</span> <span class="string">use</span> <span class="string">with</span> <span class="string">actions</span></span><br><span class="line">       <span class="attr">uses:</span> <span class="string">NuGet/setup-nuget@v1.0.5</span></span><br><span class="line">     </span><br><span class="line">     <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Restore</span> <span class="string">NuGet</span> <span class="string">Packages</span></span><br><span class="line">       <span class="attr">run:</span> <span class="string">nuget</span> <span class="string">restore</span> <span class="string">$&#123;&#123;env.PRJ_SLN&#125;&#125;</span></span><br><span class="line">     </span><br><span class="line">     <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">git</span> <span class="string">pull</span> <span class="string">repository</span> </span><br><span class="line">       <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">         echo &quot;--- create dir. and move dir. path ---&quot;</span></span><br><span class="line"><span class="string">         mkdir $&#123;&#123;env.PUBLISH_DIR&#125;&#125;</span></span><br><span class="line"><span class="string">         cd $&#123;&#123;env.PUBLISH_DIR&#125;&#125;</span></span><br><span class="line"><span class="string"></span>         </span><br><span class="line">         <span class="string">echo</span> <span class="string">&quot;--- init dir. and add remote repository ---&quot;</span></span><br><span class="line">         <span class="string">git</span> <span class="string">init</span></span><br><span class="line">         <span class="string">git</span> <span class="string">remote</span> <span class="string">add</span> <span class="string">deploy</span> <span class="string">$&#123;&#123;env.PUBLISH_URL&#125;&#125;</span></span><br><span class="line">         <span class="string">git</span> <span class="string">checkout</span> <span class="string">-b</span> <span class="string">master</span></span><br><span class="line">         </span><br><span class="line">         <span class="string">echo</span> <span class="string">&quot;--- set config  ---&quot;</span></span><br><span class="line">         <span class="string">git</span> <span class="string">config</span> <span class="string">--global</span> <span class="string">user.name</span>  <span class="string">&quot;$<span class="template-variable">&#123;&#123;env.USER_NAME&#125;&#125;</span>&quot;</span></span><br><span class="line">         <span class="string">git</span> <span class="string">config</span> <span class="string">--global</span> <span class="string">user.email</span> <span class="string">&quot;$<span class="template-variable">&#123;&#123;env.USER_EMAIL&#125;&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line">         <span class="string">echo</span> <span class="string">============</span> <span class="string">&quot; pull &quot;</span> <span class="string">================</span></span><br><span class="line">         <span class="string">git</span> <span class="string">pull</span> <span class="string">deploy</span> <span class="string">master</span> <span class="string">--rebase</span></span><br><span class="line">         </span><br><span class="line">     <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Build</span> <span class="string">and</span> <span class="string">Publish</span> <span class="string">Web</span> <span class="string">App</span></span><br><span class="line">       <span class="attr">run:</span> <span class="string">msbuild</span> <span class="string">$&#123;&#123;env.PRJ_SLN&#125;&#125;</span> <span class="string">/p:Configuration=Release</span> <span class="string">/p:DeployOnBuild=true</span> <span class="string">/p:PublishProfile=FolderProfile</span></span><br><span class="line"></span><br><span class="line">     <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">git</span> <span class="string">push</span> <span class="string">publish</span> <span class="string">From</span> <span class="string">Repository</span></span><br><span class="line">       <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">         cd $&#123;&#123;env.PUBLISH_DIR&#125;&#125;</span></span><br><span class="line"><span class="string">                 </span></span><br><span class="line"><span class="string">         echo ============ &quot; config list &quot; ============</span></span><br><span class="line"><span class="string">         git config --list</span></span><br><span class="line"><span class="string"></span>     </span><br><span class="line">         <span class="string">echo</span> <span class="string">============</span> <span class="string">&quot;statut and content add &quot;</span> <span class="string">============</span></span><br><span class="line">         <span class="string">git</span> <span class="string">add</span> <span class="string">--all</span></span><br><span class="line">         <span class="string">git</span> <span class="string">status</span></span><br><span class="line">         </span><br><span class="line">         <span class="string">echo</span> <span class="string">============</span> <span class="string">&quot; check branch list&quot;</span> <span class="string">============</span></span><br><span class="line">         <span class="string">git</span> <span class="string">branch</span> <span class="string">-a</span></span><br><span class="line">         </span><br><span class="line">         <span class="string">echo</span> <span class="string">============</span> <span class="string">&quot; commit &quot;</span> <span class="string">=============</span></span><br><span class="line">         <span class="string">git</span> <span class="string">commit</span> <span class="string">-m</span> <span class="string">&quot;$<span class="template-variable">&#123;&#123;env.COMMIT_STR&#125;&#125;</span>&quot;</span></span><br><span class="line">         </span><br><span class="line">         <span class="string">echo</span> <span class="string">============</span> <span class="string">&quot; PUSH &quot;</span> <span class="string">==============</span></span><br><span class="line">         <span class="string">git</span> <span class="string">push</span> <span class="string">-u</span> <span class="string">deploy</span> </span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="完成品"><a href="#完成品" class="headerlink" title="完成品"></a>完成品</h2><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">build:</span></span><br><span class="line">    <span class="comment"># for asp.net mvc msbuild 專用</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">windows-latest</span></span><br><span class="line">    <span class="attr">env:</span></span><br><span class="line">        <span class="attr">MY_SECRET   :</span> <span class="string">$&#123;&#123;secrets.commit_secret&#125;&#125;</span></span><br><span class="line">        <span class="attr">USER_NAME   :</span> <span class="string">github-actions[bot]</span></span><br><span class="line">        <span class="attr">USER_EMAIL  :</span> <span class="number">41898282</span><span class="string">+github-actions[bot]@users.noreply.github.com</span></span><br><span class="line">        <span class="attr">PUBLISH_DIR :</span> <span class="string">./dotnetMVC/dotnetMVC/bin/publish</span></span><br><span class="line">        <span class="attr">PRJ_SLN     :</span> <span class="string">./dotnetMVC/dotnetMVC.sln</span></span><br><span class="line">        <span class="attr">COMMIT_STR  :</span> <span class="string">&quot;github-actions[bot] Update : $(Get-Date -Format \&quot;yyyy.MMdd.HHmm\&quot;)&quot;</span></span><br><span class="line">        </span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line">      </span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">setup-msbuild</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">microsoft/setup-msbuild@v1.1</span></span><br><span class="line">      </span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Setup</span> <span class="string">NuGet.exe</span> <span class="string">for</span> <span class="string">use</span> <span class="string">with</span> <span class="string">actions</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">NuGet/setup-nuget@v1.0.5</span></span><br><span class="line">      </span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Restore</span> <span class="string">NuGet</span> <span class="string">Packages</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">nuget</span> <span class="string">restore</span> <span class="string">$&#123;&#123;env.PRJ_SLN&#125;&#125;</span></span><br><span class="line">      </span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">git</span> <span class="string">pull</span> <span class="string">repository</span> </span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          echo &quot;--- create dir. and move dir. path ---&quot;</span></span><br><span class="line"><span class="string">          mkdir $&#123;&#123;env.PUBLISH_DIR&#125;&#125;</span></span><br><span class="line"><span class="string">          cd $&#123;&#123;env.PUBLISH_DIR&#125;&#125;</span></span><br><span class="line"><span class="string"></span>          </span><br><span class="line">          <span class="string">echo</span> <span class="string">&quot;--- init dir. and add remote repository ---&quot;</span></span><br><span class="line">          <span class="string">git</span> <span class="string">init</span></span><br><span class="line">          <span class="string">git</span> <span class="string">remote</span> <span class="string">add</span> <span class="string">deploy</span> <span class="string">$&#123;&#123;env.PUBLISH_URL&#125;&#125;</span></span><br><span class="line">          <span class="string">git</span> <span class="string">checkout</span> <span class="string">-b</span> <span class="string">master</span></span><br><span class="line">          </span><br><span class="line">          <span class="string">echo</span> <span class="string">&quot;--- set config  ---&quot;</span></span><br><span class="line">          <span class="string">git</span> <span class="string">config</span> <span class="string">--global</span> <span class="string">user.name</span>  <span class="string">&quot;$<span class="template-variable">&#123;&#123;env.USER_NAME&#125;&#125;</span>&quot;</span></span><br><span class="line">          <span class="string">git</span> <span class="string">config</span> <span class="string">--global</span> <span class="string">user.email</span> <span class="string">&quot;$<span class="template-variable">&#123;&#123;env.USER_EMAIL&#125;&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line">          <span class="string">echo</span> <span class="string">============</span> <span class="string">&quot; pull &quot;</span> <span class="string">================</span></span><br><span class="line">          <span class="string">git</span> <span class="string">pull</span> <span class="string">deploy</span> <span class="string">master</span> <span class="string">--rebase</span></span><br><span class="line">          </span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Build</span> <span class="string">and</span> <span class="string">Publish</span> <span class="string">Web</span> <span class="string">App</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">msbuild</span> <span class="string">$&#123;&#123;env.PRJ_SLN&#125;&#125;</span> <span class="string">/p:Configuration=Release</span> <span class="string">/p:DeployOnBuild=true</span> <span class="string">/p:PublishProfile=FolderProfile</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">git</span> <span class="string">push</span> <span class="string">publish</span> <span class="string">From</span> <span class="string">Repository</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          cd $&#123;&#123;env.PUBLISH_DIR&#125;&#125;</span></span><br><span class="line"><span class="string">                  </span></span><br><span class="line"><span class="string">          echo ============ &quot; config list &quot; ============</span></span><br><span class="line"><span class="string">          git config --list</span></span><br><span class="line"><span class="string"></span>      </span><br><span class="line">          <span class="string">echo</span> <span class="string">============</span> <span class="string">&quot;statut and content add &quot;</span> <span class="string">============</span></span><br><span class="line">          <span class="string">git</span> <span class="string">add</span> <span class="string">--all</span></span><br><span class="line">          <span class="string">git</span> <span class="string">status</span></span><br><span class="line">          </span><br><span class="line">          <span class="string">echo</span> <span class="string">============</span> <span class="string">&quot; check branch list&quot;</span> <span class="string">============</span></span><br><span class="line">          <span class="string">git</span> <span class="string">branch</span> <span class="string">-a</span></span><br><span class="line">          </span><br><span class="line">          <span class="string">echo</span> <span class="string">============</span> <span class="string">&quot; commit &quot;</span> <span class="string">=============</span></span><br><span class="line">          <span class="string">git</span> <span class="string">commit</span> <span class="string">-m</span> <span class="string">&quot;$<span class="template-variable">&#123;&#123;env.COMMIT_STR&#125;&#125;</span>&quot;</span></span><br><span class="line">          </span><br><span class="line">          <span class="string">echo</span> <span class="string">============</span> <span class="string">&quot; PUSH &quot;</span> <span class="string">==============</span></span><br><span class="line">          <span class="string">git</span> <span class="string">push</span> <span class="string">-u</span> <span class="string">deploy</span> </span><br></pre></td></tr></table></figure><h1 id="心得"><a href="#心得" class="headerlink" title="心得"></a>心得</h1><p>這功能耗了我兩天連價沒得好好休息，大多遇到git指令、actions參數、查詢資料，參數部分也被很多範例誤導可能是用windows環境緣故。下篇會用action參數方式寫一篇，希望各位會喜歡。</p><p>這邊在小抱怨一下，git remote使用方式，本範例分支是用預設(master)主要原因是只要一指定就會發生意外錯誤(push部分)，後來被妥協用master分支。如果各位知道如何指定分支方式歡迎到下方留言讓我知道。</p>]]></content>
      
      
      <categories>
          
          <category> DevOps </category>
          
          <category> Github </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Github Action </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用 Github Action (二) - 使用 MVC (MSbuild) CI/CD</title>
      <link href="/2023/01/21/DevOps/Github/%E4%BD%BF%E7%94%A8%20Github%20Action%20(%E4%BA%8C)%20-%20%E4%BD%BF%E7%94%A8%20MVC%20(MSbuild)/"/>
      <url>/2023/01/21/DevOps/Github/%E4%BD%BF%E7%94%A8%20Github%20Action%20(%E4%BA%8C)%20-%20%E4%BD%BF%E7%94%A8%20MVC%20(MSbuild)/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>繼上篇文章，快速進行MVC CI&#x2F;CD 這部分相對的有很多使用者還在使用這種架框，本篇使用<code>Framework 4.7.2</code> ，當中有得知一些github actions小技巧。本篇只有到Publish，剩下請參考上篇使用方式。</p><h1 id="Github-Action"><a href="#Github-Action" class="headerlink" title="Github Action"></a>Github Action</h1><h2 id="一、創建Workflow"><a href="#一、創建Workflow" class="headerlink" title="一、創建Workflow"></a>一、創建Workflow</h2><p>下方參考使用方式。<br><em><strong>注意 : MVC 建議是使用Windows系統進行編譯，這邊再次聲明 MVC Framework 是用 MSbuild 會跟上篇 CLI使用方式有差異 。</strong></em></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">dontnet</span> <span class="string">Mvc</span> <span class="string">to</span> <span class="string">CI</span> <span class="string">Test</span></span><br><span class="line"></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">branches:</span> [ <span class="string">main</span> ]</span><br><span class="line">  <span class="attr">workflow_dispatch:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># A workflow run is made up of one or more jobs that can run sequentially or in parallel</span></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">build:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">windows-latest</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line">               </span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">setup-msbuild</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">microsoft/setup-msbuild@v1.1</span></span><br><span class="line">      </span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Setup</span> <span class="string">NuGet.exe</span> <span class="string">for</span> <span class="string">use</span> <span class="string">with</span> <span class="string">actions</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">NuGet/setup-nuget@v1.0.5</span></span><br><span class="line">      </span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Restore</span> <span class="string">NuGet</span> <span class="string">Packages</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">nuget</span> <span class="string">restore</span> <span class="string">./dotnetMVC/dotnetMVC.sln</span></span><br><span class="line">      </span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Build</span> <span class="string">and</span> <span class="string">Publish</span> <span class="string">Web</span> <span class="string">App</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">msbuild</span> <span class="string">./dotnetMVC/dotnetMVC.sln</span> <span class="string">/p:Configuration=Release</span> <span class="string">/p:DeployOnBuild=true</span> <span class="string">/p:PublishProfile=FolderProfile</span></span><br><span class="line"></span><br><span class="line">      <span class="comment"># Runs a set of commands using the runners shell</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Upload</span> <span class="string">Artifact</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/upload-artifact@v1.0.0</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">published_webapp</span></span><br><span class="line">          <span class="attr">path:</span> <span class="string">./dotnetMVC/dotnetMvcUnitTests/bin/Release</span></span><br></pre></td></tr></table></figure><h2 id="二、創建FolderProfile-pubxml"><a href="#二、創建FolderProfile-pubxml" class="headerlink" title="二、創建FolderProfile.pubxml"></a>二、創建FolderProfile.pubxml</h2><p>如過上方圖有通過，恭喜你可以跳過這邊。<br>MVC初始化的專案是沒有.pubxml相關的檔案，下方直接用快速方式創建.pubxml。</p><ol><li><p>按下[建置]-&gt;[發佈]。<br><img src="/img/GitHub/action/2-01.png"></p></li><li><p>如果事先有發行過的可以再新增一個。<br><img src="/img/GitHub/action/2-02.png"></p></li><li><p>選擇資料夾，直接按下下一步、完成<br><img src="/img/GitHub/action/2-03.png"><br><img src="/img/GitHub/action/2-04.png"></p></li><li><p>產生完成，也可以用下拉式查看有哪些.pubxml<br><img src="/img/GitHub/action/2-05.png"></p></li></ol><h2 id="三、確認最後小問題"><a href="#三、確認最後小問題" class="headerlink" title="三、確認最後小問題"></a>三、確認最後小問題</h2><ol><li>NeGet 失效?<br>NeGet 安裝失效問題，網路上很多有寫Nuget動作，但是怎樣做都會失敗。排除方式可以看右側選項，Github Action提供很方便的功能，可以直接使用安裝指令、寫法。</li></ol><p><img src="/img/GitHub/action/2-06.png"></p><ol start="2"><li><p>msbuild 注意點<br>msbuild 部分可以使用.csproj ，必須要留意<code>/p:DeployOnBuild=true</code>必須要一起填寫，<code>/p:PublishProfile=FolderProfile</code>就不會引發錯誤。</p></li><li><p>upload抓取publish路徑<br>[ Upload Artifact ] 本篇最需要的動作，必須要對應Repoitory路徑，若有錯誤訊息可以得知.pubxml檔案，會發行到哪個位置。</p></li></ol><h2 id="參考文件"><a href="#參考文件" class="headerlink" title="參考文件"></a>參考文件</h2><ol><li><a href="https://timheuer.com/blog/building-net-framework-apps-using-github-actions/">Using GitHub Actions for .NET Framework apps</a></li><li><a href="https://docs.microsoft.com/zh-tw/aspnet/web-forms/overview/deployment/visual-studio-web-deployment/command-line-deployment">使用 Visual Studio：命令列部署來 ASP.NET Web 部署</a></li><li><a href="https://blog.miniasp.com/post/2021/08/28/Build-Solution-or-Csproj-using-MSBuild">使用 MSBuild 建置方案檔(sln)與建置專案檔(csproj)的陷阱與注意事項</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> DevOps </category>
          
          <category> Github </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Github Action </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用 Github Action (四) - 使用 Runner、參數介紹</title>
      <link href="/2023/01/21/DevOps/Github/%E4%BD%BF%E7%94%A8%20Github%20Action%20(%E5%9B%9B)%20-%20%E4%BD%BF%E7%94%A8%20Runner%E3%80%81%E5%8F%83%E6%95%B8%E4%BB%8B%E7%B4%B9/"/>
      <url>/2023/01/21/DevOps/Github/%E4%BD%BF%E7%94%A8%20Github%20Action%20(%E5%9B%9B)%20-%20%E4%BD%BF%E7%94%A8%20Runner%E3%80%81%E5%8F%83%E6%95%B8%E4%BB%8B%E7%B4%B9/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本篇設定會與 <a href="https://jontcont.github.io/2022/03/13/GithubActions(1)/">使用 Github Action (一) - CI&#x2F;CD</a> 設定很類似，這次要細講與上篇提到的 <em>server pull repository</em> 問題。此外，本章會在說明 windows 參數使用。</p><h1 id="Github-Action"><a href="#Github-Action" class="headerlink" title="Github Action"></a>Github Action</h1><h2 id="Runner"><a href="#Runner" class="headerlink" title="Runner"></a>Runner</h2><p>如果要使用本機執行，會需要準備路徑給他存放。</p><h3 id="1-指定-repository-按下新增-runners"><a href="#1-指定-repository-按下新增-runners" class="headerlink" title="1. 指定 repository 按下新增 runners"></a>1. 指定 repository 按下新增 runners</h3><p><img src="/img/GitHub/action/4-1.png"></p><h3 id="2-新增前往創建資料夾"><a href="#2-新增前往創建資料夾" class="headerlink" title="2. 新增前往創建資料夾"></a>2. 新增前往創建資料夾</h3><p>按照github 上面的指令輸入即可，如果有錯誤訊息可以參考第一章節。<br><img src="/img/GitHub/action/4-2.png"></p><h3 id="3-打開-run-cmd"><a href="#3-打開-run-cmd" class="headerlink" title="3. 打開 run.cmd"></a>3. 打開 run.cmd</h3><p>用意是要確認有沒有有效執行。<br><img src="/img/GitHub/action/4-4.png"></p><h3 id="4-撰寫-Github-Actions"><a href="#4-撰寫-Github-Actions" class="headerlink" title="4. 撰寫 Github Actions"></a>4. 撰寫 Github Actions</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">pull_repository:</span></span><br><span class="line">  <span class="attr">runs-on:</span> <span class="string">self-hosted</span></span><br><span class="line">  <span class="attr">need:</span> <span class="string">build</span></span><br><span class="line">  <span class="attr">steps:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">確認</span> <span class="string">當前位置</span></span><br><span class="line">      <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line">        <span class="string">ls</span></span><br></pre></td></tr></table></figure><h2 id="Runner-執行路徑"><a href="#Runner-執行路徑" class="headerlink" title="Runner 執行路徑"></a>Runner 執行路徑</h2><p>從圖片可以看到，這邊他會將當前檔案download下來，執行後都會在指定repository path，如果你要確認指定路徑使用pull 就會需要用<code>ls</code> 或是 <code>dir</code>確認。<br><img src="/img/GitHub/action/4-3.png"></p><h2 id="使用參數"><a href="#使用參數" class="headerlink" title="使用參數"></a>使用參數</h2><p>參數部分比較需要注意，如果使用widowns輸入會遇到兩種問題。</p><ol><li>全域參數<br>全域參數方式是，在 build 底下區塊都可以使用這變數，需要取用方式則是要 <code>$&#123;&#123;env.name&#125;&#125;</code>方式填寫，這邊也可以當作<code>$&#123;&#123;&#125;&#125;</code>是全域變數的外殼。</li></ol><p>echo 使用方式如果你的變數是指令的名稱，powershell使用方式則為<code>$()</code>，例如:<code>$($&#123;&#123;env.name&#125;&#125;)</code>。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">jobs:</span></span><br><span class="line"><span class="attr">build:</span></span><br><span class="line">  <span class="attr">runs-on:</span> <span class="string">windows-latest</span></span><br><span class="line">  <span class="attr">env:</span></span><br><span class="line">      <span class="attr">MY_SECRET   :</span> <span class="string">$&#123;&#123;secrets.commit_secret&#125;&#125;</span></span><br><span class="line">      <span class="attr">USER_NAME   :</span> <span class="string">github-actions[bot]</span></span><br><span class="line">      <span class="attr">USER_EMAIL  :</span> <span class="number">41898282</span><span class="string">+github-actions[bot]@users.noreply.github.com</span></span><br><span class="line">      <span class="attr">PUBLISH_DIR :</span> <span class="string">./dotnetMVC/dotnetMVC/bin/publish</span></span><br><span class="line">      <span class="attr">PRJ_SLN     :</span> <span class="string">./dotnetMVC/dotnetMVC.sln</span></span><br><span class="line">      <span class="attr">COMMIT_STR  :</span> <span class="string">&quot;Bots Update : $(Get-Date -Format \&quot;yyyy.MMdd.HHmm\&quot;)&quot;</span></span><br><span class="line">  <span class="attr">steps:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">git</span> <span class="string">pull</span> <span class="string">repository</span> </span><br><span class="line">      <span class="attr">run:</span> <span class="string">| </span></span><br><span class="line"><span class="string">        echo &quot;$&#123;&#123;env.MY_SECRET&#125;&#125;&quot;</span></span><br><span class="line"><span class="string">        echo &quot;$&#123;&#123;env.COMMIT_STR&#125;&#125;&quot;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>區域參數<br>windows、macos 使用方式為<code>$env:name</code>取得，如果是用linux 執行只需要<code>$name</code>就好，所以需要小心留意使用。<figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">jobs:</span></span><br><span class="line"><span class="attr">build:</span></span><br><span class="line">  <span class="attr">runs-on:</span> <span class="string">windows-latest</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">steps:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">git</span> <span class="string">pull</span> <span class="string">repository</span> </span><br><span class="line">      <span class="attr">env:</span></span><br><span class="line">        <span class="attr">USER_NAME   :</span> <span class="string">github-actions[bot]</span></span><br><span class="line">        <span class="attr">USER_EMAIL  :</span> <span class="number">41898282</span><span class="string">+github-actions[bot]@users.noreply.github.com</span></span><br><span class="line">        <span class="attr">PUBLISH_DIR :</span> <span class="string">./dotnetMVC/dotnetMVC/bin/publish</span></span><br><span class="line">        <span class="attr">PRJ_SLN     :</span> <span class="string">./dotnetMVC/dotnetMVC.sln</span></span><br><span class="line">      <span class="attr">run:</span> <span class="string">| </span></span><br><span class="line"><span class="string">        echo &quot;$env:MY_SECRET&quot;</span></span><br><span class="line"><span class="string">        echo &quot;$env:COMMIT_STR&quot;</span></span><br></pre></td></tr></table></figure></li></ol><h1 id="參考文件"><a href="#參考文件" class="headerlink" title="參考文件"></a>參考文件</h1><ul><li>github : <a href="https://docs.github.com/en/actions/learn-github-actions/environment-variables">Environment variables</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> DevOps </category>
          
          <category> Github </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Github Action </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用 Github Action (一) - CI/CD</title>
      <link href="/2023/01/21/DevOps/Github/%E4%BD%BF%E7%94%A8%20Github%20Action%20(%E4%B8%80)%20-%20CICD/"/>
      <url>/2023/01/21/DevOps/Github/%E4%BD%BF%E7%94%A8%20Github%20Action%20(%E4%B8%80)%20-%20CICD/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>CI&#x2F;CD 之前很多人提倡的架構，近期努力學習之前新技術。企業、工作上面都可以發現DevOps工程師，DevOps 也是會用到CI&#x2F;CD功能。這篇用簡單方式使用 Github Actions，若是剛學習的人可以參考使用方式。</p><h1 id="Github-Actions"><a href="#Github-Actions" class="headerlink" title="Github Actions"></a>Github Actions</h1><p>Github提供的CI工具是2019年上架，之前Github通常與Jenkins、Gitlab 配合 CI&#x2F;CD ，直到2019年後Github Actions可簡易製作CI&#x2F;CD。</p><h2 id="1-創建Github-Action-檔案"><a href="#1-創建Github-Action-檔案" class="headerlink" title="1. 創建Github Action 檔案"></a>1. 創建Github Action 檔案</h2><p>進入Github 選擇 repository，按下[Action] 創建Workflows。<br><img src="/img/GitHub/action/01.png"><br>自訂自己的 Workflow ，可以點選圖片中的選項。<br><img src="/img/GitHub/action/02.png"></p><p>回到選單，可以看到repository內，已經存放workflows，副檔名為[yml]。<br><img src="/img/GitHub/action/03.png"></p><h2 id="2-設定-CI-配置"><a href="#2-設定-CI-配置" class="headerlink" title="2. 設定 CI 配置"></a>2. 設定 CI 配置</h2><p>下方是本篇設定方式，可以依據自己想要的順序調整。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">.NET</span></span><br><span class="line"></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">branches:</span> [ <span class="string">DEV</span> ]</span><br><span class="line">  <span class="attr">pull_request:</span></span><br><span class="line">    <span class="attr">branches:</span> [ <span class="string">DEV</span> ]</span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">build:</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Setup</span> <span class="string">.NET</span></span><br><span class="line">      <span class="attr">uses:</span> <span class="string">actions/setup-dotnet@v1</span></span><br><span class="line">      <span class="attr">with:</span></span><br><span class="line">        <span class="attr">dotnet-version:</span> <span class="number">5.0</span><span class="string">.x</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Restore</span> <span class="string">NuGet</span> <span class="string">Packages</span></span><br><span class="line">      <span class="attr">run:</span> <span class="string">nuget</span> <span class="string">restore</span> <span class="string">./MVC_CI_Demo/MVC_CI_Demo.sln</span> </span><br><span class="line">        </span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Build</span> <span class="string">Project</span></span><br><span class="line">      <span class="attr">run:</span> <span class="string">dotnet</span> <span class="string">build</span> <span class="string">./MVC_CI_Demo/MVC_CI_Demo.sln</span>       </span><br><span class="line">      </span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">UnitTest</span> <span class="string">Project</span></span><br><span class="line">      <span class="attr">run:</span> <span class="string">dotnet</span> <span class="string">test</span> <span class="string">./MVC_CI_Demo/MVC_CI_Demo.sln</span>   </span><br></pre></td></tr></table></figure><div class="note info flat"><p>說明 :</p><ol><li>(第1行) name : 設定Workflows名稱，如果run在Actions可以看得出來要使用哪種檔案。</li><li>(第3行) on : 設定狀態，範例用push、pull_request觸發時，會啟動workflows，但是要記得填寫相對應的branch。</li><li>(第9行) jobs : 執行工作(作業)，當中一定要設定到<code>runs-on</code>，actions有提供 windows 、liunx 、MacOS自行參閱官方網文件。</li><li>(第14行) step : 請自行依規劃順序執行(本文為.Net Core 開啟)。</li></ol></div><p>這邊不一樣的是<code>Restore NuGet Packages</code> 用.sln安裝，這點請大家留意。</p><p>設定完成後，就可以Commit 上去。下方圖為執行成功的畫面，點選方式請到Actions頁面點選。</p><p><img src="/img/GitHub/action/04.png"></p><hr><h1 id="IIS-Deploy"><a href="#IIS-Deploy" class="headerlink" title="IIS Deploy"></a>IIS Deploy</h1><p>本篇使用CD方式為以下文章參考。參考文件 : [ <a href="https://ithelp.ithome.com.tw/articles/10266050">https://ithelp.ithome.com.tw/articles/10266050</a> ]</p><p>CI部分設定方式都可以快速理解，從 code -&gt; bulid -&gt; Test，workflows 可以簡單創建完畢。使用指令部分會遇到需要使用系統管理員身分或是系統管理員帳號。安裝方式按照下方指令輸入即可。<br><img src="/img/GitHub/action/06.png"></p><div class="note info flat"><p>備註 : </p><ol><li>執行前，請確認command 、powershell 是否使用 系統管理員身分執行。</li><li>上圖runs-on:<code>self-hosted</code> 是待會要設定的workflows。</li></ol></div><p>執行完畢後，可以到Runners上可以看到 PC 名稱，表示安裝成功。</p><h2 id="設定runners"><a href="#設定runners" class="headerlink" title="設定runners"></a>設定runners</h2><p>設定位置為Reopitory -&gt; settings -&gt; Actions -&gt; Runners -&gt; New self-hosted runner。<br>按照執行部屬的主機OS為主，此範例為Windows x64。<br><img src="/img/GitHub/action/05.png"></p><h2 id="設定workflow"><a href="#設定workflow" class="headerlink" title="設定workflow"></a>設定workflow</h2><p>注意: 如果不要對上方功能有衝突問題，可以再新增一個workflow。<br>大概簡述下方執行內容 : </p><ol><li>使用Actions 提供的ubuntu-latest環境執行。</li><li>將專案發布指定位置存放。</li><li>將發布完畢的檔案，上傳到actions並指定名稱。</li><li>使用指定的主機環境。</li><li>下載指定名稱的檔案。</li><li>存放在iis 指定路徑。</li></ol><p>原則上，執行完畢後會成功執行，但會遇到權限上的問題，必須要留意。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span>  <span class="string">Build</span> <span class="string">and</span> <span class="string">deploy</span> <span class="string">ASP.Net</span> <span class="string">Core</span> <span class="string">app</span> <span class="string">to</span> <span class="string">IIS</span> <span class="bullet">-</span> <span class="string">GitHubDemo</span></span><br><span class="line"></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">branches:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">main</span></span><br><span class="line">  <span class="attr">workflow_dispatch:</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">build:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Setup</span> <span class="string">.NET</span></span><br><span class="line">      <span class="attr">uses:</span> <span class="string">actions/setup-dotnet@v1</span></span><br><span class="line">      <span class="attr">with:</span></span><br><span class="line">        <span class="attr">dotnet-version:</span> <span class="number">5.0</span><span class="string">.x</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">dotnet</span> <span class="string">publish</span></span><br><span class="line">      <span class="attr">run:</span> <span class="string">dotnet</span> <span class="string">publish</span> <span class="string">./MVC_CI_Demo/MVC_CI_Demo.sln</span> <span class="string">-c</span> <span class="string">Release</span> <span class="string">-o</span> <span class="string">$&#123;&#123;env.DOTNET_ROOT&#125;&#125;/demo</span></span><br><span class="line">  </span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Upload</span> <span class="string">artifact</span> <span class="string">for</span> <span class="string">deployment</span> <span class="string">job</span></span><br><span class="line">      <span class="attr">uses:</span> <span class="string">actions/upload-artifact@v2</span></span><br><span class="line">      <span class="attr">with:</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">.net-app</span></span><br><span class="line">        <span class="attr">path:</span> <span class="string">$&#123;&#123;env.DOTNET_ROOT&#125;&#125;/demo</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">deploy:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">self-hosted</span></span><br><span class="line">    <span class="attr">needs:</span> <span class="string">build</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Download</span> <span class="string">artifact</span> <span class="string">from</span> <span class="string">build</span> <span class="string">job</span></span><br><span class="line">      <span class="attr">uses:</span> <span class="string">actions/download-artifact@v2</span></span><br><span class="line">      <span class="attr">with:</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">.net-app</span></span><br><span class="line">        <span class="attr">path:</span> <span class="string">D:/GitHub_Action/dotnetcore-webapp</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Deploy</span> <span class="string">to</span> <span class="string">IIS</span></span><br><span class="line">      <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">        iisreset /stop</span></span><br><span class="line"><span class="string">        Copy-Item D:\GitHub_Action\dotnetcore-webapp C:/inetpub -Recurse -Force</span></span><br><span class="line"><span class="string">        iisreset /start</span></span><br></pre></td></tr></table></figure><h2 id="選擇性-開啟-administrator"><a href="#選擇性-開啟-administrator" class="headerlink" title="(選擇性)開啟 administrator"></a>(選擇性)開啟 administrator</h2><p>如果你遇到權限問題可以參考以下步驟。</p><ol><li><p>在”我的電腦”按右鍵”，進入“管理-系統工具-本機使用者和群組-administrator”<br><img src="/img/GitHub/action/07.png"></p></li><li><p>找到administrator，按右鍵內容，把 “帳戶已停用”前面的勾去掉。<br><img src="/img/GitHub/action/08.png"></p></li><li><p>重新開機看看是否有出現 administrator 系統管理員用戶選項若無則以其他使用者登入後</p></li><li><p>左下方-&gt;開始-&gt;附屬應用程式-&gt;命令提示字元</p></li><li><p>按滑鼠右鍵，選擇 以系統管理員身分執行</p></li><li><p>輸入 net user administrator &#x2F;active:yes</p></li><li><p>按下Enter鍵執行</p></li><li><p>重新開機</p></li></ol><p>完成後，直接重新Re-run all jobs即可。<br><img src="/img/GitHub/action/09.png"></p><hr><h2 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h2><p>執行 command 部分麻煩點，重啟iis需要用到 administrator身分，這部分網路上沒有詳細的說明，執行過程中可以得知主機環境會直接影響run.cmd的執行效果，也就是command (&#x2F;windows&#x2F;system32&#x2F;)部分。 </p><h2 id="參考文件"><a href="#參考文件" class="headerlink" title="參考文件"></a>參考文件</h2><ol><li>[<a href="https://caiomsouza.medium.com/fix-for-powershell-script-not-digitally-signed-69f0ed518715]">https://caiomsouza.medium.com/fix-for-powershell-script-not-digitally-signed-69f0ed518715]</a></li><li>[<a href="https://social.technet.microsoft.com/Forums/zh-TW/956f9d90-bdf1-4fbc-ac76-a77602c0084a/win10209862969438656352013666420837319953211331649297022172923494?forum=win10itprogeneralTW%5D">https://social.technet.microsoft.com/Forums/zh-TW/956f9d90-bdf1-4fbc-ac76-a77602c0084a/win10209862969438656352013666420837319953211331649297022172923494?forum=win10itprogeneralTW]</a></li><li>[<a href="https://ithelp.ithome.com.tw/articles/10266050]">https://ithelp.ithome.com.tw/articles/10266050]</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> DevOps </category>
          
          <category> Github </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Github Action </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Github - 解決 PR merge 衝突問題</title>
      <link href="/2023/01/21/DevOps/Github/Github%20-%20%E8%A7%A3%E6%B1%BA%20PR%20merge%20%E8%A1%9D%E7%AA%81%E5%95%8F%E9%A1%8C/"/>
      <url>/2023/01/21/DevOps/Github/Github%20-%20%E8%A7%A3%E6%B1%BA%20PR%20merge%20%E8%A1%9D%E7%AA%81%E5%95%8F%E9%A1%8C/</url>
      
        <content type="html"><![CDATA[<p>Github merge 遇到衝突的問題已經是常有的事情，既然要 merge 需要將新舊的資料比對、修改。Github 有提供網頁版本可以直接將衝突檔案修改後再merge。</p><h2 id="建立-Pull-Request"><a href="#建立-Pull-Request" class="headerlink" title="建立 Pull Request"></a>建立 Pull Request</h2><p>這邊簡單敘述一下　Pull Request。當Create PR 時候，如果有衝突資訊會出現 “Can’t autoatiocally merge” 資訊，其實可以直接創建PR給作者去比對。</p><p>這邊可以把這些動作當成創建<strong>留言區塊</strong>，作者會透過 pull requests 分頁內審閱檢查內容。<br><img src="/image/20221016_15-32-44.png"><br><img src="/image/20221016_15-34-45.png"><br><img src="/image/20221016_15-35-20.png"></p><h2 id="修改衝突內容"><a href="#修改衝突內容" class="headerlink" title="修改衝突內容"></a>修改衝突內容</h2><p>當作者發現對方有發出訊息時候，可以透過 Resolve conflicts 排除衝突問題。<br><img src="/image/20221016_15-41-15.png"><br><img src="/image/20221016_15-41-38.png"></p><h2 id="修正注意事項"><a href="#修正注意事項" class="headerlink" title="修正注意事項"></a>修正注意事項</h2><p>Github 這塊需要留意以下幾點 </p><ol><li>修改完畢後點選 “Mark as resolved”</li><li>必須要將左側衝突檔案全部修改完成</li></ol><p>以上修改完成後，就可以正常merge 內容。<br><img src="/image/20221016_15-42-02.png"><br><img src="/image/20221016_16-03-41.png"><br><img src="/image/20221016_16-04-11.png"></p><h2 id="參考文件"><a href="#參考文件" class="headerlink" title="參考文件"></a>參考文件</h2><ul><li><a href="https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/addressing-merge-conflicts/resolving-a-merge-conflict-on-github">Resolving a merge conflict on GitHub</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> DevOps </category>
          
          <category> Github </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Github Pages (二) - Google Search Console</title>
      <link href="/2023/01/21/DevOps/Github/Github%20Pages%20(%E4%BA%8C)%20-%20Google%20Search%20Console/"/>
      <url>/2023/01/21/DevOps/Github/Github%20Pages%20(%E4%BA%8C)%20-%20Google%20Search%20Console/</url>
      
        <content type="html"><![CDATA[<h1 id="使用-Google-Search-Console"><a href="#使用-Google-Search-Console" class="headerlink" title="使用 Google Search Console"></a>使用 <a href="https://search.google.com/search-console/about">Google Search Console</a></h1><p>Google Search Console 近期有新增[網域]資源類型，因為我們是使用 Github Pages 所以要使用 [網址前置字元] 來設定 。<br><img src="/img/Note/Github_Pages/Snipaste_2022-08-31_12-18-49.png"></p><p>驗證擁有權部分只需要將它提供的載點放入網在中即可。<br><img src="/img/Note/Github_Pages/Snipaste_2022-08-31_14-34-21.png"></p><h2 id="Sitemap"><a href="#Sitemap" class="headerlink" title="Sitemap"></a>Sitemap</h2><p>上一篇有簡單帶過 Sitemap 使用方式。這邊初始使用時候會使用上 <a href="https://www.xml-sitemaps.com/">XML Sitemap Online</a>，可以快速鍵至到 Github 到上面。接下來，放置root底下路徑並等待Github Pages 上去到頁面當中。<br><img src="/img/Note/Github_Pages/Snipaste_2022-08-31_14-33-01.png"></p><p>以上準備完成就只要加入剛才的  <code>sitemap.xml</code> 即可。<br><img src="/img/Note/Github_Pages/Snipaste_2022-08-31_14-25-33.png"></p><h2 id="網址審查"><a href="#網址審查" class="headerlink" title="網址審查"></a>網址審查</h2><p>網址審查功能主要是單頁驗證，意思是sitemap 是讓所有網站可以被 Google 搜尋得到，如果沒有編入索引內容當中是沒辦法查詢到這個內容，這裡可以使用[網址審查]排除這問題。<br><img src="/img/Note/Github_Pages/Snipaste_2022-08-31_14-43-13.png"></p><p>網址審查部分比較特別地方，需要由 Google 判定這個網址是否符合網址規範才會加入成功，第一次驗證可能需要等到明天才會達到效果。<br><img src="/img/Note/Github_Pages/Snipaste_2022-08-31_14-46-40.png"></p><h2 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h2><p>Google Search Console 有這兩種功能可以快速加入到Google Search 裡面，如果使用[網址審查]方式，可能是最快呈現效果。如果使用 <a href="https://www.npmjs.com/package/hexo-generator-sitemap">hexo-generator-sitemap</a>就只需要特別指定sitemap.xml 相當方便。</p>]]></content>
      
      
      <categories>
          
          <category> DevOps </category>
          
          <category> Github </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Github Pages (一) - SEO 搜尋引擎</title>
      <link href="/2023/01/21/DevOps/Github/Github%20Pages%20(%E4%B8%80)%20-%20SEO%20%E6%90%9C%E5%B0%8B%E5%BC%95%E6%93%8E/"/>
      <url>/2023/01/21/DevOps/Github/Github%20Pages%20(%E4%B8%80)%20-%20SEO%20%E6%90%9C%E5%B0%8B%E5%BC%95%E6%93%8E/</url>
      
        <content type="html"><![CDATA[<p>Blog 目前已經經營快要過完半年，近期發現Google 搜尋引擎找不到我的Blog，原本以為Github Pages 會加入在搜尋引擎當中，測試下來結論是沒有出現。目前想到原因是 SEO 無法辨認出網站，於是，目前得知每個Browser會有搜尋引擎運算，如果沒有出現可能要留意了。</p><h2 id="Google-Search-Console"><a href="#Google-Search-Console" class="headerlink" title="Google Search Console"></a><a href="https://search.google.com/search-console/about">Google Search Console</a></h2><p>Google Search Console 是 Google 提供監控、維持網站在 Google 搜尋結果中的排名，並排解相關問題。網站上未申請 Search Console 還是有機會在Google 排名當中，如果要改善SEO 就需要使用。</p><h2 id="hexo-generator-sitemap"><a href="#hexo-generator-sitemap" class="headerlink" title="hexo-generator-sitemap"></a><a href="https://www.npmjs.com/package/hexo-generator-sitemap">hexo-generator-sitemap</a></h2><p>這個Plugin 是為了產生 Sitemap.xml 使用，需要加入在_config.yml設定檔。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sitemap</span><br><span class="line">  path:</span><br><span class="line">    - sitemap.xml</span><br></pre></td></tr></table></figure><h2 id="sitemap-網站地圖"><a href="#sitemap-網站地圖" class="headerlink" title="sitemap 網站地圖"></a>sitemap 網站地圖</h2><p>Google Search 搜尋引擎有兩種模式。第一種搜尋引擎自己抓取、第二種使用Sitemap 讓搜尋引擎提早發現哪些頁面是被收錄。Sitemap 主要用意是收錄、存取Google引擎當中，可以讓 Google 提早收錄到你想要的網站、頁面。</p><p>如果要使用網站上產生 Sitemap 可以使用 <a href="https://www.xml-sitemaps.com/">XML Sitemap Online</a>。</p><h2 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h2><p>Googel Search Console 使用需要設定幾個動作才會被搜尋得到，目前設定完畢後第二天就可以搜尋到網站，後續會補上操作章節。</p><p>主要設定大綱為這兩項。</p><ol><li>網站審查</li><li>Sitemap</li></ol><h2 id="補充"><a href="#補充" class="headerlink" title="補充"></a>補充</h2><h3 id="如何測試自己網站是否有加入"><a href="#如何測試自己網站是否有加入" class="headerlink" title="如何測試自己網站是否有加入"></a>如何測試自己網站是否有加入</h3><p>只要在 Browser Url 輸入以下方式就可以看得到了。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">site:&lt;url&gt;</span><br><span class="line"></span><br><span class="line">// example</span><br><span class="line">site:https://jontcont.github.io/</span><br></pre></td></tr></table></figure><h2 id="參考文件"><a href="#參考文件" class="headerlink" title="參考文件"></a>參考文件</h2><ul><li><a href="https://ktinglee.github.io/what-is-seo/">什麼是SEO？ - GitHub Pages x Jekyll x Blog</a></li><li><a href="https://kucw.github.io/blog/2021/1/from-medium-to-github/">為了SEO！我離開了Medium，改在GitHub 上自架個人網站</a></li><li><a href="https://annkuoq.github.io/blog/2020-03-15-how-to-find-my-blog-on-google-search/">如何讓 Google 搜尋到自己的部落格</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> DevOps </category>
          
          <category> Github </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SourceTree (一) - 創建多層次 branch</title>
      <link href="/2023/01/21/DevOps/Git/sourcetree(%E4%B8%80)-%E5%89%B5%E5%BB%BA%E5%A4%9A%E5%B1%A4%E6%AC%A1%20branch/"/>
      <url>/2023/01/21/DevOps/Git/sourcetree(%E4%B8%80)-%E5%89%B5%E5%BB%BA%E5%A4%9A%E5%B1%A4%E6%AC%A1%20branch/</url>
      
        <content type="html"><![CDATA[<p>近期因工作需要換 Git 工具，從 Github Desktop 轉換到 SourceTree 工具，目前最吸引的部分是圖形(Graph)部分非常好分析 branch marge 狀況以及 branch 使用狀況。這篇簡單操作 “創建多層次 branch”。</p><h2 id="SourceTree"><a href="#SourceTree" class="headerlink" title="SourceTree"></a>SourceTree</h2><p> 是以 Git 為基礎設計的 GUI 圖形化工具。與 Github Desktop 比較上 Github Desktop 缺少圖形化介面缺乏管理、維護。</p><h3 id="官方網址"><a href="#官方網址" class="headerlink" title="官方網址"></a>官方網址</h3><p>SourceTree : <a href="https://www.sourcetreeapp.com/">https://www.sourcetreeapp.com/</a></p><h2 id="安裝方式"><a href="#安裝方式" class="headerlink" title="安裝方式"></a>安裝方式</h2><h3 id="step-1-註冊"><a href="#step-1-註冊" class="headerlink" title="step.1 註冊"></a>step.1 註冊</h3><p>bitbucket 與 github 是同類型的工具，採用 Mercurial 和Git 作為版控部分。這邊就請自行註冊。<br><img src="/image/20230101_23-51-58.png"></p><h3 id="step-2-安裝工具"><a href="#step-2-安裝工具" class="headerlink" title="step.2 安裝工具"></a>step.2 安裝工具</h3><p><img src="/image/20230101_23-57-20.png"></p><blockquote><h3 id="進階選項-備註"><a href="#進階選項-備註" class="headerlink" title="進階選項-備註"></a>進階選項-備註</h3><p><em>來自 <a href="https://ithelp.ithome.com.tw/articles/10206852">Sourcetree - git 的 GUI 管理軟體</a></em></p><ul><li>第一項如果勾選的話會在 checkout ( 切換 commit ) 的時候，自動將斷行符號由 LF ( linux ) 轉成 CRLF ( windows )，如果是在 linux 的系統上安裝則相反，選擇這個的好處是在進行協同開發的時候如果使用的系統不相同，就比較不會因為斷行符號的不同而發生錯誤。</li><li>第二項則是預先設置一個通用的 ignore，這兩項可以依照自己的需求選擇。</li></ul></blockquote><h3 id="step-3-設定帳號"><a href="#step-3-設定帳號" class="headerlink" title="step.3 設定帳號"></a>step.3 設定帳號</h3><p><img src="/image/20230102_00-01-45.png"></p><h3 id="step-4-設置-SSH-Key"><a href="#step-4-設置-SSH-Key" class="headerlink" title="step 4 : 設置 SSH Key"></a>step 4 : 設置 SSH Key</h3><p><img src="/image/20230102_00-02-50.png"></p><h2 id="創建分支-Branch"><a href="#創建分支-Branch" class="headerlink" title="創建分支(Branch)"></a>創建分支(Branch)</h2><p>首先我們先確認分支是否是只有一個，接下來我們再進行創建分支。<br><img src="/image/20230102_00-05-36.png"></p><h3 id="第一層分支"><a href="#第一層分支" class="headerlink" title="第一層分支"></a>第一層分支</h3><p>第一層 Banch 可以直接創建 <code>folder</code>等下來識別接下來畫面。<br><img src="/image/20230102_00-08-23.png"></p><h3 id="第二層分支"><a href="#第二層分支" class="headerlink" title="第二層分支"></a>第二層分支</h3><p>接下來我們會用 <code>folder/001</code>來表示下一層，這邊會發現怎麼創建都是錯誤，原因是因為已經創建的folder是無發創建子層分支。<br><img src="/image/20230102_00-11-08.png"><br><img src="/image/20230102_00-11-17.png"></p><p>作法如下，這樣下來就完成二層分支</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">folder_copy/#A002</span><br></pre></td></tr></table></figure><p><img src="/image/20230102_00-14-51.png"></p><h2 id="多層分支"><a href="#多層分支" class="headerlink" title="多層分支"></a>多層分支</h2><p>雖然這介面可以使用多層方式創建分支，目前為止很少遇到需要三層以上的案例，使用方式如同上方一樣。<br><img src="/image/20230102_00-16-47.png"></p><p>從上方案例可以知道幾點事項</p><ul><li>不是 folder 關係是無法創建下一層</li><li>一個folder 可以允許 folder 、branch</li><li>若要存放檔案可以參考這招或是複雜概念才建議開道三層以上。</li></ul>]]></content>
      
      
      <categories>
          
          <category> DevOps </category>
          
          <category> sourcetree </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sourcetree </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Github - 使用 Github Deploy keys</title>
      <link href="/2023/01/21/DevOps/Github/Github%20-%20%E4%BD%BF%E7%94%A8%20Github%20Deploy%20keys/"/>
      <url>/2023/01/21/DevOps/Github/Github%20-%20%E4%BD%BF%E7%94%A8%20Github%20Deploy%20keys/</url>
      
        <content type="html"><![CDATA[<h1 id="Deploy-keys"><a href="#Deploy-keys" class="headerlink" title="Deploy keys"></a>Deploy keys</h1><p>透過設定 Deploy keys 可以避免掉每次 push 都要輸入帳密的流程</p><h2 id="創建-SSH"><a href="#創建-SSH" class="headerlink" title="創建 SSH"></a>創建 SSH</h2><p>打開 [命令字元] 輸入以下內容即可。如果沒特別指定路徑預設<code>(C:\Users\使用者名稱/.ssh/id_rsa)</code>，沒有特定指定密碼可以直接按下Enter。</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen</span><br></pre></td></tr></table></figure><p><img src="/img/GitHub/basic/deploy_01.png"></p><p>下方為<code>ssh-keygen</code>參數，請參閱。<br><img src="/img/GitHub/basic/deploy_02.png"></p><h2 id="創建-Deploy-keys"><a href="#創建-Deploy-keys" class="headerlink" title="創建 Deploy keys"></a>創建 Deploy keys</h2><p>打開需要使用Deloy Keys 的 repository，按下Security &gt; Deploy keys。若需要使用Write access權限可以直接勾選 。<br><img src="/img/GitHub/basic/deploy_03.png"><br><img src="/img/GitHub/basic/deploy_04.png"></p><h3 id="輸入-Keys"><a href="#輸入-Keys" class="headerlink" title="輸入 Keys"></a>輸入 Keys</h3><p>Key輸入框請用<em>id_rsa.pub</em>記事本打開，直接貼上去。<br><img src="/img/GitHub/basic/deploy_05.png"><br><img src="/img/GitHub/basic/deploy_06.png"></p><p>完成後，就會出現這個。<br><img src="/img/GitHub/basic/deploy_07.png"></p><h2 id="跳出帳號密碼"><a href="#跳出帳號密碼" class="headerlink" title="跳出帳號密碼"></a>跳出帳號密碼</h2><p>如果經過上面設定 push 過程中，須要輸入帳號密碼可以嘗試更改本地 remote 的來源</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote set-url origin git@github.com:[yourgithubID]/[yourRepo].git</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> DevOps </category>
          
          <category> Github </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Github - 使用 Github Token</title>
      <link href="/2023/01/21/DevOps/Github/Github%20-%20%E4%BD%BF%E7%94%A8%20Github%20Token/"/>
      <url>/2023/01/21/DevOps/Github/Github%20-%20%E4%BD%BF%E7%94%A8%20Github%20Token/</url>
      
        <content type="html"><![CDATA[<h1 id="Personal-access-tokens"><a href="#Personal-access-tokens" class="headerlink" title="Personal access tokens"></a>Personal access tokens</h1><p>可以不用使用SSH即可使用的一種，建立完成後會產生出Token，可用來製作API、自動部屬等、協助創作等。</p><ul><li><a href="https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/creating-a-personal-access-token">官方網文件</a></li></ul><h2 id="創建-Personal-access-tokens"><a href="#創建-Personal-access-tokens" class="headerlink" title="創建 Personal access tokens"></a>創建 Personal access tokens</h2><p>點選設定後，左側最底下 <code> Developer settings</code>選擇 <code> Personal access tokens</code>即可。設定上需要注意看裡面內容進行設定。<br><img src="/img/GitHub/basic/tokens_01.png"><br><img src="/img/GitHub/basic/tokens_02.png"><br><img src="/img/GitHub/basic/tokens_03.png"></p><p>設定內容有包含到組織相關的存取，可以透過這種方式取的組織權限。<br><img src="/img/GitHub/basic/tokens_04.png"></p><p>然後就可以使用Token取得 GitHub repository。<em>這邊必須要注意 Create 出來的Token 只會出現一次，如果不小心沒存檔無法再取得一次。</em><br><img src="/img/GitHub/basic/tokens_05.png"></p>]]></content>
      
      
      <categories>
          
          <category> DevOps </category>
          
          <category> Github </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker (五) - httpd 修改 index 內容</title>
      <link href="/2023/01/21/DevOps/Docker/dc_05_httpd%20%E4%BF%AE%E6%94%B9%20index%20%E5%85%A7%E5%AE%B9/"/>
      <url>/2023/01/21/DevOps/Docker/dc_05_httpd%20%E4%BF%AE%E6%94%B9%20index%20%E5%85%A7%E5%AE%B9/</url>
      
        <content type="html"><![CDATA[<h2 id="前置作業"><a href="#前置作業" class="headerlink" title="前置作業"></a>前置作業</h2><p>完成下方指令已可繼續本章節。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker pull httpd</span><br><span class="line">docker create -p 8080:80 --name web -i httpd</span><br><span class="line">docker start web</span><br></pre></td></tr></table></figure><h2 id="進入-Container-內-Cli"><a href="#進入-Container-內-Cli" class="headerlink" title="進入 Container 內 Cli"></a>進入 Container 內 Cli</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker ps -a #看狀態 </span><br><span class="line">docker exec -it web bash</span><br></pre></td></tr></table></figure><h2 id="修改-index-html-內容"><a href="#修改-index-html-內容" class="headerlink" title="修改 index.html 內容"></a>修改 index.html 內容</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#找到 htdocs內的index.html</span><br><span class="line">cat htdocs/index.html</span><br><span class="line"></span><br><span class="line">## 修改index.html內容</span><br><span class="line">echo Hello world - Docker &gt; htdocs/index.html &amp;&amp; exit</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>離開後直接開啟 <a href="http://localhost:8080/">http://localhost:8080/</a> 即可看到效果，如果看不到效果請再重新整理container。</p>]]></content>
      
      
      <categories>
          
          <category> DevOps </category>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker (一)- 基本使用方式</title>
      <link href="/2023/01/21/DevOps/Docker/dc_01_%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8%E6%96%B9%E5%BC%8F/"/>
      <url>/2023/01/21/DevOps/Docker/dc_01_%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8%E6%96%B9%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h1><p>是一個快速建立、測試、部署程式的軟體平台。Docker 作為容器的作業系統與虛擬機器虛擬化伺服器硬體的方法相似，容器可虛擬化伺服器的作業系統。Docker 安裝在每部伺服器上，並提供簡單的命令讓您使用以建立、啟動或停止容器。</p><h2 id="系統架構"><a href="#系統架構" class="headerlink" title="系統架構"></a>系統架構</h2><p>Docker 系統架構主要是主從式(client-server)架構。如下方</p><ul><li>Docker Daemon (伺服器) : 用來執行管理 Docker image、啟動 container、停止 container 的 service，它是一個 long time service。</li><li>Docker Client (客戶端) : 使用 Restful API 連到 Docker daemon，並且提供 command line 的方式讓使用者可以操作 docker。</li></ul><h2 id="主要元件"><a href="#主要元件" class="headerlink" title="主要元件"></a>主要元件</h2><ul><li>映像檔（image）: 執行特定環境所需要的資源，特色只允許唯獨。</li><li>容器（container）: 基於 image 可以建立出 Container，特色可讀寫。</li><li>倉庫（repository）: 存放 image 的空間，處理方式類似於git 。預設存取的 registry 為 DockerHub。</li></ul><h2 id="初次使用"><a href="#初次使用" class="headerlink" title="初次使用"></a>初次使用</h2><ul><li><p>安裝網址:<a href="https://www.docker.com/">https://www.docker.com/</a><br>安裝方式不再贅述，原則上主機板如果有支援虛擬化都是可以使用docker ，如果有遇到錯誤問題可以考慮參考上一篇。</p></li><li><p>備註 : 本篇使用 powershell 。</p></li></ul><p>接下來，我們要驗證是否有安裝成功需要輸入下方動作。</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run hello-world</span><br></pre></td></tr></table></figure><p>若環境下出現 <code>Hello from Docker!</code>恭喜各位完成第一步了。</p><h3 id="查看狀態"><a href="#查看狀態" class="headerlink" title="查看狀態"></a>查看狀態</h3><p>這邊我們可以利用下方指令執行，可以顯示當前狀態。從狀態查看可以知道<code>Exited (0)</code>這裡面的狀態，查看方式 0為正常，其餘數值都為異常狀況，</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps</span><br></pre></td></tr></table></figure><h3 id="移除-Container"><a href="#移除-Container" class="headerlink" title="移除 Container"></a>移除 Container</h3><p>docker image 作為映像檔不像 Container 可以不斷生成。若container 數量不斷成長會造成容量、管理相當不便，可以透由移除方式移出。</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 使用 CONTAINER ID</span><br><span class="line">docker rm [CONTAINER ID]</span><br><span class="line"></span><br><span class="line"># 使用 Names</span><br><span class="line">docker rm [Names]</span><br></pre></td></tr></table></figure><p>補充 :<br>若無法移除Container 需要加入 <code>-f</code> 參數。</p><h3 id="移除-images"><a href="#移除-images" class="headerlink" title="移除 images"></a>移除 images</h3><p>若要移除images 可以使用下方指令，這邊稍微留意Container 是否存在，必須要先移除Container 才能移除image。</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rmi [IMAGE]</span><br></pre></td></tr></table></figure><h2 id="參考文件"><a href="#參考文件" class="headerlink" title="參考文件"></a>參考文件</h2><ul><li><a href="https://ithelp.ithome.com.tw/articles/10190728">Day2：認識 Docker 基本概念</a></li><li><a href="https://ithelp.ithome.com.tw/articles/10215989">Day09 - Docker CLI 常用語法</a></li><li><a href="https://ithelp.ithome.com.tw/articles/10237506">30 天與鯨魚先生做好朋友系列</a></li><li><a href="https://betterprogramming.pub/understanding-docker-container-exit-codes-5ee79a1d58f6%E3%84%8F">Understanding Docker Container Exit Codes</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> DevOps </category>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker (二)- docker run 與 docker start</title>
      <link href="/2023/01/21/DevOps/Docker/dc_02_%20docker%20run%20%E8%88%87%20docker%20start/"/>
      <url>/2023/01/21/DevOps/Docker/dc_02_%20docker%20run%20%E8%88%87%20docker%20start/</url>
      
        <content type="html"><![CDATA[<p>這邊簡單操作一次 docker run 與 docker start 有什麼特別差異。</p><h2 id="準備工具"><a href="#準備工具" class="headerlink" title="準備工具"></a>準備工具</h2><p>開始前，兩套工具可以準備，若不使用Desktop也能操作。</p><ul><li>Docker Desktop  : <a href="https://www.docker.com/products/docker-desktop/">https://www.docker.com/products/docker-desktop/</a></li><li>Cmd &#x2F; terminal</li></ul><h2 id="Images-映像檔"><a href="#Images-映像檔" class="headerlink" title="Images 映像檔"></a>Images 映像檔</h2><p>Images 作為映像檔，基底需要Containers 來執行。使用image 可以透過 <code>docker search</code> 查詢image name。</p><h3 id="Search-搜尋"><a href="#Search-搜尋" class="headerlink" title="Search 搜尋"></a>Search 搜尋</h3><p>搜尋 : <strong>hello-world</strong> 。內容內會有很多相關的hello-world，可以依據需求選擇需要的名稱執行、輸入。<br><img src="/image/20221128_14-36-04.png"></p><h3 id="建立-Image-Hello-World"><a href="#建立-Image-Hello-World" class="headerlink" title="建立 Image - Hello World"></a>建立 Image - Hello World</h3><p>簡單敘述 Docker 創建方式。如果Docker內容已經有存在Hello World 是不會再產生的二個Image (Hello World) ，從下圖可以得到結果。<br>執行方式</p><figure class="highlight docker"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="keyword">run</span><span class="language-bash"> hello-world</span></span><br></pre></td></tr></table></figure><p><img src="/image/20221128_14-47-20.png"></p><h3 id="Docker-Desktop-Image-x2F-Containers"><a href="#Docker-Desktop-Image-x2F-Containers" class="headerlink" title="Docker Desktop - Image &#x2F; Containers"></a>Docker Desktop - Image &#x2F; Containers</h3><p>從Docker Desktop 可以看得出來，只要執行 <code>docker run hello-world</code> Containers 會不斷的產生出來，當中結論是</p><ul><li>Image初始化會產生 SHA256</li><li>執行 docker run 同時會新增 <strong>Containers</strong></li></ul><p><img src="/image/20221128_14-51-23.png"><br><img src="/image/20221128_14-51-35.png"></p><div class="note info simple"><h3 id="查詢狀態"><a href="#查詢狀態" class="headerlink" title="查詢狀態"></a>查詢狀態</h3><p>指令可以直接看到Container 狀態，可以得知Images 對象。<br><img src="/image/20221128_15-00-00.png"></p></div><h2 id="Containers-容器"><a href="#Containers-容器" class="headerlink" title="Containers 容器"></a>Containers 容器</h2><h3 id="清除多餘的-container"><a href="#清除多餘的-container" class="headerlink" title="清除多餘的 container"></a>清除多餘的 container</h3><p>現在我們先把Docker 裡面的 Container清理。清理方式以下兩行指令</p><figure class="highlight docker"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker rm [ContainerID]</span><br><span class="line">docker rm [names] </span><br></pre></td></tr></table></figure><p><img src="/image/20221128_15-09-23.png"></p><h3 id="只執行Container"><a href="#只執行Container" class="headerlink" title="只執行Container"></a>只執行Container</h3><p>執行方式如下。下方的 <code>-i -t </code> 意思是需要Container互動需要加入的參數。<br>如果執行這個只需要使用暫停 Container。</p><figure class="highlight docker"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker start -i [ContainerID]</span><br><span class="line">docker start -i [names] </span><br></pre></td></tr></table></figure><h3 id="暫停-Container"><a href="#暫停-Container" class="headerlink" title="暫停 Container"></a>暫停 Container</h3><p>執行方式如下。如果執行這個只需要使用暫停 Container</p><figure class="highlight docker"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker stop [ContainerID]</span><br><span class="line">docker stop [names] </span><br></pre></td></tr></table></figure><h2 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h2><p>從執行下來 docker run 很貼心把Image 、Container 加入進去，如果需要個別方式執行需要透過以下順序</p><ul><li>pull (抓下 images)</li><li>create (創建 container)</li><li>start (執行 container)<br>如果直接使用docker run 可能會遇到 contrainer 無法管理的問題，後續會在針對上面三個指令做敘述。</li></ul><p>docker run &#x3D; docker pull + docker create + docker start</p>]]></content>
      
      
      <categories>
          
          <category> DevOps </category>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker (三)- 創建 docker 環境 (無 docker run)</title>
      <link href="/2023/01/21/DevOps/Docker/dc_03_%E5%89%B5%E5%BB%BA%20docker%20%E7%92%B0%E5%A2%83%20(%E7%84%A1%20docker%20run)/"/>
      <url>/2023/01/21/DevOps/Docker/dc_03_%E5%89%B5%E5%BB%BA%20docker%20%E7%92%B0%E5%A2%83%20(%E7%84%A1%20docker%20run)/</url>
      
        <content type="html"><![CDATA[<p>上一章節有敘述使用 docker run 與 docker start 差異，一般使用Docker 除非是需要兩種同時生成，不然這東西相當不方便。以下作法會是用 pull、create 、start(stop) 。</p><h2 id="清除-Images-映像檔"><a href="#清除-Images-映像檔" class="headerlink" title="清除 Images 映像檔"></a>清除 Images 映像檔</h2><p>刪除Images如下方指令。如果執行後跟下方圖片一樣有錯誤訊息，可以看到 container 還有在使用中是不可以任意刪除，所以記得需要先刪除 container 才能刪除 Images。</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker rmi [ContainerID]</span><br><span class="line">docker rmi [names] </span><br></pre></td></tr></table></figure><p><img src="/image/20221128_22-19-14.png"></p><h1 id="初次使用-Docker-動作"><a href="#初次使用-Docker-動作" class="headerlink" title="初次使用 Docker 動作"></a>初次使用 Docker 動作</h1><p>這次需要記一下使用順序，之後就會比較順手一些。</p><ol><li>docker pull </li><li>docker create </li><li>docker start</li><li>docker stop</li></ol><h2 id="創建-Images-docker-pull"><a href="#創建-Images-docker-pull" class="headerlink" title="創建 Images (docker pull)"></a>創建 Images (docker pull)</h2><p>使用方式可以透過search 查詢名稱。這邊我們一樣使用<code>hello-world</code>來展示。<br>輸入方式如下:</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull hello-world</span><br></pre></td></tr></table></figure><p><img src="/image/20221128_22-27-04.png"></p><h2 id="創建-Container-docker-create"><a href="#創建-Container-docker-create" class="headerlink" title="創建 Container(docker create)"></a>創建 Container(docker create)</h2><p>輸入方式如下:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker create -i --name [Container Name] [Image Name]</span><br></pre></td></tr></table></figure><h2 id="執行-docker-start"><a href="#執行-docker-start" class="headerlink" title="執行 (docker start)"></a>執行 (docker start)</h2><p>使用方式如下 :</p><figure class="highlight docker"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker start -i [ContainerID]</span><br><span class="line">docker start -i [names] </span><br></pre></td></tr></table></figure><h2 id="暫停-docker-stop"><a href="#暫停-docker-stop" class="headerlink" title="暫停 (docker stop)"></a>暫停 (docker stop)</h2><p>使用方式如下 :</p><figure class="highlight docker"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker stop [ContainerID]</span><br><span class="line">docker stop [names] </span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> DevOps </category>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker (四)- port設定篇(httpd)</title>
      <link href="/2023/01/21/DevOps/Docker/dc_04_port%E8%A8%AD%E5%AE%9A%E7%AF%87(httpd)/"/>
      <url>/2023/01/21/DevOps/Docker/dc_04_port%E8%A8%AD%E5%AE%9A%E7%AF%87(httpd)/</url>
      
        <content type="html"><![CDATA[<h2 id="使用-httpd"><a href="#使用-httpd" class="headerlink" title="使用 httpd"></a>使用 httpd</h2><p>這邊使用上篇使用方式設定port。步驟如下</p><h3 id="創建-images"><a href="#創建-images" class="headerlink" title="創建 images"></a>創建 images</h3><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull httpd</span><br></pre></td></tr></table></figure><h3 id="創建-Container-環境"><a href="#創建-Container-環境" class="headerlink" title="創建 Container 環境"></a>創建 Container 環境</h3><p>這裡需要留意 <code>-p</code> 、<code>--publish</code>兩個參數可以使用，都是設定port forwarding。</p><figure class="highlight plaintext"><figcaption><span>host 8080連線後，會直接轉到Container 中的 80 port。</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">```cmd</span><br><span class="line">docker create -p 8080:80 --name web -i httpd</span><br></pre></td></tr></table></figure><p>稍微補充資訊，像是沒有特別指定 port 參數是不會有預設port ，如下圖顯示。<br><img src="/image/20221213_19-53-46.png"></p><h3 id="執行畫面"><a href="#執行畫面" class="headerlink" title="執行畫面"></a>執行畫面</h3><p>start沒有設定port參數，所以需要從 Container 設定 ，啟動後就可以使用 httpd畫面</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">start</span> web</span><br></pre></td></tr></table></figure><p><img src="/image/20221213_19-57-32.png"></p><h2 id="刪除背景程式"><a href="#刪除背景程式" class="headerlink" title="刪除背景程式"></a>刪除背景程式</h2><p>httpd 執行後會以背景程式方式執行，如果想要直接結束作業必須要使用 <code>-f</code>參數，如下指令。</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rm -f web</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> DevOps </category>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Microsoft Azure AD - 創建 SQL 資料庫</title>
      <link href="/2021/11/01/%E9%9B%B2%E7%AB%AF%E5%B9%B3%E5%8F%B0/Azure/Azure/"/>
      <url>/2021/11/01/%E9%9B%B2%E7%AB%AF%E5%B9%B3%E5%8F%B0/Azure/Azure/</url>
      
        <content type="html"><![CDATA[<h1 id="SQL-資料庫"><a href="#SQL-資料庫" class="headerlink" title="SQL 資料庫"></a>SQL 資料庫</h1><ul><li>Azure 入口 : <a href="https://portal.azure.com/#home">https://portal.azure.com/#home</a></li></ul><h2 id="創建SQL-Server"><a href="#創建SQL-Server" class="headerlink" title="創建SQL Server"></a>創建SQL Server</h2><p>Azure 可以設定 Server 、DataBase 細項，主要是介面上會看到兩個Icons ，如果你只需要SQL Server 就可以不用理會 SQL資料庫。</p><p><img src="/img/dotnet/cs/cs_azure_004.png"></p><p>這邊我使用[SQL資料庫]，需要先自定義一個資源群組。接下來會創建SQL Server ，創建需要注意每個地區會有所謂延遲，如我不知道如何選擇可以參考下方網址。</p><ul><li><a href="https://www.azurespeed.com/Information/AzureRegions">Azure Regions</a><br><img src="/img/dotnet/cs/cs_azure_006.png"><br><img src="/img/dotnet/cs/cs_azure_005.png"></li></ul><p>創建兩項完成後，可以點開設定資料庫，上面有10個DTU並包含250GB儲存體，目前他上面沒寫價格可以點選設定資料庫即可看到資料庫設定內容，並包含其他使用費用。</p><p>目前預設版本是DTU 1 個 1.5 USD，目前是沒有地方讓你向下條整DTU，如果是簡易版試用版本就會是2GB。<br><img src="/img/dotnet/cs/cs_azure_007.png"><br><img src="/img/dotnet/cs/cs_azure_008.png"><br><img src="/img/dotnet/cs/cs_azure_009.png"></p><p>另一種是 vCore 可以去做調整， 實際落差、性能沒有實際驗證方式，但是如果要讓價格便宜一點可以考慮使用這個。<br><img src="/img/dotnet/cs/cs_azure_010.png"><br><img src="/img/dotnet/cs/cs_azure_011.png"><br><img src="/img/dotnet/cs/cs_azure_012.png"></p><h2 id="其他設定"><a href="#其他設定" class="headerlink" title="其他設定"></a>其他設定</h2><h3 id="網路"><a href="#網路" class="headerlink" title="網路"></a>網路</h3><p>Azure 最特別是可以設定防火牆，可以鎖定ip不讓外來人連線至該位置、Server。<br><img src="/img/dotnet/cs/cs_azure_013.png"></p><h3 id="資料庫定序"><a href="#資料庫定序" class="headerlink" title="資料庫定序"></a>資料庫定序</h3><p>SQL Server 必須要注意定序設定，如果按照預設值可能會遇到亂碼的問題。<br><img src="/img/dotnet/cs/cs_azure_014.png"></p><h3 id="已刪除的資料庫"><a href="#已刪除的資料庫" class="headerlink" title="已刪除的資料庫"></a>已刪除的資料庫</h3><p>Azure 有還原資料庫功能會還原特定時間點的DB，所以不小心刪除可以不用再害怕了。<br><img src="/img/dotnet/cs/cs_azure_014.png"></p><h2 id="資料庫傳送量單元-DTU-Database-Throughput-Unit"><a href="#資料庫傳送量單元-DTU-Database-Throughput-Unit" class="headerlink" title="資料庫傳送量單元 DTU (Database Throughput Unit)"></a>資料庫傳送量單元 DTU (Database Throughput Unit)</h2><p>DTU是由CPU、記憶體、實際讀取和交易記錄寫入合併成一個單位，也就是一種綜合效能評價的方式，應用這種評價方式，將伺服器規模分為BASIC、STANDARD和PREMIUM三種不同等級。</p><h2 id="參考文件"><a href="#參考文件" class="headerlink" title="參考文件"></a>參考文件</h2><ul><li><p><a href="https://azure.microsoft.com/zh-tw/pricing/details/active-directory/external-identities/">定價(MAU)</a></p></li><li><p><a href="https://docs.microsoft.com/zh-tw/azure/active-directory/fundamentals/active-directory-whatis">什麼是 Azure Active Directory？</a></p></li><li><p><a href="https://docs.microsoft.com/zh-tw/azure/active-directory/authentication/concept-mfa-licensing">Azure AD Multi-Factor Authentication 的功能與授權</a></p></li><li><p><a href="https://docs.microsoft.com/zh-tw/sql/connect/ado-net/sql/azure-active-directory-authentication?view=sql-server-ver15">dotnet連線方式</a> </p></li><li><p><a href="https://www.azurespeed.com/Information/AzureRegions">Azure Regions</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 雲端平台 </category>
          
          <category> Azure </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Azure </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Microsoft Azure - 重點整理、簡介</title>
      <link href="/2021/11/01/%E9%9B%B2%E7%AB%AF%E5%B9%B3%E5%8F%B0/Azure/Microsoft_Azure/"/>
      <url>/2021/11/01/%E9%9B%B2%E7%AB%AF%E5%B9%B3%E5%8F%B0/Azure/Microsoft_Azure/</url>
      
        <content type="html"><![CDATA[<h1 id="Azure"><a href="#Azure" class="headerlink" title="Azure"></a>Azure</h1><p>Microsoft Azure 是微軟所打造的一個公有雲端服務平台，過去稱為 Windows Azure。Azure 一開始是以 IaaS 來提供基礎雲端服務，到現在Azure 已經橫跨 IaaS 到 PaaS 甚至是 SaaS 的豐富雲端服務。</p><p>目前全球有54座資料中心以及44個CDN跳躍點 (POP)，並且於2015年時被 Gartner 列為雲端運算的領先者。Microsoft Azure 已包含 30 餘種服務，數百項功能，並且為微軟帶來了12億美元的獲利 (2015年度) </p><h2 id="特色"><a href="#特色" class="headerlink" title="特色"></a>特色</h2><p>Azure特色之一是他有更快的部署次數，客戶端採用時間可以大幅縮短，開發資源庫也相當豐富，能大幅的降低應用程序生命周期成本。當你的伺服器有季節性的流量時，Azure也可以針對不同的需求做調整。<br>Azure 的服務可以分為以下七大類：</p><ol><li>計算與網路</li><li>網路與行動</li><li>資料與分析</li><li>儲存體與備份</li><li>媒體與 CDN</li><li>混合式整合</li><li>身份識別與存取管理</li></ol><h2 id="提供服務"><a href="#提供服務" class="headerlink" title="提供服務"></a>提供服務</h2><ul><li><p>基礎設施即服務 &#x2F; IaaS ( Infrastructure as a Service ) :<br>當購買、安裝、設定及管理軟體 (包括作業系統、中介軟體與應用程式) 時，可由Azure 來管理基礎結構，相當節省時間也很方便。而IaaS 也可視公司或個人需求快速增加與減少，每個資源都是獨立服務元件。</p></li><li><p>平台即服務 &#x2F; PaaS ( Platform as a Service ) :<br>Azure 負責提供並管理大部分的基礎設施，讓使用者只需要負責管理自己的資料以及應用程式，把使用者從繁複的基礎設施管理解放出來，就可以專注在應用程式優化以及精進商業邏輯。</p></li><li><p>軟體即服務 &#x2F; SaaS ( Software as a Service ) :<br>Microsoft Azure 提供從硬體到上層應用程式一整套的服務，使用者可以直接透過 Azure 所提供的軟體，像是常見的線上郵件 Outlook 都是大眾平時都有在使用的 SaaS。</p></li></ul><h2 id="運算服務"><a href="#運算服務" class="headerlink" title="運算服務"></a>運算服務</h2><p>執行應用程式是在雲端平台中最重要也是最基本的一項作業，在 Azure 中依照服務的彈性程度不同提供了三種主要的選擇：虛擬機器 (Virtual Machines)、雲端服務 (Cloud Services) 以及網站服務 (Websites)。</p><ol><li><p>虛擬機器 (Virtual Machines)<br>虛擬機器 (Virtual Machines) 是一種 IaaS 服務，提供了最高度彈性的服務，您可以透過 Azure Gallery 組件庫使用預先建立好的作業系統映像檔，其中包括了各個版本的 Windows Server 甚至是 Ubuntu、CentOS 等開源的作業系統環境，或是您也可以自行上傳預先準備好的 VHD 檔，將原本的本地環境部署至虛擬機器服務。在虛擬機器服務中，您擁有了 100% 的主控權，可以透過 SSH 或是遠端桌面連線的方式管理您的伺服器。其中很特別的是，微軟也預先準備好了許多預載好像 SQL Server 或 Visual Studio 的映像檔，您可以在數分鐘之內就部署好一台裝有 Visual Studio 14 CTP 的開發測試環境。</p></li><li><p>雲端服務 (Cloud Services)<br>雲端服務 (Cloud Services) 是一種介於前兩者之間的 PaaS 服務，它提供了比網站服務更高的彈性，但其背後的虛擬機器是由微軟資料中心所代管，您可以專注在您的應用程式及服務本身。而依照應用程式不同的需求，雲端服務提供了兩種運轉模式，分別是 Worker Role 及 Web Role，並且也提供了對 .NET 以外程式語言的支援。</p></li><li><p>網站服務 (Websites)。<br>網站服務 (Websites) 是一種最容易部署網站的服務，他是建構在微軟自家的 IIS 服務之上，除了過去熟悉的 ASP.NET 之外，也同時提供了對 PHP、Python 及 node.js 等語言的支援，讓您可以在數分鐘之內就將一個網站應用程式部署至雲端。同時，網站服務也提供了高度延展的設定，您可以依照需求選擇不同大小&#x2F;價位的服務，並且可以依照流量及 CPU 運算資源做 auto-scaling。最重要的是，每個 Azure 帳戶擁有 10 個免費 (Free) 量級的網站服務，您可以不需花費任何金錢就將輕量級的網站服務部署在雲端資料中心</p></li></ol><h2 id="資料管理"><a href="#資料管理" class="headerlink" title="資料管理"></a>資料管理</h2><p>大部份的應用程式都需要存取資料，您除了可以在 IaaS 服務上自行建立資料庫的儲存環境外，在 Azure 中也依照不同的需求提供了幾種主要的選擇：SQL Database、資料表 (Table) 以及 Blob。</p><ol><li><p><a href="https://azure.microsoft.com/zh-tw/products/azure-sql/database/">SQL Database</a><br>SQL Database (過去稱為 SQL Azure) 是一個針對雲端環境優化的 SQL Server 服務，提供了關聯式資料庫的所有重要功能，而且如同過去熟悉的 SQL Server，您可以使用 Entity Framework、ADO.NET 或是其他熟悉的資料存取技術來存取 SQL Databse。如果您過去的服務是建立在 SQL Server 上，SQL Database 會是一個您很好的雲端化選擇，透過 SQL Management Studio 就可以輕鬆的將資料放上雲端</p></li><li><p><a href="https://azure.microsoft.com/zh-tw/product-categories/storage/">資料表</a><br>資料表 (Table) 是一種提供大量儲存 key&#x2F;value 型式的 NoSQL 服務，它不提供關聯式資料庫的功能，但如果您所要存的資料量相當龐大，或是不需要對這些資料執行複雜的 SQL 查詢，那麼它會是一個簡單明瞭而且成本遠低於 SQL Database 的選擇。</p></li><li><p><a href="https://azure.microsoft.com/zh-tw/product-categories/storage/">Blob</a><br>Blob 是設計用來儲存非結構化二進位資料的服務，而且單一個 Blob 就有多達 1 TB 的容量，適合用來儲存視訊或備份資料等等，您可以使用 Blob 作為簡單而且成本低廉的儲存體服務。</p></li></ol><h2 id="網路"><a href="#網路" class="headerlink" title="網路"></a>網路</h2><p>Azure 目前在亞洲、歐洲及美洲數個資料中心內運行，您除了可以在 Azure 上部署您的雲端應用程式之外，也可以用來作為本地資料中心或網路的延伸，透過虛擬網路 (Virtual Network) 以及流量管理員 (Traffic Manager) 的服務來達成。</p><h2 id="行動裝置"><a href="#行動裝置" class="headerlink" title="行動裝置"></a>行動裝置</h2><p>過去撰寫行動應用程式時，您可能會需要使用到資料存取、身份驗證、推播通知等功能，往往需要自行建構 API 來提供行動裝置端呼叫各項服務。而在 Azure 上，針對 Mobile App 的各種基本需求，提供了包括各式基本服務的行動服務 (Mobile Services) 以及可以大量將訊息推送至用戶端的通知中樞 (Notification Hubs)，大幅降低了開發 App 後端所需的時間，而且透過單一的服務就可以提供 Android、iOS 以及 Windows Phone 各個平台所需的服務。</p><h2 id="訊息服務"><a href="#訊息服務" class="headerlink" title="訊息服務"></a>訊息服務</h2><ol><li><p>佇列 (Queues)<br>佇列 (Queues) 是一種 FIFO (First-In-First-Out) 的設計概念，一個應用程式將訊息放入佇列中，而另一個應用程式來讀取該訊息並進行進一步的處理。舉一個簡單的例子，目前最熱門的相簿服務 Flickr 在使用者將照片上傳後，會自動將照片做各種尺寸的縮圖，這種服務變可以透過佇列來達成，在網頁應用程式接收到上傳的照片後，便將該照片資訊放入佇列當中，而在背景工作的另一個角色便不停的從佇列中讀取新上傳的照片，並進行一些需要較長時間的縮圖處理。</p></li><li><p>服務匯流排 (Service Bus)<br>服務匯流排 (Service Bus) 與上面所提到的佇列不同的地方在於，服務匯流排的目的是讓應用程式在任何地方都能交換資料。除了佇列所能提供的一對一通訊之外，服務匯流排還提供了發佈與訂閱 (pub&#x2F;sub) 的機制，應用程式可以將訊息傳送到某個主題，而有訂閱該主題的多位收件者可以同時讀取相同訊息，達成一對多的通訊。此外，服務匯流排也提供了轉送 (Relay) 的機制，提供通過防火牆的安全通訊方式。</p></li></ol><h2 id="快取"><a href="#快取" class="headerlink" title="快取"></a>快取</h2><p>應用程式可能會一再存取相同的資料，若要提升服務的效能，最直覺的做法就是將大量被取用的資料就近保留一份，這就是快取的概念。Azure 提供了兩種不同的快取架構，分別是針對應用程式記憶體的內部快取以及針對 Blob 資料的內容傳遞網路 (CDN)。</p><h2 id="參考資源"><a href="#參考資源" class="headerlink" title="參考資源"></a>參考資源</h2><ol><li><a href="https://www.pcschool.com.tw/blog/it/what-is-azure">Azure是什麼？想進入IT產業的你不能不知道的雲端技術</a></li><li><a href="https://ithelp.ithome.com.tw/articles/10157344">認識 Microsoft Azure</a></li><li><a href="http://azure.microsoft.com/zh-tw/documentation/articles/fundamentals-introduction-to-azure/">Azure 簡介</a></li><li><a href="http://azure.microsoft.com/en-us/documentation/articles/fundamentals-introduction-to-azure/">Introducing Microsoft Azure</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 雲端平台 </category>
          
          <category> Azure </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Azure </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用 Hexo (一) - 創建 Hexo</title>
      <link href="/2021/10/24/HEXO/%E4%BD%BF%E7%94%A8%20Hexo%20(%E4%B8%80)%20-%20%E5%89%B5%E5%BB%BA%20Hexo/"/>
      <url>/2021/10/24/HEXO/%E4%BD%BF%E7%94%A8%20Hexo%20(%E4%B8%80)%20-%20%E5%89%B5%E5%BB%BA%20Hexo/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>前幾周 GitBook 改版，擔心會變成FaceBook 、Instagram 一樣當機不能使用，我再次挑戰GitHub Page 製作 Blog。這次不會是從零到成品，使用工具會在下方提供，再請各位多多支持。</p><h3 id="何謂Hexo"><a href="#何謂Hexo" class="headerlink" title="何謂Hexo"></a>何謂Hexo</h3><p>Hexo 是基於 Node.js 開發架框，有利於快速建立Blog，如以下特點 :</p><ul><li>編譯速度快</li><li>支援 Markdown 語法解析文章，可使用主題渲染靜態檔案</li><li>豐富的外掛套件</li><li>支援一鍵部署到靜態網頁的空間，如: GitHub Pages 、Heroku</li></ul><hr><h1 id="使用工具"><a href="#使用工具" class="headerlink" title="使用工具"></a>使用工具</h1><h2 id="一、Node-js"><a href="#一、Node-js" class="headerlink" title="一、Node.js"></a>一、<a href="https://nodejs.org/zh-tw/download/">Node.js</a></h2><p><strong>Node.js</strong> 是能夠在伺服器端運行 JavaScript的開放原始碼、跨平台執行環境。Node.js 由 OpenJS Foundation（原為 Node.js Foundation，已與 JS Foundation 合併）持有和維護。Node.js 採用Google開發執行程式碼，使用事件驅動、非阻塞和非同步輸入輸出模型等技術來提高效能，可優化應用程式的傳輸量和規模。</p><h2 id="二、Git"><a href="#二、Git" class="headerlink" title="二、Git"></a>二、<a href="https://git-scm.com/">Git</a></h2><p><strong>git</strong>是一個分散式版本控制軟體，，於2005年以GPL釋出。最初目的是為更好地管理Linux核心開發而設計。應注意的是，這與GNU Interactive Tools（一個類似Norton Commander 介面的檔案管理器）不同。</p><hr><h1 id="安裝Hexo"><a href="#安裝Hexo" class="headerlink" title="安裝Hexo"></a>安裝Hexo</h1><ol><li>安裝Hexo</li></ol><p>按照官方網去執行指令即可，如下:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-cli -g</span><br><span class="line">$ hexo init &lt;資料夾名稱&gt;</span><br><span class="line">$ <span class="built_in">cd</span> &lt;資料夾名稱&gt;</span><br><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><div class="note info flat"><p>hexo init 是初化 Hexo (建立Hexo)。</p></div><p>安裝完成後，進入資料夾會看到下方這些檔案和資料夾：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── _config.yml</span><br><span class="line">├── package.json</span><br><span class="line">├── scaffolds</span><br><span class="line">├── <span class="built_in">source</span></span><br><span class="line">|   ├── _drafts</span><br><span class="line">|   └── _posts</span><br><span class="line">└── themes</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Hexo-檔案介紹"><a href="#Hexo-檔案介紹" class="headerlink" title="Hexo 檔案介紹"></a>Hexo 檔案介紹</h2><h3 id="一、-config-yml"><a href="#一、-config-yml" class="headerlink" title="一、 _config.yml"></a>一、 _config.yml</h3><ul><li>有關網站配置的檔案，可修改各種配置設定。例如：網站標題、網站的網址、使用主題名稱等等</li><li>詳細內容可以參考<a href="https://hexo.io/zh-tw/docs/configuration">官方文件</a></li></ul><h3 id="二、package-json"><a href="#二、package-json" class="headerlink" title="二、package.json"></a>二、package.json</h3><ul><li>記錄所有載入的應用程式資料，也就是專案中需要的所有模組。</li></ul><h3 id="三、scaffolds-模板"><a href="#三、scaffolds-模板" class="headerlink" title="三、scaffolds 模板"></a>三、scaffolds 模板</h3><ul><li>當我們建立新文章時，Hexo 會根據 scaffolds 中的模板建立相對應的檔案</li><li>資料夾中有三種預設<a href="https://hexo.io/zh-tw/docs/writing.html">佈局</a>：post、page 和 draft，分別對應：要發布的文章、頁面、草稿</li></ul><h3 id="四、themes-主題"><a href="#四、themes-主題" class="headerlink" title="四、themes 主題"></a>四、themes 主題</h3><ul><li>用來存放主題的資料夾</li><li>Hexo 會根據主題來解析 scouce 資料夾中的檔案並產生靜態頁面。預設主題為 <a href="https://github.com/hexojs/hexo-theme-landscape">landscape</a></li></ul><h3 id="五、source-資源"><a href="#五、source-資源" class="headerlink" title="五、source 資源"></a>五、source 資源</h3><ul><li>用來存放原始檔案的地方，例如 Markdown 檔、圖片、各種頁面（分頁、關於等）</li><li>通常資料夾命名開頭會加上底線 <code>_</code>，例如 <code>_imgs</code></li><li>以 <code>_</code> 開頭的檔案、資料夾或隱藏檔案會被忽略，除了 <code>_posts</code> 資料夾以外</li><li>Markdown 檔和 HTML 檔會被解析，並放到 public 資料夾，而其他檔案則會被拷貝過去</li></ul><h3 id="六、source-amp-public-amp-deploy-git-的差別"><a href="#六、source-amp-public-amp-deploy-git-的差別" class="headerlink" title="六、source &amp; public &amp; .deploy_git 的差別"></a>六、source &amp; public &amp; .deploy_git 的差別</h3><ul><li>執行 <code>$ hexo generate</code> 之後，會將 scorce 文件夾中的 Markdown 檔和 HTML 檔進行解析，再結合主題進行渲染，生成我們看到的靜態網站</li><li>執行 <code>$ hexo deploy</code> 之後，則會將 public 文件夾中的內容部署到 GitHub，並生成 .deploy_git 資料夾，因此內容與 public 幾乎相同</li><li>這三者的關係可想成： source -&gt; public -&gt; .deploy_git</li></ul><hr><h1 id="部署到-GitHub"><a href="#部署到-GitHub" class="headerlink" title="部署到 GitHub"></a>部署到 GitHub</h1><h2 id="建立-GitHub-專案"><a href="#建立-GitHub-專案" class="headerlink" title="建立 GitHub 專案"></a>建立 GitHub 專案</h2><p>建立GitHub 專案，請先註冊 <a href="https://github.com/">GitHub</a> 帳號並登入到左邊會有 New 的 Button 並按下。<br><img src="/img/Hexo/day_01_UseHexo/img-01.png"></p><p>GitHub創建條件必須要是**帳號加上(.github.io)**，範例 : [username].github.io，以上步驟就完成了。<br><img src="/img/Hexo/day_01_UseHexo/img-02.png"></p><hr><h1 id="Deloy-到-GitHub"><a href="#Deloy-到-GitHub" class="headerlink" title="Deloy 到 GitHub"></a>Deloy 到 GitHub</h1><p>回到 Hexo 資料夾，打開 <code>_config.yml</code>後，移至最下方輸入以下內容:<br>repo-url 必須要貼上完整路徑。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy</span>:</span><br><span class="line"> <span class="attr">type</span>: git</span><br><span class="line"> <span class="attr">repo</span>: &lt;repo-url&gt;</span><br><span class="line"> <span class="attr">branch</span>: main</span><br></pre></td></tr></table></figure><p>請先確認 repo 網址，範例 : </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/&lt;username&gt;/&lt;username&gt;.github.io</span><br></pre></td></tr></table></figure><h2 id="package-json"><a href="#package-json" class="headerlink" title="package.json"></a>package.json</h2><p>如果沒看到 package 一定要把它初始化 <code>npm init</code>。<br>打開 package後，一定要自行輸入 <code>&quot;all&quot;: &quot;hexo cl &amp;&amp; hexo g -d &quot;</code>，可以快速清除檔案、建置Hexo。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line"><span class="string">&quot;build&quot;</span>: <span class="string">&quot;hexo generate&quot;</span>,</span><br><span class="line"><span class="string">&quot;clean&quot;</span>: <span class="string">&quot;hexo clean&quot;</span>,</span><br><span class="line"><span class="string">&quot;deploy&quot;</span>: <span class="string">&quot;hexo deploy&quot;</span>,</span><br><span class="line"><span class="string">&quot;server&quot;</span>: <span class="string">&quot;hexo server&quot;</span>,</span><br><span class="line"><span class="string">&quot;all&quot;</span>: <span class="string">&quot;hexo cl &amp;&amp; hexo g -d &quot;</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h3 id="如何執行-scprits"><a href="#如何執行-scprits" class="headerlink" title="如何執行 scprits"></a>如何執行 scprits</h3><p>只要在命令字元輸入 <code>npm run all </code>即可。</p><h3 id="執行時有錯誤訊息-not-found-git"><a href="#執行時有錯誤訊息-not-found-git" class="headerlink" title="執行時有錯誤訊息: not found git"></a>執行時有錯誤訊息: not found git</h3><p>那如果有<code>ERROR Deployer not found: git </code>，表示你沒安裝hexo-deployer-git 套件，請自行輸入以下指令。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-deployer-git --save</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>這篇主要是快速建立環境讓Hexo可以運行畫面，下一章節會開始使用 thame ，快速建立Blog 畫面，請各位小力鞭打我（＾∀＾●）ﾉｼ。</p>]]></content>
      
      
      <categories>
          
          <category> 筆記 </category>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HEXO </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用 Hexo (三) -  使用 HEXO 套件</title>
      <link href="/2021/10/24/HEXO/%E4%BD%BF%E7%94%A8%20Hexo%20(%E4%B8%89)%20-%20%20%E4%BD%BF%E7%94%A8%20HEXO%20%E5%A5%97%E4%BB%B6/"/>
      <url>/2021/10/24/HEXO/%E4%BD%BF%E7%94%A8%20Hexo%20(%E4%B8%89)%20-%20%20%E4%BD%BF%E7%94%A8%20HEXO%20%E5%A5%97%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>上一篇提到簡易的創建方式，可以讓各位順利創建。<br>本章會教你簡單的套件，馬上就可以創建留言、音樂、書籍、影視評論等，剩餘功能委屈各位自行去作者文章測試研究&lt;(＿　＿)&gt;。</p><hr><h1 id="套件"><a href="#套件" class="headerlink" title="套件"></a>套件</h1><p>簡易步驟依據作者操作即可。</p><ul><li><a href="https://butterfly.js.org/posts/ceeb73f/#%E5%9C%A8%E7%B6%AB%E8%81%8A%E5%A4%A9">線上留言板</a></li></ul><h2 id="留言板-Disqus"><a href="#留言板-Disqus" class="headerlink" title="留言板-Disqus"></a>留言板-<a href="https://disqus.com/">Disqus</a></h2><p>Disqus是以使用社群網路形式，向網路社群提供網站留言服務的公司。該公司的平台提供不同的功能，例如與不同社群網路服務連結、社群網路、使用者個人檔案、垃圾宣傳及審核工具、數據分析、電子郵件通知和在行動裝置留言等。</p><h3 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h3><ol><li>按下 GET STARTED<br><img src="/img/Hexo/day_03_UseHexo/img-02.png"></li><li>按下 [I want to install Disqus on my site]<br><img src="/img/Hexo/day_03_UseHexo/img-03.png"></li><li>輸入網站名稱，這邊會直接對應 short name ，若有重複會提示出來。<br><img src="/img/Hexo/day_03_UseHexo/img-04.png"></li><li>主要注意 3.Configure Disqus、4.Setup Moderation步驟。<br><img src="/img/Hexo/day_03_UseHexo/img-05.png"><br>Website URL -&gt; Blog的Url [ <a href="https://username.githun.io/">https://username.githun.io/</a> ]<br><img src="/img/Hexo/day_03_UseHexo/img-06.png"><br>這邊是評論的審核機制，你可以選擇不受限的 <code>Balanced</code>，或是評論是需要經過系統審核或有限的 <code>Strict</code>，差異解說如下：</li></ol><ul><li>圖片、影片或連結<code>允許/不允許</code>在留言裡</li><li>訪客留言是<code>允許/不允許</code>的</li><li>留言被 flagged (被標記有害的意思?) <code>5次/3次</code> 會被送到待審核的機制中</li><li>留言內有限制或敏感字的部份都會被自動刪除</li><li><a href="https://help.disqus.com/en/articles/1717255-toxic-mod-filter">有害的評論</a> <code>需要你的審核才能顯示/自動刪除</code></li><li><code>Strict</code> 的部份，話題(Threads)會在 30 天後自動關閉<br><img src="/img/Hexo/day_03_UseHexo/img-07.png"></li></ul><h3 id="config-yml-設定"><a href="#config-yml-設定" class="headerlink" title="config.yml 設定"></a>config.yml 設定</h3><p>shortname 通常創建是與Website Name一樣，若想確認可以到設定區域按下 Edit Settings 。<br>下方是設定 Disqus方式，shortname確認好後，就將名稱貼在 [short-name]。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">comments:</span></span><br><span class="line"> <span class="attr">use:</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">Disqus</span></span><br><span class="line"></span><br><span class="line"> <span class="attr">text:</span> <span class="literal">true</span> <span class="comment"># Display the comment name next to the button</span></span><br><span class="line"> </span><br><span class="line"> <span class="attr">lazyload:</span> <span class="literal">false</span></span><br><span class="line"> <span class="attr">count:</span> <span class="literal">true</span> <span class="comment"># Display comment count in post&#x27;s top_img</span></span><br><span class="line"> <span class="attr">card_post_count:</span> <span class="literal">true</span> <span class="comment"># Display comment count in Home Page</span></span><br><span class="line"></span><br><span class="line"><span class="attr">disqus:</span></span><br><span class="line"> <span class="attr">shortname:</span> <span class="string">&lt;short-name&gt;</span></span><br><span class="line"> <span class="attr">apikey:</span> <span class="comment"># For newest comments widget</span></span><br></pre></td></tr></table></figure><h3 id="查看shortname"><a href="#查看shortname" class="headerlink" title="查看shortname"></a>查看shortname</h3><p><img src="/img/Hexo/day_03_UseHexo/img-08.png"><br><img src="/img/Hexo/day_03_UseHexo/img-09.png"></p><hr><h2 id="音樂"><a href="#音樂" class="headerlink" title="音樂"></a>音樂</h2><p>音樂部分需要安裝 <code>hexo-tag-aplayer</code>。</p><h3 id="安裝方式"><a href="#安裝方式" class="headerlink" title="安裝方式"></a>安裝方式</h3><p><code>npm install --save hexo-tag-aplayer</code><br>安裝完之後，請至最面層_config裡面設定，因需要全域都插入aplayer和meting資源，為了防止插入重複的資源，需要把asset_inject設為<code>false</code></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">aplayer:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">asset_inject:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><p>在themes裡面 _config.yml設定</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">aplayerInject:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">per_page:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h3 id="插入Aplayer-html"><a href="#插入Aplayer-html" class="headerlink" title="插入Aplayer html"></a>插入Aplayer html</h3><p>如果要有整個Blog有播放效果，如下設定:</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">在themes裡面</span> <span class="string">_config.yml設定</span></span><br><span class="line"><span class="attr">inject:</span></span><br><span class="line">  <span class="attr">head:</span></span><br><span class="line">  <span class="attr">bottom:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&lt;div</span> <span class="string">class=&quot;aplayer</span> <span class="literal">no</span><span class="string">-destroy&quot;</span> <span class="string">data-id=&quot;003fA5G40k6hKc&quot;</span> <span class="string">data-server=&quot;tencent&quot;</span> <span class="string">data-type=&quot;artist&quot;</span> <span class="string">data-fixed=&quot;true&quot;</span> <span class="string">data-mini=&quot;true&quot;</span> <span class="string">data-listFolded=&quot;false&quot;</span> <span class="string">data-order=&quot;random&quot;</span> <span class="string">data-preload=&quot;none&quot;</span> <span class="string">data-autoplay=&quot;true&quot;</span> <span class="string">muted&gt;&lt;/div&gt;</span></span><br></pre></td></tr></table></figure><div class="note info flat"><p>本文 data-id 是用 <a href="https://y.qq.com/">qq音樂</a> 擷取 id，如下範例：URL : [ <a href="https://y.qq.com/n/ryqq/singer/0025NhlN2yWrP4/">https://y.qq.com/n/ryqq/singer/0025NhlN2yWrP4/</a> ]<br>我們的 data-id 就是 [0025NhlN2yWrP4]</p></div><hr><h2 id="電影"><a href="#電影" class="headerlink" title="電影"></a>電影</h2><p>電影界面使用了插件 hexo-butterfly-douban</p><h3 id="安裝方式-1"><a href="#安裝方式-1" class="headerlink" title="安裝方式"></a>安裝方式</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-butterfly-douban --save</span><br></pre></td></tr></table></figure><p>安裝完之後，請至最面層_config裡面設定。builtin設定為<code>true</code>會創建一[ book 、 movie 、 game]的頁面(自動產生)。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">douban:</span></span><br><span class="line">  <span class="attr">user:</span> <span class="string">mythsman</span></span><br><span class="line">  <span class="attr">builtin:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">book:</span></span><br><span class="line">    <span class="attr">title:</span> <span class="string">&#x27;This is my book title&#x27;</span></span><br><span class="line">    <span class="attr">quote:</span> <span class="string">&#x27;This is my book quote&#x27;</span></span><br><span class="line">    <span class="attr">meta:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">comments:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">top_img:</span> <span class="string">https://cccccc.png</span></span><br><span class="line">    <span class="attr">aside:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">books</span></span><br><span class="line">    <span class="attr">limit:</span></span><br><span class="line">  <span class="attr">movie:</span></span><br><span class="line">    <span class="attr">title:</span> <span class="string">&#x27;This is my movie title&#x27;</span></span><br><span class="line">    <span class="attr">quote:</span> <span class="string">&#x27;This is my movie quote&#x27;</span></span><br><span class="line">    <span class="attr">meta:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">comments:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">top_img:</span> <span class="string">https://cccccc.png</span></span><br><span class="line">    <span class="attr">aside:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">movies</span></span><br><span class="line">    <span class="attr">limit:</span></span><br><span class="line">  <span class="attr">game:</span></span><br><span class="line">    <span class="attr">title:</span> <span class="string">&#x27;This is my game title&#x27;</span></span><br><span class="line">    <span class="attr">quote:</span> <span class="string">&#x27;This is my game quote&#x27;</span></span><br><span class="line">    <span class="attr">meta:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">comments:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">top_img:</span> <span class="string">https://cccccc.png</span></span><br><span class="line">    <span class="attr">aside:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">games</span></span><br><span class="line">    <span class="attr">limit:</span></span><br><span class="line">  <span class="attr">timeout:</span> <span class="number">10000</span> </span><br></pre></td></tr></table></figure><h3 id="參數"><a href="#參數" class="headerlink" title="參數"></a>參數</h3><table><thead><tr><th>參數</th><th>解釋</th></tr></thead><tbody><tr><td>user</td><td>你的豆瓣ID.打開豆瓣，登入賬户，然後在右上角點擊 “個人主頁” ，這時候地址欄的URL大概是這樣：”<a href="https://www.douban.com/people/xxxxxx/&quot;">https://www.douban.com/people/xxxxxx/&quot;</a> ，其中的”xxxxxx”就是你的個人ID了</td></tr><tr><td>builtin</td><td>是否將生成頁面的功能嵌入<code>hexo s</code>和<code>hexo g</code>中，默認是<code>false</code>,另一可選項為<code>true</code>(1.x.x版本新增配置項)</td></tr><tr><td>title</td><td>該頁面的標題</td></tr><tr><td>quote</td><td>寫在頁面開頭的一段話,支持 html 語法.</td></tr><tr><td>timeout</td><td>【可選】爬取數據的超時時間，默認是 10000ms ,如果在使用時發現報了超時的錯(ETIMEOUT)可以把這個數據設置的大一點</td></tr><tr><td>meta</td><td>【可選】插入 <code>&lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;</code> 到頁面，可解決部分瀏覽器無法顯示豆瓣圖片的問題（會導致一些插件出錯，例如 不蒜子計數器。）</td></tr><tr><td>comments</td><td>【可選】是否顯示評論</td></tr><tr><td>top_img</td><td>【可選】是否顯示頂部圖</td></tr><tr><td>aside</td><td>【可選】是否顯示側邊欄</td></tr><tr><td>path</td><td>【可選】生成的網址<br />movie 頁面默認為 <code>//yourblog/movies</code><br />book 頁面默認為  <code>//yourblog/books</code> <br />game 頁面默認為 &#96;&#96;&#x2F;&#x2F;yourblog&#x2F;games&#96;</td></tr><tr><td>limit</td><td>【可選】限制爬取的頁數</td></tr></tbody></table><h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>部分還有很多套件沒有使用，之後可能還會修改章節內容，在這告一段落。<br>如果有想知道其他套件使用方式之類歡迎到下方留言。</p>]]></content>
      
      
      <categories>
          
          <category> 筆記 </category>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HEXO </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用 Hexo (二) - Theme Butterfly</title>
      <link href="/2021/10/24/HEXO/%E4%BD%BF%E7%94%A8%20Hexo%20(%E4%BA%8C)%20-%20Theme%20Butterfly/"/>
      <url>/2021/10/24/HEXO/%E4%BD%BF%E7%94%A8%20Hexo%20(%E4%BA%8C)%20-%20Theme%20Butterfly/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><a href="https://hexo.io/themes/">HEXO</a>官方網站中，有主題(<a href="https://hexo.io/themes/">theme</a>)項目可以自行選擇需要哪種主題。HEXO THEME 我選擇Butterfly，原因有幾個僅供參考。</p><ol><li>UI介面 : 乾淨、目錄標題選擇鍵、公告、留言板種類</li><li>文章可讀舒適度</li><li>擴充套件 : 音樂、影視、搜尋等。</li></ol><p>依據個人喜好、需求選擇自己喜歡的主題d&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;(￣▽￣*)b。</p><hr><h1 id="安裝-THEME"><a href="#安裝-THEME" class="headerlink" title="安裝 THEME"></a>安裝 THEME</h1><p>我們上一篇只有談到創建HEXO，接著安裝 Theme 可以選擇指令 <code>npm</code> 或是Git&#x2F;Github下載下來。</p><div class="note info flat"><p>如果你是用Clone下來，又想要push 到Github上，需要小心 .git 隱藏檔案。<br>可能造成會無法push的危機。</p></div><h2 id="Butterfly"><a href="#Butterfly" class="headerlink" title="Butterfly"></a><a href="https://github.com/jerryc127/hexo-theme-butterfly">Butterfly</a></h2><p>將下載好的theme把檔案放在themes資料夾底下。<br><img src="/img/Hexo/day_02_UseHexo/img-01.png"><br>當然可以增加不同的主題放在一起，如下圖。<br><img src="/img/Hexo/day_02_UseHexo/img-02.png"></p><p>下方提供 作者Blog以及Github載點: </p><ul><li>Jerry Blog: (<a href="https://butterfly.js.org/posts/21cfbf15/">https://butterfly.js.org/posts/21cfbf15/</a>)</li><li>Butterfly 詳細使用方式 : (<a href="https://butterfly.js.org/">https://butterfly.js.org/</a>)</li></ul><h2 id="config-yml"><a href="#config-yml" class="headerlink" title="_config.yml"></a>_config.yml</h2><p>config 通稱設定檔，在任何地方都不會太陌生。<br>設定位置會在外面的 _config.yml ，不會是在主題中的 _config.yml。<br><img src="/img/Hexo/day_02_UseHexo/img-02.png"></p><p>修改內容會是在最下方，也就是在 deploy 上一章提到。依據作者要求修改名稱key進theme即可。Example : <code>theme: butterfly</code> </p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Extensions</span></span><br><span class="line"><span class="comment">## Plugins: https://hexo.io/plugins/</span></span><br><span class="line"><span class="comment">## Themes: https://hexo.io/themes/</span></span><br><span class="line"><span class="attr">theme:</span> <span class="string">landscape</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h1 id="設定個人資訊"><a href="#設定個人資訊" class="headerlink" title="設定個人資訊"></a>設定個人資訊</h1><h2 id="網站名稱、個人名字設定"><a href="#網站名稱、個人名字設定" class="headerlink" title="網站名稱、個人名字設定"></a>網站名稱、個人名字設定</h2><p>設定位置通常會是 config.yml 最上方 ，設定那幾些主要設定名字外，會發現有keywords如果不太陌生的人可以解釋為關鍵詞，有關SEO問題此文就不再詳細說明。</p><p>此作者有添加zh-TW語言包，可以直接在這裏面輸入。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Hexo Configuration</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/configuration.html</span></span><br><span class="line"><span class="comment">## Source: https://github.com/hexojs/hexo/</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Site</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">Hexo</span> <span class="comment">#網頁名稱</span></span><br><span class="line"><span class="attr">subtitle:</span> <span class="string">&#x27;&#x27;</span> <span class="comment"># 網頁副標題</span></span><br><span class="line"><span class="attr">description:</span> <span class="string">&#x27;&#x27;</span> <span class="comment"># 描述</span></span><br><span class="line"><span class="attr">keywords:</span> <span class="comment">#關鍵詞</span></span><br><span class="line"><span class="attr">author:</span> <span class="string">John</span> <span class="string">Doe</span> <span class="comment">#作者</span></span><br><span class="line"><span class="attr">language:</span> <span class="string">en</span> <span class="comment">#語言</span></span><br><span class="line"><span class="attr">timezone:</span> <span class="string">&#x27;&#x27;</span> </span><br></pre></td></tr></table></figure><h2 id="主題設定"><a href="#主題設定" class="headerlink" title="主題設定"></a>主題設定</h2><p>主題設定請讀者先到themes&#x2F;_config.yml。</p><h3 id="aside-側邊欄"><a href="#aside-側邊欄" class="headerlink" title="aside (側邊欄)"></a>aside (側邊欄)</h3><p>側邊欄設定基本設定完後，就完成你初期Blog。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">aside:</span></span><br><span class="line"><span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line"> <span class="attr">hide:</span> <span class="literal">false</span></span><br><span class="line"> <span class="attr">button:</span> <span class="literal">true</span></span><br><span class="line"> <span class="attr">mobile:</span> <span class="literal">true</span> <span class="comment"># display on mobile</span></span><br><span class="line"> <span class="attr">position:</span> <span class="string">right</span> <span class="comment"># left or right</span></span><br><span class="line"> <span class="attr">card_author:</span></span><br><span class="line"> <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line"> <span class="attr">description:</span></span><br><span class="line"> <span class="attr">button:</span></span><br><span class="line"> <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line"> <span class="attr">icon:</span> <span class="string">fab</span> <span class="string">fa-github</span></span><br><span class="line"> <span class="attr">text:</span> <span class="string">Click</span> <span class="string">Follow</span></span><br><span class="line"> <span class="attr">link:</span> <span class="string">https://github.com/JontCont</span></span><br><span class="line"> <span class="attr">card_announcement:</span></span><br><span class="line"> <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">content:</span> <span class="string">歡迎來到我的Blog</span> <span class="string">，盡量在下方留言</span></span><br><span class="line"><span class="attr">card_recent_post:</span></span><br><span class="line"> <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line"> <span class="attr">limit:</span> <span class="number">5</span> <span class="comment"># if set 0 will show all</span></span><br><span class="line"> <span class="attr">sort:</span> <span class="string">date</span> <span class="comment"># date or updated</span></span><br><span class="line"> <span class="attr">sort_order:</span> <span class="comment"># Don&#x27;t modify the setting unless you know how it works</span></span><br><span class="line"> <span class="attr">card_categories:</span></span><br><span class="line"> <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line"> <span class="attr">limit:</span> <span class="number">8</span> <span class="comment"># if set 0 will show all</span></span><br><span class="line"> <span class="attr">expand:</span> <span class="string">none</span> <span class="comment"># none/true/false</span></span><br><span class="line"> <span class="attr">sort_order:</span> <span class="comment"># Don&#x27;t modify the setting unless you know how it works</span></span><br><span class="line"> <span class="attr">card_tags:</span></span><br><span class="line"> <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line"> <span class="attr">limit:</span> <span class="number">40</span> <span class="comment"># if set 0 will show all</span></span><br><span class="line"> <span class="attr">color:</span> <span class="literal">false</span></span><br><span class="line"> <span class="attr">sort_order:</span> <span class="comment"># Don&#x27;t modify the setting unless you know how it works</span></span><br><span class="line"> <span class="attr">card_archives:</span></span><br><span class="line"> <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line"> <span class="attr">type:</span> <span class="string">monthly</span> <span class="comment"># yearly or monthly</span></span><br><span class="line"> <span class="attr">format:</span> <span class="string">MMMM</span> <span class="string">YYYY</span> <span class="comment"># eg: YYYY年MM月</span></span><br><span class="line"> <span class="attr">order:</span> <span class="number">-1</span> <span class="comment"># Sort of order. 1, asc for ascending; -1, desc for descending</span></span><br><span class="line"> <span class="attr">limit:</span> <span class="number">6</span> <span class="comment"># if set 0 will show all</span></span><br><span class="line"> <span class="attr">sort_order:</span> <span class="comment"># Don&#x27;t modify the setting unless you know how it works</span></span><br><span class="line"> <span class="attr">card_webinfo:</span></span><br><span class="line"> <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line"> <span class="attr">post_count:</span> <span class="literal">true</span></span><br><span class="line"> <span class="attr">last_push_date:</span> <span class="literal">true</span></span><br><span class="line"> <span class="attr">sort_order:</span> <span class="comment"># Don&#x27;t modify the setting unless you know how it works</span></span><br></pre></td></tr></table></figure><p>更詳細安裝說明，請至作者 Blog 設定 (<a href="https://butterfly.js.org/posts/21cfbf15/#%E5%AE%89%E8%A3%9D">https://butterfly.js.org/posts/21cfbf15/#%E5%AE%89%E8%A3%9D</a>)</p><h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>前面設定主題通常不會遇到任何問題，後面建起頁面、套件設定後發現還有很長的路，設定中不斷被吹殘。下一篇會結束 Hexo 章節，將GitBook文章建立在這裏面o(≧∀≦)o。</p>]]></content>
      
      
      <categories>
          
          <category> 筆記 </category>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HEXO </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用 Hexo (四) - (筆記)設定package json</title>
      <link href="/2021/10/24/HEXO/%E4%BD%BF%E7%94%A8%20Hexo%20(%E5%9B%9B)%20-%20(%E7%AD%86%E8%A8%98)%E8%A8%AD%E5%AE%9Apackage%20json/"/>
      <url>/2021/10/24/HEXO/%E4%BD%BF%E7%94%A8%20Hexo%20(%E5%9B%9B)%20-%20(%E7%AD%86%E8%A8%98)%E8%A8%AD%E5%AE%9Apackage%20json/</url>
      
        <content type="html"><![CDATA[<p>這篇主要使要紀錄設定 package json 。 </p><h2 id="相關文件"><a href="#相關文件" class="headerlink" title="相關文件"></a>相關文件</h2><ul><li><a href="https://www.npmjs.com/package/hexo-server">hexo-server</a></li></ul><h2 id="package-json"><a href="#package-json" class="headerlink" title="package.json"></a>package.json</h2><p>近期將<code>hexo server</code>設定方式微調，如果hexo-server 還有其他設定方式，可以透過下方使用方式加入。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;build&quot;</span><span class="punctuation">:</span> <span class="string">&quot;hexo generate&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;clean&quot;</span><span class="punctuation">:</span> <span class="string">&quot;hexo clean&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;deploy&quot;</span><span class="punctuation">:</span> <span class="string">&quot;hexo deploy&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;start&quot;</span><span class="punctuation">:</span> <span class="string">&quot;hexo server -o -p 666&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;publish&quot;</span><span class="punctuation">:</span> <span class="string">&quot;hexo cl &amp;&amp; hexo g -d &quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="hexo-server"><a href="#hexo-server" class="headerlink" title="hexo server"></a>hexo server</h2><h3 id="安裝方式"><a href="#安裝方式" class="headerlink" title="安裝方式"></a>安裝方式</h3><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-server --save</span><br></pre></td></tr></table></figure><h3 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h3><table><thead><tr><th>Option</th><th>Description</th><th>Default</th></tr></thead><tbody><tr><td>-i, –ip</td><td>Override the default server IP.</td><td>:: when IPv6 is available, else 0.0.0.0 (note: in most systems, :: also binds to 0.0.0.0)</td></tr><tr><td>-p, –port</td><td>Override the default port.</td><td>4000</td></tr><tr><td>-s, –static</td><td>Only serve static files.</td><td>false</td></tr><tr><td>-l, –log [format]</td><td>Enable logger. Override log format.</td><td>false</td></tr><tr><td>-o, –open</td><td>Immediately open the server url in your default web browser.</td><td>false</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 筆記 </category>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HEXO </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Sql Server - 還原資料庫發生錯誤 &quot;無法獲得獨佔存取權,因為資料庫正在使用中&quot;</title>
      <link href="/2021/02/19/%E8%B3%87%E6%96%99%E5%BA%AB%E6%8A%80%E8%A1%93/SQL/sql_07_%E5%9B%A0%E7%82%BA%E8%B3%87%E6%96%99%E5%BA%AB%E6%AD%A3%E5%9C%A8%E4%BD%BF%E7%94%A8%E4%B8%AD/"/>
      <url>/2021/02/19/%E8%B3%87%E6%96%99%E5%BA%AB%E6%8A%80%E8%A1%93/SQL/sql_07_%E5%9B%A0%E7%82%BA%E8%B3%87%E6%96%99%E5%BA%AB%E6%AD%A3%E5%9C%A8%E4%BD%BF%E7%94%A8%E4%B8%AD/</url>
      
        <content type="html"><![CDATA[<p>Sql Server 資料庫使用上，逃不了需要還原資料庫這個動作，時常遇到很多人回答怎樣解決 “無法獲得獨佔存取權,因為資料庫正在使用中”的問題。這邊會說明我常用的幾的動作 (P.S. 本章節有重新改寫，若有其他疑問歡迎到下方發問)。</p><h1 id="“無法獲得獨佔存取權-因為資料庫正在使用中”"><a href="#“無法獲得獨佔存取權-因為資料庫正在使用中”" class="headerlink" title="“無法獲得獨佔存取權,因為資料庫正在使用中”"></a>“無法獲得獨佔存取權,因為資料庫正在使用中”</h1><p>期初通常遇到可能是這個DB有人在使用或是自己有下語法造成，依據解決方式有三種依據評估自行操作。</p><p><img src="/img/SQL/sql_sp_who/Snipaste_2022-09-09_09-11-13.png"></p><h2 id="一、離線工作"><a href="#一、離線工作" class="headerlink" title="一、離線工作"></a>一、離線工作</h2><p>離線工作部分，是最簡單、也是暴力的處理方式之一。位置於 “[DataBase]” &gt; 工作 &gt; 離線工作(T)。<br><img src="/img/SQL/sql_sp_who/Snipaste_2022-09-09_09-27-07.png"></p><h2 id="二、活動監視器"><a href="#二、活動監視器" class="headerlink" title="二、活動監視器"></a>二、活動監視器</h2><p>SQL Server 有提供 <code>活動監視器</code>功能，操作上只需要點選處理器並找到對應位置關閉即可。<br><img src="/img/SQL/sql_sp_who/Snipaste_2022-09-09_09-12-16.png"><br><img src="/img/SQL/sql_sp_who/Snipaste_2022-09-09_09-14-37.png"></p><h2 id="三、指令"><a href="#三、指令" class="headerlink" title="三、指令"></a>三、指令</h2><p>指令部分有分兩種語法，依據個人喜好做使用。</p><h3 id="使用-EXEC"><a href="#使用-EXEC" class="headerlink" title="使用 EXEC"></a>使用 EXEC</h3><p>使用 Exec 是最快的方式，主要問題則會需要慢慢找站存來源。SELECT 找到幾個關鍵字 。 當中hostname必須是空(沒有人暫存)，status需要看是否是runnable 決定是否要把它殺掉。<br>殺掉參考spid 編號，使用下方使用方式。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">USE master </span><br><span class="line">GO</span><br><span class="line"></span><br><span class="line"><span class="keyword">EXEC</span> sp_who</span><br><span class="line"></span><br><span class="line"><span class="comment">--Example : Kill [SPID] </span></span><br><span class="line"><span class="comment">--Kill 61</span></span><br><span class="line"><span class="comment">--Kill 62</span></span><br><span class="line"><span class="comment">--Kill 65 </span></span><br></pre></td></tr></table></figure><h3 id="使用-SELECT"><a href="#使用-SELECT" class="headerlink" title="使用 SELECT"></a>使用 SELECT</h3><p>這邊引用 ‘<a href="https://stackoverflow.com/questions/2234691/sql-server-filter-output-of-sp-who2">stack OverFlow</a>‘，這邊可以快速找到指定要殺掉的對象。相當快速方便。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">USE master </span><br><span class="line">GO</span><br><span class="line"></span><br><span class="line"><span class="keyword">DECLARE</span> <span class="variable">@Table</span> <span class="keyword">TABLE</span>(</span><br><span class="line">        SPID <span class="type">INT</span>,</span><br><span class="line">        Status <span class="type">VARCHAR</span>(MAX),</span><br><span class="line">        LOGIN <span class="type">VARCHAR</span>(MAX),</span><br><span class="line">        HostName <span class="type">VARCHAR</span>(MAX),</span><br><span class="line">        BlkBy <span class="type">VARCHAR</span>(MAX),</span><br><span class="line">        DBName <span class="type">VARCHAR</span>(MAX),</span><br><span class="line">        Command <span class="type">VARCHAR</span>(MAX),</span><br><span class="line">        CPUTime <span class="type">INT</span>,</span><br><span class="line">        DiskIO <span class="type">INT</span>,</span><br><span class="line">        LastBatch <span class="type">VARCHAR</span>(MAX),</span><br><span class="line">        ProgramName <span class="type">VARCHAR</span>(MAX),</span><br><span class="line">        SPID_1 <span class="type">INT</span>,</span><br><span class="line">        REQUESTID <span class="type">INT</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="variable">@Table</span> <span class="keyword">EXEC</span> sp_who2</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span>  <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span>    <span class="variable">@Table</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--Example : Kill [SPID] </span></span><br><span class="line"><span class="comment">--Kill 61</span></span><br><span class="line"><span class="comment">--Kill 62</span></span><br><span class="line"><span class="comment">--Kill 65 </span></span><br></pre></td></tr></table></figure><h2 id="四、補充"><a href="#四、補充" class="headerlink" title="四、補充"></a>四、補充</h2><p>引用 ‘<a href="http://sharedderrick.blogspot.com/2017/07/sql-server-spwho-spwho2.html">德瑞克：SQL Server 學習筆記</a>‘</p><h3 id="sp-who"><a href="#sp-who" class="headerlink" title="sp_who"></a>sp_who</h3><p>提供 SQL Server Database Engine 執行個體中有關目前使用者、工作階段和處理序的資訊。<br>可以篩選資訊，只傳回屬於特定使用者或屬於特定工作階段的非閒置處理序。</p><h3 id="sp-who2"><a href="#sp-who2" class="headerlink" title="sp_who2"></a>sp_who2</h3><p> undocumented 與 unsupported，但提供更多的資訊，例如：CPUTime、DiskIO、LastBatch、ProgramName 等。</p>]]></content>
      
      
      <categories>
          
          <category> 資料庫技術 </category>
          
          <category> MS SQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Sql Server - try...catch 使用方式</title>
      <link href="/2021/02/19/%E8%B3%87%E6%96%99%E5%BA%AB%E6%8A%80%E8%A1%93/SQL/Sql_09_try_catch/"/>
      <url>/2021/02/19/%E8%B3%87%E6%96%99%E5%BA%AB%E6%8A%80%E8%A1%93/SQL/Sql_09_try_catch/</url>
      
        <content type="html"><![CDATA[<p>近期沒什麼時間撰寫 line notify 章節，先混混幾章來撐過這幾周。</p><h2 id="Try-Catch"><a href="#Try-Catch" class="headerlink" title="Try Catch"></a>Try Catch</h2><p>平常很寫程式不時會需要查看 Error 錯誤訊息，若在 SQL 上面也比較少人使用try catch。</p><h3 id="一、使用方式"><a href="#一、使用方式" class="headerlink" title="一、使用方式"></a>一、使用方式</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">begin</span> try</span><br><span class="line"><span class="comment">/*-------</span></span><br><span class="line"><span class="comment">  執行的SQL </span></span><br><span class="line"><span class="comment">--------*/</span></span><br><span class="line"><span class="keyword">end</span> try</span><br><span class="line"><span class="keyword">begin</span> catch </span><br><span class="line"><span class="comment">/*-------</span></span><br><span class="line"><span class="comment">  例外處理的SQL  </span></span><br><span class="line"><span class="comment">--------*/</span></span><br><span class="line"><span class="keyword">end</span> catch</span><br></pre></td></tr></table></figure><h3 id="二、範例"><a href="#二、範例" class="headerlink" title="二、範例"></a>二、範例</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">begin</span> try</span><br><span class="line">    <span class="keyword">select</span> <span class="number">1</span><span class="operator">/</span><span class="number">0</span></span><br><span class="line"><span class="keyword">end</span> try</span><br><span class="line"></span><br><span class="line"><span class="keyword">begin</span> catch</span><br><span class="line">    <span class="keyword">select</span> </span><br><span class="line">        ERROR_NUMBER() <span class="keyword">AS</span> Error_Number,</span><br><span class="line">        ERROR_SEVERITY() <span class="keyword">AS</span> Error_Severity,</span><br><span class="line">        ERROR_STATE() <span class="keyword">AS</span> Error_State,</span><br><span class="line">        ERROR_PROCEDURE() <span class="keyword">AS</span> Error_Procedure,</span><br><span class="line">        ERROR_LINE() <span class="keyword">as</span> Error_Line,</span><br><span class="line">        ERROR_MESSAGE() <span class="keyword">AS</span> Error_Message</span><br><span class="line"><span class="keyword">end</span> catch</span><br></pre></td></tr></table></figure><h2 id="參考文件"><a href="#參考文件" class="headerlink" title="參考文件"></a>參考文件</h2><ul><li><a href="https://learn.microsoft.com/zh-tw/sql/t-sql/functions/error-message-transact-sql?view=sql-server-ver16">Microsoft Transact-SQL</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 資料庫技術 </category>
          
          <category> SQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Sql Server - begin tran 使用方式</title>
      <link href="/2021/02/19/%E8%B3%87%E6%96%99%E5%BA%AB%E6%8A%80%E8%A1%93/SQL/Sql_10_begin_tran/"/>
      <url>/2021/02/19/%E8%B3%87%E6%96%99%E5%BA%AB%E6%8A%80%E8%A1%93/SQL/Sql_10_begin_tran/</url>
      
        <content type="html"><![CDATA[<p>T-SQL 平常使用都會直接 Update、Insert、Delet 之類動作，但是在很多時候會有不小心輸入錯誤的問題。平常如果再已經上線、正式使用資料庫時候非常建議BEGIN TRIN ，可以先確認完畢資料後再同步交期或是回復交期。</p><h2 id="BEGIN-TRANSACTION"><a href="#BEGIN-TRANSACTION" class="headerlink" title="BEGIN TRANSACTION"></a>BEGIN TRANSACTION</h2><p>使用方式:</p><ul><li>BEGIN TRANSACTION    : 開啟交期。輸入<code>BEING TRAN </code>即可。</li><li>COMMIT TRANSACTION   : 確認交期。輸入<code>COMMIT </code>即可。</li><li>ROLLBACK TRANSACTION : 回復交期。輸入<code>ROLLBACK </code>即可。</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">BEGIN</span> TRAN</span><br><span class="line"><span class="comment">/*--------執行動作------------*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--- ROLLBACK OR COMMIT 二選一</span></span><br><span class="line"><span class="keyword">COMMIT</span> </span><br><span class="line"><span class="comment">-- ROLLBACK</span></span><br></pre></td></tr></table></figure><p>實際執行動作。</p><ul><li>先用 SELECT 查看、Where 要更新的欄位</li><li>BEING TRAN 包覆 Insert 、Update 、 DELETE等</li><li>執行後，從SELECT 結果確認才執行 <code>COMMIT</code> 或是 <code>ROLLBACK</code></li></ul><h2 id="範例"><a href="#範例" class="headerlink" title="範例"></a>範例</h2><h3 id="創建Table"><a href="#創建Table" class="headerlink" title="創建Table"></a>創建Table</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SET</span> ANSI_NULLS <span class="keyword">ON</span></span><br><span class="line">GO</span><br><span class="line"></span><br><span class="line"><span class="keyword">SET</span> QUOTED_IDENTIFIER <span class="keyword">ON</span></span><br><span class="line">GO</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> [dbo].[AspNetRoleClaims](</span><br><span class="line">[Id] [<span class="type">int</span>] <span class="keyword">IDENTITY</span>(<span class="number">1</span>,<span class="number">1</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">[RoleId] [nvarchar](<span class="number">450</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">[ClaimType] [nvarchar](max) <span class="keyword">NULL</span>,</span><br><span class="line">[ClaimValue] [nvarchar](max) <span class="keyword">NULL</span>,</span><br><span class="line"> <span class="keyword">CONSTRAINT</span> [PK_AspNetRoleClaims] <span class="keyword">PRIMARY</span> KEY CLUSTERED </span><br><span class="line">(</span><br><span class="line">[Id] <span class="keyword">ASC</span></span><br><span class="line">)<span class="keyword">WITH</span> (PAD_INDEX <span class="operator">=</span> OFF, STATISTICS_NORECOMPUTE <span class="operator">=</span> OFF, IGNORE_DUP_KEY <span class="operator">=</span> OFF, ALLOW_ROW_LOCKS <span class="operator">=</span> <span class="keyword">ON</span>, ALLOW_PAGE_LOCKS <span class="operator">=</span> <span class="keyword">ON</span>, OPTIMIZE_FOR_SEQUENTIAL_KEY <span class="operator">=</span> OFF) <span class="keyword">ON</span> [<span class="keyword">PRIMARY</span>]</span><br><span class="line">) <span class="keyword">ON</span> [<span class="keyword">PRIMARY</span>] TEXTIMAGE_ON [<span class="keyword">PRIMARY</span>]</span><br><span class="line">GO</span><br></pre></td></tr></table></figure><h3 id="Insert"><a href="#Insert" class="headerlink" title="Insert"></a>Insert</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">BEGIN</span> TRAN</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> [dbo].[AspNetRoleClaims]</span><br><span class="line">           ([RoleId]</span><br><span class="line">           ,[ClaimType]</span><br><span class="line">           ,[ClaimValue])</span><br><span class="line">     <span class="keyword">VALUES</span></span><br><span class="line">           (<span class="string">&#x27;111&#x27;</span>,<span class="string">&#x27;222&#x27;</span>,<span class="string">&#x27;333&#x27;</span>)</span><br><span class="line">GO</span><br><span class="line"><span class="comment">--- ROLLBACK OR COMMIT 二選一</span></span><br><span class="line"><span class="keyword">ROLLBACK</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 資料庫技術 </category>
          
          <category> MS SQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Sql Server - 排除單一使用者</title>
      <link href="/2021/02/19/%E8%B3%87%E6%96%99%E5%BA%AB%E6%8A%80%E8%A1%93/SQL/sql_05_%E5%96%AE%E4%B8%80%E4%BD%BF%E7%94%A8%E8%80%85/"/>
      <url>/2021/02/19/%E8%B3%87%E6%96%99%E5%BA%AB%E6%8A%80%E8%A1%93/SQL/sql_05_%E5%96%AE%E4%B8%80%E4%BD%BF%E7%94%A8%E8%80%85/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>資料庫當中，覆蓋檔案時常遇到變成單一使用者，因此可以使用下方語法。</p><h2 id="一、更改成所有使用者"><a href="#一、更改成所有使用者" class="headerlink" title="一、更改成所有使用者"></a>一、更改成所有使用者</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> DATABASE  [資料庫名稱]</span><br><span class="line"><span class="keyword">SET</span> MULTI_USER;</span><br><span class="line">GO</span><br></pre></td></tr></table></figure><h2 id="二、更改成唯獨"><a href="#二、更改成唯獨" class="headerlink" title="二、更改成唯獨"></a>二、更改成唯獨</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> DATABASE  [資料庫名稱]</span><br><span class="line"><span class="keyword">SET</span> READ_ONLY;</span><br><span class="line">GO</span><br></pre></td></tr></table></figure><h2 id="三、更改成單一使用者模式"><a href="#三、更改成單一使用者模式" class="headerlink" title="三、更改成單一使用者模式"></a>三、更改成單一使用者模式</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> DATABASE [資料庫名稱]</span><br><span class="line"><span class="keyword">SET</span> SINGLE_USER</span><br><span class="line"><span class="keyword">WITH</span> <span class="keyword">ROLLBACK</span> IMMEDIATE;</span><br><span class="line">GO</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 資料庫技術 </category>
          
          <category> MS SQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Sql Server -  亂碼問題 - 字串叢集</title>
      <link href="/2021/02/19/%E8%B3%87%E6%96%99%E5%BA%AB%E6%8A%80%E8%A1%93/SQL/Sql_03_%E4%BA%82%E7%A2%BC%E5%95%8F%E9%A1%8C_%E5%AD%97%E4%B8%B2%E5%8F%A2%E9%9B%86/"/>
      <url>/2021/02/19/%E8%B3%87%E6%96%99%E5%BA%AB%E6%8A%80%E8%A1%93/SQL/Sql_03_%E4%BA%82%E7%A2%BC%E5%95%8F%E9%A1%8C_%E5%AD%97%E4%B8%B2%E5%8F%A2%E9%9B%86/</url>
      
        <content type="html"><![CDATA[<h1 id="SQL-Server-亂碼現象"><a href="#SQL-Server-亂碼現象" class="headerlink" title="SQL Server 亂碼現象"></a>SQL Server 亂碼現象</h1><h2 id="問題"><a href="#問題" class="headerlink" title="問題"></a>問題</h2><p>近期在安裝過程遇到 Linux 環境有亂碼現象，查詢的時候會出現 “????” 無法輸出文字，查看下預設定序為<code>SQL_Latin1_General_CP1_CI_AS</code>，解決方案可以使用下方語法。</p><h2 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> DATABASE [DatabaseName] <span class="keyword">SET</span> SINGLE_USER <span class="keyword">WITH</span> <span class="keyword">ROLLBACK</span> IMMEDIATE</span><br><span class="line"><span class="keyword">ALTER</span> DATABASE [DatabaseName] <span class="keyword">COLLATE</span> Chinese_Taiwan_Stroke_CI_AS</span><br><span class="line"><span class="keyword">ALTER</span> DATABASE [DatabaseName] <span class="keyword">SET</span> MULTI_USER <span class="keyword">WITH</span> <span class="keyword">ROLLBACK</span> IMMEDIATE</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 資料庫技術 </category>
          
          <category> SQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Sql Server -  恢復[正在還原]資料庫</title>
      <link href="/2021/02/19/%E8%B3%87%E6%96%99%E5%BA%AB%E6%8A%80%E8%A1%93/SQL/Sql_04_%E6%81%A2%E5%BE%A9%5B%E6%AD%A3%E5%9C%A8%E9%82%84%E5%8E%9F%5D%E8%B3%87%E6%96%99%E5%BA%AB/"/>
      <url>/2021/02/19/%E8%B3%87%E6%96%99%E5%BA%AB%E6%8A%80%E8%A1%93/SQL/Sql_04_%E6%81%A2%E5%BE%A9%5B%E6%AD%A3%E5%9C%A8%E9%82%84%E5%8E%9F%5D%E8%B3%87%E6%96%99%E5%BA%AB/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>近期遇到DB出現所謂正在還原中文字，有出現這狀況可能DB處理、還原中失敗造成這個問題提供幾個方式給大家參考。</p><h2 id="解決指令"><a href="#解決指令" class="headerlink" title="解決指令"></a>解決指令</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 切換資料庫的狀態為：ONLINE。</span></span><br><span class="line">RESTORE DATABASE [資料庫名稱]</span><br><span class="line"><span class="keyword">WITH</span> RECOVERY</span><br><span class="line">GO</span><br></pre></td></tr></table></figure><h2 id="查詢指令"><a href="#查詢指令" class="headerlink" title="查詢指令"></a>查詢指令</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">df.file_id,</span><br><span class="line">df.name <span class="keyword">as</span> logincal_file_name,</span><br><span class="line">df.state,</span><br><span class="line">df.state_desc</span><br><span class="line"><span class="keyword">FROM</span> [資料庫名稱].sys.database_files df</span><br></pre></td></tr></table></figure><h2 id="補充-restore-與-recovery-的區別"><a href="#補充-restore-與-recovery-的區別" class="headerlink" title="補充 : restore 與 recovery 的區別"></a>補充 : restore 與 recovery 的區別</h2><p>(取自於網上濃縮)<br>restore  : (還原)與備份檔案相對，從備份讀出恢復備份的樹續<br>recovery : (恢復)把restore回來的資料經過處理變成正常數據<br>如果restore 沒有加入recover的話，資料庫是打不開的，主要原因是各文件都不同步。</p>]]></content>
      
      
      <categories>
          
          <category> 資料庫技術 </category>
          
          <category> MS SQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Sql Server - 壓縮交易檔案</title>
      <link href="/2021/02/19/%E8%B3%87%E6%96%99%E5%BA%AB%E6%8A%80%E8%A1%93/SQL/Sql_06_%E5%A3%93%E7%B8%AE%E4%BA%A4%E6%98%93%E6%AA%94%E6%A1%88/"/>
      <url>/2021/02/19/%E8%B3%87%E6%96%99%E5%BA%AB%E6%8A%80%E8%A1%93/SQL/Sql_06_%E5%A3%93%E7%B8%AE%E4%BA%A4%E6%98%93%E6%AA%94%E6%A1%88/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>資料庫交期檔案時常會遇到檔案很大問題，下方指令會偏向於特定情境處理，若是客戶需要小心處離 ，通常動作會是暫停、離線方式，再進行壓縮。</p><h2 id="查詢指令"><a href="#查詢指令" class="headerlink" title="查詢指令"></a>查詢指令</h2><p>下方指令是要確定是 SIMPLE 才建議執行下方語法。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">name <span class="keyword">as</span> [database_name], </span><br><span class="line">recovery_model_desc <span class="keyword">as</span> [model], </span><br><span class="line">log_reuse_wait_desc <span class="keyword">as</span> [log_reuse] </span><br><span class="line"><span class="keyword">FROM</span> sys.databases</span><br></pre></td></tr></table></figure><h2 id="壓縮指令"><a href="#壓縮指令" class="headerlink" title="壓縮指令"></a>壓縮指令</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> DATABASE [資料庫名稱]</span><br><span class="line"><span class="keyword">SET</span> RECOVERY SIMPLE;</span><br><span class="line">GO</span><br><span class="line"></span><br><span class="line"><span class="comment">--壓縮記錄檔為 20 MB</span></span><br><span class="line">DBCC SHRINKFILE ([資料庫LOG名稱], <span class="number">20</span>);</span><br><span class="line">GO</span><br><span class="line"></span><br><span class="line"><span class="keyword">ALTER</span> DATABASE  [資料庫名稱]</span><br><span class="line"><span class="keyword">SET</span> RECOVERY <span class="keyword">FULL</span>;</span><br><span class="line">GO</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 資料庫技術 </category>
          
          <category> MS SQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Sql Server - 無法連線到 WMI 提供者</title>
      <link href="/2021/02/19/%E8%B3%87%E6%96%99%E5%BA%AB%E6%8A%80%E8%A1%93/SQL/Sql_08_%E7%84%A1%E6%B3%95%E9%80%A3%E7%B7%9A%E5%88%B0WMI%E6%8F%90%E4%BE%9B%E8%80%85/"/>
      <url>/2021/02/19/%E8%B3%87%E6%96%99%E5%BA%AB%E6%8A%80%E8%A1%93/SQL/Sql_08_%E7%84%A1%E6%B3%95%E9%80%A3%E7%B7%9A%E5%88%B0WMI%E6%8F%90%E4%BE%9B%E8%80%85/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>近期處理SQL需要開放TCP，結過遇到打開 <code>sql configuration manager</code> 是完全打不開的狀態，讓我非常的錯愕。</p><blockquote><p>錯誤訊息:無法連線到 WMI 提供者。您沒有權限，或無法連上伺服器。請注意，您只能使用SQL Server組態管理員來管理SQL Server 2005 (含)以後版本的伺服器。命名空間無效[0x8004100e]</p></blockquote><p>遇到問題可能是有兩個版本造成打開組態管理員造成的錯誤，目前微軟解釋處理方式到目前還是豈不了作用，因此使用幾個步驟來排除這問題。</p><h2 id="一、-找到-SQL-Server-資料夾"><a href="#一、-找到-SQL-Server-資料夾" class="headerlink" title="一、 找到 SQL Server 資料夾"></a>一、 找到 SQL Server 資料夾</h2><p>目標位置 : <code>C:\Program Files (x86)\Microsoft SQL Server\</code><br>解決方式會是如果你是使用最新的SSMS目前版本 <code>15.0.18384.0</code>請選擇 <code>150</code>資料夾並移動至<code>C:\Program Files (x86)\Microsoft SQL Server\150\Shared\sqlmgmproviderxpsp2up.mof</code>。</p><h2 id="二、-Terminal-指令"><a href="#二、-Terminal-指令" class="headerlink" title="二、 Terminal 指令"></a>二、 Terminal 指令</h2><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mofcomp &quot;C:\Program Files (x86)\Microsoft SQL Server\<span class="number">150</span>\Shared\sqlmgmproviderxpsp2up.mof&quot;</span><br></pre></td></tr></table></figure><p>這邊指令一定要開啟 <em>系統管理員身分</em> 才能有效開啟這功能。目前解決後就可以順利打開 <code>sql configuration manager</code> 😂😂😂。</p><h2 id="三、-參考文件"><a href="#三、-參考文件" class="headerlink" title="三、 參考文件"></a>三、 參考文件</h2><ol><li>無法連線到 WMI 提供者。您沒有權限，或無法連上伺服器 : <a href="https://dotblogs.com.tw/lanlith/2020/06/21/121250">https://dotblogs.com.tw/lanlith/2020/06/21/121250</a></li><li>Microsoft 當您在 SQL Server 中開啟SQL Server 組態管理員時發生錯誤訊息 : <a href="https://docs.microsoft.com/zh-TW/troubleshoot/sql/tools/error-message-when-you-open-configuration-manager">https://docs.microsoft.com/zh-TW/troubleshoot/sql/tools/error-message-when-you-open-configuration-manager</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 資料庫技術 </category>
          
          <category> MS SQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Sql Server - 介紹SQL、安裝設定環境</title>
      <link href="/2021/02/19/%E8%B3%87%E6%96%99%E5%BA%AB%E6%8A%80%E8%A1%93/SQL/Sql_02_%E4%BB%8B%E7%B4%B9SQL%E3%80%81%E5%AE%89%E8%A3%9D%E8%A8%AD%E5%AE%9A%E7%92%B0%E5%A2%83/"/>
      <url>/2021/02/19/%E8%B3%87%E6%96%99%E5%BA%AB%E6%8A%80%E8%A1%93/SQL/Sql_02_%E4%BB%8B%E7%B4%B9SQL%E3%80%81%E5%AE%89%E8%A3%9D%E8%A8%AD%E5%AE%9A%E7%92%B0%E5%A2%83/</url>
      
        <content type="html"><![CDATA[<h1 id="SQL-Structured-Query-Language"><a href="#SQL-Structured-Query-Language" class="headerlink" title="SQL (Structured Query Language)"></a>SQL (Structured Query Language)</h1><p>是一種特定目的程式語言，用 於管理關聯式資料庫管理系統（ RDBMS ），或在關係流資料管理系統 RDSMS ）中進行流處理。 SQL 基於關係代數和元組關係演算，包括一個資料定義語言和資料操縱語言。 SQL 的範圍包括 資料插入、查詢、更新和刪除，資料庫模式建立和修改，以及資料存取控制。儘管 SQL 經常被描 述為，而且很大程度上是一種聲明式編程（ 4GL ），但是其也含有程序式編程的元素。 ISO( 國際標準化組織 對 SQL 制訂有標準規格，而這樣做為基準的 SQL 即被稱為 標準 SQL 早期 各家 RDBMS 無法統一 SQL 敘述，因此因 ISO 制訂了標準敘述，使得各家 RDBMS 都逐步支援標準 SQL 的基本語法。 </p><hr><h1 id="SQL-敘述與其分類-SQL"><a href="#SQL-敘述與其分類-SQL" class="headerlink" title="SQL 敘述與其分類 SQL"></a>SQL 敘述與其分類 SQL</h1><p>SQL 是以數個關鍵字 ( Keyword)，再與資料表名稱為欄位名稱組成一段完成的語句 (SQL 敘 述 SQL 敘述中的關鍵字，是根據其意義或使用方式所決定的特定英文單字，其中包含了「查 詢資料表內容」或 「參考這個資料表」等意思的多個單字。</p><h2 id="一、-DDL-Data-Definition-Language-資料定義語言"><a href="#一、-DDL-Data-Definition-Language-資料定義語言" class="headerlink" title="一、 DDL ( Data Definition Language 資料定義語言 )"></a>一、 DDL ( Data Definition Language 資料定義語言 )</h2><p>能建立或刪除資料庫和資料表等用來儲 存資料的物件，規劃資料儲存的方式。 </p><ol><li>GREATE ：建立資料庫或資料表 </li><li>DROP ：刪除資料庫或資料表 </li><li>ALTER ：修改資料庫或資料表等物件的架構</li></ol><h2 id="二、DML-Data-Manipulation-Language-資料操作語言"><a href="#二、DML-Data-Manipulation-Language-資料操作語言" class="headerlink" title="二、DML(Data Manipulation Language  資料操作語言 )"></a>二、DML(Data Manipulation Language  資料操作語言 )</h2><p>能查詢或修改資料 表 內的記錄 以列為 單位的資料 。 </p><ol><li>SELECT ：資料表查詢記錄 </li><li>INSERT ：將新記錄儲存至資料表中 </li><li>UPDATE ：修改資料表的記錄 </li><li>DELETE ：刪除資料表的記錄</li></ol><h2 id="三、DCL-Data-Control-Language-資料控制語言-："><a href="#三、DCL-Data-Control-Language-資料控制語言-：" class="headerlink" title="三、DCL(Data Control Language  資料控制語言 )："></a>三、DCL(Data Control Language  資料控制語言 )：</h2><p>可以用來認可或取消對資料庫執行的變更動 作，另外也能設定 RDBMS 的使用者對資料表等物件的操作權限</p><ol><li>COMMIT ：認可對資料庫執行的變更動作</li><li>ROLLBACK ：取消對資料庫執行的變更動作</li><li>GRANT ：賦予使用者操作的權限</li><li>REVOKE ：撤銷使用者操作的權限</li></ol><p><img src="/img/sql_server/01.png"></p><h1 id="環境設定"><a href="#環境設定" class="headerlink" title="環境設定"></a>環境設定</h1><h2 id="必備工具"><a href="#必備工具" class="headerlink" title="必備工具"></a>必備工具</h2><ol><li><p>SQL-Server ：<br><a href="https://www.microsoft.com/zh-tw/sql-server/sql-server-downloads">https://www.microsoft.com/zh-tw/sql-server/sql-server-downloads</a></p></li><li><p>SSMS(SQL Server Microsoft Studio )<br><a href="https://docs.microsoft.com/zh-tw/sql/ssms/download-sql-server-management-studio-ssms?view=sql-server-ver15">https://docs.microsoft.com/zh-tw/sql/ssms/download-sql-server-management-studio-ssms?view=sql-server-ver15</a></p></li></ol><p>技術文件 : <a href="https://test-75.gitbook.io/basic-sql/sql-huan-jing-she-ding">https://test-75.gitbook.io/basic-sql/sql-huan-jing-she-ding</a></p><h2 id="設定登入sa"><a href="#設定登入sa" class="headerlink" title="設定登入sa"></a>設定登入sa</h2><ol><li><p>進入後先調整資料庫的安全性，選擇SQL Server &#x2F;Windows 驗證模式之後按下確認。<br><img src="/img/sql_server/02.png"><br><img src="/img/sql_server/03.png"></p></li><li><p>到資料庫內有安全性的資料夾，開到有sa 選項按下右鍵(選擇屬性)。<br><img src="/img/sql_server/04.png"></p></li></ol><p>輸入密碼後，到狀態把登入選擇為啟用即可使用。<br><img src="/img/sql_server/05.png"></p><div class="note info flat"><h2 id="說明"><a href="#說明" class="headerlink" title="說明"></a>說明</h2><p>第一次使用需要重新開啟SSMS，若sa還是不能登入有兩個解決方式，</p><ol><li>從SQL Server 設定管理員裡面重啟 SQL Server</li><li>直接重開電腦</li></ol></div><hr><h2 id="補充"><a href="#補充" class="headerlink" title="補充"></a>補充</h2><h3 id="一、無法修改資料結構"><a href="#一、無法修改資料結構" class="headerlink" title="一、無法修改資料結構"></a>一、無法修改資料結構</h3><p>如果有出現無法存檔結構問題，可以依下列步驟：<br><img src="/img/sql_server/06.png"></p><p>開啟SQL Server Management Studio–&gt;工具–&gt;選項–&gt;Designers(設計師)–&gt;資料表和資料庫設計工具–&gt;防止儲存需要資料表重建的變更 –&gt;取消勾選 ！如下圖：<br><img src="/img/sql_server/07.png"></p><h3 id="二、使用者-‘NT-AUTHORITY-SYSTEM’-的登入失敗"><a href="#二、使用者-‘NT-AUTHORITY-SYSTEM’-的登入失敗" class="headerlink" title="二、使用者 ‘NT AUTHORITY\SYSTEM’ 的登入失敗"></a>二、使用者 ‘NT AUTHORITY\SYSTEM’ 的登入失敗</h3><p>使用者 ‘NT AUTHORITY\SYSTEM’ 的登入失敗的解決方法。</p><ol><li><p>打開SSMS，找到安全性&gt;登入&gt;NT AUTHORITY\SYSTEM<br><img src="/img/sql_server/08.png"></p></li><li><p>右鍵”屬性”，選擇”安全性實體”<br><img src="/img/sql_server/09.png"></p></li><li><p>打勾<br><img src="/img/sql_server/10.png"></p></li></ol><h3 id="三、顯示行數"><a href="#三、顯示行數" class="headerlink" title="三、顯示行數"></a>三、顯示行數</h3><p>請選擇上方[工具]&gt;[選項]，點開[文字編輯器]，如果你只有在 Transact-SQL 要顯示行號，請點選【Transact-SQL】，如果要在所有語言都顯示行號，請點選【所有語言】，在【顯示】下勾選【行號】，按【確定】。<br><img src="/img/sql_server/11.png"></p><h3 id="四、設定編輯前資料列指令的值"><a href="#四、設定編輯前資料列指令的值" class="headerlink" title="四、設定編輯前資料列指令的值"></a>四、設定編輯前資料列指令的值</h3><p>請選擇上方[工具]&gt;[選項]，點開[SQL Server 物件總管]，修改紅色框格內，按【確定】即可。<br><img src="/img/sql_server/12.png"></p>]]></content>
      
      
      <categories>
          
          <category> 資料庫技術 </category>
          
          <category> SQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Sql Server - 合併欄位( FOR XML PATH )</title>
      <link href="/2021/02/19/%E8%B3%87%E6%96%99%E5%BA%AB%E6%8A%80%E8%A1%93/SQL/Sql_01_%E5%90%88%E4%BD%B5%E6%AC%84%E4%BD%8D/"/>
      <url>/2021/02/19/%E8%B3%87%E6%96%99%E5%BA%AB%E6%8A%80%E8%A1%93/SQL/Sql_01_%E5%90%88%E4%BD%B5%E6%AC%84%E4%BD%8D/</url>
      
        <content type="html"><![CDATA[<h1 id="SQL-Server-合併欄位"><a href="#SQL-Server-合併欄位" class="headerlink" title="SQL Server 合併欄位"></a>SQL Server 合併欄位</h1><p>近期需要列出詳細欄位，例如: 這個角色他目前有使用哪種類型，依據類型展開詳細類型資訊等。<br>公司上遇到很多欄位分同類型不同人，決定要試看看合併欄位效果。</p><h2 id="必備工具"><a href="#必備工具" class="headerlink" title="必備工具"></a>必備工具</h2><ol><li><p>SQL-Server ：<br><a href="https://www.microsoft.com/zh-tw/sql-server/sql-server-downloads">https://www.microsoft.com/zh-tw/sql-server/sql-server-downloads</a></p></li><li><p>SSMS(SQL Server Microsoft Studio )<br><a href="https://docs.microsoft.com/zh-tw/sql/ssms/download-sql-server-management-studio-ssms?view=sql-server-ver15">https://docs.microsoft.com/zh-tw/sql/ssms/download-sql-server-management-studio-ssms?view=sql-server-ver15</a></p></li></ol><p>技術文件 : <a href="https://test-75.gitbook.io/basic-sql/sql-huan-jing-she-ding">https://test-75.gitbook.io/basic-sql/sql-huan-jing-she-ding</a></p><h3 id="自行選擇-產生範例結構"><a href="#自行選擇-產生範例結構" class="headerlink" title="(自行選擇) - 產生範例結構"></a>(自行選擇) - 產生範例結構</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SET</span> ANSI_NULLS <span class="keyword">ON</span></span><br><span class="line">GO</span><br><span class="line"></span><br><span class="line"><span class="keyword">SET</span> QUOTED_IDENTIFIER <span class="keyword">ON</span></span><br><span class="line">GO</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> [dbo].[Statistics](</span><br><span class="line">[name] [nvarchar](<span class="number">20</span>) <span class="keyword">NULL</span>,</span><br><span class="line">[type] [nvarchar](<span class="number">20</span>) <span class="keyword">NULL</span></span><br><span class="line">) <span class="keyword">ON</span> [<span class="keyword">PRIMARY</span>]</span><br><span class="line">GO</span><br></pre></td></tr></table></figure><h2 id="使用-FOR-XML-PATH-合併欄位"><a href="#使用-FOR-XML-PATH-合併欄位" class="headerlink" title="使用 ( FOR XML PATH ) 合併欄位"></a>使用 ( FOR XML PATH ) 合併欄位</h2><p>如果我們直接開始用，會看到資料很凌亂，那我們直接將Type欄位合併。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> [dbo].[Statistics]</span><br><span class="line"></span><br><span class="line"><span class="comment">/* ----------Result --------- */</span></span><br><span class="line"><span class="comment">/* Ivan A */</span></span><br><span class="line"><span class="comment">/* David B */</span></span><br><span class="line"><span class="comment">/* Kate C */</span></span><br><span class="line"><span class="comment">/* John A */</span></span><br><span class="line"><span class="comment">/* Ivan D */</span></span><br><span class="line"><span class="comment">/* John C */</span></span><br><span class="line"><span class="comment">/* Ivan B */</span></span><br></pre></td></tr></table></figure><h3 id="FOR-XML-PATH"><a href="#FOR-XML-PATH" class="headerlink" title="FOR XML PATH"></a>FOR XML PATH</h3><p>這方式簡單馬type串在一起，XML使用下尚未特別處理會呈現 <code>&lt;type&gt;</code>字眼。<br>如果有特別加上字串，<code>&lt;type&gt;</code>就不會出現在table中。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">distinct</span> </span><br><span class="line"> m.name,(</span><br><span class="line"> <span class="keyword">SELECT</span> type <span class="comment">/*type+&#x27;,&#x27;*/</span> <span class="keyword">FROM</span> [dbo].[Statistics]</span><br><span class="line"> <span class="keyword">WHERE</span> name <span class="operator">=</span> m.name</span><br><span class="line"> <span class="keyword">for</span> xml path(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">)  <span class="keyword">as</span> type_item</span><br><span class="line"><span class="keyword">FROM</span> [dbo].[Statistics] m</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* ----------Result --------- */</span></span><br><span class="line"><span class="comment">-- David || &lt;type&gt;B&lt;/type&gt;</span></span><br><span class="line"><span class="comment">-- Ivan || &lt;type&gt;A&lt;/type&gt;&lt;type&gt;D&lt;/type&gt;&lt;type&gt;B&lt;/type&gt;</span></span><br><span class="line"><span class="comment">-- John  || &lt;type&gt;A&lt;/type&gt;&lt;type&gt;C&lt;/type&gt;</span></span><br><span class="line"><span class="comment">-- Kate || &lt;type&gt;C&lt;/type&gt;</span></span><br></pre></td></tr></table></figure><h3 id="去除多於符號"><a href="#去除多於符號" class="headerlink" title="去除多於符號"></a>去除多於符號</h3><p>去除多餘符號可以使用 left() 或是 right() 方法。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Select</span> </span><br><span class="line">name,<span class="keyword">left</span>(type_item,len(type_item)<span class="number">-1</span>) <span class="keyword">as</span> type_item</span><br><span class="line"><span class="keyword">From</span></span><br><span class="line">(</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">distinct</span> </span><br><span class="line"> m.name,</span><br><span class="line"> (</span><br><span class="line"> <span class="keyword">SELECT</span> type<span class="operator">+</span><span class="string">&#x27;,&#x27;</span> <span class="keyword">FROM</span> [dbo].[Statistics]</span><br><span class="line"> <span class="keyword">WHERE</span> name <span class="operator">=</span> m.name</span><br><span class="line"> <span class="keyword">for</span> xml path(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"> )  <span class="keyword">as</span> type_item</span><br><span class="line"><span class="keyword">FROM</span> [dbo].[Statistics] m</span><br><span class="line">) <span class="keyword">as</span> main</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>或者是 STUFF() 方式刪除，再請各位自行遊玩測試。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">distinct</span> </span><br><span class="line">    m.name,</span><br><span class="line">    STUFF</span><br><span class="line">    ((</span><br><span class="line">        <span class="keyword">SELECT</span> <span class="string">&#x27;,&#x27;</span><span class="operator">+</span>type <span class="keyword">FROM</span> [dbo].[Statistics]</span><br><span class="line">        <span class="keyword">WHERE</span> name <span class="operator">=</span> m.name</span><br><span class="line">        <span class="keyword">for</span> xml path(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    ),<span class="number">1</span>,<span class="number">1</span>,<span class="string">&#x27;&#x27;</span>) <span class="keyword">as</span> type_item </span><br><span class="line"><span class="keyword">FROM</span> [dbo].[Statistics] m</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 資料庫技術 </category>
          
          <category> SQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
