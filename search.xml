<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>【旅遊】鶯歌、桃園一日遊</title>
      <link href="/2024/04/12/%E7%AD%86%E8%A8%98%E8%88%87%E7%94%9F%E6%B4%BB%E9%9B%9C%E8%A8%98/%E6%97%85%E9%81%8A/%E3%80%90%E6%97%85%E9%81%8A%E3%80%91%E9%B6%AF%E6%AD%8C%E3%80%81%E6%A1%83%E5%9C%92%E4%B8%80%E6%97%A5%E9%81%8A/"/>
      <url>/2024/04/12/%E7%AD%86%E8%A8%98%E8%88%87%E7%94%9F%E6%B4%BB%E9%9B%9C%E8%A8%98/%E6%97%85%E9%81%8A/%E3%80%90%E6%97%85%E9%81%8A%E3%80%91%E9%B6%AF%E6%AD%8C%E3%80%81%E6%A1%83%E5%9C%92%E4%B8%80%E6%97%A5%E9%81%8A/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>這次假期用最有限的時間、行程挑戰搭公車、火車一日遊，並包含著家人一起出遊。因為本人不太會拍照請各位讀者請見諒 (本次旅遊為 2024&#x2F;04&#x2F;06 為主)</p><hr><h2 id="計畫"><a href="#計畫" class="headerlink" title="計畫"></a>計畫</h2><p>這次旅程去的方向如下</p><ul><li>鶯歌 : 【甕仔麵】、【鶯歌老街】、【鶯歌博物館】</li><li>桃園 : 【土地公文化館】、【桃園神社】</li><li>台北 : 【中山地下街 (特展 : 關於我轉生變成史萊姆這檔事)】</li></ul><p>原則上因為是搭車就不方面開太多地點，繼上次板橋車站挖掘景點後，這次來看看其他的地區怎麼玩。</p><h3 id="一、鶯歌"><a href="#一、鶯歌" class="headerlink" title="一、鶯歌"></a>一、鶯歌</h3><p>因為作者離板橋車站特別近，因此這邊就特別到板橋車站前往鶯歌站。</p><h4 id="1-1-鶯歌老街"><a href="#1-1-鶯歌老街" class="headerlink" title="1-1 鶯歌老街"></a>1-1 鶯歌老街</h4><p>前往【鶯歌老街】可以直接搭乘旁邊的 981，要記得在<strong>國慶街</strong>下車。這個公車路線會蠻好走過去，基本上下車沿著國小方向走過去就會看到老街。<br>這個方向會是老街的尾部，可以到那邊慢慢逛過去陶瓷博物館。</p><div class="gallery">    <div class="fj-gallery  data" data-rowHeight="220" data-limit="10">    <span class="gallery-data">[{"url":"/image/20240408_22-51-54.png","alt":""},{"url":"/image/20240408_22-55-15.png","alt":""},{"url":"/image/20240408_22-50-38.png","alt":""}]</span>    </div>    <button class="gallery-load-more"><span>載入更多</span><i class="fa-solid fa-arrow-down"></i></button>    </div><h4 id="1-2-甕仔麵"><a href="#1-2-甕仔麵" class="headerlink" title="1-2 甕仔麵"></a>1-2 甕仔麵</h4><ul><li>地址 : 239新北市鶯歌區重慶街95號老街陶館【大煙囪2樓】</li><li>營業 : 周一到、周日 11:00–19:00<br>這家特色是用甕製作牛肉麵，店內支援線上刷卡、QRCODE點餐。店內的酸梅汁滿好喝可以續壺。第一次到”鶯歌老街”可以考慮一下不同的食用感覺。</li></ul><p>因為這邊價格上邊偏向觀光客為主，因此就請各位參酌google評價吧~。</p><div class="gallery">    <div class="fj-gallery  data" data-rowHeight="220" data-limit="10">    <span class="gallery-data">[{"url":"/image/20240408_22-58-17.png","alt":""},{"url":"/image/20240408_22-58-34.png","alt":""},{"url":"/image/20240408_22-59-19.png","alt":""},{"url":"/image/20240408_22-59-48.png","alt":""},{"url":"/image/20240408_23-00-42.png","alt":""}]</span>    </div>    <button class="gallery-load-more"><span>載入更多</span><i class="fa-solid fa-arrow-down"></i></button>    </div><h4 id="1-3-陶瓷博物館"><a href="#1-3-陶瓷博物館" class="headerlink" title="1-3 陶瓷博物館"></a>1-3 陶瓷博物館</h4><p>前往博物館可以利用附近捷徑 【鶯歌透明景觀電梯】，預計10分鐘左右就會抵達博物館。因為連假期間博物館即使不是新北市民都是免門票入場。</p><div class="gallery">    <div class="fj-gallery  data" data-rowHeight="220" data-limit="10">    <span class="gallery-data">[{"url":"/image/20240408_23-11-50.png","alt":""},{"url":"/image/20240408_23-15-41.png","alt":"鶯歌透明景觀入口"},{"url":"/image/20240408_23-14-52.png","alt":""},{"url":"/image/20240408_23-15-21.png","alt":""}]</span>    </div>    <button class="gallery-load-more"><span>載入更多</span><i class="fa-solid fa-arrow-down"></i></button>    </div><h2 id="二、桃園"><a href="#二、桃園" class="headerlink" title="二、桃園"></a>二、桃園</h2><h3 id="2-1-土地公文化館"><a href="#2-1-土地公文化館" class="headerlink" title="2-1 土地公文化館"></a>2-1 土地公文化館</h3><p>從【桃園車站】往2號出口外面，走道 【復興中正路口(桃園火車站)】 搭 1 公車，公車站牌於原價屋位置其實很好找。到點之後，由廟右邊會入口有服務人員會指導前往館區參觀。</p><div class="gallery">    <div class="fj-gallery  data" data-rowHeight="220" data-limit="10">    <span class="gallery-data">[{"url":"/image/20240412_22-13-34.png","alt":""},{"url":"/image/20240412_22-11-04.png","alt":""},{"url":"/image/20240412_22-07-04.png","alt":""},{"url":"/image/20240412_22-18-30.png","alt":""},{"url":"/image/20240412_22-19-01.png","alt":""},{"url":"/image/20240412_22-20-39.png","alt":""},{"url":"/image/20240412_22-23-32.png","alt":""}]</span>    </div>    <button class="gallery-load-more"><span>載入更多</span><i class="fa-solid fa-arrow-down"></i></button>    </div><h3 id="2-2-桃園神社"><a href="#2-2-桃園神社" class="headerlink" title="2-2 桃園神社"></a>2-2 桃園神社</h3><ul><li>地點 : 330桃園市桃園區成功路三段200號</li><li>時間 : 周一休息 ，週二<del>週日 (09:00</del>18:00)</li></ul><p>接下來，桃園最後一站要前往 【桃園神社】 必須要到【體育館】站搭車，雖然有很多台可以搭上去如果懶得走路建議搭 213，筆者搭302走路上去路程不會太遠。</p><p>這地點六點才會關閉，如果想要拍和服、浴衣建議提早來體驗。</p><div class="gallery">    <div class="fj-gallery  data" data-rowHeight="220" data-limit="10">    <span class="gallery-data">[{"url":"/image/20240412_22-25-11.png","alt":""},{"url":"/image/20240412_22-21-22.png","alt":""},{"url":"/image/20240412_22-21-54.png","alt":""},{"url":"/image/20240412_22-22-37.png","alt":""},{"url":"/image/20240412_22-22-54.png","alt":""},{"url":"/image/20240412_22-23-10.png","alt":""}]</span>    </div>    <button class="gallery-load-more"><span>載入更多</span><i class="fa-solid fa-arrow-down"></i></button>    </div><h3 id="三、台北車站"><a href="#三、台北車站" class="headerlink" title="三、台北車站"></a>三、台北車站</h3><p>前往台北車站時候，務必要搭 9069、9069A 公車底達到【南京復興捷運站】搭到北門站下車即可。要往Y區地下街指標走就會抵達入口。</p><div class="gallery">    <div class="fj-gallery  data" data-rowHeight="220" data-limit="10">    <span class="gallery-data">[{"url":"/image/20240412_22-31-33.png","alt":""},{"url":"/image/20240412_22-38-24.png","alt":""},{"url":"/image/20240412_22-39-17.png","alt":""},{"url":"/image/20240412_22-38-10.png","alt":""}]</span>    </div>    <button class="gallery-load-more"><span>載入更多</span><i class="fa-solid fa-arrow-down"></i></button>    </div>]]></content>
      
      
      <categories>
          
          <category> 筆記 </category>
          
          <category> 生活雜記 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 旅遊 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【旅遊】馬祖三日自由行-南竿篇</title>
      <link href="/2024/04/07/%E7%AD%86%E8%A8%98%E8%88%87%E7%94%9F%E6%B4%BB%E9%9B%9C%E8%A8%98/%E6%97%85%E9%81%8A/%E3%80%90%E6%97%85%E9%81%8A%E3%80%91%E9%A6%AC%E7%A5%96%E8%87%AA%E7%94%B1%E8%A1%8C-%E5%8D%97%E7%AB%BF%E7%AF%87/"/>
      <url>/2024/04/07/%E7%AD%86%E8%A8%98%E8%88%87%E7%94%9F%E6%B4%BB%E9%9B%9C%E8%A8%98/%E6%97%85%E9%81%8A/%E3%80%90%E6%97%85%E9%81%8A%E3%80%91%E9%A6%AC%E7%A5%96%E8%87%AA%E7%94%B1%E8%A1%8C-%E5%8D%97%E7%AB%BF%E7%AF%87/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>這裡是為2024&#x2F;9&#x2F;9 紀錄為主，參考給各位以下為動向圖。<br><img src="/image/20240407_19-26-38.png"></p><h2 id="南竿"><a href="#南竿" class="headerlink" title="南竿"></a>南竿</h2><p>這篇文章原定是之前要完成撰寫，因為工作方面有延誤無法完整收入內容，目前要把一些內容重新整理過一遍。</p><h3 id="上午"><a href="#上午" class="headerlink" title="上午"></a>上午</h3><h4 id="一、早餐-鄉城早餐-北竿"><a href="#一、早餐-鄉城早餐-北竿" class="headerlink" title="一、早餐 - 鄉城早餐(北竿)"></a>一、早餐 - 鄉城早餐(北竿)</h4><p>這裡是南竿最多士兵會去的一個廉價早餐店，點餐方式要特別到老闆娘面前說要甚麼，但也要注意餐點會被拿走問題(因為是傳統早餐店可以任意拿走)。</p><p>P.S. 因為是最後一天在北竿所以特別到這家吃。<br><img src="/image/20240407_19-32-39.png"></p><h4 id="二、八八坑道"><a href="#二、八八坑道" class="headerlink" title="二、八八坑道"></a>二、八八坑道</h4><p>早上預計 09:43到八八坑道，但要注意是來到八八坑道其實不好開來這個地點，南竿會比北竿難騎很多。<br>這段路口因為是釀酒地帶，光在門口外面就會有很濃厚的酒氣味。</p><p><img src="/image/20240407_19-36-35.png"></p><h4 id="三、馬祖民俗文物館"><a href="#三、馬祖民俗文物館" class="headerlink" title="三、馬祖民俗文物館"></a>三、馬祖民俗文物館</h4><ul><li>地點 : 209連江縣南竿鄉清水村135號</li><li>營業 : 周二 ~ 周日 09:00 ~ 17:00 (周一休息)<br>預計 10 :47 到了馬祖民俗文物館可以稍微喘喘口氣、吹個冷氣，裡面就是簡單的介紹馬祖歷史過程，也蠻多打卡地方可以來拍。</li></ul><p><img src="/image/20240407_19-39-43.png"></p><hr><h3 id="下午"><a href="#下午" class="headerlink" title="下午"></a>下午</h3><h4 id="一、馬祖藥燉排骨、土虱"><a href="#一、馬祖藥燉排骨、土虱" class="headerlink" title="一、馬祖藥燉排骨、土虱"></a>一、馬祖藥燉排骨、土虱</h4><ul><li>地點 : 馬祖南竿鄉清水村</li><li>營業 : 周一 ~ 週日 11:30 ~ 22:00<br>到這時間已經 11:51 進來吃評價 4.8的藥燉排骨。這間會推炒飯、藥燉蠻好吃的<br><img src="/image/20240407_19-45-24.png"><br><img src="/image/20240407_19-45-39.png"></li></ul><h4 id="二、梅石營區軍官特約茶室"><a href="#二、梅石營區軍官特約茶室" class="headerlink" title="二、梅石營區軍官特約茶室"></a>二、梅石營區軍官特約茶室</h4><ul><li>地點 : 連江縣南竿鄉151號 附近</li><li>營業 : 周一 ~ 週日 09:00 ~ 16:00 (週四休息)</li></ul><p>預計 12:37抵達。這裡就是以前官兵會休息特別的地點，這裡會不太好找就可能要注意，因為這裡是下坡地段才會看到。<br><img src="/image/20240407_19-51-38.png"></p><h4 id="三、北海坑道"><a href="#三、北海坑道" class="headerlink" title="三、北海坑道"></a>三、北海坑道</h4><ul><li>地點 : 209連江縣南竿鄉仁愛村95-2號</li><li>營業 : 周一 ~ 週日 08:30 ~ 17:00</li></ul><p>預計抵達 13:10 。首先會先到”南竿遊客中心” ，那邊可以到達北海坑道、大漢據點，也是要看藍眼淚的地方。<br>這裡停滯時間可以拿捏一下，通常可以待 2 小時。<br><img src="/image/20240407_19-54-16.png"></p><h4 id="四、津沙聚落"><a href="#四、津沙聚落" class="headerlink" title="四、津沙聚落"></a>四、津沙聚落</h4><ul><li>地點 : 209連江縣南竿鄉勝天路津沙路</li><li>時間 : 營業 : 周一 ~ 週日 08:00 ~ 17:00</li></ul><p>抵達時間 15:26 。這裡是打卡聖地可以稍微搭一下就好，接下來就要接去媽祖巨神像。</p><h4 id="五、媽祖巨神像"><a href="#五、媽祖巨神像" class="headerlink" title="五、媽祖巨神像"></a>五、媽祖巨神像</h4><p>預計抵達時間4:32。到地點會看到咖啡廳，那邊有個巨神像的入口，因為時間問題建議不要太晚去。那邊入口會有個捷徑坑道可以很快出去。</p><p><img src="/image/20240407_19-59-52.png"><br><img src="/image/20240407_20-02-17.png"></p><h5 id="相關文章"><a href="#相關文章" class="headerlink" title="相關文章"></a>相關文章</h5><ul><li><a href="https://ezbuy.ettoday.net/news/1981025">馬祖必玩！體驗全台最特別的鑽轎底　祈福坑道「星光閃閃」超好拍</a></li></ul><hr><h2 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h2><p>因為時間關係今日行程到這裡，而第二天只有半天時間快速道 “枕戈待旦紀念公園”、”介壽獅子市場”、 “牛角聚落” 看一下那邊風景以及拍照。原則上馬祖北竿南竿需要三天才能跑完，尤其是鹿島要看天氣為主才能上岸，這段要請各位注意。</p>]]></content>
      
      
      <categories>
          
          <category> 筆記 </category>
          
          <category> 生活雜記 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 旅遊 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【旅遊】板橋車站免費景點</title>
      <link href="/2024/04/06/%E7%AD%86%E8%A8%98%E8%88%87%E7%94%9F%E6%B4%BB%E9%9B%9C%E8%A8%98/%E6%97%85%E9%81%8A/%E3%80%90%E6%97%85%E9%81%8A%E3%80%91%E6%9D%BF%E6%A9%8B%E8%BB%8A%E7%AB%99%E5%85%8D%E8%B2%BB%E6%99%AF%E9%BB%9E/"/>
      <url>/2024/04/06/%E7%AD%86%E8%A8%98%E8%88%87%E7%94%9F%E6%B4%BB%E9%9B%9C%E8%A8%98/%E6%97%85%E9%81%8A/%E3%80%90%E6%97%85%E9%81%8A%E3%80%91%E6%9D%BF%E6%A9%8B%E8%BB%8A%E7%AB%99%E5%85%8D%E8%B2%BB%E6%99%AF%E9%BB%9E/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本篇於 2024&#x2F;04&#x2F;5 遊玩、紀錄，僅供參考或是有任何主題歡迎底下留言。</p><h2 id="板橋車站"><a href="#板橋車站" class="headerlink" title="板橋車站"></a>板橋車站</h2><p>來到板橋車站外，大多知道的人可能是耶誕成居多，但有幾些點不論是大小朋友都可以來參觀，目前是以最近的兩個點介紹。</p><h3 id="一、電幻-1-號"><a href="#一、電幻-1-號" class="headerlink" title="一、電幻 1 號"></a>一、電幻 1 號</h3><ul><li>地址：新北市板橋區縣民大道二段1號台電新民大樓</li><li>營業時間：週二<del>週六 10:00</del>18:00 (週日、週一公休)</li></ul><p>這邊有兩個入口可以走進去。</p><ol><li>板橋公車站二樓，進去倒麗寶百貨直直走就可以進去 “電幻 1 號”</li><li>板橋公車站一樓直直走會看到 “電幻 1 號” ，入口會是 VR 可以直接預約時段。</li></ol><p><img src="/image/20240407_17-42-54.png"><br><img src="/image/20240407_17-45-02.png"></p><h4 id="一樓-VR-六軸機器人"><a href="#一樓-VR-六軸機器人" class="headerlink" title="一樓 VR 六軸機器人"></a>一樓 VR 六軸機器人</h4><p>遊玩的活動將根據當時的情況以及機台的狀態來決定。目前，這些機器原則上支援雙人同時使用。但在使用這台機器之前，請記得提前到現場排隊，否則可能會因為人潮眾多而無法排到。</p><p><img src="/image/20240407_18-35-14.png"></p><h4 id="二樓-健身房的沈浸式互動體驗"><a href="#二樓-健身房的沈浸式互動體驗" class="headerlink" title="二樓 健身房的沈浸式互動體驗"></a>二樓 健身房的沈浸式互動體驗</h4><p>這裡的二樓請至櫃台登記拿手環，這手環是給裡面設施使用。內容有彈跳、投籃、玩戰繩、騎飛輪之類設施。<br><img src="/image/20240407_18-46-23.png"></p><h4 id="相關連結"><a href="#相關連結" class="headerlink" title="相關連結"></a>相關連結</h4><ul><li><a href="https://snoopyblog.com/blog/post/dsonetaipower">【板橋景點】TAIPOWER D&#x2F;S ONE 電幻1號所～台北免門票室內景點，夜店版健身房玩投籃機、踩飛輪、甩戰繩，還能體驗ＶＲ機器人</a></li></ul><h3 id="二、32樓-新北市府觀景台"><a href="#二、32樓-新北市府觀景台" class="headerlink" title="二、32樓 新北市府觀景台"></a>二、32樓 新北市府觀景台</h3><ul><li>地址：新北市板橋區中山路一段161號32F</li><li>營業時間：週一<del>週日 08:00</del>22:00</li></ul><p>眾人皆知台北有101大樓觀景台，新北是有新北市府觀景台。位於板橋車站附近有一個廣場入口可以給任何民眾過去，目前因為地震這周的電梯只能搭綠色電梯在走樓梯上去。於33樓會有一個觀景台餐廳可以進去嘗鮮，但因為昨日地震不就方便打繞他們。</p><p><img src="/image/20240407_18-49-28.png"><br><img src="/image/20240407_19-11-09.png"><br><img src="/image/20240407_19-09-24.png"></p><p>觀景台其實下午算是蠻冷清沒有人上來，中間會有一個高樂可以看新北市市府的模型。<br><img src="/image/20240407_19-09-48.png"></p><h4 id="相關連結-1"><a href="#相關連結-1" class="headerlink" title="相關連結"></a>相關連結</h4><ul><li><a href="https://kaikay.tw/new-taipei-city-32f/">【新北景點】絕美高空景觀！板橋新北市政府32樓瞭望台看夜景</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 筆記 </category>
          
          <category> 生活雜記 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 旅遊 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【旅遊】馬祖三日自由行-北竿篇</title>
      <link href="/2024/04/06/%E7%AD%86%E8%A8%98%E8%88%87%E7%94%9F%E6%B4%BB%E9%9B%9C%E8%A8%98/%E6%97%85%E9%81%8A/%E3%80%90%E6%97%85%E9%81%8A%E3%80%91%E9%A6%AC%E7%A5%96%E8%87%AA%E7%94%B1%E8%A1%8C-%E5%8C%97%E7%AB%BF%E7%AF%87/"/>
      <url>/2024/04/06/%E7%AD%86%E8%A8%98%E8%88%87%E7%94%9F%E6%B4%BB%E9%9B%9C%E8%A8%98/%E6%97%85%E9%81%8A/%E3%80%90%E6%97%85%E9%81%8A%E3%80%91%E9%A6%AC%E7%A5%96%E8%87%AA%E7%94%B1%E8%A1%8C-%E5%8C%97%E7%AB%BF%E7%AF%87/</url>
      
        <content type="html"><![CDATA[<h2 id="0、前言"><a href="#0、前言" class="headerlink" title="0、前言"></a>0、前言</h2><p>為了增加一些Blog活用性，決定開始寫一些旅遊的心得以及旅遊採點，請大家參酌。(旅遊日 2023&#x2F;09&#x2F;08)</p><h3 id="0-1、備註"><a href="#0-1、備註" class="headerlink" title="0.1、備註"></a>0.1、備註</h3><p>前往馬祖前，務必小心馬祖的山路。馬祖是一座沒有紅綠燈 (除了機場、船以外)一座列島，本座島是完全以陡坡為名，前往務必小心摩托車、汽車駕駛方式。</p><div class="gallery">    <div class="fj-gallery  data" data-rowHeight="220" data-limit="10">    <span class="gallery-data">[{"url":"/image/20231007_23-15-17.png","alt":""},{"url":"/image/20231008_00-27-22.png","alt":""}]</span>    </div>    <button class="gallery-load-more"><span>載入更多</span><i class="fa-solid fa-arrow-down"></i></button>    </div><h3 id="0-2、行程"><a href="#0-2、行程" class="headerlink" title="0.2、行程"></a>0.2、行程</h3><p>當初馬祖訂購機票時候務必留意飯店的位置，因為馬祖的交通方式只有摩托車、汽車、公車、計程車，所以務必留意飯店的位置，以及交通方式。</p><p>來到北竿一定要去【大邱】那座小島，可稱作為【鹿島】。依據松山機場從 6:50 飛機到現場預計7:20左右抵達，早上可以馬上衝去【大邱】，然後再回來北竿。大邱大約只需要1~2小時，請配合船班。</p><p>下方為行程草稿，依據當初情況調配。<br><img src="/image/20231007_23-25-04.png"></p><hr><h2 id="1、足跡地圖"><a href="#1、足跡地圖" class="headerlink" title="1、足跡地圖"></a>1、足跡地圖</h2><p>可以參考下方足跡行走方式。<br><img src="/image/20231007_21-44-14.png"></p><h3 id="1-2、住宿"><a href="#1-2、住宿" class="headerlink" title="1.2、住宿"></a>1.2、住宿</h3><p>國內外島必須要知道的幾件事，務必與旅社、店家洽詢。</p><ol><li>國內外島通常旅社都會提供機車、船票、機票之類的服務。</li><li>大多旅社都會提供接送、運送行李服務。</li></ol><p>馬祖租車部分都繳回時候不需要加油，跟金門相比划算又方便。<br>住宿可以考慮入住 <a href="https://matsu.fun-taiwan.com/HouseDetailView.aspx?hid=015-122">【羅馬佳洲民宿】</a>環境與用餐地點就在附近可以參酌。</p><h3 id="1-3、前往碼頭"><a href="#1-3、前往碼頭" class="headerlink" title="1.3、前往碼頭"></a>1.3、前往碼頭</h3><p>還沒前往碼頭購買前票無須擔心，透過住宿飯店老闆可以馬上取得到票券，不需要擔心。<br>北竿橋仔港務必留意，再前往碼頭時候其實就在禁止機車下坡那邊，需要繞路才能過去到碼頭。</p><p>下圖是當時找路不小心走到”橋仔漁村展示館” ，也可以從這裡走過去距離不會太遠，或是旁邊有小巷子另寫告示牌騎過去也可以。</p><h2 id=""><a href="#" class="headerlink" title=""></a><img src="/image/20231007_23-42-01.png"><br><img src="/image/20231008_00-29-49.png"></h2><h2 id="2、美食"><a href="#2、美食" class="headerlink" title="2、美食"></a>2、美食</h2><p>說道美食，馬祖北竿的美食其實不多，但是有一些特色的美食可以參考。馬祖當地味道偏淡，若口味偏重的人可能會覺得不夠鹹，還有麵條是非常細、軟會因嗜好有所不同。</p><ol><li>協和食品行 : 雖然Google說 8點營業，實際上是 11點開始營業。</li><li>韓上樓 : 推薦”蛋餅包油條”、”老酒麵線”，老闆娘人很好，會推薦一些景點。</li><li>鄉城早餐 : 是最多官兵會來的早餐店，早上會有很多官兵來吃早餐，推薦”蛋餅”、油飯 (務必要加醬)，依據價格會是裡面當中最便宜。</li><li>阿婆魚麵店 : 北竿最大特色炸魚乾，一定要嘗試的一道菜色。</li><li>龍和閩東風味館 : 最後晚餐用這裡來解決，可以把酒糟系列餐點都點來嘗試，酒糟雞、酒糟魚、酒糟肉、酒糟麵線。</li><li>坂里古厝黃金地瓜餃 : 推薦”地瓜餃”、”炸地瓜餃”，地瓜餃是馬祖特產，一定要嘗試。</li></ol><div class="gallery">    <div class="fj-gallery  data" data-rowHeight="220" data-limit="10">    <span class="gallery-data">[{"url":"/image/20231008_00-24-40.png","alt":""},{"url":"/image/20231008_00-27-00.png","alt":""},{"url":"/image/20231008_00-25-02.png","alt":""},{"url":"/image/20231008_00-26-16.png","alt":""},{"url":"/image/20231008_00-26-40.png","alt":""},{"url":"/image/20231008_00-26-48.png","alt":""}]</span>    </div>    <button class="gallery-load-more"><span>載入更多</span><i class="fa-solid fa-arrow-down"></i></button>    </div><h2 id="3、遊玩重點"><a href="#3、遊玩重點" class="headerlink" title="3、遊玩重點"></a>3、遊玩重點</h2><p>遊玩 北竿 + 大邱 只需要一天時間即可，因待在鹿島除了餵食鹿群以外，就是在海邊看風景，所以不需要花太多時間。北竿環繞一圈只需要5小時內就可以逛完，主要原因是部分地區還在施工(ex: 戰爭和平公園後半段)，購買特產只要透過”坂里大宅”附近旅客中心可以解決。</p><p><img src="/image/20231008_00-18-59.png"></p><p>馬祖必備吃到可以說是 “地瓜餃”、”老酒麵線”，光美景就可以拍上1~1.5小時 (芹壁、壁山)，網美可以來這裡拍照打卡。前往南竿可以透過住宿老闆選擇要前往時間，可以選擇早上或是下午，但是下午會比較晚，因為船班會比較少。</p><hr><p>這裡是北竿旅遊結果、小小心得，本篇第一次撰寫旅遊，歡迎各位提供建議或是指教，謝謝🙏🙏🙏。</p>]]></content>
      
      
      <categories>
          
          <category> 筆記 </category>
          
          <category> 生活雜記 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 旅遊 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用Hexo(五)-加入Github Actions自動發行</title>
      <link href="/2024/04/05/HEXO/%E4%BD%BF%E7%94%A8%20Hexo%20(%E4%BA%94)%20%E5%8A%A0%E5%85%A5Github%20Actions/"/>
      <url>/2024/04/05/HEXO/%E4%BD%BF%E7%94%A8%20Hexo%20(%E4%BA%94)%20%E5%8A%A0%E5%85%A5Github%20Actions/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近一直覺得發文這件事有點耗時間，我這邊做一個 CI&#x2F;CD 方式製作一個自動部屬機制，減少發一次文章之前都要輸入指令問題。</p><hr><h2 id="使用-Github-Actions"><a href="#使用-Github-Actions" class="headerlink" title="使用 Github Actions"></a>使用 Github Actions</h2><h3 id="一、創建-deploy-Key"><a href="#一、創建-deploy-Key" class="headerlink" title="一、創建 deploy Key"></a>一、創建 deploy Key</h3><p>這邊要使用 <code>deploy key</code>之前，要利用 git 現有的功能 <code>ssh-keygen</code> 創建，建議要用名字來區別這是用於 deploy hexo。</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -b <span class="number">4096</span> -C &quot;your_email@example.com&quot;</span><br></pre></td></tr></table></figure><div class="note info simple"><h4 id="補充-ssh-區分"><a href="#補充-ssh-區分" class="headerlink" title="補充: ssh 區分"></a>補充: ssh 區分</h4><ul><li>有 .pub 是公鑰</li><li>沒有副檔名是 私鑰<br><img src="/image/20240405_23-04-44.png"></li></ul><p>PS 若第一是使用 ssh-keygen 務必留意這個小東西只能用一次 repository ，如果你澳用在其他 repository 會被阻擋使用。</p></div><h4 id="二、使用-Hexo-Actions"><a href="#二、使用-Hexo-Actions" class="headerlink" title="二、使用 Hexo Actions"></a>二、使用 Hexo Actions</h4><p>這邊要使用的是官方提供的工具，這邊用現成說明。<br>這邊參數使用只需要修改兩個地方。</p><ol><li>_config.yml : 要設定 deploy 路徑，主要參考位置。</li><li>github actions腳本 : 原則上只需要輸入 deploy key 就好，不需要加入其他內容。</li></ol><h3 id="參數"><a href="#參數" class="headerlink" title="參數"></a>參數</h3><p>要瞭解這些輸入的更多資訊，請參閱 <a href="https://developer.github.com/v3/repos/releases/#input">API Documentation</a></p><table><thead><tr><th>Key</th><th>Required</th><th>Description</th><th>Default</th></tr></thead><tbody><tr><td><code>user_name</code></td><td>NO</td><td>部署時使用的 GitHub 帳戶使用者名稱。</td><td><code>github-actions[bot]</code></td></tr><tr><td><code>user_email</code></td><td>NO</td><td>部署時使用的 GitHub 帳戶使用者電子郵件。</td><td><code>41898282+github-actions[bot]@users.noreply.github.com</code><a href="#refer-anchor-1"><sup>1</sup></a></td></tr><tr><td><code>deploy_key</code></td><td>YES</td><td>用於存取你的 GitHub Pages 儲存庫的Deploy Key。</td><td><code>null</code></td></tr><tr><td><code>commit_msg</code></td><td>NO</td><td>用於你的 GitHub Pages 儲存庫的 Git 提交訊息。</td><td><code>null</code></td></tr></tbody></table><div class="note info simple"><h4 id="補充-官方提供-commit-msg-預設輸入方式"><a href="#補充-官方提供-commit-msg-預設輸入方式" class="headerlink" title="補充 : 官方提供 commit msg 預設輸入方式"></a>補充 : 官方提供 commit msg 預設輸入方式</h4><p>github actions 有特別支援這種作法，可以抓取當初定義的 message 發行。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">github.event.head_commit.message</span></span><br></pre></td></tr></table></figure></div><h3 id="三、設定-Github-Actions-環境"><a href="#三、設定-Github-Actions-環境" class="headerlink" title="三、設定 Github Actions 環境"></a>三、設定 Github Actions 環境</h3><p>本作者有分兩個路徑，兩這只要有一個設定錯 deploy key 會造成無法發布成功的尷尬問題。</p><ol><li>寫部落格的 repository</li><li>存放 github pages 的 repository</li></ol><p>目前設定方式要用在存放 github pages 才可以有效發行成功， 使用記得要勾選 <strong>Allow write access</strong> 。<br>裡面輸入框請輸入公鑰並存檔即可，名字可以 _任意輸入_。</p><p><img src="/image/20240405_23-24-39.png"><br><img src="/image/20240405_23-25-01.png"></p><p>然後私鑰要用在 <strong>Actions secrets and variables</strong> &gt; <strong>Repository secrets</strong> ，名字取名為 <em>DEPLOY_KEY</em> 。<br><img src="/image/20240405_23-27-34.png"></p><div class="note info simple"><h4 id="補充-存放原因"><a href="#補充-存放原因" class="headerlink" title="補充 : 存放原因"></a>補充 : 存放原因</h4><p>這個動作目前測試結果發現是發佈動作後會由一個動作要 push 到 github pages repository 上面，這段過程就需要使用 deploy key ，若沒使用就會在 Github Actions一直不斷輪迴失敗。</p><p>PS 如果要要使用 ssh 方式解決，我是沒有成功過若有興趣可以嘗試看看</p></div><h3 id="四、設定-Github-Actions-腳本"><a href="#四、設定-Github-Actions-腳本" class="headerlink" title="四、設定 Github Actions 腳本"></a>四、設定 Github Actions 腳本</h3><p>這邊我使用以下範本。原則上 <code>sma11black</code> 是可以成功發行，但是目前有在使用theme 且當初作者框架使用 stylus 寫前端會有跑板問題，建議使用 <code>marsen/hexo-action@v1.0.7</code> 這個作者是將最新的 node 加入在這個版本，目前只有他的可以到 1.0.7。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">Hexo</span> <span class="string">自動發行</span></span><br><span class="line"></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">branches:</span> [<span class="string">&quot;deploy&quot;</span>]</span><br><span class="line">  <span class="attr">pull_request:</span></span><br><span class="line">    <span class="attr">branches:</span> [<span class="string">&quot;deploy&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="attr">env:</span></span><br><span class="line">  <span class="attr">TZ:</span> <span class="string">&quot;Asia/Taipei&quot;</span></span><br><span class="line">  <span class="attr">USER_NAME:</span> <span class="string">github-actions[bot]</span></span><br><span class="line">  <span class="attr">USER_EMAIL:</span> <span class="number">41898282</span><span class="string">+github-actions[bot]@users.noreply.github.com</span></span><br><span class="line">  <span class="attr">DEPLOY_KEY:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.DEPLOY_KEY</span> <span class="string">&#125;&#125;</span></span><br><span class="line">  <span class="attr">Commit_MSG:</span> <span class="string">$&#123;&#123;</span> <span class="string">github.event.head_commit.message</span> <span class="string">&#125;&#125;</span></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">build:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">Deploy</span> <span class="string">Hexo</span> <span class="string">Blog</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/checkout@v4</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">submodules:</span> <span class="literal">true</span> <span class="comment"># Checkout private submodules(themes or something else).</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Timezone</span> <span class="string">set</span> <span class="string">Asia/Taipei</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">sudo</span> <span class="string">timedatectl</span> <span class="string">set-timezone</span> <span class="string">&#x27;Asia/Taipei&#x27;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Cache</span> <span class="string">node</span> <span class="string">modules</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/cache@v4</span></span><br><span class="line">        <span class="attr">id:</span> <span class="string">cache</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">path:</span> <span class="string">node_modules</span></span><br><span class="line">          <span class="attr">key:</span> <span class="string">$&#123;&#123;</span> <span class="string">runner.os</span> <span class="string">&#125;&#125;-node-$&#123;&#123;</span> <span class="string">hashFiles(&#x27;**/package-lock.json&#x27;)</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">restore-keys:</span> <span class="string">|</span></span><br><span class="line"><span class="string">            $&#123;&#123; runner.os &#125;&#125;-node-</span></span><br><span class="line"><span class="string"></span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Install</span> <span class="string">Dependencies</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">npm</span> <span class="string">version</span> <span class="string">&amp;&amp;</span> <span class="string">npm</span> <span class="string">ci</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Hexo</span> <span class="string">Deploy</span></span><br><span class="line">        <span class="attr">id:</span> <span class="string">deploy</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">marsen/hexo-action@v1.0.7</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">deploy_key:</span> <span class="string">$&#123;&#123;</span> <span class="string">env.DEPLOY_KEY</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">user_email:</span> <span class="string">$&#123;&#123;</span> <span class="string">env.USER_EMAIL</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">commit_msg:</span> <span class="string">$&#123;&#123;</span> <span class="string">env.Commit_MSG</span> <span class="string">&#125;&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><div class="note info simple"><h4 id="補充-區域時間"><a href="#補充-區域時間" class="headerlink" title="補充 : 區域時間"></a>補充 : 區域時間</h4><p>先前有另外爬文設定時區作法可以設定參數，這樣就不會去抓預設地區時間。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">env:</span></span><br><span class="line">  <span class="attr">TZ:</span> <span class="string">&quot;Asia/Taipei&quot;</span></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">build:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">Deploy</span> <span class="string">Hexo</span> <span class="string">Blog</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Timezone</span> <span class="string">set</span> <span class="string">Asia/Taipei</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">sudo</span> <span class="string">timedatectl</span> <span class="string">set-timezone</span> <span class="string">&#x27;Asia/Taipei&#x27;</span></span><br></pre></td></tr></table></figure></div><hr><h2 id="使用-butterfly-須知"><a href="#使用-butterfly-須知" class="headerlink" title="使用 butterfly 須知"></a>使用 butterfly 須知</h2><p>如果要使用 actions 且又使用 butterfly 務必要看這段內容，否則又會在卡關一次。因為作者是使用 ruby 撰寫前端，所以要用hexo 要記得下以下內容</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-renderer-pug hexo-renderer-stylus --save</span><br><span class="line">npm install hexo-renderer-jade --save</span><br></pre></td></tr></table></figure><p>主要原因是當發行時候會出現 <code>extends includes/layout.pug block content include ./includes/mixins/post-ui.pug #recent-posts.recent-posts +postUI include includes/pagination.pug</code>，這時候記得使用這兩個語法就可以解決。</p><h2 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h2><p>這段是我花最久時間寫一篇文章，主要原因是不看任何資訊猛幹狂幹，幹不出來跑去爬文看來我又要重新學習一次 github actions。</p>]]></content>
      
      
      <categories>
          
          <category> 筆記 </category>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HEXO </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【前端】pnpm vs npm</title>
      <link href="/2024/03/30/%E5%89%8D%E7%AB%AF%E6%8A%80%E8%A1%93/%E3%80%90%E5%89%8D%E7%AB%AF%E3%80%91pnpm%20vs%20npm/"/>
      <url>/2024/03/30/%E5%89%8D%E7%AB%AF%E6%8A%80%E8%A1%93/%E3%80%90%E5%89%8D%E7%AB%AF%E3%80%91pnpm%20vs%20npm/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>近期為了想要調整 bloger 環境，發現近期除了使用yarn外，還有一個新的package manager - pnpm，讓我非常好奇這東西作用以及與npm的差異，因此決定來做一個比較。</p><hr><h2 id="npm-vs-pnpm"><a href="#npm-vs-pnpm" class="headerlink" title="npm vs pnpm"></a>npm vs pnpm</h2><h3 id="1-1-簡介"><a href="#1-1-簡介" class="headerlink" title="1-1 簡介"></a>1-1 簡介</h3><p>基本上，不論是官方網與其他網站介紹，pnpm都是一個快速、簡單的Node.js套件管理工具，它使用硬連結和符號連結來減少磁碟空間的使用，並且可以在安裝套件時共享它們。如果要讓 pnpm 使用在 npm 是完全可以不用任何學習語法&#x2F;指令，因為他們的指令是幾乎一樣的。</p><p><img src="/image/20240330_22-46-45.png" alt="npm vs pnpm 比較圖"></p><p>pnpm 最大特點是創建一個共享儲存位置並將它們鏈接到項目，提升了安裝速度，減少了磁盤空間的使用，解決了 npm 暫取專案的主要原因。</p><h4 id="1-1-1-pnpm"><a href="#1-1-1-pnpm" class="headerlink" title="1-1-1 pnpm"></a>1-1-1 pnpm</h4><p>pnpm（Performant Node Package Manager）是一個快速、簡單的Node.js套件管理工具，它使用硬連結和符號連結來減少磁碟空間的使用，並且可以在安裝套件時共享它們。npm 的一個缺點是它可能會導致依賴項的重複安裝，這會佔用大量的磁盤空間，特別是在同一台機器上運行多個項目時。這也可能導致安裝時間較長，因為每個項目都需要安裝其自己的依賴項。</p><ol><li>它使用一個全局存儲庫來保存所有包，避免在項目之間重複包。</li><li>pnpm 是一個旨在優化磁盤空間使用和安裝時間的替代包管理器。</li><li>pnpm 不會複製依賴項，而是使用硬連結和符號連結在項目之間共享依賴項，從而減少磁盤空間的使用。</li><li>pnpm 還提供了平面的依賴結構，這意味著沒有嵌套的 node_modules 目錄。</li></ol><h4 id="1-1-2-npm"><a href="#1-1-2-npm" class="headerlink" title="1-1-2 npm"></a>1-1-2 npm</h4><p>npm（Node Package Manager） 是一個用於 Node.js 的包管理器，它允許開發人員在其項目中安裝、更新和管理依賴項。</p><ol><li>它將每個包單獨安裝在項目的 node_modules 目錄中。</li><li>npm 是 Node.js 的默認包管理器，並隨 Node.js 安裝一起提供。</li><li>npm 依賴於嵌套的依賴樹，其中每個包都可以擁有自己的依賴項。</li><li>這可能導致依賴關係在項目之間重複，佔用更多的磁盤空間。</li></ol><h5 id="【備註】node-安裝-pnpm"><a href="#【備註】node-安裝-pnpm" class="headerlink" title="【備註】node 安裝 pnpm"></a>【備註】node 安裝 pnpm</h5><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//--- 安裝 ---//</span><br><span class="line">npm install -g pnpm</span><br></pre></td></tr></table></figure><h4 id="1-1-3-兩者區別"><a href="#1-1-3-兩者區別" class="headerlink" title="1-1-3 兩者區別"></a>1-1-3 兩者區別</h4><ol><li>磁盤空間：由於使用單個全局存儲和鏈接而不是副本，pnpm 通常比 npm 佔用更少的磁盤空間。</li><li>安裝時間：在某些情況下，尤其是在安裝跨多個共享常見依賴項的依賴項時，pnpm 可能會更快。</li><li>兼容性：儘管 npm 是默認的包管理器並且廣泛支持，但由於其不同的方法，pnpm 可能需要進行調整或額外的配置。</li><li>工作流整合：一些開發人員可能會因為熟悉度和生態系統支持而選擇 npm，而其他人可能會發現 pnpm 的性能優勢超過任何整合問題。</li></ol><hr><h3 id="2-1-安裝大小比較"><a href="#2-1-安裝大小比較" class="headerlink" title="2-1 安裝大小比較"></a>2-1 安裝大小比較</h3><p>目前要驗證的是安裝大小，因此我們先來看看兩者的安裝大小。</p><h4 id="2-1-1-npm-安裝大小"><a href="#2-1-1-npm-安裝大小" class="headerlink" title="2-1-1 npm 安裝大小"></a>2-1-1 npm 安裝大小</h4><p>現在我有一個小型專案，只用react輕型的小型專案並且使用npm安裝，目前容量占用為937MB (node_modules)。<br><img src="/image/20240330_23-07-02.png"></p><h4 id="2-1-2-pnpm-安裝大小"><a href="#2-1-2-pnpm-安裝大小" class="headerlink" title="2-1-2 pnpm 安裝大小"></a>2-1-2 pnpm 安裝大小</h4><p>接下來，我們使用pnpm來安裝相同的專案，看看他的容量占用為多少。</p><ul><li>安裝指令 : <code>pnpm install</code></li></ul><p><img src="/image/20240330_23-13-26.png"></p><p>可以看到，pnpm 安裝後的容量為 638MB，這是因為 pnpm 會將所有的套件安裝在全域的位置，並且使用硬連結和符號連結來減少磁碟空間的使用，並且可以在安裝套件時共享它們。後續專案安裝時，只會將相關的套件連結到專案中，因此不會重複安裝相同的套件。<br><img src="/image/20240330_23-15-30.png"></p>]]></content>
      
      
      <categories>
          
          <category> 前端技術 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pnpm </tag>
            
            <tag> npm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Git】活用Git與Azure DevOps(三) - Board 讓Issue、Task、Bug更有條理</title>
      <link href="/2024/02/03/DevOps/Git/Git_09_%E6%B4%BB%E7%94%A8Git%E8%88%87AzureDevOps%20(%E4%B8%89)%20/"/>
      <url>/2024/02/03/DevOps/Git/Git_09_%E6%B4%BB%E7%94%A8Git%E8%88%87AzureDevOps%20(%E4%B8%89)%20/</url>
      
        <content type="html"><![CDATA[<h2 id="一、DevOps-Board"><a href="#一、DevOps-Board" class="headerlink" title="一、DevOps Board"></a>一、DevOps Board</h2><p>使用 DevOps Board 可以針對 Task、Issue、Bug 進行管理，並且可以進行排序、篩選、分類等等的操作，讓開發流程更有條理。這工具不但可以免費也包含 Test Case 管理、Dashboard 等等功能，是一個非常好用的工具。</p><h3 id="1-1-Backlog-看資料"><a href="#1-1-Backlog-看資料" class="headerlink" title="1-1 Backlog 看資料"></a>1-1 Backlog 看資料</h3><p>很多時候為了看重點資料，通常會使用 Backlog 進行篩選，從圖片利用 User Story 往下展出 Task、Bug、Issue 進行篩選，可以看到不同的資料。如果利用 User Story 當作開發功能模組，底下 User、QA 等可以進行 Task 的分配，這樣就可以讓開發流程更有條理。<br><img src="/image/20240219_21-37-15.png"></p><h3 id="1-2-Board-設定工作項目"><a href="#1-2-Board-設定工作項目" class="headerlink" title="1-2 Board 設定工作項目"></a>1-2 Board 設定工作項目</h3><p>從看板我們可以設定 Task、Bug、Issue 以外還可以設定 Test 。Test 創建後可以轉變成 Test Case 進行管理。<br><img src="/image/20240219_21-55-50.png"></p><h4 id="1-3-Test-Case"><a href="#1-3-Test-Case" class="headerlink" title="1-3 Test Case"></a>1-3 Test Case</h4><p>Test Case 從 Boards 創建一個 User Story &gt; 加入 Test &gt; 創建測試案例，點選案例名稱就會導入在編輯畫面。透過編輯畫面可以設定測試案例的步驟、預期結果、備註等等。<br><img src="/image/20240219_22-48-34.png"><br><img src="/image/20240219_22-45-39.png"></p><p>當設定好測試腳本後，可以進入 Run Test 可以把剛才的腳本一筆筆測試、執行，若遇到錯誤可以直接在此畫面進行錯誤回報。<br><img src="/image/20240219_22-33-29.png"><br><img src="/image/20240219_22-46-23.png"></p><p>回報錯誤可以透過上面選項選擇 Create Bug，上面有其他上傳只有檔案可以使用其餘功能需要付費方式才能解決需求。<br><img src="/image/20240219_22-56-04.png"></p><h2 id="二、Test-Plan"><a href="#二、Test-Plan" class="headerlink" title="二、Test Plan"></a>二、Test Plan</h2><h3 id="2-1-Test-Plans"><a href="#2-1-Test-Plans" class="headerlink" title="2-1 Test Plans"></a>2-1 Test Plans</h3><p>從這裡面清單當中可以看到所有測試案例，可以透過這個畫面進行測試案例的管理。<br><img src="/image/20240219_22-59-57.png"></p><h3 id="2-2-Progress-report"><a href="#2-2-Progress-report" class="headerlink" title="2-2 Progress report"></a>2-2 Progress report</h3><p>不單只有清單可以看內建功能還有報表可以觀看，可以透過案例知道 Bug 遇到的問題，進行修正。<br><img src="/image/20240219_23-03-00.png"></p>]]></content>
      
      
      <categories>
          
          <category> DevOps </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DevOps </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Git】活用Git與Azure DevOps(二) - DevOps 權限</title>
      <link href="/2024/02/02/DevOps/Git/Git_09_%E6%B4%BB%E7%94%A8Git%E8%88%87AzureDevOps%20(%E4%BA%8C)%20/"/>
      <url>/2024/02/02/DevOps/Git/Git_09_%E6%B4%BB%E7%94%A8Git%E8%88%87AzureDevOps%20(%E4%BA%8C)%20/</url>
      
        <content type="html"><![CDATA[<h2 id="DevOps-權限"><a href="#DevOps-權限" class="headerlink" title="DevOps 權限"></a>DevOps 權限</h2><p>DevOps 有兩個地方設定權限。</p><ol><li>組織權限</li><li>專案權限</li></ol><h3 id="一、組織權限"><a href="#一、組織權限" class="headerlink" title="一、組織權限"></a>一、組織權限</h3><h4 id="1-1-進入方式"><a href="#1-1-進入方式" class="headerlink" title="1-1 進入方式"></a>1-1 進入方式</h4><ol><li>進入組織入口，點選左下角組織設定。</li><li>點選使用者並點選加入使用者</li></ol><p><img src="/image/20240202_23-16-39.png"><br><img src="/image/20240202_23-07-04.png"></p><h4 id="1-2-權限定義-access-level"><a href="#1-2-權限定義-access-level" class="headerlink" title="1-2 權限定義 access-level"></a>1-2 <a href="https://learn.microsoft.com/en-us/azure/devops/organizations/security/access-levels?view=azure-devops">權限定義 access-level</a></h4><ol><li>基本 Basic : 提供對大部分功能的存取，包括專案、存儲庫、建立和管理工作項目、建立和管理管道、建立和管理組織。</li><li>專案關係人 Stakeholder : 可指派給無數多個使用者免費使用。此權限不會造成任何費用，但是功能有限。</li><li>Visual Studio 訂閱者 : 指派給已經有 Visual Studio 訂用帳戶的使用者。</li></ol><p>詳細內容 : <a href="https://learn.microsoft.com/zh-tw/azure/devops/organizations/security/access-levels?view=azure-devops">Azure DevOps 服務的訪問層級</a></p><hr><h3 id="二、專案權限"><a href="#二、專案權限" class="headerlink" title="二、專案權限"></a>二、專案權限</h3><h4 id="2-1-進入方式"><a href="#2-1-進入方式" class="headerlink" title="2-1 進入方式"></a>2-1 進入方式</h4><ol><li>進入專案入口，點選左下角專案設定。</li><li>點選加入團隊(Teams)並且新增團隊<br><img src="/image/20240202_23-24-04.png"></li></ol><h4 id="2-2-設定群組權限"><a href="#2-2-設定群組權限" class="headerlink" title="2-2 設定群組權限"></a>2-2 設定群組權限</h4><p>設定群組類別位於 【Permissions】位置，可以設定群組的權限。可以設定群組的權限，例如：建立工作項目、建立管道、建立存儲庫等等。<br><img src="/image/20240202_23-26-33.png"></p><h4 id="2-3-設定個人權限"><a href="#2-3-設定個人權限" class="headerlink" title="2-3 設定個人權限"></a>2-3 設定個人權限</h4><p>設定個人權限類別位於 【Users】位置，可以設定個人的權限。可以設定個人的權限，例如：建立工作項目、建立管道、建立存儲庫等等。<br><img src="/image/20240202_23-26-55.png"><br><img src="/image/20240202_23-27-55.png"></p>]]></content>
      
      
      <categories>
          
          <category> DevOps </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DevOps </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Git】活用Git與Azure DevOps(一)-Git 常用指令</title>
      <link href="/2024/02/02/DevOps/Git/Git_09_%E6%B4%BB%E7%94%A8Git%E8%88%87AzureDevOps%20(%E4%B8%80)/"/>
      <url>/2024/02/02/DevOps/Git/Git_09_%E6%B4%BB%E7%94%A8Git%E8%88%87AzureDevOps%20(%E4%B8%80)/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>近期公司有個技術分享日，那我就簡單介紹一下 Git 比較使用的用法以及 Azure DevOps 的使用方式。</p><h3 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h3><p>Git 是一個分散式版本控制系統，比較常見GUI工具為 SourceTree、GitKraken、GitHub Desktop等等。</p><h4 id="1-Commit"><a href="#1-Commit" class="headerlink" title="1. Commit"></a>1. Commit</h4><h5 id="1-1-Commit-Amend"><a href="#1-1-Commit-Amend" class="headerlink" title="1-1 Commit Amend"></a>1-1 Commit Amend</h5><p>此指令是將最近一次提交可以再次編輯、添加、刪除剛才提交的文件。如果你在執行 git commit –amend 之前添加了新的更改到暫存區，那麼這個命令將創建一個新的提交，這個提交將包含原始提交的所有更改，以及新添加到暫存區的所有更改。</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit --amend</span><br></pre></td></tr></table></figure><h5 id="1-2-Undo-Last-Commit"><a href="#1-2-Undo-Last-Commit" class="headerlink" title="1-2 Undo Last Commit"></a>1-2 Undo Last Commit</h5><p>這個指令作用是撤回上一次的commit，但是會保留程式碼、Commit訊息，可在調整commit message後再次commit。</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset --soft HEAD^</span><br></pre></td></tr></table></figure><p><img src="/image/20240202_22-38-55.png"></p><h4 id="2-Reset"><a href="#2-Reset" class="headerlink" title="2. Reset"></a>2. Reset</h4><ol><li>Soft : 保留工作目錄、暫存區、commit，但是會把commit移除。</li><li>Mixed : 保留工作目錄、但是會把暫存區、commit移除。</li><li>Hard : 會把工作目錄、暫存區、commit都移除。</li></ol><p><img src="/image/20240202_22-46-02.png"></p><h4 id="3-Cherry-Pick"><a href="#3-Cherry-Pick" class="headerlink" title="3. Cherry-Pick"></a>3. Cherry-Pick</h4><p>cherry-pick 是一個 git 指令，可以將指定的 commit 從其他分支複製到目前的分支。這個做法可以用在很多情境，例如：當你在開發一個新功能的時候，發現你需要一個已經在其他分支上的 commit。</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git cherry-pick &lt;commit id&gt;</span><br></pre></td></tr></table></figure><p><img src="/image/20240202_22-47-03.png"> </p><h4 id="4-Rebase"><a href="#4-Rebase" class="headerlink" title="4. Rebase"></a>4. Rebase</h4><p>rebase 是一個 git 指令，可以將一個分支的 commit 移動到另一個分支上。這個指令可以用在很多情境，例如：當你在開發一個新功能的時候，發現你需要一個已經在其他分支上的 commit。</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git rebase &lt;branch name&gt;</span><br></pre></td></tr></table></figure><p><img src="/image/20240202_22-49-03.png"></p><h4 id="5-Stash"><a href="#5-Stash" class="headerlink" title="5. Stash"></a>5. Stash</h4><p>stash 是一個 git 指令，可以將目前的程式碼暫存起來，這個功能可以用在以下幾種情境。</p><ol><li>切 branch 之前功能尚未完成，但是又不想 commit</li><li>用解衝突方案</li></ol><h5 id="5-1-使用方式"><a href="#5-1-使用方式" class="headerlink" title="5-1 使用方式"></a>5-1 使用方式</h5><ol><li>存檔 : <code>git stash save &lt;message&gt;</code></li><li>查看 : <code>git stash list</code></li><li>取出&#x2F;套用 : <code>git stash pop &lt;stash id&gt;</code>、<code>git stash apply &lt;stash id&gt;</code></li><li>刪除 : <code>git stash drop &lt;stash id&gt;</code></li></ol><p>取出&#x2F;套用的差異在於 pop 會將 stash id 移除，apply 會保留 stash id。</p><h4 id="6-Tag"><a href="#6-Tag" class="headerlink" title="6. Tag"></a>6. Tag</h4><p>tag 是一個 git 指令，可以將目前的 commit 加上一個標籤，這個功能可以用在以下幾種情境。</p><ol><li>釋出版本</li><li>重要的commit</li></ol><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git tag &lt;tag name&gt;</span><br></pre></td></tr></table></figure><h4 id="7-Submodule"><a href="#7-Submodule" class="headerlink" title="7. Submodule"></a>7. Submodule</h4><p>submodule 是一個 git 指令，可以將其他專案加入到目前的專案中，這個功能可以用在以下幾種情境。</p><ol><li>共用的程式碼</li><li>共用的設定檔</li></ol><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git submodule add &lt;submodule link&gt;</span><br></pre></td></tr></table></figure><h4 id="9-WorkTree"><a href="#9-WorkTree" class="headerlink" title="9. WorkTree"></a>9. WorkTree</h4><p>worktree 是一個 git 指令，可以將目前的專案複製一份出來，這個功能可以用在以下幾種情境。</p><ol><li>同時開發多個分支</li><li>同時開發多個專案</li></ol><h5 id="9-1-使用方式"><a href="#9-1-使用方式" class="headerlink" title="9-1 使用方式"></a>9-1 使用方式</h5><ol><li>新增 : <code>git worktree add &lt;new branch name&gt;</code></li><li>刪除 : <code>git worktree remove &lt;new branch name&gt;</code></li><li>查看 : <code>git worktree list</code></li><li>移除 : <code>git worktree prune</code></li><li>移除所有 : <code>git worktree prune --all</code></li></ol><h5 id="9-2-注意事項"><a href="#9-2-注意事項" class="headerlink" title="9-2 注意事項"></a>9-2 注意事項</h5><ol><li>.git資訊內容是主體的path</li><li>主體的git repository不能切換已經有的worktree分支</li></ol><h4 id="10-Subtree"><a href="#10-Subtree" class="headerlink" title="10. Subtree"></a>10. <a href="https://blog.puckwang.com/posts/2020/git-submodule-vs-subtree/">Subtree</a></h4><p>subtree 是一個 git 指令，可以將其他專案加入到目前的專案中，這個功能可以用在以下幾種情境。</p><ol><li>共用的程式碼</li><li>共用的設定檔</li></ol><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git subtree add --prefix=&lt;prefix&gt; &lt;repository&gt; &lt;ref&gt;</span><br></pre></td></tr></table></figure><p><img src="/image/20240202_22-56-39.png"></p>]]></content>
      
      
      <categories>
          
          <category> DevOps </category>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【筆記】ngrok-http轉換https神器</title>
      <link href="/2024/02/01/%E7%AD%86%E8%A8%98%E8%88%87%E7%94%9F%E6%B4%BB%E9%9B%9C%E8%A8%98/%E6%8A%80%E8%A1%93/%E3%80%90%E7%AD%86%E8%A8%98%E3%80%91ngrok%20-%20http%20%E8%BD%89%E6%8F%9B%20https%20%E7%A5%9E%E5%99%A8%20/"/>
      <url>/2024/02/01/%E7%AD%86%E8%A8%98%E8%88%87%E7%94%9F%E6%B4%BB%E9%9B%9C%E8%A8%98/%E6%8A%80%E8%A1%93/%E3%80%90%E7%AD%86%E8%A8%98%E3%80%91ngrok%20-%20http%20%E8%BD%89%E6%8F%9B%20https%20%E7%A5%9E%E5%99%A8%20/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>相信不少有製作專案時候，面臨不少有管https的問題 ，例如 Line Bot (message api)、影像識別等。必需要https 才能使用，ngrok會將成為專案救星。<br>如果是使用 windows 以外系統，建議配合其他資料參考。</p><h1 id="ngrok"><a href="#ngrok" class="headerlink" title="ngrok"></a><a href="https://ngrok.com/">ngrok</a></h1><p>ngrok 是一個可以將內網伺服器與對外伺服器溝通的服務。ngrok 可以把外界的請求轉發到你指定的 Port，使用的背景原理是連接到 ngrok 雲端伺服器，將你本機指定的地址公開，再將由 ngrok 一串公開的網址來存取內容。</p><hr><h2 id="ngrok-1"><a href="#ngrok-1" class="headerlink" title="ngrok"></a>ngrok</h2><h3 id="一、安裝"><a href="#一、安裝" class="headerlink" title="一、安裝"></a>一、安裝</h3><p>註冊部分請各位自行去註冊。</p><p>進入ngrok網站後，會需要進行安裝的動作，點擊<a href="https://bin.equinox.io/c/bNyj1mQVY4c/ngrok-v3-stable-windows-amd64.zip">ngrok.exe</a>即可。</p><p>存放位置沒有特別限制，這邊我存放路徑為 <code>C:\Windows\System32</code> 給各位參考。<br><img src="/img/Note/ngrok/Snipaste_2022-08-11_21-01-27.png"></p><p>接下來要加入 authtoken 這邊需要複製網站上提供的指令並貼在command 裡面。</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ngrok config add-authtoken xxxxxxx</span><br></pre></td></tr></table></figure><p><img src="/img/Note/ngrok/Snipaste_2022-08-11_21-24-50.png"></p><p>完成後，可以輸入<code>ngrok help </code>先看看指令。官方網所提供如果要開啟 port 80 必須要輸入<code>ngrok http 80</code>。</p><h3 id="二、執行"><a href="#二、執行" class="headerlink" title="二、執行"></a>二、執行</h3><p>ngrok其實有三種種做法。</p><ol><li>單一開啟</li><li>多個開啟</li><li>全部開啟</li></ol><p>依據專案開放測試，可能遇到串接問題需要兩個https 同時存在就會需要開啟多個port來解決現況。</p><hr><h2 id="ngrok-使用方式"><a href="#ngrok-使用方式" class="headerlink" title="ngrok 使用方式"></a>ngrok 使用方式</h2><h3 id="一、多個開啟-yml"><a href="#一、多個開啟-yml" class="headerlink" title="一、多個開啟 (.yml)"></a>一、多個開啟 (.yml)</h3><p>加入憑證時候，其實可以看到已經有加入yml檔案，也就是設定檔案。設定部分需要透過<code>C:\Users\user\AppData\Local\ngrok</code>當中<code>ngrok.yml</code>設定。</p><p>預設通常會看到憑證、版本，接下來再輸入我們要哪些Port以及名稱。下方範例加入兩個port 以及 名稱，這樣設定部分就已經完成了。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;2&quot;</span></span><br><span class="line"><span class="attr">authtoken:</span> <span class="string">xxxxxxxxx</span></span><br><span class="line"><span class="attr">tunnels:</span></span><br><span class="line">  <span class="attr">LineBot:</span></span><br><span class="line">    <span class="attr">addr:</span> <span class="number">8000</span></span><br><span class="line">    <span class="attr">proto:</span> <span class="string">http</span></span><br><span class="line">    <span class="attr">host_header:</span> <span class="string">Localhost</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">LineAPI:</span></span><br><span class="line">    <span class="attr">addr:</span> <span class="number">8100</span></span><br><span class="line">    <span class="attr">proto:</span> <span class="string">http</span></span><br><span class="line">    <span class="attr">host_header:</span> <span class="string">Localhost</span></span><br></pre></td></tr></table></figure><p>設定完畢後，輸入指定名稱開起來即可，使用上也相當簡單許多。</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ngrok <span class="built_in">start</span> LineBot LineAPI</span><br></pre></td></tr></table></figure><h3 id="二、全部開啟"><a href="#二、全部開啟" class="headerlink" title="二、全部開啟"></a>二、全部開啟</h3><p>使用方式如同多個開啟一樣，必須要先設定yml 這個指令才會生效。</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ngrok <span class="built_in">start</span> --all</span><br></pre></td></tr></table></figure><h3 id="三、單一開啟"><a href="#三、單一開啟" class="headerlink" title="三、單一開啟"></a>三、單一開啟</h3><p>單一開啟有兩種做法，yml設定檔中的名稱以及指定port名稱。</p><h4 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h4><ol><li>啟用 : <code>ngrok start LineBot</code></li><li>指定port : <code>ngrok http 7777</code></li></ol>]]></content>
      
      
      <categories>
          
          <category> 筆記 </category>
          
          <category> 生活雜記 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ngrok </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【C#】今晚想來點 Clone Object</title>
      <link href="/2024/01/27/%E5%BE%8C%E7%AB%AF%E6%8A%80%E8%A1%93/CS/%E7%AD%86%E8%A8%98/CS_NOTE_05_%E5%A6%82%E4%BD%95Clone%E4%B8%80%E4%BB%BDoject/"/>
      <url>/2024/01/27/%E5%BE%8C%E7%AB%AF%E6%8A%80%E8%A1%93/CS/%E7%AD%86%E8%A8%98/CS_NOTE_05_%E5%A6%82%E4%BD%95Clone%E4%B8%80%E4%BB%BDoject/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>近期因為工作上關係 Blog 產量逐日下降，稍微少許時間來探討一些主題。近期遇到非常有趣的問題，因此想要來分享一下。</p><h3 id="事情經過"><a href="#事情經過" class="headerlink" title="事情經過"></a>事情經過</h3><p>發生在近期我為了要將 Object 複製一份到變數當中，並修改 temp 變數發現 EF 無法正常運作，但是我卻不知道為什麼，因此我就開始了我的 Debug 之旅。事件如下範例</p><p>程式碼初學者教導有個觀念就是，若要有變更變數的話，就要先複製一份出來，然後再進行變更，如下方範例</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">int</span> temp = a ;</span><br><span class="line">temp = <span class="number">2</span>;</span><br></pre></td></tr></table></figure><p>因此我就照著這個觀念，將 Object 複製一份出來，然後再進行變更發現不是預期的結果，如下方範例</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> A = <span class="keyword">new</span> Person() &#123; Name = <span class="string">&quot;A&quot;</span>, Age = <span class="number">10</span> &#125;;</span><br><span class="line"><span class="keyword">var</span> temp = A;</span><br><span class="line">temp.Age = <span class="number">20</span>;</span><br><span class="line">Console.WriteLine(<span class="string">$&quot;<span class="subst">&#123;A.Name&#125;</span> - <span class="subst">&#123;A.Age&#125;</span>&quot;</span>);</span><br><span class="line">Console.WriteLine(<span class="string">$&quot;<span class="subst">&#123;temp.Name&#125;</span> - <span class="subst">&#123;temp.Age&#125;</span>&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//output</span></span><br><span class="line"><span class="comment">//A - 20</span></span><br><span class="line"><span class="comment">//A - 20</span></span><br></pre></td></tr></table></figure><p>他會因為 temp 變數的 Age 變更，而導致 A 變數的 Age 也跟著變更，這時候我就開始思考，為什麼會這樣呢？我不是複製一份出來嗎？為什麼會變成這樣呢？</p><h3 id="為什麼會這樣呢？"><a href="#為什麼會這樣呢？" class="headerlink" title="為什麼會這樣呢？"></a>為什麼會這樣呢？</h3><p>為什麼會這樣呢？我們先來看看 C# 的變數型態，C# 的變數型態分為兩種，一種是 Value Type，一種是 Reference Type，Value Type 代表的是值型別，Reference Type 代表的是參考型別，Value Type 會將資料存放在 Stack 中，Reference Type 會將資料存放在 Heap 中，如下圖</p><p><img src="/image/20240128_00-05-59.png"></p><p>因此我們可以知道，Value Type 是將資料存放在 Stack 中，因此當我們將變數複製一份出來，就會將資料複製一份出來，因此我們可以看到下方範例，當我們將 a 變數複製一份出來，並且修改 temp 變數，a 變數並不會跟著變更，因為他們是分開存放的，因此我們可以知道 Value Type 是將資料複製一份出來，並且存放在 Stack 中，因此當我們修改 temp 變數，a 變數並不會跟著變更，如下方範例</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">int</span> temp = a ;</span><br><span class="line">temp = <span class="number">2</span>;</span><br><span class="line">Console.WriteLine(<span class="string">$&quot;<span class="subst">&#123;a&#125;</span> - <span class="subst">&#123;temp&#125;</span>&quot;</span>);</span><br><span class="line"><span class="comment">//output</span></span><br><span class="line"><span class="comment">//1 - 2</span></span><br></pre></td></tr></table></figure><p>但是 Reference Type 會將資料存放在 Heap 中，因此當我們將變數複製一份出來，並且修改 temp 變數，a 變數會跟著變更，因為他們是存放在同一個記憶體位置，因此我們可以知道 Reference Type 是將資料存放在 Heap 中，因此當我們修改 temp 變數，a 變數會跟著變更。因此我們可以知道，當我們將 Object 複製一份出來，並且修改 temp 變數，a 變數會跟著變更，因為他們是存放在同一個記憶體位置，因此我們可以知道，當我們將 Object 複製一份出來，並且修改 temp 變數，a 變數會跟著變更</p><h3 id="如何解決呢？"><a href="#如何解決呢？" class="headerlink" title="如何解決呢？"></a>如何解決呢？</h3><p>為了要解決萬惡的問題，我們可以使用 Clone 的方式，將 Object 複製一份出來。</p><h4 id="一、-Class-加入-Clone-方法"><a href="#一、-Class-加入-Clone-方法" class="headerlink" title="一、 Class 加入 Clone 方法"></a>一、 Class 加入 Clone 方法</h4><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> A = <span class="keyword">new</span> Person() &#123; Name = <span class="string">&quot;A&quot;</span>, Age = <span class="number">10</span> &#125;;</span><br><span class="line"><span class="keyword">var</span> temp = A.Clone();</span><br><span class="line">temp.Age = <span class="number">20</span>;</span><br><span class="line">Console.WriteLine(<span class="string">$&quot;<span class="subst">&#123;A.Name&#125;</span> - <span class="subst">&#123;A.Age&#125;</span>&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">Person</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Name &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> Age &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Person <span class="title">Clone</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Person() &#123; Name = <span class="keyword">this</span>.Name, Age = <span class="keyword">this</span>.Age &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="二、實作-ICloneable"><a href="#二、實作-ICloneable" class="headerlink" title="二、實作 ICloneable"></a>二、實作 ICloneable</h4><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//var temp = A.Clone(); &lt;-使用方式一樣</span></span><br><span class="line"><span class="keyword">class</span> <span class="title">Person</span>: <span class="title">ICloneable</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Name &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> Age &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">object</span> <span class="title">Clone</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Person() &#123; Name = <span class="keyword">this</span>.Name, Age = <span class="keyword">this</span>.Age &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="三、使用序列化"><a href="#三、使用序列化" class="headerlink" title="三、使用序列化"></a>三、使用序列化</h4><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//var temp = A.Clone(); &lt;-使用方式一樣</span></span><br><span class="line"><span class="keyword">class</span> <span class="title">Person</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Name &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> Age &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Person <span class="title">Clone</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> JsonConvert.DeserializeObject&lt;Person&gt;(JsonConvert.SerializeObject(<span class="keyword">this</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="四、使用-Reflection"><a href="#四、使用-Reflection" class="headerlink" title="四、使用 Reflection"></a>四、使用 Reflection</h4><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//var temp = A.Clone(); &lt;-使用方式一樣</span></span><br><span class="line"><span class="keyword">class</span> <span class="title">Person</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Name &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> Age &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Person <span class="title">Clone</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> clone = <span class="keyword">new</span> Person();</span><br><span class="line">        <span class="keyword">var</span> properties = <span class="keyword">this</span>.GetType().GetProperties();</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="keyword">var</span> property <span class="keyword">in</span> properties)</span><br><span class="line">        &#123;</span><br><span class="line">            property.SetValue(clone, property.GetValue(<span class="keyword">this</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> clone;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="五、使用-MemberwiseClone"><a href="#五、使用-MemberwiseClone" class="headerlink" title="五、使用 MemberwiseClone"></a>五、使用 MemberwiseClone</h4><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//var temp = A.Clone(); &lt;-使用方式一樣</span></span><br><span class="line"><span class="keyword">class</span> <span class="title">Person</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Name &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> Age &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Person <span class="title">Clone</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> (Person)<span class="keyword">this</span>.MemberwiseClone();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h3><p>其實這問題觀念都是基礎觀念，但是我們在實作上，很容易忽略這些觀念，因此我們在實作上，一定要注意這些觀念，才不會發生離奇的問題。</p>]]></content>
      
      
      <categories>
          
          <category> 後端技術 </category>
          
          <category> C# </category>
          
          <category> 筆記 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【筆記】Windows 11 不再支援任務欄部分功能</title>
      <link href="/2024/01/23/%E7%AD%86%E8%A8%98%E8%88%87%E7%94%9F%E6%B4%BB%E9%9B%9C%E8%A8%98/%E7%94%9F%E6%B4%BB/%E3%80%90%E7%AD%86%E8%A8%98%E3%80%91Windows%2011%20%E4%B8%8D%E5%86%8D%E6%94%AF%E6%8F%B4%E4%BB%BB%E5%8B%99%E6%AC%84%E9%83%A8%E5%88%86%E5%8A%9F%E8%83%BD/"/>
      <url>/2024/01/23/%E7%AD%86%E8%A8%98%E8%88%87%E7%94%9F%E6%B4%BB%E9%9B%9C%E8%A8%98/%E7%94%9F%E6%B4%BB/%E3%80%90%E7%AD%86%E8%A8%98%E3%80%91Windows%2011%20%E4%B8%8D%E5%86%8D%E6%94%AF%E6%8F%B4%E4%BB%BB%E5%8B%99%E6%AC%84%E9%83%A8%E5%88%86%E5%8A%9F%E8%83%BD/</url>
      
        <content type="html"><![CDATA[<h2 id="windows-11-不再支援任務欄部分功能"><a href="#windows-11-不再支援任務欄部分功能" class="headerlink" title="windows 11 不再支援任務欄部分功能"></a>windows 11 不再支援任務欄部分功能</h2><p>2021&#x2F;10 微軟將任務欄中的行事曆移除，並且不再支援任務欄中的小工具，這對於習慣使用的人來說是一大打擊。目前微軟提供 Outlook 行事曆 App 來取代原本的行事曆，而通知訊息透過小工具加入。</p><h2 id="參考文章"><a href="#參考文章" class="headerlink" title="參考文章"></a>參考文章</h2><ul><li><a href="https://zhuanlan.zhihu.com/p/403794908">Windows 11 不再支援任務欄部分功能</a></li><li><a href="https://answers.microsoft.com/zh-hans/insider/forum/all/windows-11/f3fc87b3-c6ce-40ed-acc1-e637b5e67030">windows 11 小组件待办事项和日历无法正常显示</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 筆記 </category>
          
          <category> 生活雜記 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>【筆記】現金管理</title>
      <link href="/2024/01/14/%E7%AD%86%E8%A8%98%E8%88%87%E7%94%9F%E6%B4%BB%E9%9B%9C%E8%A8%98/%E7%94%9F%E6%B4%BB/%E3%80%90%E7%AD%86%E8%A8%98%E3%80%91%E7%8F%BE%E9%87%91%E7%AE%A1%E7%90%86/"/>
      <url>/2024/01/14/%E7%AD%86%E8%A8%98%E8%88%87%E7%94%9F%E6%B4%BB%E9%9B%9C%E8%A8%98/%E7%94%9F%E6%B4%BB/%E3%80%90%E7%AD%86%E8%A8%98%E3%80%91%E7%8F%BE%E9%87%91%E7%AE%A1%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h2 id="現金管理"><a href="#現金管理" class="headerlink" title="現金管理"></a>現金管理</h2><p>近期將之前的現金管理講在整理一次。近年來因為有第三支付、網購、信用卡等等，比較現金管控會比較少，但是現金管理還是很重要的，因為現金管理可以讓你知道自己的花費狀況，也可以讓你知道自己的錢花在哪裡。</p><h3 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h3><ol><li>資金管控 : 現金管理可以讓你知道自己的花費狀況，也可以讓你知道自己的錢花在哪裡。</li><li>提款便利性 : ATM 各家銀行多寡會偏向使用或是使用數位帳戶解決提領手續費。</li><li>資金移轉 : 部分資金都是透過數位帳戶優惠方案，可以讓資金移轉更加方便。</li><li>資金租稅管控 : 部分使用者會透過其中銀行帳戶來作為繳費使用。</li></ol><h2 id="管理方式"><a href="#管理方式" class="headerlink" title="管理方式"></a>管理方式</h2><h3 id="一、存款機構"><a href="#一、存款機構" class="headerlink" title="一、存款機構"></a>一、存款機構</h3><p>存放機構是可以將錢存放特定地方。</p><ol><li>商業銀行 </li><li>郵局</li><li>信用合作社</li><li>農漁會信用部</li></ol><h3 id="二、非存款機構"><a href="#二、非存款機構" class="headerlink" title="二、非存款機構"></a>二、非存款機構</h3><p>非存款機構是可以將錢存放特定地方，往往回饋率會依據市場狀況而有所不同。</p><ol><li>投資信託公司</li><li>證券經紀商</li><li>保險公司</li><li>虛擬貨幣</li></ol><h3 id="三、目前現金理財金融工具"><a href="#三、目前現金理財金融工具" class="headerlink" title="三、目前現金理財金融工具"></a>三、目前現金理財金融工具</h3><ol><li>活存儲蓄存款</li><li>定期存款</li><li>支票存款</li><li>外幣存款</li><li>虛擬貨幣</li></ol><hr><h2 id="貨幣價值"><a href="#貨幣價值" class="headerlink" title="貨幣價值"></a>貨幣價值</h2><h3 id="一、貨幣終值"><a href="#一、貨幣終值" class="headerlink" title="一、貨幣終值"></a>一、貨幣終值</h3><p>貨幣終值是生涯理財規劃的最佳運用，是透過利率(投資報酬率)已知情況下，需要幾年才能達到目標金額。</p><h3 id="二、複利效果"><a href="#二、複利效果" class="headerlink" title="二、複利效果"></a>二、複利效果</h3><p>將金錢存入銀行定存帳戶中，主要定存存款有固定利息收入，且利息還能再生利息。</p><h3 id="三、貨幣現值"><a href="#三、貨幣現值" class="headerlink" title="三、貨幣現值"></a>三、貨幣現值</h3><p>貨幣現值常用來討論通膨，對財富購買影響效果。</p><h3 id="四、折現率"><a href="#四、折現率" class="headerlink" title="四、折現率"></a>四、折現率</h3><p>以未來貨幣折算成貨幣現在價值的利率</p><h3 id="五、年金"><a href="#五、年金" class="headerlink" title="五、年金"></a>五、年金</h3><p>利用定額方式投資固定資金之後一定時間一次領回本利合的方式。</p><ol><li>年金終值 : 如基金投資、國民年金到期值</li><li>年金現值 : 利用分期方式分配利息、還款時間計算該攤還多少錢</li></ol>]]></content>
      
      
      <categories>
          
          <category> 筆記 </category>
          
          <category> 生活雜記 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>【心得】 回顧2023年心路歷程</title>
      <link href="/2023/12/31/%E7%AD%86%E8%A8%98%E8%88%87%E7%94%9F%E6%B4%BB%E9%9B%9C%E8%A8%98/%E7%94%9F%E6%B4%BB/%E3%80%90%E5%BF%83%E5%BE%97%E3%80%91%20%E5%9B%9E%E9%A1%A72023%E5%B9%B4%E5%BF%83%E8%B7%AF%E6%AD%B7%E7%A8%8B/"/>
      <url>/2023/12/31/%E7%AD%86%E8%A8%98%E8%88%87%E7%94%9F%E6%B4%BB%E9%9B%9C%E8%A8%98/%E7%94%9F%E6%B4%BB/%E3%80%90%E5%BF%83%E5%BE%97%E3%80%91%20%E5%9B%9E%E9%A1%A72023%E5%B9%B4%E5%BF%83%E8%B7%AF%E6%AD%B7%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<p>2023 即將結束，我也要開始統計自己今年為自己提升、改變什麼吧!</p><h2 id="2023-心路歷程"><a href="#2023-心路歷程" class="headerlink" title="2023 心路歷程"></a>2023 心路歷程</h2><p>從2023開始心態已經不像當初有動力去研究新型東西，原因是當技術學習一個門檻之後，許多東西可能會限制，例如: 金錢、時間、環境、科技衝擊等等。今年不斷位置自己突破技能，過程開發技術上還是沒辦法到達心目中的等級。中間花一些時間與同事閒聊一些技術，被點醒很多技術若願意花一些費用、時間研究，會比自己花時間研究還要快速，例如 github copilot 、AI 等等。</p><h3 id="空窗期"><a href="#空窗期" class="headerlink" title="空窗期"></a>空窗期</h3><p>再 2023 過後我開始進行休閒活動，為了讓自己可以讓自己的心情放鬆，不斷的進行休閒活動，例如: 看電影、看書、運動、旅遊、打電動等等。另外，為自己開設蝦皮、露天、youtube、discord 論壇等等，讓自己有不同發想、測試是否有API、檢討、解析他們的網站。</p><h3 id="DevOps"><a href="#DevOps" class="headerlink" title="DevOps"></a>DevOps</h3><p>之前為了自己能力不足，不斷的學習 DevOps 相關技術，例如: Azure DevOps、Github Actions、Docker、CI&#x2F;CD、自動化測試、自動化部屬等等。這些技術都是為了讓自己能力更加強大，不斷的學習、研究，讓自己能力更加強大。之後再分享製作 e2e 測試使用方式。</p><h3 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h3><p>總結這一年算是過的很充實，學習的技術沒有比去年還要多，但過程中與同事之間討論過去的技術、研究新技術，讓自己有方向可以研究以及管理方面。近期也要開始為自己找幾個考試目標來定，讓自己不要圍繞在同一個技術上，不斷的學習新技術。</p><h2 id="祝各位新年快樂，新的一年新氣象。"><a href="#祝各位新年快樂，新的一年新氣象。" class="headerlink" title="祝各位新年快樂，新的一年新氣象。"></a>祝各位新年快樂，新的一年新氣象。</h2><h2 id="2023-達成成就"><a href="#2023-達成成就" class="headerlink" title="2023 達成成就"></a>2023 達成成就</h2><h3 id="個人成就"><a href="#個人成就" class="headerlink" title="個人成就"></a>個人成就</h3><ol><li>Blog 達成 200 篇以上、訪問人數 13115 人、訪客數 9950 人</li><li>今年完成最高出國次數 (日、香港、澳門)、完成金馬自由行</li><li>Youtube 已經達到 60 訂閱數以上<br><img src="/image/20231231_19-51-08.png"></li></ol><h3 id="技術成就"><a href="#技術成就" class="headerlink" title="技術成就"></a>技術成就</h3><ol><li>2FA </li><li>Angular 進階&#x2F;基礎</li><li>React 基礎使用</li><li>git Diff &#x2F; Diff2Html 以及腳本</li><li>VBA </li><li>Azure DevOps - 自動化部屬、自動化測試、Board 管理</li><li>github copilot </li><li>Discord Bot - 發科技新聞、遊戲、Blog 排程</li><li>IFTT - 自動化排程、Yotube 通知</li></ol>]]></content>
      
      
      <categories>
          
          <category> 筆記 </category>
          
          <category> 生活雜記 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>【CSS】before、after 使用方式</title>
      <link href="/2023/12/31/%E5%89%8D%E7%AB%AF%E6%8A%80%E8%A1%93/CSS/%E3%80%90CSS%E3%80%91before%E3%80%81after%E4%BD%BF%E7%94%A8%E6%96%B9%E5%BC%8F/"/>
      <url>/2023/12/31/%E5%89%8D%E7%AB%AF%E6%8A%80%E8%A1%93/CSS/%E3%80%90CSS%E3%80%91before%E3%80%81after%E4%BD%BF%E7%94%A8%E6%96%B9%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="定義"><a href="#定義" class="headerlink" title="定義"></a>定義</h2><ul><li>::before 原本的元素[之前]加 入內容</li><li>::after 原本的元素[之後]加 入內容</li></ul><h3 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h3><ul><li>使用時，需要加上content 才能使用</li><li>產生出來虛擬元素為inline特性。無法控制寬、高、行距</li><li>有關SEO內容，不應該放在content內</li><li>content:搜尋引擎找不倒裡面的文字</li><li>可以減少HTML標籤數量，相對也加重瀏覽器的渲染區塊</li></ul><h4 id="偽元素"><a href="#偽元素" class="headerlink" title="偽元素"></a>偽元素</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@charset</span> <span class="string">&quot;UTF-8&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line"><span class="attribute">background-color</span>: yellowgreen;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">500px</span>;</span><br><span class="line"><span class="attribute">padding</span>: <span class="number">15px</span>;</span><br><span class="line"><span class="attribute">margin-left</span>: auto;</span><br><span class="line"><span class="attribute">margin-right</span>: auto;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line"><span class="attribute">content</span>: <span class="string">&quot;我是 before&quot;</span>;</span><br><span class="line"><span class="attribute">background-color</span>: pink;</span><br><span class="line"><span class="attribute">display</span>: block;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line"><span class="attribute">content</span>: <span class="string">&quot;我是 after&quot;</span>;</span><br><span class="line"><span class="attribute">background-color</span>: wheat;</span><br><span class="line"><span class="attribute">display</span>: block;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="反轉"><a href="#反轉" class="headerlink" title="反轉"></a>反轉</h4><div class="tabs" id="temp"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#temp-1">Html</button></li><li class="tab"><button type="button" data-href="#temp-2">css</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="temp-1"><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;base&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;base-text&quot;</span>&gt;</span>text<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;base-photo&quot;</span>&gt;</span>photo<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;base flip&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;base-text&quot;</span>&gt;</span>text<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;base-photo&quot;</span>&gt;</span>photo<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;base&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;base-text&quot;</span>&gt;</span>text<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;base-photo&quot;</span>&gt;</span>photo<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;base flip&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;base-text&quot;</span>&gt;</span>text<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;base-photo&quot;</span>&gt;</span>photo<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="temp-2"><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@charset</span> <span class="string">&quot;utf-8&quot;</span>;</span><br><span class="line"></span><br><span class="line">*,</span><br><span class="line">*<span class="selector-pseudo">::before</span>,</span><br><span class="line">*<span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">    <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.flip</span> <span class="selector-class">.base-text</span> &#123;</span><br><span class="line">    <span class="attribute">float</span>: right;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.flip</span> <span class="selector-class">.base-photo</span> &#123;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.base</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">1200px</span>;</span><br><span class="line">    <span class="attribute">margin-left</span>: auto;</span><br><span class="line">    <span class="attribute">margin-right</span>: auto;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.base</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">clear</span>: both;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.base-text</span>,</span><br><span class="line"><span class="selector-class">.base-photo</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">15px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.base-text</span> &#123;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">    <span class="attribute">background-color</span>: yellowgreen;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.base-photo</span> &#123;</span><br><span class="line">    <span class="attribute">float</span>: right;</span><br><span class="line">    <span class="attribute">background-color</span>: pink;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><p><img src="/image/20231231_19-34-59.png"></p><h4 id="麵包屑"><a href="#麵包屑" class="headerlink" title="麵包屑"></a>麵包屑</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* @charset &quot;utf-8&quot;; */</span></span><br><span class="line"><span class="comment">/* Base */</span></span><br><span class="line">* &#123;</span><br><span class="line">    <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">font-family</span>: Arial, Helvetica, <span class="string">&quot;微軟正黑體&quot;</span>, sans-serif;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">15px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.breadcrumb</span>&#123;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">margin-bottom</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.breadcrumb__item</span> <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#2ea3f2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.breadcrumb__item</span> + <span class="selector-class">.breadcrumb__item</span><span class="selector-pseudo">::before</span>&#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">&quot;»&quot;</span>;</span><br><span class="line">    <span class="attribute">margin-right</span>: <span class="number">3px</span>;</span><br><span class="line">    <span class="attribute">color</span>:<span class="number">#aaa</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.breadcrumb__item</span> <span class="selector-tag">a</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#aaa</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端技術 </category>
          
          <category> css </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【前端】前後端定位、介紹</title>
      <link href="/2023/12/31/%E5%89%8D%E7%AB%AF%E6%8A%80%E8%A1%93/%E3%80%90%E5%89%8D%E7%AB%AF%E3%80%91%E5%89%8D%E5%BE%8C%E7%AB%AF%E5%AE%9A%E4%BD%8D%E3%80%81%E4%BB%8B%E7%B4%B9/"/>
      <url>/2023/12/31/%E5%89%8D%E7%AB%AF%E6%8A%80%E8%A1%93/%E3%80%90%E5%89%8D%E7%AB%AF%E3%80%91%E5%89%8D%E5%BE%8C%E7%AB%AF%E5%AE%9A%E4%BD%8D%E3%80%81%E4%BB%8B%E7%B4%B9/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>近期與友人提到前後端定位後，發現友人對於前端的認知不是很清楚，因此我就想要寫一篇文章來介紹一下前端的基本知識，讓大家對於前端有一個基本的認知。</p><hr><h2 id="甚麼是前端？"><a href="#甚麼是前端？" class="headerlink" title="甚麼是前端？"></a>甚麼是前端？</h2><p>前端是指網頁的前端，也就是網頁的使用者介面，包含了網頁的內容、結構和外觀等等，主要是使用 HTML、CSS 和 JavaScript 來實現。</p><p>前端有工作有以下幾種：</p><ol><li>前端設計師 (UI &#x2F; UX&#x2F; RWD)</li><li>前端工程師 (實現畫面、多複雜功能、排版等)</li></ol><p>依據工作內容定義上還是有落差，也可以稍微專注 104 資訊上的職缺，來了解前端工程師的工作內容。</p><hr><h2 id="網站三兄弟"><a href="#網站三兄弟" class="headerlink" title="網站三兄弟"></a>網站三兄弟</h2><p>網站的前端主要由三種技術組成，分別是 HTML、CSS 和 JavaScript，這三種技術各司其職，共同組成了一個完整的網站。</p><h3 id="1-HTML"><a href="#1-HTML" class="headerlink" title="1. HTML"></a>1. HTML</h3><p>HTML 是 HyperText Markup Language 的縮寫，中文翻譯為超文本標記語言，是一種用於建立網頁的標準標記語言，它描述了網頁的結構，並且使用標籤來標示網頁上的不同內容，包括 元素(Elements)、標籤(Tag)、內容(Content)，例如標題、段落、表格、圖片等等。</p><h3 id="2-CSS"><a href="#2-CSS" class="headerlink" title="2. CSS"></a>2. CSS</h3><p>CSS 是 Cascading Style Sheets 的縮寫，中文翻譯為層疊樣式表，它是一種用於定義網頁內容樣式的語言，它可以控制網頁的字體、顏色、間距、邊框、背景等等。</p><h3 id="3-JavaScript"><a href="#3-JavaScript" class="headerlink" title="3. JavaScript"></a>3. JavaScript</h3><p>JavaScript 是一種腳本語言，它可以用來實現網頁上的動態效果和行為，例如網頁上的按鈕點擊、表單驗證、動畫效果等等。</p><h3 id="簡單來說"><a href="#簡單來說" class="headerlink" title="簡單來說"></a>簡單來說</h3><p>製作網站不用想太複雜，前端就像是一個建築師一樣請告訴程式碼你想要的樣子，程式碼就會幫你實現。</p><ul><li>HTML : 結構 &#x2F; 鷹架</li><li>CSS : 外觀 &#x2F; 裝潢</li><li>JavaScript : 行為 &#x2F; 動作 &#x2F; 互動</li></ul><p>如果多樣性就會依據不同的需求，來使用不同的技術來實現。</p><h2 id=""><a href="#" class="headerlink" title=""></a><img src="/image/20231231_19-19-36.png"></h2><h2 id="後端與前端主要定位"><a href="#後端與前端主要定位" class="headerlink" title="後端與前端主要定位"></a>後端與前端主要定位</h2><p>當然很多人會問，前端與後端的定位是什麼？我們可以簡單的來看一下，前端與後端的定位。</p><h3 id="1-前端"><a href="#1-前端" class="headerlink" title="1. 前端"></a>1. 前端</h3><p>前端主要是使用者介面，也就是網頁的使用者看到的畫面。每個建築商都會想把自己的建築物打造的漂亮，因此前端的定位就是把網頁打造的漂亮，讓使用者有好的體驗&#x2F;舒適感，例如 UI&#x2F;UX&#x2F;RWD。</p><h3 id="2-後端"><a href="#2-後端" class="headerlink" title="2. 後端"></a>2. 後端</h3><p>後端主要是網頁的功能，也就是網頁的使用者可以使用進階的功能。後端請像是IOT的智慧家庭，可以控制家電，例如：開燈、關燈、調整溫度等等，不見得一定為這功能去家設定。</p><h3 id="總結前後端定位"><a href="#總結前後端定位" class="headerlink" title="總結前後端定位"></a>總結前後端定位</h3><p>簡單來說，前端是房屋後端是家電，為了讓屋主可以住得舒適，前端就會把房屋打造的漂亮，後端就會把家電的功能實現讓住家可以達到便利。</p><hr><h2 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h2><p>照這樣定位有人提問是不是後端不必要加入，這有兩種情況只需要前端就可以：</p><ol><li>介紹、個人網站、行銷網站</li><li>低成本、低預算、低維護</li></ol><p>光前端預算上就會比較高，因為前端需要設計師、工程師、維護人員，而後端只需要工程師、維護人員，因此如果是低成本、低預算、低維護的網站，就可以只使用前端。</p><p>後面人們都需求越來越多，就會需要用到後端的彈性來解決前端不足的問題，例如：購物網站、社群網站、論壇網站等等。</p>]]></content>
      
      
      <categories>
          
          <category> 前端技術 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> html </tag>
            
            <tag> css </tag>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【筆記】VSC - 將 OhMyPosh 加入終端機內</title>
      <link href="/2023/12/31/%E7%AD%86%E8%A8%98%E8%88%87%E7%94%9F%E6%B4%BB%E9%9B%9C%E8%A8%98/%E6%8A%80%E8%A1%93/%E3%80%90%E7%AD%86%E8%A8%98%E3%80%91VSC%20%E5%B0%87OhMyPosh%20%E5%8A%A0%E5%85%A5%E7%B5%82%E7%AB%AF%E6%A9%9F%E5%85%A7/"/>
      <url>/2023/12/31/%E7%AD%86%E8%A8%98%E8%88%87%E7%94%9F%E6%B4%BB%E9%9B%9C%E8%A8%98/%E6%8A%80%E8%A1%93/%E3%80%90%E7%AD%86%E8%A8%98%E3%80%91VSC%20%E5%B0%87OhMyPosh%20%E5%8A%A0%E5%85%A5%E7%B5%82%E7%AB%AF%E6%A9%9F%E5%85%A7/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>近期為了要解決終端機的問題，因為 VSC 讀出來的OhMyPosh的字體都是亂碼，所以我就想說要解決這個問題，所以就找到了解決方案，這邊就紀錄一下。</p><p>相關文章 : <a href="https://blog.miniasp.com/post/2021/11/24/PowerShell-prompt-with-Oh-My-Posh-and-Windows-Terminal">https://blog.miniasp.com/post/2021/11/24/PowerShell-prompt-with-Oh-My-Posh-and-Windows-Terminal</a></p><h2 id="亂碼原因"><a href="#亂碼原因" class="headerlink" title="亂碼原因"></a>亂碼原因</h2><p>從保哥的文章中，可以看到原因是因為字體的問題，原初是使用指令方式下載字體，實際上沒有到字體的地方，所以就會出現亂碼的問題。</p><h4 id="解決方式"><a href="#解決方式" class="headerlink" title="解決方式"></a>解決方式</h4><p>從Github 社群上已經有人提供了解決方式，可以用這裡的下載點下載字體。</p><ol><li>[Caskaydia NF](&#x2F;upload&#x2F;zip&#x2F;Caskaydia Cove Nerd Font Complete Windows Compatible Regular.otf)</li><li><a href="https://github.com/ryanoasis/nerd-fonts/issues/785">Github Issue</a></li></ol><p>若按裝好字體後與下圖一樣動作即可，就可以解決亂碼問題了。<br><img src="/image/20231231_18-46-41.png"></p>]]></content>
      
      
      <categories>
          
          <category> 筆記 </category>
          
          <category> 生活雜記 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vsc </tag>
            
            <tag> OhMyPosh </tag>
            
            <tag> PowerShell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【筆記】修改終端機字體成為 OhMyPosh 相關字體</title>
      <link href="/2023/12/23/%E7%AD%86%E8%A8%98%E8%88%87%E7%94%9F%E6%B4%BB%E9%9B%9C%E8%A8%98/%E6%8A%80%E8%A1%93/%E3%80%90%E7%AD%86%E8%A8%98%E3%80%91%E4%BF%AE%E6%94%B9%E7%B5%82%E7%AB%AF%E6%A9%9F%E5%AD%97%E9%AB%94/"/>
      <url>/2023/12/23/%E7%AD%86%E8%A8%98%E8%88%87%E7%94%9F%E6%B4%BB%E9%9B%9C%E8%A8%98/%E6%8A%80%E8%A1%93/%E3%80%90%E7%AD%86%E8%A8%98%E3%80%91%E4%BF%AE%E6%94%B9%E7%B5%82%E7%AB%AF%E6%A9%9F%E5%AD%97%E9%AB%94/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>近期有重新為新電腦安裝環境，發現終端機字體不是很好看，所以就想要修改一下，這邊紀錄一下修改的過程。紀錄部分主要是稍微抱怨終端機設定外觀位置，因為他有兩個設定外觀的位置，因此預防忘記還是紀錄一下。</p><h2 id="一、修改字體"><a href="#一、修改字體" class="headerlink" title="一、修改字體"></a>一、修改字體</h2><p>本文是用最新版本的終端機來改變字體，所以如果你的終端機版本不是最新的，請先更新一下。</p><h3 id="1-1-安裝字體"><a href="#1-1-安裝字體" class="headerlink" title="1-1 安裝字體"></a>1-1 安裝字體</h3><p>輸入以下指令，安裝字體並且要按裝到 <code>OhMyPosh</code>，主要要讓終端機可以顯示小icon。</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">winget install JanDeDobbeleer.OhMyPosh</span><br><span class="line">oh-my-posh.exe font install CascadiaCode</span><br></pre></td></tr></table></figure><h3 id="1-2-解決方式"><a href="#1-2-解決方式" class="headerlink" title="1-2 解決方式"></a>1-2 解決方式</h3><p><img src="/image/20231223_18-50-22.png"><br><img src="/image/20231223_18-51-32.png"><br><img src="/image/20231223_18-52-11.png"></p><h3 id="1-3-補充-移除PowerShell-Logo"><a href="#1-3-補充-移除PowerShell-Logo" class="headerlink" title="1-3 補充 - 移除PowerShell Logo"></a>1-3 補充 - 移除PowerShell Logo</h3><p>只要輸入在捷徑或是設定檔案的路徑後面加上 <code>-nologo</code> 就可以移除PowerShell Logo了。<br><img src="/image/20231223_19-05-13.png"></p>]]></content>
      
      
      <categories>
          
          <category> 筆記 </category>
          
          <category> 生活雜記 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
            <tag> OhMyPosh </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【C#】實戰 Net Core ResultFilter </title>
      <link href="/2023/12/18/%E5%BE%8C%E7%AB%AF%E6%8A%80%E8%A1%93/CS/NetCore/Core_11_ResultFilter%E5%AF%A6%E6%88%B0/"/>
      <url>/2023/12/18/%E5%BE%8C%E7%AB%AF%E6%8A%80%E8%A1%93/CS/NetCore/Core_11_ResultFilter%E5%AF%A6%E6%88%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>過去幾個專案在執行時，有時候 API 格式規劃、調整、修改必須要有一個統性規劃，也是新手在開發時常常會忽略的部分，因此這篇主要是紀錄一下 ResultFilter 的使用方式。</p><h3 id="參考文件"><a href="#參考文件" class="headerlink" title="參考文件"></a>參考文件</h3><ul><li><a href="https://docs.microsoft.com/zh-tw/aspnet/core/mvc/controllers/filters?view=aspnetcore-5.0#result-filters">ASP.NET Core 中的結果過濾器</a></li><li><a href="https://www.youtube.com/watch?v=0MogPVe_l3E">ASP.NET Core Web API 入門教學(13_5) - ResultFilter 之統一回傳格式紀錄</a></li></ul><h3 id="補充"><a href="#補充" class="headerlink" title="補充"></a>補充</h3><p>需要學習進階 API 使用方式，可以參考上方文章、影片會有所幫助。</p><hr><h2 id="何謂-ResultFilter"><a href="#何謂-ResultFilter" class="headerlink" title="何謂 ResultFilter"></a>何謂 ResultFilter</h2><p>ResultFilter 是一個可以在執行結果前、後進行處理的過濾器，主要是透過 OnResultExecuting、OnResultExecuted 來進行處理，以下為官方文件範例。</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">SampleResultFilterAttribute</span> : <span class="title">Attribute</span>, <span class="title">IResultFilter</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">OnResultExecuting</span>(<span class="params">ResultExecutingContext context</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// Do something before the action executes.</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">OnResultExecuted</span>(<span class="params">ResultExecutedContext context</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// Do something after the action executes.</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再所有的過濾器中，ResultFilter 是最後一個執行的過濾器，因此可以在這裡進行統一回傳格式、紀錄等等。因此我們可以利用這個特性來進行統一回傳格式。<br><img src="/image/20231218_22-32-41.png"></p><h3 id="一、建立-ResultFilter"><a href="#一、建立-ResultFilter" class="headerlink" title="一、建立 ResultFilter"></a>一、建立 ResultFilter</h3><p>首先我們先建立一個 ResultFilter，並且繼承 IResultFilter，接著我們在 OnResultExecuting、OnResultExecuted 進行處理，以下為範例。</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ResultFilter</span> : <span class="title">IResultFilter</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">OnResultExecuting</span>(<span class="params">ResultExecutingContext context</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// Do something before the action executes.</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">OnResultExecuted</span>(<span class="params">ResultExecutedContext context</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// Do something after the action executes.</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二、註冊-ResultFilter"><a href="#二、註冊-ResultFilter" class="headerlink" title="二、註冊 ResultFilter"></a>二、註冊 ResultFilter</h3><p>接著我們需要註冊 ResultFilter，這裡我們使用 AddMvcOptions 來註冊，以下為範例。</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ConfigureServices</span>(<span class="params">IServiceCollection services</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    services.AddControllersWithViews(options =&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        options.Filters.Add(<span class="keyword">typeof</span>(ResultFilter));</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="創建統一回傳格式"><a href="#創建統一回傳格式" class="headerlink" title="創建統一回傳格式"></a>創建統一回傳格式</h3><p>接著我們就可以加入一個 RetrunJson 簡單的吃我們的格式。</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">RetrunJson</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">dynamic</span>? Data &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> HttpCode &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125; = (<span class="built_in">int</span>)HttpStatusCode.BadRequest;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span>? ErrorMessage &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="四、使用-ResultFilter"><a href="#四、使用-ResultFilter" class="headerlink" title="四、使用 ResultFilter"></a>四、使用 ResultFilter</h3><p>接著我們就可以在 ResultFilter 中進行處理並利用剛創建的 RetrunJson 一起使用，以下為範例。</p><p>備註 :<br>OnResultExecuted : 在執行結果後進行處理。<br>OnResultExecuting : 在執行結果前進行處理。<br>以上這兩者是不同情境下使用的，因此在使用時要注意。</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ResultFilter</span> : <span class="title">IResultFilter</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">OnResultExecuting</span>(<span class="params">ResultExecutingContext context</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// Do something before the action executes.</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">OnResultExecuted</span>(<span class="params">ResultExecutedContext context</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        context.Result = <span class="keyword">new</span> JsonResult(<span class="keyword">new</span> RetrunJson &#123; </span><br><span class="line">            Data = context.Result,</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="五、結果"><a href="#五、結果" class="headerlink" title="五、結果"></a>五、結果</h3><p>這邊我使用登入的API來使用，會呈現如下結果。包含著value、formatters、contentTypes、declaredType、statusCode等等。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;data&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;value&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;data&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;httpCode&quot;</span><span class="punctuation">:</span> <span class="number">400</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;errorMessage&quot;</span><span class="punctuation">:</span> <span class="string">&quot;資料驗證失敗&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;formatters&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;contentTypes&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;declaredType&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;statusCode&quot;</span><span class="punctuation">:</span> <span class="number">400</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;httpCode&quot;</span><span class="punctuation">:</span> <span class="number">400</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;errorMessage&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>如要移除掉方式如下，直接把 context.Result 轉為 ObjectResult取出 Value 即可。</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (context.Result <span class="keyword">is</span> ObjectResult objectResult)</span><br><span class="line">&#123;</span><br><span class="line">    context.Result = objectResult.Value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="其餘作法"><a href="#其餘作法" class="headerlink" title="其餘作法"></a>其餘作法</h2><p>那未來可能會有其他情境，例如我們只想要在特定的 API 使用 ResultFilter，這時候我們可以使用 Attribute 來進行設定，以下為範例。</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">AttributeUsage(AttributeTargets.Class | AttributeTargets.Method)</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ResultFilterAttribute</span> : <span class="title">Attribute</span>, <span class="title">IResultFilter</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">OnResultExecuting</span>(<span class="params">ResultExecutingContext context</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// Do something before the action executes.</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">OnResultExecuted</span>(<span class="params">ResultExecutedContext context</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        context.Result = <span class="keyword">new</span> JsonResult(<span class="keyword">new</span> RetrunJson &#123; </span><br><span class="line">            Data = context.Result,</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接著我們就可以在 API 上使用 Attribute 來進行設定，以下為範例。</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">HttpGet</span>]</span><br><span class="line">[<span class="meta">ResultFilter</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> IActionResult <span class="title">Get</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> Ok();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h2><p>這篇主要是紀錄一下 ResultFilter 的使用方式，主要是透過 OnResultExecuting、OnResultExecuted 來進行處理，並且可以透過 Attribute 來進行設定，這樣就可以在特定的 API 使用 ResultFilter。</p><p>r。</p>]]></content>
      
      
      <categories>
          
          <category> 後端技術 </category>
          
          <category> C# </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
            <tag> Core </tag>
            
            <tag> Filter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【前端】 (九) - 使用api方式加入routes</title>
      <link href="/2023/12/18/%E5%89%8D%E7%AB%AF%E6%8A%80%E8%A1%93/REACT/react-09-%E4%BD%BF%E7%94%A8api%E6%96%B9%E5%BC%8F%E5%8A%A0%E5%85%A5routes/"/>
      <url>/2023/12/18/%E5%89%8D%E7%AB%AF%E6%8A%80%E8%A1%93/REACT/react-09-%E4%BD%BF%E7%94%A8api%E6%96%B9%E5%BC%8F%E5%8A%A0%E5%85%A5routes/</url>
      
        <content type="html"><![CDATA[<h2 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h2><p>最近幾個月使用 github coplit 來練習 react ，順便紀錄 react 的學習過程，這篇主要是使用 api 方式加入 routes。</p><hr><h2 id="二、使用-api-方式加入-routes"><a href="#二、使用-api-方式加入-routes" class="headerlink" title="二、使用 api 方式加入 routes"></a>二、使用 api 方式加入 routes</h2><h3 id="2-1-加入-API-調用"><a href="#2-1-加入-API-調用" class="headerlink" title="2-1 加入 API 調用"></a>2-1 加入 API 調用</h3><p>在 <code>App.js</code> 中加入 API 調用，並將獲取的數據設置到狀態中。以下為資料庫結構</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">[</span></span><br><span class="line">  <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;首頁&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;path&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;importAt&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Template/Home&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;icon&quot;</span><span class="punctuation">:</span> <span class="string">&quot;fas fa-home&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">]</span></span><br></pre></td></tr></table></figure><p>以上目的是為了抓取 import 的路徑，並且將資料庫的資料設置到狀態中，以便後續使用。接著用從 API 取得資料即可。</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> [routesData, setRoutesData] = useState([]);</span><br><span class="line">useEffect(() =&gt; &#123;</span><br><span class="line">  <span class="comment">// 這裡進行 API 調用，並將獲取的數據設置到狀態中</span></span><br><span class="line">  fetch(<span class="string">&quot;https://localhost:5001/api/users/menus/items&quot;</span>)</span><br><span class="line">    .then((response) =&gt; response.json())</span><br><span class="line">    .then((data) =&gt; setRoutesData(data));</span><br><span class="line">&#125;, []);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2-2-使用-map-來加入-routes"><a href="#2-2-使用-map-來加入-routes" class="headerlink" title="2-2 使用 map 來加入 routes"></a>2-2 使用 map 來加入 routes</h3><p>首先我們將參數以及 component 設置好，接著使用 map 來加入 routes，以下為完整程式碼。</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> components = routesData.<span class="title function_">map</span>(<span class="function">(<span class="params">route: <span class="built_in">any</span></span>) =&gt;</span> (&#123;</span><br><span class="line">  ...route,</span><br><span class="line">  <span class="attr">component</span>: <span class="title class_">React</span>.<span class="title function_">lazy</span>(<span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">`../component/@Views/<span class="subst">$&#123;route.importAt&#125;</span>`</span>)),</span><br><span class="line">&#125;));</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">BrowserRouter</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">ServicesContext.Provider</span> <span class="attr">value</span>=<span class="string">&#123;services&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">ToastContainer</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Routes</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;/* user authrozie element */&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/Login&quot;</span> <span class="attr">element</span>=<span class="string">&#123;</span>&lt;<span class="attr">LoginLayout</span> /&gt;</span>&#125;&gt;</span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/Login&quot;</span> <span class="attr">element</span>=<span class="string">&#123;</span>&lt;<span class="attr">Login</span> /&gt;</span>&#125; /&gt;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">Route</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">        &#123;/* System element */&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/&quot;</span> <span class="attr">element</span>=<span class="string">&#123;</span>&lt;<span class="attr">MainLayout</span> /&gt;</span>&#125;&gt;</span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/&quot;</span> <span class="attr">element</span>=<span class="string">&#123;privateElement(</span>&lt;<span class="attr">Home</span> /&gt;</span>)&#125; /&gt;</span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/Profile&quot;</span> <span class="attr">element</span>=<span class="string">&#123;privateElement(</span>&lt;<span class="attr">ProfileHome</span> /&gt;</span>)&#125; /&gt;</span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/about&quot;</span> <span class="attr">element</span>=<span class="string">&#123;privateElement(</span>&lt;<span class="attr">About</span> /&gt;</span>)&#125; /&gt;</span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">          &#123;components.map((&#123; id, url, component: Component &#125;) =&gt; (</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">Route</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">              <span class="attr">key</span>=<span class="string">&#123;id&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">              <span class="attr">path</span>=<span class="string">&#123;url&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">              <span class="attr">element</span>=<span class="string">&#123;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                &lt;<span class="attr">React.Suspense</span> <span class="attr">fallback</span>=<span class="string">&#123;</span>&lt;<span class="attr">div</span>&gt;</span>Loading...<span class="tag">&lt;/<span class="name">div</span>&gt;</span>&#125;&gt;</span></span><br><span class="line"><span class="language-xml">                  <span class="tag">&lt;<span class="name">Component</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;/<span class="name">React.Suspense</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              &#125;</span></span><br><span class="line"><span class="language-xml">            /&gt;</span></span><br><span class="line"><span class="language-xml">          ))&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">Route</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">Routes</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">ServicesContext.Provider</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">BrowserRouter</span>&gt;</span></span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><hr><h2 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h2><p>React.lazy、React.Suspense、Component 這兩者的組合可以讓我們在使用時，可以動態的加入路由，並且可以在使用時才去載入，達到動態載入的效果。那這階段通常會使用在登入後，根據使用者的權限，動態的加入路由，達到權限控管的效果。</p><p>製作階段時候，可以參考以下資料表定義去設計資料庫，以及使用者的權限，這樣在後續開發時，可以更加的方便。如下圖所示。<br><img src="/image/20231217_23-08-23.png"><br>)<br>g)</p>]]></content>
      
      
      <categories>
          
          <category> 前端技術 </category>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用 Github Action (六) - 使用 Actions 實現排程效果</title>
      <link href="/2023/12/17/DevOps/Github/%E4%BD%BF%E7%94%A8%20Github%20Action%20(%E5%85%AD)%20-%20%E4%BD%BF%E7%94%A8%20Actions%20%E5%AF%A6%E7%8F%BE%E6%8E%92%E7%A8%8B%E6%95%88%E6%9E%9C/"/>
      <url>/2023/12/17/DevOps/Github/%E4%BD%BF%E7%94%A8%20Github%20Action%20(%E5%85%AD)%20-%20%E4%BD%BF%E7%94%A8%20Actions%20%E5%AF%A6%E7%8F%BE%E6%8E%92%E7%A8%8B%E6%95%88%E6%9E%9C/</url>
      
        <content type="html"><![CDATA[<h2 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h2><p>近期已經完成 WebJob 章節，後續衍生一些問題是 Azure WebJob 排程上的問題一直沒有執行成功，利用最簡單方式 CI&#x2F;CD 來解決這個問題。</p><h3 id="1-1-期初想法"><a href="#1-1-期初想法" class="headerlink" title="1-1. 期初想法"></a>1-1. 期初想法</h3><p>第一次使用 CICD 會有幾個想法。</p><ol><li>動作 : CICD 可以編譯、發佈、測試、部署、排程、通知等等。可以把所有事情都做完，非常符合我的需求。</li><li>定時&#x2F;手動 : CICD 是可以定時執行，也可以手動執行，非常方便。</li><li>環境 : CICD 可以在不同環境執行，例如：測試、正式、開發等等。</li><li>Git 選擇 : Github 必定是首選。光 Actions 額度、便利性、社群、擴充性等等都是首選。</li></ol><hr><h2 id="二、Github-Action"><a href="#二、Github-Action" class="headerlink" title="二、Github Action"></a>二、Github Action</h2><p>前幾篇有提到 Actions 實作方式，這裡就用最簡單方式來實作排程。<br>需要步驟如下 :</p><ol><li>手動&#x2F;定時執行 : 手動排程可以直接點選執行，定時排程可以設定排程時間。當功能異常可以利用手動排程來執行。</li><li>環境 : 因為我使用的是 .NET CORE 可以用 linux 減少建置、執行時間。</li><li>執行動作 : 動作需要安裝Nuget、建置、執行</li></ol><h3 id="2-1-手動-定時執行"><a href="#2-1-手動-定時執行" class="headerlink" title="2-1 手動&#x2F;定時執行"></a>2-1 手動&#x2F;定時執行</h3><p>actions 的設定如下，可以看到有兩個觸發方式，一個是手動觸發，一個是定時觸發。手動部分比較特別是 <code>workflow_dispatch</code>，這個是手動觸發的方式，可以在 Actions 頁面點選執行。定時觸發方式是 <code>schedule</code>，這個是定時觸發的方式，可以設定排程時間。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">workflow_dispatch:</span></span><br><span class="line">  <span class="attr">schedule:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">cron:</span> <span class="string">&quot;0 0 * * *&quot;</span> <span class="comment"># UTC 時間，每天 00:00 執行</span></span><br></pre></td></tr></table></figure><h4 id="2-1-1-手動觸發"><a href="#2-1-1-手動觸發" class="headerlink" title="2-1-1 手動觸發"></a>2-1-1 手動觸發</h4><p>手動觸發方式參考如下<br><img src="/image/20231217_22-20-27.png"><br><img src="/image/20231217_22-19-57.png"></p><h3 id="2-2-環境"><a href="#2-2-環境" class="headerlink" title="2-2 環境"></a>2-2 環境</h3><p>github 有幾些要細節每個執行的系統環境不一定是一樣的ram、cpu、硬碟空間等等，可以參考 <a href="https://docs.github.com/en/actions/reference/virtual-environments-for-github-hosted-runners">Virtual environments for GitHub-hosted runners</a>。這裡我使用的是 ubuntu-latest，因為我使用的是 .NET CORE 可以用 linux 減少建置、執行時間。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">build:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    </span><br></pre></td></tr></table></figure><p><img src="/image/20231217_22-27-06.png"></p><h3 id="2-3-執行動作"><a href="#2-3-執行動作" class="headerlink" title="2-3 執行動作"></a>2-3 執行動作</h3><p>執行動作如下。這邊只需要安裝Nuget、net版本、建置、執行，就可以完成執行動作。那留意是排程動作如過太過頻繁會被github停用，所以這邊我設定每天執行一次。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">steps:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/checkout@v3</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Setup</span> <span class="string">.NET</span></span><br><span class="line">  <span class="attr">uses:</span> <span class="string">actions/setup-dotnet@v3</span></span><br><span class="line">  <span class="attr">with:</span></span><br><span class="line">    <span class="attr">dotnet-version:</span> <span class="number">8.0</span><span class="string">.x</span></span><br><span class="line">    </span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Restore</span> <span class="string">dependencies</span></span><br><span class="line">  <span class="attr">run:</span> <span class="string">dotnet</span> <span class="string">restore</span></span><br><span class="line">  </span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Build</span></span><br><span class="line">  <span class="attr">run:</span> <span class="string">dotnet</span> <span class="string">build</span> <span class="string">--no-restore</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Run</span></span><br><span class="line">  <span class="attr">run:</span> <span class="string">dotnet</span> <span class="string">run</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> DevOps </category>
          
          <category> Github </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Github Action </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【筆記】加解密基礎概念</title>
      <link href="/2023/12/03/%E7%AD%86%E8%A8%98%E8%88%87%E7%94%9F%E6%B4%BB%E9%9B%9C%E8%A8%98/%E6%8A%80%E8%A1%93/%E3%80%90%E7%AD%86%E8%A8%98%E3%80%91%E5%8A%A0%E8%A7%A3%E5%AF%86%E5%9F%BA%E7%A4%8E%E6%A6%82%E5%BF%B5/"/>
      <url>/2023/12/03/%E7%AD%86%E8%A8%98%E8%88%87%E7%94%9F%E6%B4%BB%E9%9B%9C%E8%A8%98/%E6%8A%80%E8%A1%93/%E3%80%90%E7%AD%86%E8%A8%98%E3%80%91%E5%8A%A0%E8%A7%A3%E5%AF%86%E5%9F%BA%E7%A4%8E%E6%A6%82%E5%BF%B5/</url>
      
        <content type="html"><![CDATA[<h2 id="一、加解密基礎概念"><a href="#一、加解密基礎概念" class="headerlink" title="一、加解密基礎概念"></a>一、加解密基礎概念</h2><p>當我們談論加解密時，我們實際上是在討論一種數學和計算概念，其目的是保護資訊的機密性和完整性。加解密是資訊安全的基石，它們用於在傳輸或存儲資訊時將其保護起來，使得未經授權的人無法存取或理解其內容。</p><ol><li><p><strong>加密 (Encryption):</strong><br>加密是將原始資訊轉換成不可讀的形式的過程，以保護資訊的隱私。這通常涉及使用密鑰（key）來對資訊進行數學運算，從而產生看似雜亂無章的資料，即密文。常見的加密算法包括對稱加密和非對稱加密。</p><ul><li><p><strong>對稱加密 (Symmetric Encryption):</strong><br>在對稱加密中，相同的密鑰用於加密和解密資訊。這意味著發送和接收方都必須共享相同的密鑰。AES（Advanced Encryption Standard）是一個廣泛使用的對稱加密算法。</p><p>例如，當Alice想要發送一個加密的訊息給Bob時，她將使用共享的密鑰對訊息進行加密。Bob將使用相同的密鑰對接收到的密文進行解密，以恢復原始的訊息。</p></li><li><p><strong>非對稱加密 (Asymmetric Encryption):</strong><br>在非對稱加密中，有一對密鑰：公開金鑰和私密金鑰。發送方使用接收方的公開金鑰來加密資訊，而接收方使用他們的私密金鑰來解密。RSA（Rivest-Shamir-Adleman）是一種常見的非對稱加密算法。</p><p>假設Alice想要發送一個安全的訊息給Bob，她會使用Bob的公開金鑰對訊息進行加密。只有Bob擁有與其公開金鑰相對應的私密金鑰，才能解密並讀取訊息。</p></li></ul></li><li><p><strong>解密 (Decryption):</strong><br>解密是將加密的資訊轉換回原始形式的過程。這涉及使用加密時所用的密鑰對密文進行逆向運算，以恢復原始資訊。</p><ul><li><p><strong>對稱解密:</strong><br>在對稱解密中，與加密相對應的相同密鑰用於將密文轉換為原始資訊。這就是為什麼在對稱加密中，密鑰的安全共享至關重要的原因。</p></li><li><p><strong>非對稱解密:</strong><br>在非對稱解密中，使用私密金鑰來解密使用公開金鑰加密的資訊。這確保只有擁有私密金鑰的一方才能解密並讀取資訊。</p></li></ul></li></ol><hr><h2 id="二、對稱-vs-非對稱"><a href="#二、對稱-vs-非對稱" class="headerlink" title="二、對稱 vs 非對稱"></a>二、對稱 vs 非對稱</h2><p>對稱加密和非對稱加密都是加密的方法，但它們之間有一些重要的區別。</p><h3 id="1-對稱加密"><a href="#1-對稱加密" class="headerlink" title="1. 對稱加密"></a>1. 對稱加密</h3><p>依據上方解說概念，對稱加密使用相同的密鑰來加密和解密資訊。這意味著發送方和接收方都必須共享相同的密鑰。這是一個重要的限制，因為發送方和接收方必須在傳輸資訊之前安全地共享密鑰。如果發送方和接收方之間的通道不安全，則無法安全地傳輸密鑰。這種限制使得對稱加密在實際應用中不太實用。<br><img src="/image/20231203_14-47-53.png"></p><h4 id="1-1-應用"><a href="#1-1-應用" class="headerlink" title="1-1 應用"></a>1-1 應用</h4><p>對稱解密通常在以下情況下應用：</p><ol><li><p><strong>數據傳輸：</strong> 對稱解密常用於安全地傳輸數據。當兩個通信方需要共享數據時，它們可以使用相同的對稱金鑰，發送方使用該金鑰對數據進行加密，而接收方使用相同的金鑰進行解密。</p></li><li><p><strong>數據存儲：</strong> 對稱解密用於安全地存儲數據。在數據儲存場景中，可以使用對稱加密將數據加密後存儲，並在需要時使用相同的金鑰進行解密。</p></li><li><p><strong>VPN（虛擬私人網路）：</strong> 對稱解密在 VPN 中被廣泛應用。兩個設備在建立安全通道時使用相同的金鑰，以加密和解密通信的數據。</p></li><li><p><strong>磁盤加密：</strong> 在整個磁盤或特定區域上應用對稱解密，以確保存儲在硬盤上的數據在未經授權的情況下無法訪問。</p></li><li><p><strong>SSL&#x2F;TLS 協議：</strong> 在加密網絡通信時，SSL&#x2F;TLS 協議使用對稱解密。通信的開始階段通常使用非對稱加密來交換對稱金鑰，之後的數據傳輸階段則使用對稱金鑰進行加解密。</p></li><li><p><strong>文件加密：</strong> 在加密單個文件或文件夾時，對稱解密可以用來確保文件的隱私和機密性。</p></li></ol><h3 id="2-非對稱加密"><a href="#2-非對稱加密" class="headerlink" title="2. 非對稱加密"></a>2. 非對稱加密</h3><p>非對稱加密使用一對密鑰：公開金鑰和私密金鑰。發送方使用接收方的公開金鑰來加密資訊，而接收方使用他們的私密金鑰來解密。這消除了對稱加密中的密鑰共享問題，因為公開金鑰可以安全地傳輸給任何人，而私密金鑰僅由接收方持有。這使得非對稱加密在實際應用中更加實用。<br><img src="/image/20231203_14-47-58.png"></p><h4 id="2-1-應用"><a href="#2-1-應用" class="headerlink" title="2-1 應用"></a>2-1 應用</h4><p>非對稱解密通常在以下情況下應用：</p><ol><li><p><strong>安全通信：</strong> 當兩方需要進行安全通信時，非對稱解密可以確保通信的機密性和真實性。發送方使用接收方的公開金鑰對數據進行加密，而只有接收方擁有相應的私密金鑰才能解密和讀取數據。這有助於防止中間人攻擊和數據窺探。</p></li><li><p><strong>數位簽名：</strong> 非對稱解密用於驗證數位簽名的真實性。發送方使用私密金鑰對數據進行加密，而接收方使用公開金鑰驗證數據的簽名。這確保了數據的完整性和真實性。</p></li><li><p><strong>金鑰交換：</strong> 在安全通信中，非對稱解密用於安全地交換對稱金鑰。發送方可以使用接收方的公開金鑰將對稱金鑰加密，接收方則使用自己的私密金鑰解密，從而安全地分享對稱金鑰。</p></li><li><p><strong>身份驗證：</strong> 非對稱解密用於確認通信中的實體的身份。例如，用戶可以使用他們的私密金鑰來簽署一個數據包，而其他人可以使用公開金鑰驗證該用戶的身份。</p></li></ol><p>總的來說，非對稱解密在需要確保通信的機密性、完整性和真實性的情況下非常有用。它提供了一種安全的方式來傳輸數據，同時防範了許多常見的攻擊和風險。</p><hr><h2 id="三、可逆-vs-不可逆"><a href="#三、可逆-vs-不可逆" class="headerlink" title="三、可逆 vs 不可逆"></a>三、可逆 vs 不可逆</h2><p>「可逆」和「不可逆」是描述加密和雜湊（Hash）算法的特性的術語。這兩者之間的主要區別在於操作是否可以被反轉，即是否可以從輸出推導出原始的輸入。</p><h3 id="可逆加密-Reversible-Encryption"><a href="#可逆加密-Reversible-Encryption" class="headerlink" title="可逆加密 (Reversible Encryption):"></a>可逆加密 (Reversible Encryption):</h3><ol><li><p><strong>特點：</strong> 可逆加密是指加密過程是可以被反轉的。即，經過加密的數據可以透過解密還原成原始的數據。</p></li><li><p><strong>使用場景：</strong> 一般在通信和數據儲存中使用。對稱加密算法（如AES）和一些對稱性較低的非對稱加密算法都是可逆的。</p></li><li><p><strong>例子：</strong> 如果Alice使用Bob的公開金鑰加密消息，Bob可以使用他的私密金鑰解密該消息，還原原始的內容。</p></li></ol><h3 id="不可逆加密-Irreversible-Encryption-或雜湊-Hashing"><a href="#不可逆加密-Irreversible-Encryption-或雜湊-Hashing" class="headerlink" title="不可逆加密 (Irreversible Encryption) 或雜湊 (Hashing):"></a>不可逆加密 (Irreversible Encryption) 或雜湊 (Hashing):</h3><ol><li><p><strong>特點：</strong> 不可逆加密或雜湊是指加密過程是不可逆的，無法從加密的輸出推導出原始的輸入。同樣的輸入經過雜湊後，得到的雜湊值是固定的長度。</p></li><li><p><strong>使用場景：</strong> 通常用於密碼儲存、數據校驗和數字簽名等需要確保完整性但無需還原原始數據的場景。</p></li><li><p><strong>例子：</strong> 常見的雜湊算法有MD5、SHA-1、SHA-256。例如，一個密碼經過SHA-256雜湊後，就無法直接還原出原始的密碼。</p></li></ol><hr><h2 id="加解密總類"><a href="#加解密總類" class="headerlink" title="加解密總類"></a>加解密總類</h2><p>加解密是資訊安全領域中的基本概念，有多種不同的加解密方法和算法，它們可以根據應用的需求和安全性要求進行選擇。以下是一些主要的加解密總類：</p><h3 id="對稱加密-Symmetric-Encryption"><a href="#對稱加密-Symmetric-Encryption" class="headerlink" title="對稱加密 (Symmetric Encryption):"></a>對稱加密 (Symmetric Encryption):</h3><ol><li><strong>代表算法：</strong> DES (Data Encryption Standard), 3DES (Triple DES), AES (Advanced Encryption Standard).</li><li><strong>特點：</strong> 使用相同的金鑰進行加密和解密，加密和解密速度快，適用於大量數據的加解密。</li><li><strong>應用場景：</strong> 數據傳輸、數據存儲、VPN (Virtual Private Network)。</li></ol><h3 id="非對稱加密-Asymmetric-Encryption"><a href="#非對稱加密-Asymmetric-Encryption" class="headerlink" title="非對稱加密 (Asymmetric Encryption):"></a>非對稱加密 (Asymmetric Encryption):</h3><ol><li><strong>代表算法：</strong> RSA (Rivest-Shamir-Adleman), ECC (Elliptic Curve Cryptography).</li><li><strong>特點：</strong> 使用一對公開金鑰和私密金鑰，公開金鑰用於加密，私密金鑰用於解密。安全性高但速度較慢。</li><li><strong>應用場景：</strong> 數位簽名、金融交易、身份驗證。</li></ol><h3 id="雜湊函數-Hash-Functions"><a href="#雜湊函數-Hash-Functions" class="headerlink" title="雜湊函數 (Hash Functions):"></a>雜湊函數 (Hash Functions):</h3><ol><li><strong>代表算法：</strong> MD5 (Message Digest Algorithm 5), SHA-1 (Secure Hash Algorithm 1), SHA-256 (Secure Hash Algorithm 256-bit).</li><li><strong>特點：</strong> 將任意大小的數據轉換為固定大小的散列值，不可逆。主要用於校驗完整性、密碼儲存等。</li><li><strong>應用場景：</strong> 數據完整性檢查、密碼儲存、數字簽名。</li></ol><h3 id="數位簽名和憑證-Digital-Signatures-and-Certificates"><a href="#數位簽名和憑證-Digital-Signatures-and-Certificates" class="headerlink" title="數位簽名和憑證 (Digital Signatures and Certificates):"></a>數位簽名和憑證 (Digital Signatures and Certificates):</h3><ol><li><strong>代表標準：</strong> PKCS (Public Key Cryptography Standards), X.509。</li><li><strong>特點：</strong> 用於確保數據的真實性和來源，結合非對稱加密和雜湊函數。</li><li><strong>應用場景：</strong> 在網路通信中的身份驗證、文件的數位簽署。</li></ol><h3 id="對稱和非對稱的結合"><a href="#對稱和非對稱的結合" class="headerlink" title="對稱和非對稱的結合:"></a>對稱和非對稱的結合:</h3><ol><li><strong>Hybrid Cryptography:</strong> 結合對稱和非對稱加密，通常使用對稱加密來加密數據，而使用非對稱加密來安全地傳遞和管理對稱金鑰。</li></ol><h3 id="機密計算-Homomorphic-Encryption"><a href="#機密計算-Homomorphic-Encryption" class="headerlink" title="機密計算 (Homomorphic Encryption):"></a>機密計算 (Homomorphic Encryption):</h3><ol><li><strong>特點：</strong> 允許在加密的狀態下進行計算，結果仍然是加密的。有助於在不暴露原始數據的情況下進行運算。</li></ol><h3 id="哈希加鹽-Hash-Salting"><a href="#哈希加鹽-Hash-Salting" class="headerlink" title="哈希加鹽 (Hash Salting):"></a>哈希加鹽 (Hash Salting):</h3><ol><li><strong>特點：</strong> 在密碼儲存中的應用，通過在密碼哈希過程中添加隨機的Salt，提高安全性。</li></ol><p>每種加解密方法都有其優勢和限制，選擇應使用的方法通常取決於特定應用的需求和安全性考慮。在實際應用中，通常會採用多種加解密技術的組合，以達到更全面的資訊安全保護。</p><hr><h2 id="參考文件"><a href="#參考文件" class="headerlink" title="參考文件"></a>參考文件</h2><ul><li><a href="https://zombit.info/encryption/">基本知識：對稱加密、非對稱加密與數位簽章</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 筆記 </category>
          
          <category> 生活雜記 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【VB】VBA 腳本使用 - 加入SHA 加密</title>
      <link href="/2023/12/03/%E5%BE%8C%E7%AB%AF%E6%8A%80%E8%A1%93/VB/%E3%80%90VB%E3%80%91Excel%20%E8%85%B3%E6%9C%AC%E4%BD%BF%E7%94%A8/"/>
      <url>/2023/12/03/%E5%BE%8C%E7%AB%AF%E6%8A%80%E8%A1%93/VB/%E3%80%90VB%E3%80%91Excel%20%E8%85%B3%E6%9C%AC%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="一、VBA-腳本使用"><a href="#一、VBA-腳本使用" class="headerlink" title="一、VBA 腳本使用"></a>一、VBA 腳本使用</h2><h3 id="1-啟動Excel並打開VBA"><a href="#1-啟動Excel並打開VBA" class="headerlink" title="1. 啟動Excel並打開VBA"></a>1. 啟動Excel並打開VBA</h3><p>首先按下<code>Alt + F11</code>，進入VBA編輯器，然後在左側的專案總管中，選擇<code>這台電腦</code>，右鍵選擇<code>插入</code>，選擇<code>模組</code>，即可進入VBA編輯器。</p><hr><h2 id="二、使用-SHA-加密製作"><a href="#二、使用-SHA-加密製作" class="headerlink" title="二、使用 SHA 加密製作"></a>二、使用 SHA 加密製作</h2><h3 id="1-加入SHA-加密Function"><a href="#1-加入SHA-加密Function" class="headerlink" title="1. 加入SHA 加密Function"></a>1. 加入SHA 加密Function</h3><figure class="highlight vb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Public</span> <span class="keyword">Function</span> SHA1Hash(sIn <span class="keyword">As</span> <span class="type">String</span>, <span class="keyword">Optional</span> bB64 <span class="keyword">As</span> <span class="type">Boolean</span> = <span class="number">0</span>) <span class="keyword">As</span> <span class="type">String</span></span><br><span class="line">    <span class="keyword">Dim</span> oT <span class="keyword">As</span> <span class="type">Object</span>, oSHA1 <span class="keyword">As</span> <span class="type">Object</span></span><br><span class="line">    <span class="keyword">Dim</span> TextToHash() <span class="keyword">As</span> <span class="type">Byte</span></span><br><span class="line">    <span class="keyword">Dim</span> bytes() <span class="keyword">As</span> <span class="type">Byte</span></span><br><span class="line">            </span><br><span class="line">    <span class="keyword">Set</span> oT = CreateObject(<span class="string">&quot;System.Text.UTF8Encoding&quot;</span>)</span><br><span class="line">    <span class="keyword">Set</span> oSHA1 = CreateObject(<span class="string">&quot;System.Security.Cryptography.SHA1Managed&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    TextToHash = oT.Getbytes_4(sIn)</span><br><span class="line">    bytes = oSHA1.ComputeHash_2((TextToHash))</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">If</span> bB64 = <span class="literal">True</span> <span class="keyword">Then</span></span><br><span class="line">       SHA1Hash = ConvToBase64String(bytes)</span><br><span class="line">    <span class="keyword">Else</span></span><br><span class="line">       SHA1Hash = ConvToHexString(bytes)</span><br><span class="line">    <span class="keyword">End</span> <span class="keyword">If</span></span><br><span class="line">            </span><br><span class="line">    <span class="keyword">Set</span> oT = <span class="literal">Nothing</span></span><br><span class="line">    <span class="keyword">Set</span> oSHA1 = <span class="literal">Nothing</span></span><br><span class="line"><span class="keyword">End</span> <span class="keyword">Function</span></span><br></pre></td></tr></table></figure><h3 id="2-加入巨集測試"><a href="#2-加入巨集測試" class="headerlink" title="2. 加入巨集測試"></a>2. 加入巨集測試</h3><figure class="highlight vb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Sub</span> Test()</span><br><span class="line">    <span class="keyword">Dim</span> sIn <span class="keyword">As</span> <span class="type">String</span>, b64 <span class="keyword">As</span> <span class="type">Boolean</span></span><br><span class="line">    <span class="keyword">Dim</span> sH <span class="keyword">As</span> <span class="type">String</span></span><br><span class="line">    sIn = <span class="string">&quot;123456&quot;</span></span><br><span class="line">    b64 = <span class="literal">True</span>   <span class="comment">&#x27;output base-64</span></span><br><span class="line">    sH = SHA1Hash(sIn, b64)</span><br><span class="line">    Debug.Print vbNewLine &amp; vbNewLine &amp; sH &amp; vbNewLine &amp; Len(sH) &amp; <span class="string">&quot; characters in length&quot;</span></span><br><span class="line"><span class="keyword">End</span> <span class="keyword">Sub</span></span><br></pre></td></tr></table></figure><p><img src="/image/20231203_14-15-22.png"><br><img src="/image/20231203_14-15-37.png"></p><h3 id="3-加入在-Excel-中使用"><a href="#3-加入在-Excel-中使用" class="headerlink" title="3. 加入在 Excel 中使用"></a>3. 加入在 Excel 中使用</h3><p><code>=SHA1Hash(D2,C2)</code> 加入在 Excel 中使用<br><img src="/image/20231203_14-19-54.png"></p>]]></content>
      
      
      <categories>
          
          <category> 後端技術 </category>
          
          <category> VB </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Excel </tag>
            
            <tag> VBA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【VB】VBA 基本語法 03 - 錯誤處理、偵錯、其他</title>
      <link href="/2023/12/03/%E5%BE%8C%E7%AB%AF%E6%8A%80%E8%A1%93/VB/%E3%80%90VB%E3%80%91VBA%20%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8%E6%96%B9%E5%BC%8F-03/"/>
      <url>/2023/12/03/%E5%BE%8C%E7%AB%AF%E6%8A%80%E8%A1%93/VB/%E3%80%90VB%E3%80%91VBA%20%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8%E6%96%B9%E5%BC%8F-03/</url>
      
        <content type="html"><![CDATA[<h2 id="如何開啟-VBA-編輯器"><a href="#如何開啟-VBA-編輯器" class="headerlink" title="如何開啟 VBA 編輯器"></a>如何開啟 VBA 編輯器</h2><p>首先按下<code>Alt + F11</code>，進入VBA編輯器，然後在左側的專案總管中，選擇<code>這台電腦</code>，右鍵選擇<code>插入</code>，選擇<code>模組</code>，即可進入VBA編輯器。</p><h2 id="VBA-基本語法-錯誤處理、偵錯、其他"><a href="#VBA-基本語法-錯誤處理、偵錯、其他" class="headerlink" title="VBA 基本語法 - 錯誤處理、偵錯、其他"></a>VBA 基本語法 - 錯誤處理、偵錯、其他</h2><h3 id="一-錯誤處理"><a href="#一-錯誤處理" class="headerlink" title="一. 錯誤處理"></a>一. 錯誤處理</h3><p>VBA中的錯誤處理有兩種，一種是On Error Resume Next，一種是On Error GoTo。</p><figure class="highlight vb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&#x27; On Error Resume Next</span></span><br><span class="line"><span class="keyword">On</span> <span class="keyword">Error</span> <span class="keyword">Resume</span> <span class="keyword">Next</span></span><br><span class="line">    <span class="comment">&#x27; 可能會發生錯誤的程式</span></span><br><span class="line"><span class="keyword">On</span> <span class="keyword">Error</span> <span class="keyword">GoTo</span> <span class="number">0</span></span><br></pre></td></tr></table></figure><figure class="highlight vb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&#x27; On Error GoTo</span></span><br><span class="line"><span class="keyword">On</span> <span class="keyword">Error</span> <span class="keyword">GoTo</span> 錯誤標籤</span><br><span class="line">    <span class="comment">&#x27; 可能會發生錯誤的程式</span></span><br><span class="line"><span class="keyword">Exit</span> <span class="keyword">Sub</span></span><br><span class="line">錯誤標籤:</span><br><span class="line">    <span class="comment">&#x27; 錯誤處理程式</span></span><br><span class="line"><span class="keyword">End</span> <span class="keyword">Sub</span></span><br></pre></td></tr></table></figure><h3 id="二、偵錯"><a href="#二、偵錯" class="headerlink" title="二、偵錯"></a>二、偵錯</h3><p>VBA中的偵錯有兩種，一種是設置斷點，一種是使用Debug.Print。</p><figure class="highlight vb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&#x27; 使用Debug.Print</span></span><br><span class="line">Debug.Print <span class="string">&quot;輸出文字&quot;</span></span><br></pre></td></tr></table></figure><p>點選程式碼指定行數【設置斷點】即可<br><img src="/image/20231203_14-01-08.png"></p><h3 id="三、其他"><a href="#三、其他" class="headerlink" title="三、其他"></a>三、其他</h3><p>VBA中的其他有兩種，一種是設置變數類型，一種是設置變數作用域。</p><figure class="highlight vb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&#x27; 設置變數類型</span></span><br><span class="line"><span class="keyword">Option</span> <span class="keyword">Explicit</span></span><br></pre></td></tr></table></figure><figure class="highlight vb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&#x27; 設置變數作用域</span></span><br><span class="line"><span class="keyword">Private</span> 變數名稱 <span class="keyword">As</span> 變數類型</span><br></pre></td></tr></table></figure><hr><h2 id="VBA-常用函數"><a href="#VBA-常用函數" class="headerlink" title="VBA 常用函數"></a>VBA 常用函數</h2><h3 id="1-字串函數"><a href="#1-字串函數" class="headerlink" title="1. 字串函數"></a>1. 字串函數</h3><figure class="highlight vb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&#x27; 字串長度</span></span><br><span class="line">Len(字串)</span><br></pre></td></tr></table></figure><figure class="highlight vb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&#x27; 字串截取</span></span><br><span class="line"><span class="keyword">Mid</span>(字串, 開始位置, 長度)</span><br></pre></td></tr></table></figure><figure class="highlight vb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&#x27; 字串替換</span></span><br><span class="line">Replace(字串, 要替換的字串, 替換後的字串)</span><br></pre></td></tr></table></figure><figure class="highlight vb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&#x27; 字串分割</span></span><br><span class="line">Split(字串, 分割符號)</span><br></pre></td></tr></table></figure><figure class="highlight vb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&#x27; 字串轉小寫</span></span><br><span class="line">LCase(字串)</span><br></pre></td></tr></table></figure><figure class="highlight vb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&#x27; 字串轉大寫</span></span><br><span class="line">UCase(字串)</span><br></pre></td></tr></table></figure><figure class="highlight vb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&#x27; 字串去空格</span></span><br><span class="line">Trim(字串)</span><br></pre></td></tr></table></figure><figure class="highlight vb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&#x27; 字串去左空格</span></span><br><span class="line">LTrim(字串)</span><br></pre></td></tr></table></figure><figure class="highlight vb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&#x27; 字串去右空格</span></span><br><span class="line">RTrim(字串)</span><br></pre></td></tr></table></figure><figure class="highlight vb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&#x27; 字串取代</span></span><br><span class="line">StrConv(字串, vbProperCase)</span><br></pre></td></tr></table></figure><h3 id="2-數學函數"><a href="#2-數學函數" class="headerlink" title="2. 數學函數"></a>2. 數學函數</h3><figure class="highlight vb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&#x27; 絕對值</span></span><br><span class="line">Abs(數字)</span><br></pre></td></tr></table></figure><figure class="highlight vb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&#x27; 四捨五入</span></span><br><span class="line">Round(數字, 小數位數)</span><br></pre></td></tr></table></figure><figure class="highlight vb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&#x27; 最大值</span></span><br><span class="line">Max(數字<span class="number">1</span>, 數字<span class="number">2</span>, ...)</span><br></pre></td></tr></table></figure><figure class="highlight vb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&#x27; 最小值</span></span><br><span class="line">Min(數字<span class="number">1</span>, 數字<span class="number">2</span>, ...)</span><br></pre></td></tr></table></figure><figure class="highlight vb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&#x27; 平方根</span></span><br><span class="line">Sqr(數字)</span><br></pre></td></tr></table></figure><figure class="highlight vb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&#x27; 隨機數</span></span><br><span class="line">Rnd()</span><br></pre></td></tr></table></figure><h3 id="3-日期函數"><a href="#3-日期函數" class="headerlink" title="3. 日期函數"></a>3. 日期函數</h3><figure class="highlight vb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&#x27; 當前日期</span></span><br><span class="line"><span class="type">Date</span></span><br></pre></td></tr></table></figure><figure class="highlight vb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&#x27; 當前時間</span></span><br><span class="line">Time</span><br></pre></td></tr></table></figure><figure class="highlight vb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&#x27; 當前日期時間</span></span><br><span class="line">Now</span><br></pre></td></tr></table></figure><figure class="highlight vb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&#x27; 年份</span></span><br><span class="line">Year(日期)</span><br></pre></td></tr></table></figure><figure class="highlight vb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&#x27; 月份</span></span><br><span class="line">Month(日期)</span><br></pre></td></tr></table></figure><figure class="highlight vb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&#x27; 日</span></span><br><span class="line">Day(日期)</span><br></pre></td></tr></table></figure><figure class="highlight vb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&#x27; 時</span></span><br><span class="line">Hour(日期)</span><br></pre></td></tr></table></figure><figure class="highlight vb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&#x27; 分</span></span><br><span class="line">Minute(日期)</span><br></pre></td></tr></table></figure><figure class="highlight vb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&#x27; 秒</span></span><br><span class="line">Second(日期)</span><br></pre></td></tr></table></figure><figure class="highlight vb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&#x27; 日期格式化</span></span><br><span class="line">Format(日期, 格式)</span><br></pre></td></tr></table></figure><h3 id="4-類型轉換函數"><a href="#4-類型轉換函數" class="headerlink" title="4. 類型轉換函數"></a>4. 類型轉換函數</h3><figure class="highlight vb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&#x27; 數字轉字串</span></span><br><span class="line"><span class="built_in">CStr</span>(數字)</span><br></pre></td></tr></table></figure><figure class="highlight vb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&#x27; 字串轉數字</span></span><br><span class="line"><span class="built_in">CInt</span>(字串)</span><br></pre></td></tr></table></figure><figure class="highlight vb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&#x27; 字串轉日期</span></span><br><span class="line"><span class="built_in">CDate</span>(字串)</span><br></pre></td></tr></table></figure><figure class="highlight vb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&#x27; 字串轉布林</span></span><br><span class="line"><span class="built_in">CBool</span>(字串)</span><br></pre></td></tr></table></figure><h3 id="5-陣列函數"><a href="#5-陣列函數" class="headerlink" title="5. 陣列函數"></a>5. 陣列函數</h3><figure class="highlight vb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&#x27; 陣列長度</span></span><br><span class="line">UBound(陣列)</span><br></pre></td></tr></table></figure><figure class="highlight vb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&#x27; 陣列排序</span></span><br><span class="line">Sort(陣列)</span><br></pre></td></tr></table></figure><figure class="highlight vb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&#x27; 陣列反轉</span></span><br><span class="line">Reverse(陣列)</span><br></pre></td></tr></table></figure><figure class="highlight vb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&#x27; 陣列合併</span></span><br><span class="line"><span class="keyword">Join</span>(陣列, 分隔符號)</span><br></pre></td></tr></table></figure><figure class="highlight vb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&#x27; 陣列分割</span></span><br><span class="line">Split(字串, 分隔符號)</span><br></pre></td></tr></table></figure><h3 id="6-其他函數"><a href="#6-其他函數" class="headerlink" title="6. 其他函數"></a>6. 其他函數</h3><figure class="highlight vb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&#x27; 計算執行時間</span></span><br><span class="line">Timer</span><br></pre></td></tr></table></figure><figure class="highlight vb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&#x27; 暫停</span></span><br><span class="line">Sleep(毫秒)</span><br></pre></td></tr></table></figure><figure class="highlight vb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&#x27; 計算執行時間</span></span><br><span class="line">Timer</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 後端技術 </category>
          
          <category> VB </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Excel </tag>
            
            <tag> VBA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【VB】VBA 基本語法 02 - 函數、子程序</title>
      <link href="/2023/12/03/%E5%BE%8C%E7%AB%AF%E6%8A%80%E8%A1%93/VB/%E3%80%90VB%E3%80%91VBA%20%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8%E6%96%B9%E5%BC%8F-02/"/>
      <url>/2023/12/03/%E5%BE%8C%E7%AB%AF%E6%8A%80%E8%A1%93/VB/%E3%80%90VB%E3%80%91VBA%20%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8%E6%96%B9%E5%BC%8F-02/</url>
      
        <content type="html"><![CDATA[<h2 id="如何開啟-VBA-編輯器"><a href="#如何開啟-VBA-編輯器" class="headerlink" title="如何開啟 VBA 編輯器"></a>如何開啟 VBA 編輯器</h2><p>首先按下<code>Alt + F11</code>，進入VBA編輯器，然後在左側的專案總管中，選擇<code>這台電腦</code>，右鍵選擇<code>插入</code>，選擇<code>模組</code>，即可進入VBA編輯器。</p><h2 id="VBA-基本語法-函數、子程序"><a href="#VBA-基本語法-函數、子程序" class="headerlink" title="VBA 基本語法 - 函數、子程序"></a>VBA 基本語法 - 函數、子程序</h2><h3 id="一、函數"><a href="#一、函數" class="headerlink" title="一、函數"></a>一、函數</h3><p>VBA中的函數有兩種，一種是內建函數，一種是自定義函數。</p><figure class="highlight vb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&#x27; 內建函數</span></span><br><span class="line">內建函數名稱(參數<span class="number">1</span>, 參數<span class="number">2</span>, ...)</span><br></pre></td></tr></table></figure><figure class="highlight vb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&#x27; 自定義函數</span></span><br><span class="line"><span class="keyword">Function</span> 函數名稱(參數<span class="number">1</span>, 參數<span class="number">2</span>, ...)</span><br><span class="line">    <span class="comment">&#x27; 函數內執行的程式</span></span><br><span class="line"><span class="keyword">End</span> <span class="keyword">Function</span></span><br></pre></td></tr></table></figure><h3 id="二-子程序"><a href="#二-子程序" class="headerlink" title="二. 子程序"></a>二. 子程序</h3><p>VBA中的子程序有兩種，一種是Sub子程序，一種是Function子程序。</p><figure class="highlight vb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&#x27; Sub子程序</span></span><br><span class="line"><span class="keyword">Sub</span> 子程序名稱(參數<span class="number">1</span>, 參數<span class="number">2</span>, ...)</span><br><span class="line">    <span class="comment">&#x27; 子程序內執行的程式</span></span><br><span class="line"><span class="keyword">End</span> <span class="keyword">Sub</span></span><br></pre></td></tr></table></figure><figure class="highlight vb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&#x27; Function子程序</span></span><br><span class="line"><span class="keyword">Function</span> 子程序名稱(參數<span class="number">1</span>, 參數<span class="number">2</span>, ...)</span><br><span class="line">    <span class="comment">&#x27; 子程序內執行的程式</span></span><br><span class="line"><span class="keyword">End</span> <span class="keyword">Function</span></span><br></pre></td></tr></table></figure><h3 id="三-物件"><a href="#三-物件" class="headerlink" title="三. 物件"></a>三. 物件</h3><p>VBA中的物件有兩種，一種是內建物件，一種是自定義物件。</p><figure class="highlight vb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&#x27; 內建物件</span></span><br><span class="line">內建物件名稱.屬性名稱</span><br></pre></td></tr></table></figure><figure class="highlight vb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&#x27; 自定義物件</span></span><br><span class="line">自定義物件名稱.屬性名稱</span><br></pre></td></tr></table></figure><h3 id="四-事件"><a href="#四-事件" class="headerlink" title="四. 事件"></a>四. 事件</h3><p>VBA中的事件有兩種，一種是內建事件，一種是自定義事件。</p><figure class="highlight vb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&#x27; 內建事件</span></span><br><span class="line"><span class="keyword">Private</span> <span class="keyword">Sub</span> 內建物件名稱_內建事件名稱()</span><br><span class="line">    <span class="comment">&#x27; 事件內執行的程式</span></span><br><span class="line"><span class="keyword">End</span> <span class="keyword">Sub</span></span><br></pre></td></tr></table></figure><figure class="highlight vb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&#x27; 自定義事件</span></span><br><span class="line"><span class="keyword">Private</span> <span class="keyword">Sub</span> 自定義物件名稱_自定義事件名稱()</span><br><span class="line">    <span class="comment">&#x27; 事件內執行的程式</span></span><br><span class="line"><span class="keyword">End</span> <span class="keyword">Sub</span></span><br></pre></td></tr></table></figure><h3 id="五-類別"><a href="#五-類別" class="headerlink" title="五. 類別"></a>五. 類別</h3><p>VBA中的類別有兩種，一種是內建類別，一種是自定義類別。</p><figure class="highlight vb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&#x27; 內建類別</span></span><br><span class="line"><span class="keyword">Private</span> <span class="keyword">Sub</span> 內建物件名稱_內建類別名稱()</span><br><span class="line">    <span class="comment">&#x27; 類別內執行的程式</span></span><br><span class="line"><span class="keyword">End</span> <span class="keyword">Sub</span></span><br></pre></td></tr></table></figure><figure class="highlight vb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&#x27; 自定義類別</span></span><br><span class="line"><span class="keyword">Private</span> <span class="keyword">Sub</span> 自定義物件名稱_自定義類別名稱()</span><br><span class="line">    <span class="comment">&#x27; 類別內執行的程式</span></span><br><span class="line"><span class="keyword">End</span> <span class="keyword">Sub</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 後端技術 </category>
          
          <category> VB </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Excel </tag>
            
            <tag> VBA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【VB】VBA 基本語法 01 - 註解、變數、輸入輸出、條件判斷、迴圈</title>
      <link href="/2023/12/03/%E5%BE%8C%E7%AB%AF%E6%8A%80%E8%A1%93/VB/%E3%80%90VB%E3%80%91VBA%20%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8%E6%96%B9%E5%BC%8F-01/"/>
      <url>/2023/12/03/%E5%BE%8C%E7%AB%AF%E6%8A%80%E8%A1%93/VB/%E3%80%90VB%E3%80%91VBA%20%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8%E6%96%B9%E5%BC%8F-01/</url>
      
        <content type="html"><![CDATA[<h2 id="如何開啟-VBA-編輯器"><a href="#如何開啟-VBA-編輯器" class="headerlink" title="如何開啟 VBA 編輯器"></a>如何開啟 VBA 編輯器</h2><p>首先按下<code>Alt + F11</code>，進入VBA編輯器，然後在左側的專案總管中，選擇<code>這台電腦</code>，右鍵選擇<code>插入</code>，選擇<code>模組</code>，即可進入VBA編輯器。</p><h2 id="VBA-基本語法-註解、變數、輸入輸出、條件判斷"><a href="#VBA-基本語法-註解、變數、輸入輸出、條件判斷" class="headerlink" title="VBA 基本語法 - 註解、變數、輸入輸出、條件判斷"></a>VBA 基本語法 - 註解、變數、輸入輸出、條件判斷</h2><h3 id="一、註解"><a href="#一、註解" class="headerlink" title="一、註解"></a>一、註解</h3><p>VBA中的註解只有單行註解，如果要多行註解需要點選【檢視 &gt; 工具列 &gt; 編輯】叫出【工具列】點選 【使程式行變為註解】。</p><figure class="highlight vb"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&#x27; 單行註解</span></span><br></pre></td></tr></table></figure><p><img src="/image/20231203_13-43-35.png"></p><h3 id="二、變數"><a href="#二、變數" class="headerlink" title="二、變數"></a>二、變數</h3><p>VBA中的變數有兩種，一種是動態變數，一種是靜態變數。</p><figure class="highlight vb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&#x27; 動態變數</span></span><br><span class="line"><span class="keyword">Dim</span> 變數名稱 <span class="keyword">As</span> 變數類型</span><br></pre></td></tr></table></figure><figure class="highlight vb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&#x27; 靜態變數</span></span><br><span class="line"><span class="keyword">Static</span> 變數名稱 <span class="keyword">As</span> 變數類型</span><br></pre></td></tr></table></figure><h3 id="三、輸入輸出"><a href="#三、輸入輸出" class="headerlink" title="三、輸入輸出"></a>三、輸入輸出</h3><p>VBA中的輸入輸出有兩種，一種是輸入，一種是輸出。</p><figure class="highlight vb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&#x27; 輸入</span></span><br><span class="line">InputBox(<span class="string">&quot;輸入提示文字&quot;</span>, <span class="string">&quot;輸入標題&quot;</span>, <span class="string">&quot;預設值&quot;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight vb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&#x27; 輸出</span></span><br><span class="line">MsgBox <span class="string">&quot;輸出文字&quot;</span></span><br></pre></td></tr></table></figure><h3 id="四、條件判斷"><a href="#四、條件判斷" class="headerlink" title="四、條件判斷"></a>四、條件判斷</h3><p>VBA中的條件判斷有兩種，一種是單條件判斷，一種是多條件判斷。</p><figure class="highlight vb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&#x27; 單條件判斷</span></span><br><span class="line"><span class="keyword">If</span> 條件 <span class="keyword">Then</span></span><br><span class="line">    <span class="comment">&#x27; 條件成立時執行的程式</span></span><br><span class="line"><span class="keyword">End</span> <span class="keyword">If</span></span><br></pre></td></tr></table></figure><figure class="highlight vb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&#x27; 多條件判斷</span></span><br><span class="line"><span class="keyword">If</span> 條件<span class="number">1</span> <span class="keyword">Then</span></span><br><span class="line">    <span class="comment">&#x27; 條件1成立時執行的程式</span></span><br><span class="line"><span class="keyword">ElseIf</span> 條件<span class="number">2</span> <span class="keyword">Then</span></span><br><span class="line">    <span class="comment">&#x27; 條件2成立時執行的程式</span></span><br><span class="line"><span class="keyword">ElseIf</span> 條件<span class="number">3</span> <span class="keyword">Then</span></span><br><span class="line">    <span class="comment">&#x27; 條件3成立時執行的程式</span></span><br><span class="line"><span class="keyword">Else</span></span><br><span class="line">    <span class="comment">&#x27; 條件1、2、3都不成立時執行的程式</span></span><br><span class="line"><span class="keyword">End</span> <span class="keyword">If</span></span><br></pre></td></tr></table></figure><h3 id="五、迴圈"><a href="#五、迴圈" class="headerlink" title="五、迴圈"></a>五、迴圈</h3><p>VBA中的迴圈有兩種，一種是For迴圈，一種是Do迴圈。</p><figure class="highlight vb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&#x27; For迴圈</span></span><br><span class="line"><span class="keyword">For</span> 變數 = 初始值 <span class="keyword">To</span> 終止值 <span class="keyword">Step</span> 遞增值</span><br><span class="line">    <span class="comment">&#x27; 迴圈內執行的程式</span></span><br><span class="line"><span class="keyword">Next</span> 變數</span><br></pre></td></tr></table></figure><figure class="highlight vb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&#x27; Do迴圈</span></span><br><span class="line"><span class="keyword">Do</span> <span class="keyword">While</span> 條件</span><br><span class="line">    <span class="comment">&#x27; 迴圈內執行的程式</span></span><br><span class="line"><span class="keyword">Loop</span></span><br></pre></td></tr></table></figure><h3 id="六、陣列"><a href="#六、陣列" class="headerlink" title="六、陣列"></a>六、陣列</h3><p>VBA中的陣列有兩種，一種是動態陣列，一種是靜態陣列。</p><figure class="highlight vb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&#x27; 動態陣列</span></span><br><span class="line"><span class="keyword">Dim</span> 陣列名稱() <span class="keyword">As</span> 變數類型</span><br></pre></td></tr></table></figure><figure class="highlight vb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&#x27; 靜態陣列</span></span><br><span class="line"><span class="keyword">Dim</span> 陣列名稱(陣列大小) <span class="keyword">As</span> 變數類型</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 後端技術 </category>
          
          <category> VB </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Excel </tag>
            
            <tag> VBA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【VB】VBA 簡介、介紹</title>
      <link href="/2023/12/02/%E5%BE%8C%E7%AB%AF%E6%8A%80%E8%A1%93/VB/%E3%80%90VB%E3%80%91VBA%20%E7%B0%A1%E4%BB%8B%E3%80%81%E4%BB%8B%E7%B4%B9/"/>
      <url>/2023/12/02/%E5%BE%8C%E7%AB%AF%E6%8A%80%E8%A1%93/VB/%E3%80%90VB%E3%80%91VBA%20%E7%B0%A1%E4%BB%8B%E3%80%81%E4%BB%8B%E7%B4%B9/</url>
      
        <content type="html"><![CDATA[<h2 id="VBA-簡介"><a href="#VBA-簡介" class="headerlink" title="VBA 簡介"></a>VBA 簡介</h2><h3 id="一、起源"><a href="#一、起源" class="headerlink" title="一、起源"></a>一、起源</h3><p>VBA（Visual Basic for Applications）的起源可以追溯至上世紀90年代初。VBA是由微軟開發的一種編程語言，旨在為其Office套件（如Excel、Word和Access等）提供自定義和自動化功能。以下是VBA的主要歷史和發展階段：</p><ol><li><p><strong>Visual Basic引入（1991年）：</strong> Visual Basic（VB）是一種事件驅動的編程語言，最初由微軟在1991年引入。它為Windows平台提供了圖形用戶界面（GUI）應用程序開發的簡化工具。VB的成功促使微軟考慮將類似的編程能力引入其辦公套件。</p></li><li><p><strong>Office 95和VBA（1995年）：</strong> 微軟於1995年發布了Office 95套件，同時引入了VBA。VBA允許用戶在Office應用程序中自動執行任務、自定義功能和創建自定義用戶界面。這為用戶提供了更多的靈活性，使得他們能夠以編程方式操控Office應用程序。</p></li><li><p><strong>整合和擴展（後期90年代至2000年代初）：</strong> 隨著時間的推移，VBA逐漸被整合到微軟的Office套件中的各個應用程序中，包括Excel、Word、Access、Outlook等。VBA的功能也在這些應用程序中得到了擴展。</p></li><li><p><strong>VBA的流行和廣泛應用：</strong> 由於其易學易用的特性以及可以快速實現自動化任務的能力，VBA在業務和個人用戶中變得非常流行。許多用戶通過編寫VBA宏來定制和自動化他們的Office工作流程。</p></li><li><p><strong>後續版本和發展（2000年代至今）：</strong> VBA持續地在後續版本的Office中得到支持和改進。然而，微軟也引入了新的技術，如Office Add-ins和JavaScript API，為用戶提供更現代的方式來進行自定義和自動化。</p></li></ol><h3 id="二、特性"><a href="#二、特性" class="headerlink" title="二、特性"></a>二、特性</h3><p>VBA（Visual Basic for Applications）擁有多項特性，使其成為一種強大的程式語言，特別適用於Microsoft Office應用程式的自動化和定制。以下是VBA的一些主要特性：</p><ol><li><p><strong>內建於Microsoft Office：</strong> VBA是Microsoft Office套件的一部分，內建於應用程式如Excel、Word、Access、Outlook等中。這使得VBA可以直接與這些應用程式進行交互，並利用它們的物件模型和功能。</p></li><li><p><strong>易學易用：</strong> VBA的語法與VB（Visual Basic）類似，具有簡單的結構和易學性。這使得用戶可以相對迅速地掌握基本的VBA編程技能，尤其是對於那些熟悉Office應用程式的用戶。</p></li><li><p><strong>巨集錄製：</strong> VBA允許用戶通過巨集錄製功能記錄他們在Office應用程式中執行的任務。它會自動生成相應的VBA代碼，用戶可以學習和編輯這些代碼，實現更複雜的自動化過程。</p></li><li><p><strong>事件驅動：</strong> VBA是一個事件驅動的編程語言，可以響應用戶在Office應用程式中的各種事件，如點擊按鈕、更改儲存格內容等。這使得用戶可以編寫與用戶互動的自定義功能。</p></li><li><p><strong>物件模型：</strong> VBA使用強大的物件模型來表示Office應用程式的各個元素，如工作簿、儲存格、文件、表單等。通過操作這些物件，用戶可以實現對應用程式的全面控制。</p></li><li><p><strong>自動化：</strong> VBA允許用戶自動執行重複性任務，提高工作效率。用戶可以編寫腳本來自動處理數據、生成報告、執行計算等，減少手動操作的需求。</p></li><li><p><strong>靈活性：</strong> VBA非常靈活，允許用戶根據需要編寫自定義的功能和程式。用戶可以創建用戶界面、自定義菜單、生成互動式報告等，以滿足特定的業務需求。</p></li><li><p><strong>偵錯工具：</strong> VBA提供了偵錯工具，如斷點、監視窗口等，幫助用戶在編寫代碼時進行偵錯和錯誤修復。</p></li><li><p><strong>與外部系統整合：</strong> 除了與Office應用程式整合外，VBA還支持與其他系統和技術的整合，如數據庫、API調用等。</p></li></ol><h3 id="三、office-腳本語言"><a href="#三、office-腳本語言" class="headerlink" title="三、office 腳本語言"></a>三、office 腳本語言</h3><p>在 Microsoft Excel 中，VBA（Visual Basic for Applications）是一種主要的腳本語言，用於編寫巨集和自訂功能。</p><ol><li><p><strong>Visual Basic for Applications (VBA)：</strong> VBA 是一種基於 Visual Basic 的編程語言，專門用於自動化和定制 Microsoft Office 應用程式，包括 Excel。透過 VBA，使用者可以編寫腳本（巨集）來執行特定的任務，自定義工作表、圖表和其他 Excel 元素。</p></li><li><p><strong>巨集：</strong> 在 Excel 中，VBA 代碼通常嵌入在巨集中。巨集是一系列的 VBA 代碼，可以透過按下快捷鍵、按鈕或其他觸發方式來執行。巨集可以用於自動執行任務、處理數據、生成報告等。</p></li><li><p><strong>VBA 編輯器：</strong> 使用者可以使用 VBA 編輯器來編寫、編輯和管理 VBA 代碼。透過按下 <code>Alt + F11</code> 快捷鍵，可以打開 VBA 編輯器。在編輯器中，使用者可以創建模塊、程序、類模塊等，以組織和存儲 VBA 代碼。</p></li><li><p><strong>Excel 物件模型：</strong> VBA 通過 Excel 物件模型與 Excel 應用程式進行交互。物件模型包括工作簿、工作表、儲存格、圖表等各種元素。透過操作這些物件，使用者可以實現對 Excel 的全面控制。</p></li><li><p><strong>事件驅動：</strong> VBA 是事件驅動的，可以響應使用者對工作表和其他元素的操作。例如，使用者點擊儲存格、更改儲存格內容等操作可以觸發 VBA 代碼的執行。</p></li><li><p><strong>巨集錄製：</strong> Excel 還提供了巨集錄製功能，允許使用者透過執行一系列操作來自動生成相應的 VBA 代碼。這使得使用者無需手動編寫代碼，也能創建自定義功能。</p></li><li><p><strong>偵錯工具：</strong> VBA 編輯器中提供了偵錯工具，如斷點、監視窗口等，幫助使用者在編寫和執行代碼時進行偵錯和錯誤修復。</p></li><li><p><strong>與其他 Office 應用程式的整合：</strong> VBA 不僅可以用於 Excel，還可以在其他 Microsoft Office 應用程式中使用。這意味著使用者可以在整個 Office 套件中共享和重複使用他們的 VBA 代碼。</p></li></ol><hr><h2 id="使用時機"><a href="#使用時機" class="headerlink" title="使用時機"></a>使用時機</h2><p>使用 VBA（Visual Basic for Applications）的時機通常是為了增強功能、自動化重複性任務或定制特定的工作流程。以下是一些使用 VBA 的常見時機：</p><ol><li><p><strong>自動化任務：</strong> 當需要自動執行重複性、繁瑣的任務時，可以使用 VBA 編寫腳本來代替手動操作。這包括數據導入、格式調整、報告生成等。</p></li><li><p><strong>定制功能：</strong> 如果 Excel 中的內建功能不能滿足特定需求，可以使用 VBA 來創建自定義函數、過程或工具欄按鈕，以實現個性化的功能。</p></li><li><p><strong>數據處理：</strong> 當需要處理大量數據、進行計算或分析時，VBA 可以編寫腳本來執行複雜的數據處理任務，提高效率並減少錯誤。</p></li><li><p><strong>用戶界面修改：</strong> 如果希望修改 Excel 的用戶界面以更好地適應特定的工作流程，可以使用 VBA 創建自定義對話框、用戶表單或自定義菜單。</p></li><li><p><strong>報告生成：</strong> 使用 VBA 可以自動化報告的生成過程，從而簡化工作並確保報告的一致性。可以根據特定的數據集，動態生成報告內容。</p></li><li><p><strong>與其他應用程序整合：</strong> 如果需要與其他 Microsoft Office 應用程序或外部系統進行整合，可以使用 VBA 編寫代碼來實現數據傳遞、交互或自動化流程。</p></li><li><p><strong>數據驗證和清理：</strong> 使用 VBA 可以編寫代碼來驗證和清理數據，確保數據的準確性和一致性。</p></li><li><p><strong>複雜計算：</strong> 當需要進行複雜的數學計算、模擬或模型建立時，VBA 可以提供更靈活的編程環境，以實現特定的計算需求。</p></li><li><p><strong>事件驅動的操作：</strong> 當需要在用戶執行某些操作時觸發特定的響應時，可以使用 VBA 來編寫事件驅動的代碼，如儲存格更改、按鈕點擊等。</p></li><li><p><strong>批量操作：</strong> 當需要批量處理大量工作簿或工作表時，可以使用 VBA 編寫代碼來循環處理，提高效率。</p></li></ol><hr><h2 id="其餘問題"><a href="#其餘問題" class="headerlink" title="其餘問題"></a>其餘問題</h2><p>在使用 VBA 進行 Excel 編程時，還有一些其他常見的問題和概念，可能與你的應用場景相關。以下是一些可能涉及到的問題和主題：</p><ol><li><p><strong>安全性考慮：</strong> 當使用 VBA 時，需要考慮到安全性問題，特別是如果你在共享的工作簿中使用了巨集。了解如何啟用或禁用巨集，以及如何處理潛在的安全風險。</p></li><li><p><strong>錯誤處理：</strong> 在編寫 VBA 代碼時，考慮如何處理可能出現的錯誤。了解如何使用錯誤處理語句（例如 <code>On Error Resume Next</code> 和 <code>On Error GoTo</code>）來捕獲和處理代碼中的錯誤。</p></li><li><p><strong>性能優化：</strong> 针對大型數據集或複雜的操作，了解如何優化 VBA 代碼的性能。使用適當的數據結構和算法，以確保代碼運行效率。</p></li><li><p><strong>變量和數據類型：</strong> 確保對變量使用適當的數據類型，並了解變量的作用域。了解何時使用整數、長整數、雙精度浮點數等數據類型。</p></li><li><p><strong>物件模型深入了解：</strong> 詳細了解 Excel 物件模型，包括工作簿、工作表、範圍等物件的屬性和方法。這有助於更好地操作 Excel 中的元素。</p></li><li><p><strong>用戶界面設計：</strong> 如果你的 VBA 代碼涉及自定義用戶界面，了解如何設計和創建用戶友好的對話框、表單和控件。</p></li><li><p><strong>與數據庫交互：</strong> 如果你需要從外部數據庫中檢索或更新數據，了解如何使用 ADO（ActiveX Data Objects）等技術進行數據庫交互。</p></li><li><p><strong>自定義函數：</strong> 學會如何編寫和使用自定義函數，這有助於擴展 Excel 中可用的函數列表。</p></li><li><p><strong>版本兼容性：</strong> 確保你的 VBA 代碼在不同版本的 Excel 中能夠正常運行。有時可能需要考慮向後兼容性或特定版本的新功能。</p></li><li><p><strong>動態數組和集合：</strong> 學會使用動態數組和集合，以便更靈活地處理數據。了解如何動態調整數組大小，以適應不同的數據量。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 後端技術 </category>
          
          <category> VB </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Excel </tag>
            
            <tag> VBA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Azure】Azure Pipeline 執行npm腳本</title>
      <link href="/2023/11/27/DevOps/Azure/Azure%20Pipeline%20%E5%9F%B7%E8%A1%8Cnpm%E8%85%B3%E6%9C%AC/"/>
      <url>/2023/11/27/DevOps/Azure/Azure%20Pipeline%20%E5%9F%B7%E8%A1%8Cnpm%E8%85%B3%E6%9C%AC/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>為了回顧之前保留的技術避免再次遺忘，這次要把npm build 動作也記錄在當中。</p><h2 id="解決方式"><a href="#解決方式" class="headerlink" title="解決方式"></a>解決方式</h2><p>pipeline 中的npm build 動作，如果使用 npm run build 會發生錯誤，所以需要使用npm run-script build 來執行。</p><p>因為本章是使用 Angular 14 之前版本可以支援 –prod 參數，所以可以使用下方指令來執行。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">run-script build --prod</span><br></pre></td></tr></table></figure><p><img src="/image/20231127_22-34-12.png"></p>]]></content>
      
      
      <categories>
          
          <category> 雲端平台 </category>
          
          <category> Azure </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Azure </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Azure】Pipeline 切換node版本</title>
      <link href="/2023/11/27/DevOps/Azure/Azure%20Pipeline%20%E5%88%87%E6%8F%9Bnode%E7%89%88%E6%9C%AC/"/>
      <url>/2023/11/27/DevOps/Azure/Azure%20Pipeline%20%E5%88%87%E6%8F%9Bnode%E7%89%88%E6%9C%AC/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>近期需要加入DevOps 中Pipeline 來做自動化部屬，但是發現在Pipeline 中的node版本是8.10.0，而我們的專案需要使用node 14.15.1，所以需要在Pipeline 中切換node版本。</p><p>備註 : 這段很多網站上有一些做法會無法正常切換，依據下方作法可以正常切換node版本。</p><h2 id="解決方式"><a href="#解決方式" class="headerlink" title="解決方式"></a>解決方式</h2><p>加入版本時候，需要加入【Node.Js tools install】才會把node版本加入到Pipeline 中，如下圖所示。<br><img src="/image/20231127_22-29-14.png"><br><img src="/image/20231127_22-29-22.png"></p>]]></content>
      
      
      <categories>
          
          <category> 雲端平台 </category>
          
          <category> Azure </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Azure </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C# Discord (二) - 利用webhook製作排程公告</title>
      <link href="/2023/11/20/%E5%BE%8C%E7%AB%AF%E6%8A%80%E8%A1%93/CS/Discord/discord-02_%E5%88%A9%E7%94%A8webhook%E8%A3%BD%E4%BD%9C%E6%8E%92%E7%A8%8B%E5%85%AC%E5%91%8A/"/>
      <url>/2023/11/20/%E5%BE%8C%E7%AB%AF%E6%8A%80%E8%A1%93/CS/Discord/discord-02_%E5%88%A9%E7%94%A8webhook%E8%A3%BD%E4%BD%9C%E6%8E%92%E7%A8%8B%E5%85%AC%E5%91%8A/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>近期放下手邊 side project 回歸初心繼續研究其他功能、套件，使用 discord 一段時間目標也要讓 discord 走向不同的風格，因此，利用discord webhook 製作簡易版本排程公告。</p><h3 id="規劃"><a href="#規劃" class="headerlink" title="規劃"></a>規劃</h3><p>排程有很多做法可以處理，近期沒有整理一樣技術的文章，建議 C# 新手要玩排程可以考慮使用 Web Application 中 WebJob。這邊定義以下幾個排程需要用到的東西</p><ol><li>內容 : 這裡使用 <a href="https://jontcont.github.io/">John Conte Blog</a> 部落格的文章作為範例。(PS 可以使用自己的Blog)</li><li>時間 : 這裡思考方向要雙方要有時間，就可以不用暫存最新一筆的名稱 (待補充)。 <a href="https://zh-tw.rakko.tools/tools/88/">Cron 產生器</a></li><li>API&#x2F;爬蟲 : 作法是否可以用API取得資料，或是使用爬蟲取得資料。</li></ol><p>基於這幾個想法，我們就可以執行下一步驟。</p><hr><h2 id="製作排程公告"><a href="#製作排程公告" class="headerlink" title="製作排程公告"></a>製作排程公告</h2><h3 id="0-套件"><a href="#0-套件" class="headerlink" title="0. 套件"></a>0. 套件</h3><ol><li>AngleSharp : 用來爬取網頁資料</li><li>Newtonsoft.Json : 用來處理 json 格式資料</li></ol><h3 id="1-製作爬蟲"><a href="#1-製作爬蟲" class="headerlink" title="1. 製作爬蟲"></a>1. 製作爬蟲</h3><h4 id="1-1-設定參數"><a href="#1-1-設定參數" class="headerlink" title="1.1 設定參數"></a>1.1 設定參數</h4><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 建立 Browser 的配置</span></span><br><span class="line"><span class="keyword">var</span> config = AngleSharp.Configuration.Default</span><br><span class="line">    .WithDefaultLoader()</span><br><span class="line">    .WithDefaultCookies();  <span class="comment">// 設定 Cookie</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 根據配置建立出我們的 Browser </span></span><br><span class="line"><span class="keyword">var</span> browser = BrowsingContext.New(config);</span><br></pre></td></tr></table></figure><h4 id="1-2-爬取資料"><a href="#1-2-爬取資料" class="headerlink" title="1.2 爬取資料"></a>1.2 爬取資料</h4><p>這裡就要開始針對前端 class id 基礎概念進行抓取動作，這邊使用 AngleSharp 提供的 OpenAsync 來打開網頁抓回內容。</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 這邊用的型別是 AngleSharp 提供的 AngleSharp.Dom.Url</span></span><br><span class="line"><span class="keyword">var</span> url = <span class="keyword">new</span> Url(<span class="string">&quot;https://jontcont.github.io/&quot;</span>);</span><br><span class="line"><span class="comment">// 使用 OpenAsync 來打開網頁抓回內容</span></span><br><span class="line"><span class="keyword">var</span> doc = <span class="keyword">await</span> browser.OpenAsync(url);</span><br><span class="line"><span class="keyword">var</span> htmls = doc.QuerySelectorAll(<span class="string">&quot;div.recent-post-item&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span> (<span class="keyword">var</span> html <span class="keyword">in</span> htmls)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> link = html.QuerySelector(<span class="string">&quot;a&quot;</span>)?.GetAttribute(<span class="string">&quot;href&quot;</span>);</span><br><span class="line">    <span class="keyword">var</span> title = html.QuerySelector(<span class="string">&quot;a&quot;</span>)?.GetAttribute(<span class="string">&quot;title&quot;</span>);</span><br><span class="line">    <span class="keyword">var</span> timer = html.QuerySelector(<span class="string">&quot;time&quot;</span>)?.GetAttribute(<span class="string">&quot;datetime&quot;</span>);</span><br><span class="line">    <span class="keyword">var</span> text = html.QuerySelector(<span class="string">&quot;div.recent-post-info .content&quot;</span>)?.TextContent.Substring(<span class="number">0</span>, <span class="number">50</span>);</span><br><span class="line">    DateTime dateTime;</span><br><span class="line">    <span class="keyword">if</span> (link != <span class="literal">null</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        link = <span class="string">&quot;https://jontcont.github.io&quot;</span> + link;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (timer != <span class="literal">null</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">string</span> format = <span class="string">&quot;yyyy-MM-ddTHH:mm:ss.fffZ&quot;</span>; <span class="comment">// 爬蟲-取得的時間格式</span></span><br><span class="line">        dateTime = DateTime.ParseExact(timer, format, CultureInfo.InvariantCulture);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 這邊是判斷時間是否在10小時內，如果不是就跳出迴圈</span></span><br><span class="line">        <span class="keyword">if</span> (dateTime &lt; DateTime.Now.AddHours(<span class="number">-10</span>))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        console.WriteLine(<span class="string">$&quot;<span class="subst">&#123;title&#125;</span> : <span class="subst">&#123;link&#125;</span>&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-製作-Discord-Webhook"><a href="#2-製作-Discord-Webhook" class="headerlink" title="2. 製作 Discord Webhook"></a>2. 製作 Discord Webhook</h3><h4 id="2-1創建-Webhook-機器人"><a href="#2-1創建-Webhook-機器人" class="headerlink" title="2-1創建 Webhook 機器人"></a>2-1創建 Webhook 機器人</h4><p>這裡操作比上一篇簡單，只需要到 Discord &gt; 設定 &gt; 整合 &gt; Webhook &gt; 新增 Webhook &gt; 複製 Webhook URL &gt; 儲存 。以上動作即可<br><img src="/image/20231119_16-57-19.png"><br><img src="/image/20231119_17-00-07.png"><br><img src="/image/20231119_17-00-40.png"></p><h4 id="2-2-撰寫-webhook-機器人"><a href="#2-2-撰寫-webhook-機器人" class="headerlink" title="2-2 撰寫 webhook 機器人"></a>2-2 撰寫 webhook 機器人</h4><p>這裡我們使用 WebClient 來發送訊息，這邊要注意的是，Discord Webhook 需要使用 POST 的方式來發送訊息，並且需要設定 Content-Type 為 application&#x2F;json，這樣才能正確的發送訊息。</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">string</span> webhook = <span class="string">&quot;https://discord.com/api/webhooks/1175246408618614845/065Y6J32diNhnm-M7cupXDdfvMTglc-xUudQGe7yJSjI8xAPFXcOa7RqPjWiDcl3SdTB&quot;</span>;</span><br><span class="line">SendMessage(<span class="string">&quot;Hello World&quot;</span>, webhook);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">SendMessage</span>(<span class="params"><span class="built_in">string</span> message, <span class="built_in">string</span> webhook</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    WebClient client = <span class="keyword">new</span> WebClient();</span><br><span class="line">    client.Headers.Add(<span class="string">&quot;Content-Type&quot;</span>, <span class="string">&quot;application/json&quot;</span>);</span><br><span class="line">    <span class="built_in">string</span> payload = <span class="string">&quot;&#123;\&quot;content\&quot;: \&quot;&quot;</span> + message + <span class="string">&quot;\&quot;&#125;&quot;</span>;</span><br><span class="line">    client.UploadData(webhook, Encoding.UTF8.GetBytes(payload));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-串接爬蟲與-Discord-Webhook"><a href="#3-串接爬蟲與-Discord-Webhook" class="headerlink" title="3. 串接爬蟲與 Discord Webhook"></a>3. 串接爬蟲與 Discord Webhook</h3><h4 id="3-1-models-設計"><a href="#3-1-models-設計" class="headerlink" title="3-1 models 設計"></a>3-1 models 設計</h4><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">messages</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> username &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> avatar_url &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> content &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> List&lt;Embed&gt; embeds &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Embed</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> Author author &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> title &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> url &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> description &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> color &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> List&lt;Field&gt; fields &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> Thumbnail thumbnail &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> Image image &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> Footer footer &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Author</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> name &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> url &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> icon_url &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Field</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> name &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> <span class="keyword">value</span> &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">bool</span> inline &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Thumbnail</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> url &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Image</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> url &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Footer</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> text &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> icon_url &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-2-引入爬蟲內容"><a href="#3-2-引入爬蟲內容" class="headerlink" title="3-2 引入爬蟲內容"></a>3-2 引入爬蟲內容</h4><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">foreach</span> (<span class="keyword">var</span> html <span class="keyword">in</span> htmls)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> link = html.QuerySelector(<span class="string">&quot;a&quot;</span>)?.GetAttribute(<span class="string">&quot;href&quot;</span>);</span><br><span class="line">    <span class="keyword">var</span> title = html.QuerySelector(<span class="string">&quot;a&quot;</span>)?.GetAttribute(<span class="string">&quot;title&quot;</span>);</span><br><span class="line">    <span class="keyword">var</span> timer = html.QuerySelector(<span class="string">&quot;time&quot;</span>)?.GetAttribute(<span class="string">&quot;datetime&quot;</span>);</span><br><span class="line">    <span class="keyword">var</span> text = html.QuerySelector(<span class="string">&quot;div.recent-post-info .content&quot;</span>)?.TextContent.Substring(<span class="number">0</span>, <span class="number">50</span>);</span><br><span class="line">    DateTime dateTime;</span><br><span class="line">    <span class="keyword">if</span> (link != <span class="literal">null</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        link = <span class="string">&quot;https://jontcont.github.io&quot;</span> + link;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (timer != <span class="literal">null</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">string</span> format = <span class="string">&quot;yyyy-MM-ddTHH:mm:ss.fffZ&quot;</span>;</span><br><span class="line">        dateTime = DateTime.ParseExact(timer, format, CultureInfo.InvariantCulture);</span><br><span class="line">        <span class="keyword">if</span> (dateTime &lt; DateTime.Now.AddHours(<span class="number">-10</span>))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        contentEmbed.Add(<span class="keyword">new</span> Embed()</span><br><span class="line">        &#123;</span><br><span class="line">            title = title,</span><br><span class="line">            url = link,</span><br><span class="line">            color = <span class="number">0x00ff00</span>,</span><br><span class="line">            fields = <span class="keyword">new</span> List&lt;Field&gt;()&#123;</span><br><span class="line">                <span class="keyword">new</span> Field()&#123;</span><br><span class="line">                    name = <span class="string">&quot;內容&quot;</span>,</span><br><span class="line">                    <span class="keyword">value</span> = text + <span class="string">&quot;...&quot;</span>,</span><br><span class="line">                    inline = <span class="literal">false</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (contentEmbed.Any())</span><br><span class="line">&#123;</span><br><span class="line">    SendMessage(<span class="keyword">new</span> messages</span><br><span class="line">    &#123;</span><br><span class="line">        content = <span class="string">$&quot;hi there! 以下是我近期發布的[John Conte Blog](https://jontcont.github.io)文章歡迎參觀 😊 😊 。\n (固定每周發布) &quot;</span>,</span><br><span class="line">        embeds = contentEmbed</span><br><span class="line">    &#125;, webhook);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">SendMessage</span>(<span class="params">messages json, <span class="built_in">string</span> webhook</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    WebClient client = <span class="keyword">new</span> WebClient();</span><br><span class="line">    client.Headers.Add(<span class="string">&quot;Content-Type&quot;</span>, <span class="string">&quot;application/json&quot;</span>);</span><br><span class="line">    <span class="built_in">string</span> payload = JsonConvert.SerializeObject(json);</span><br><span class="line">    client.UploadData(webhook, Encoding.UTF8.GetBytes(payload));</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="4-效果-結果"><a href="#4-效果-結果" class="headerlink" title="4. 效果&#x2F;結果"></a>4. 效果&#x2F;結果</h3><p><img src="/image/20231119_17-12-30.png"></p><h3 id="4-1-azure-webjob"><a href="#4-1-azure-webjob" class="headerlink" title="4.1 azure webjob"></a>4.1 azure webjob</h3><p>這邊需要創建 azure 雲端平台就可以使用 web app，而這裡 webjob是可以免費使用的，只要設定排程就可以執行，這邊我們就可以使用排程公告的功能。 (檔案上傳名稱務必使用英文否則上船會失敗)。<br><img src="/image/20231119_17-20-29.png"><br><img src="/image/20231119_17-18-36.png"></p><h3 id="4-2-題外功能"><a href="#4-2-題外功能" class="headerlink" title="4.2 題外功能"></a>4.2 題外功能</h3><p>基於這個功能我特別加入 IThome 通知功能，如何看到此功能可以點下方連結，若需要訂閱請務必按照圖片動作。</p><ul><li><a href="https://discord.gg/BssY3EyAap">Discoard - IThome 公告通知</a></li></ul><h3 id="4-3-訂閱-追蹤頻道"><a href="#4-3-訂閱-追蹤頻道" class="headerlink" title="4-3 訂閱&#x2F;追蹤頻道"></a>4-3 訂閱&#x2F;追蹤頻道</h3><p><img src="/image/20231119_17-24-51.png"><br><img src="/image/20231119_17-25-08.png"></p><h2 id="文件參考"><a href="#文件參考" class="headerlink" title="文件參考"></a>文件參考</h2><ol><li><a href="https://igouist.github.io/post/2022/06/angle-sharp/">C#: 使用 AngleSharp 爬蟲工具來抓取網頁內容吧</a></li><li><a href="https://stackoverflow.com/questions/50574202/c-sharp-send-discord-webhook">C# Discord Message</a></li><li><a href="https://discordjs.guide/popular-topics/embeds.html#embed-preview">Discord 留言格式</a></li><li><a href="https://discohook.org/">Discord 留言產生器</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 後端技術 </category>
          
          <category> C# </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
            <tag> Discord </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Git】- 使用 Git Stash 暫存檔案或取用先前檔案</title>
      <link href="/2023/11/20/DevOps/Git/Git_08_%E6%9A%AB%E5%AD%98%E6%AA%94%E6%A1%88%E6%88%96%E5%8F%96%E7%94%A8%E5%85%88%E5%89%8D%E6%AA%94%E6%A1%88%20Stash/"/>
      <url>/2023/11/20/DevOps/Git/Git_08_%E6%9A%AB%E5%AD%98%E6%AA%94%E6%A1%88%E6%88%96%E5%8F%96%E7%94%A8%E5%85%88%E5%89%8D%E6%AA%94%E6%A1%88%20Stash/</url>
      
        <content type="html"><![CDATA[<h2 id="Git-Stash"><a href="#Git-Stash" class="headerlink" title="Git Stash"></a>Git Stash</h2><p>git 內有個功能叫做 stash，可以將目前的程式碼暫存起來，這個功能可以用在以下幾種情境。</p><ol><li>切 branch 之前功能尚未完成，但是又不想 commit</li><li>用解衝突方案</li></ol><h2 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h2><h3 id="查看-Stash-清單"><a href="#查看-Stash-清單" class="headerlink" title="查看 Stash 清單"></a>查看 Stash 清單</h3><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git stash list</span><br></pre></td></tr></table></figure><h3 id="存檔目前程式碼"><a href="#存檔目前程式碼" class="headerlink" title="存檔目前程式碼"></a>存檔目前程式碼</h3><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git stash save &lt;message&gt;</span><br></pre></td></tr></table></figure><h3 id="取出-套用-Stash"><a href="#取出-套用-Stash" class="headerlink" title="取出&#x2F;套用 Stash"></a>取出&#x2F;套用 Stash</h3><p>以下兩個是不同概念，pop 會將 stash id 移除，apply 會保留 stash id。<br>若是想要把local參數加入，一般都是使用apply來套用。</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git stash pop &lt;stash id&gt;</span><br><span class="line">git stash apply &lt;stash id&gt;</span><br></pre></td></tr></table></figure><h3 id="刪除-Stash"><a href="#刪除-Stash" class="headerlink" title="刪除 Stash"></a>刪除 Stash</h3><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git stash drop &lt;stash id&gt;</span><br></pre></td></tr></table></figure><h3 id="清除所有-Stash"><a href="#清除所有-Stash" class="headerlink" title="清除所有 Stash"></a>清除所有 Stash</h3><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git stash clear</span><br></pre></td></tr></table></figure><h2 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h2><p>stash 功能可以將目前的程式碼暫存起來，可以用在切換分支、解衝突等等，但是要注意的是 stash id 會隨著 stash 動作而改變，所以要注意 stash id 是否正確，執行前建議先用list確認過在下語法。</p>]]></content>
      
      
      <categories>
          
          <category> DevOps </category>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Git】- 使用 git reset 回到先前的commit</title>
      <link href="/2023/11/17/DevOps/Git/Git_06_%E5%9B%9E%E5%88%B0%E5%85%88%E5%89%8D%E7%9A%84commit/"/>
      <url>/2023/11/17/DevOps/Git/Git_06_%E5%9B%9E%E5%88%B0%E5%85%88%E5%89%8D%E7%9A%84commit/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>這篇紀錄一下上篇文章的補充，因為有時候會需要回到先前的commit，所以這邊紀錄一下。</p><h2 id="問題"><a href="#問題" class="headerlink" title="問題"></a>問題</h2><p>近期專案會想要把 commit 重新整理，發覺現在的commit 與先前commit結果不一樣，所以想要回到先前的commit。</p><h2 id="解決方式"><a href="#解決方式" class="headerlink" title="解決方式"></a>解決方式</h2><p>首先請將 現有的分支在copy一份出來，並且要切換到該分支。</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b &lt;new branch name&gt;</span><br></pre></td></tr></table></figure><p>再將commit回到正常版本</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset --hard &lt;commit id&gt;</span><br></pre></td></tr></table></figure><p>之後會遇到現行分支需要把它pull下來，這時候要把它 force 掉，因為現行分支的commit已經不是最新的了。<br>以下兩種方式可以使用，但是要注意，請不要再重要分支這樣搞，不然會有很大的風險。</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git push -f</span><br><span class="line">git push -force</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> DevOps </category>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Git】- 使用 git remote 將不同git環境同步程式碼</title>
      <link href="/2023/11/17/DevOps/Git/Git_07_%E5%B0%87%E4%B8%8D%E5%90%8Cgit%E7%92%B0%E5%A2%83%E5%90%8C%E6%AD%A5%E7%A8%8B%E5%BC%8F%E7%A2%BC/"/>
      <url>/2023/11/17/DevOps/Git/Git_07_%E5%B0%87%E4%B8%8D%E5%90%8Cgit%E7%92%B0%E5%A2%83%E5%90%8C%E6%AD%A5%E7%A8%8B%E5%BC%8F%E7%A2%BC/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>不少人會有經驗，當一個專案時候會有兩者開發人員進行開發，那開發有可能是 github、gitlab、azure devops等之類軟體。這邊提供一個git處理方式，可以快速同步對方的程式碼不用一個一個的copy。</p><hr><h2 id="處理方式"><a href="#處理方式" class="headerlink" title="處理方式"></a>處理方式</h2><h3 id="1-取得對方的clone-link"><a href="#1-取得對方的clone-link" class="headerlink" title="1. 取得對方的clone link"></a>1. 取得對方的clone link</h3><p>不論是什麼環境，第一步就是要對方的git 權限，沒有權限就只能一個一個copy了。接下來，我們拿到clone link後，輸入遠端url。</p><ul><li>remote name : 隨意輸入，要識別對方的git</li><li>clone link : 對方的clone link<figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add &lt;remote name&gt; &lt;clone link&gt;</span><br></pre></td></tr></table></figure></li></ul><h3 id="2-選擇要更新的分支"><a href="#2-選擇要更新的分支" class="headerlink" title="2. 選擇要更新的分支"></a>2. 選擇要更新的分支</h3><p>這邊有兩種方式一種是更新指定分支、一種是拉取分支。遇到衝突記得解衝突，那如果是比較肥大、歷史悠久的程式碼務必尋求同事協助，不然會有很大的風險。</p><h4 id="2-1-更新指定分支"><a href="#2-1-更新指定分支" class="headerlink" title="2-1. 更新指定分支"></a>2-1. 更新指定分支</h4><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git fetch &lt;remote name&gt; &lt;branch name&gt;</span><br></pre></td></tr></table></figure><h3 id="2-2-指定拉取單一分支"><a href="#2-2-指定拉取單一分支" class="headerlink" title="2-2. 指定拉取單一分支"></a>2-2. 指定拉取單一分支</h3><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull &lt;remote name&gt; &lt;branch name&gt;</span><br></pre></td></tr></table></figure><p>原則上動作只有這兩種，但是如果遇到衝突，請先解衝突，再進行commit。</p><hr><h2 id="補充"><a href="#補充" class="headerlink" title="補充"></a>補充</h2><p>依據remote特性，他只能抓下遠端分支的資料給當前要使用的git respoitity ，如果要讓雙方同步對方也要將程式碼同步給你，這時候就不會有覆蓋、複寫問題。</p><h3 id="1-變更-remote-url"><a href="#1-變更-remote-url" class="headerlink" title="1. 變更 remote url"></a>1. 變更 remote url</h3><p>如果對方的git url有變更，可以使用以下指令變更。</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote <span class="built_in">set</span>-url &lt;remote name&gt; &lt;clone link&gt;</span><br></pre></td></tr></table></figure><h3 id="2-刪除-remote-url"><a href="#2-刪除-remote-url" class="headerlink" title="2. 刪除 remote url"></a>2. 刪除 remote url</h3><p>如果對方的git url有變更，可以使用以下指令變更。</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote remove &lt;remote name&gt;</span><br></pre></td></tr></table></figure><h3 id="3-查看-remote"><a href="#3-查看-remote" class="headerlink" title="3. 查看 remote"></a>3. 查看 remote</h3><p>如果想要查看目前有哪些remote，可以使用以下指令查看。</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote -v</span><br></pre></td></tr></table></figure><h3 id="4-變更-remmote-name"><a href="#4-變更-remmote-name" class="headerlink" title="4. 變更 remmote name"></a>4. 變更 remmote name</h3><p>如果想要變更remote name，可以使用以下指令變更。</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote <span class="built_in">rename</span> &lt;old name&gt; &lt;new name&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> DevOps </category>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Github Pages (三) - 包含檔案發行</title>
      <link href="/2023/11/17/DevOps/Github/Github%20Pages%20(%E4%B8%89)%20-%20%E5%8C%85%E5%90%AB%E6%AA%94%E6%A1%88%E7%99%BC%E8%A1%8C/"/>
      <url>/2023/11/17/DevOps/Github/Github%20Pages%20(%E4%B8%89)%20-%20%E5%8C%85%E5%90%AB%E6%AA%94%E6%A1%88%E7%99%BC%E8%A1%8C/</url>
      
        <content type="html"><![CDATA[<h2 id="問題"><a href="#問題" class="headerlink" title="問題"></a>問題</h2><p>github page 使用上會遇到txt檔案要上傳時候，會有幾個檔案沒辦法正常上傳，建置時候build &#x2F;publish都不會出現想要上傳的檔案。</p><h2 id="解決方式"><a href="#解決方式" class="headerlink" title="解決方式"></a>解決方式</h2><p>在 <code>_config.yml</code> 檔案中加入以下設定，就會正常引入在public裡面了 (public 是 build 輸出檔案)。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">include:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&#x27;_xxx.txt&#x27;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 筆記 </category>
          
          <category> 生活雜記 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Azure】Board 加入一個QA環境</title>
      <link href="/2023/11/04/DevOps/Azure/Azure%20Board-%E5%8A%A0%E5%85%A5%E4%B8%80%E5%80%8BQA%E7%92%B0%E5%A2%83/"/>
      <url>/2023/11/04/DevOps/Azure/Azure%20Board-%E5%8A%A0%E5%85%A5%E4%B8%80%E5%80%8BQA%E7%92%B0%E5%A2%83/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>近期因為有案子需要使用 test case 環境，所以就想到了 Azure DevOps 的 Azure Board，可以使用 Azure Board 來管理 test case，因為是免費版本不能使用 test plan 所以簡單使用一個環境給QA使用，這邊就來介紹一下如何使用 Azure Board 來管理 test case。</p><hr><h2 id="1-Test-Case"><a href="#1-Test-Case" class="headerlink" title="1. Test Case"></a>1. Test Case</h2><p>Test case（測試案例）是軟體測試中的一個關鍵概念，它是一個特定的情境或情況，用來確定軟體在特定條件下是否按預期運作。Test case是軟體測試的基本單元，通常包括一個或多個測試步驟，以確保軟體的功能、效能、穩定性等方面都能滿足需求。</p><h3 id="1-1-優點"><a href="#1-1-優點" class="headerlink" title="1-1 優點"></a>1-1 優點</h3><p>測試案例的發展和定義是軟體品質保證的一部分，旨在確保軟體產品的可靠性和穩定性。</p><h3 id="1-2-作用"><a href="#1-2-作用" class="headerlink" title="1-2 作用"></a>1-2 作用</h3><ul><li>測試試案例的主要作用是確保軟體在各種情況下都能正確運作，減少錯誤和缺陷的風險。</li><li>通過執行測試案例，軟體開發團隊可以驗證軟體的功能是否符合設計規格，並確保它能夠滿足用戶需求。</li><li>測試案例還可以幫助識別和修復軟體中的缺陷，提高軟體品質。</li></ul><h3 id="1-3-要素"><a href="#1-3-要素" class="headerlink" title="1-3 要素"></a>1-3 要素</h3><p>測試案例包括一組指令或步驟，用來驗證軟體的功能、性能、可靠性等方面是否符合預定標準或需求。測試案例的目的是發現和識別潛在的軟體缺陷，確保軟體的品質，並提供開發團隊和測試團隊對軟體的評估基礎。</p><ol><li>測試用例的標識符（通常是唯一的識別碼）。</li><li>測試案例的名稱或描述，以說明正在測試的功能或情境。</li><li>測試案例的前提條件（測試前需要設定的狀態或條件）。</li><li>測試步驟，即要執行的操作，通常包括輸入數據和預期結果。</li><li>預期結果，即在測試步驟執行後預期的軟體反應或輸出。</li><li>測試案例的優先級和狀態（例如，已通過、待執行、失敗等）</li></ol><hr><h2 id="2-Boards"><a href="#2-Boards" class="headerlink" title="2. Boards"></a>2. Boards</h2><p>看板管理在左上方會有個 group 可以切換哪個 group 的看板，我們的第一步就會事先創建一個 group 給 QA。<br><img src="/image/20231104_14-24-29.png"></p><h3 id="2-1-創建-Group-群組"><a href="#2-1-創建-Group-群組" class="headerlink" title="2-1 創建 Group 群組"></a>2-1 創建 Group 群組</h3><p>這邊就創建一個 Group QA ，只要把帳號加入在團隊裡面就可以完成此作業了。<br><img src="/image/20231104_14-28-03.png"><br><img src="/image/20231104_14-29-45.png"><br><img src="/image/20231104_14-33-04.png"></p><h3 id="2-2-設定-Backlogs-工作項目"><a href="#2-2-設定-Backlogs-工作項目" class="headerlink" title="2-2 設定 Backlogs 工作項目"></a>2-2 設定 Backlogs 工作項目</h3><p>加入 Epics 項目，這邊可以用目的性標題輸入，讓 QA 可以快速找到自己要的項目。<br><img src="/image/20231104_14-42-02.png"></p><p>然後用SIT階段性分 Group 這樣就可以快速區分以及排序。<br><img src="/image/20231104_14-44-54.png"></p><p>從 Boards 可以看到 users story 就可以接下一段。<br><img src="/image/20231104_14-46-00.png"></p><h3 id="2-3-利用-Boards-創建一個-Test-Case"><a href="#2-3-利用-Boards-創建一個-Test-Case" class="headerlink" title="2-3 利用 Boards 創建一個 Test Case"></a>2-3 利用 Boards 創建一個 Test Case</h3><p>Boards 可以透過 <code>...</code> 符號點選後，就會出現 task、bug、test (test case) 選單出來，這邊就選擇 test 來創建一個 test case。</p><p><img src="/image/20231104_15-25-00.png"></p><p>已經選好 add test 後，這裡範例用 新增、刪除、修改來當作簡單範例。當創建完畢後，可以按下箭頭就會前往 test case 的頁面。</p><p><img src="/image/20231104_15-25-57.png"><br><img src="/image/20231104_15-27-53.png"></p><h3 id="2-4-Test-Case-頁面"><a href="#2-4-Test-Case-頁面" class="headerlink" title="2-4 Test Case 頁面"></a>2-4 Test Case 頁面</h3><p>這邊就可以看到剛剛創建的 test case，可以看到有三個 test case，這邊就可以點選進去看詳細資訊。</p><p><img src="/image/20231104_15-28-09.png"></p><h4 id="2-4-1-Test-Case-詳細資訊"><a href="#2-4-1-Test-Case-詳細資訊" class="headerlink" title="2-4-1 Test Case 詳細資訊"></a>2-4-1 Test Case 詳細資訊</h4><p>這裡功能表功能相當豐富，左邊清單就是從 【User Story】 創建出來工作項目，點下項目後就會呈現出Test Case 細項項目、狀態，若功能已經完成需要批次修改，也能透過右上角的功能表來進行批次修改。<br><img src="/image/20231104_15-29-02.png"></p><p>要前往下一步時候務必要撰寫好 test case 動作清單，之後可以透過 bug 快速產生 bug 資訊，這樣就可以讓RD快速找到問題點。<br><img src="/image/20231104_16-25-55.png"></p><h4 id="2-4-2-Test-Case-編輯畫面"><a href="#2-4-2-Test-Case-編輯畫面" class="headerlink" title="2-4-2 Test Case 編輯畫面"></a>2-4-2 Test Case 編輯畫面</h4><p>這裡範例我用 <em><em>刪除</em></em> 來展示細項設定以及回報Bug做法。首先我們選擇【刪除】項目後，並點選 【Run for web application】 就會出現小視窗可以針對這項功能去編輯內容、影片、圖片、文件等。</p><p>備註 :<br>雖然功能很強大，但是這裡範例是免費版本無法使用影片、圖片錄製、截圖之類功能，若要使用就要使用 test plan 版本。<br><img src="/image/20231104_15-30-40.png"><br><img src="/image/20231104_15-31-44.png"></p><h4 id="2-4-2-Test-Case-創建Bug環境"><a href="#2-4-2-Test-Case-創建Bug環境" class="headerlink" title="2-4-2 Test Case 創建Bug環境"></a>2-4-2 Test Case 創建Bug環境</h4><p>【Run for web application】功能裡面是有【Create Bug】選項，會把QA環境跟操作動作copy一分在上面資訊，可以快速創建一個bug。Board清單也會有一筆關聯紀錄，可以快速找到對應的bug。<br><img src="/image/20231104_16-18-10.png"><br><img src="/image/20231104_15-30-23.png"><br><img src="/image/20231104_15-34-55.png"></p><p>從下圖可以看到只要是只要有任何動作會產生一筆log 紀錄，可以方便確認是哪個時間點、哪個人測試，這樣就可以快速找到問題點。<br><img src="/image/20231104_15-32-55.png"></p><h3 id="2-5-Test-Case-Chart"><a href="#2-5-Test-Case-Chart" class="headerlink" title="2-5 Test Case Chart"></a>2-5 Test Case Chart</h3><p>還有不論是工作進度、追蹤一定少不了所謂的 chart 圖表，這裡就可以透過 chart 來看到目前進度、狀態、優先級等等，這樣就可以快速了解目前進度。<br><img src="/image/20231104_15-33-28.png"></p><hr><h2 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h2><p>DevOps 使用 Test Case 意外把功能用得非常有彈性。從近期使用DevOps能知道 Board 要限定哪些人可以看得到 Task必須要加入 Teams Group才能達到。還有最大特色是DevOps 是可以客製化 Columns 若需要知道 count 或是 proccess 之類問題可以透過那些綁定、創建。從小專案入手可以考慮用這個做法，無須使用 test plan 版本相當足夠使用。</p>]]></content>
      
      
      <categories>
          
          <category> 雲端平台 </category>
          
          <category> Azure </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Azure </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【C#】BenchmarkDotnet-效能測試</title>
      <link href="/2023/10/29/%E5%BE%8C%E7%AB%AF%E6%8A%80%E8%A1%93/CS/Nuget/BenchmarkDotnet-%E6%95%88%E8%83%BD%E6%B8%AC%E8%A9%A6/"/>
      <url>/2023/10/29/%E5%BE%8C%E7%AB%AF%E6%8A%80%E8%A1%93/CS/Nuget/BenchmarkDotnet-%E6%95%88%E8%83%BD%E6%B8%AC%E8%A9%A6/</url>
      
        <content type="html"><![CDATA[<p>近期為了整理先前技術，部分有很多功能沒有完全優化或是method不確定對效能有什麼問題。有一個不錯的套件能夠提供效能、執行時間檢視耗損，對於想要測試效能的工程師來說，這是一個不錯的選擇。</p><h2 id="BenchmarkDotnet"><a href="#BenchmarkDotnet" class="headerlink" title="BenchmarkDotnet"></a><a href="https://github.com/dotnet/BenchmarkDotNet">BenchmarkDotnet</a></h2><p><img src="/image/20231029_19-06-30.png"></p><p>雖然說這工具是一個檢視效能、執行結果的工具。同時，也能將method 進行比較哪個做法比較好<del>(破壞友情工具)</del>。實際上不需要比較就可以使用，k6與這功能有點類似，但是這個工具是針對 C# 進行效能測試。</p><h3 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h3><p>這邊展示就使用 filter 作法，來比較哪個做法效果比較好。<br>備註 : 如果要使用 net8 時候，切記 native Aot 不能使用，會出現錯誤。</p><h4 id="1-創建-Filter-比較類別"><a href="#1-創建-Filter-比較類別" class="headerlink" title="1. 創建 Filter 比較類別"></a>1. 創建 Filter 比較類別</h4><p>以下範例可以參考。這裡用 array、List、IEnumerable 來做比較，看哪個取得資料以及記憶體耗損會比較低。<br>MemoryDiagnoser &#x3D;&gt; 這個是用來檢視記憶體耗損。</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">MemoryDiagnoser</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">TestFilter</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    [<span class="meta">Benchmark</span>]</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ArrayFiler</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> values = <span class="keyword">new</span>[] &#123; <span class="string">&quot;John&quot;</span>, <span class="string">&quot;OvO&quot;</span>, <span class="string">&quot;Eric&quot;</span>, <span class="string">&quot;Conte&quot;</span> &#125;;</span><br><span class="line">        values.Where(x =&gt; x == <span class="string">&quot;Eric&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    [<span class="meta">Benchmark</span>]</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ListFiler</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> values = <span class="keyword">new</span> List&lt;<span class="built_in">string</span>&gt;() &#123; <span class="string">&quot;John&quot;</span>, <span class="string">&quot;OvO&quot;</span>, <span class="string">&quot;Eric&quot;</span>, <span class="string">&quot;Conte&quot;</span> &#125;;</span><br><span class="line">        values.Where(x =&gt; x == <span class="string">&quot;Eric&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    [<span class="meta">Benchmark</span>]</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">IEnumerableFiler</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> values = <span class="keyword">new</span>[] &#123; <span class="string">&quot;John&quot;</span>, <span class="string">&quot;OvO&quot;</span>, <span class="string">&quot;Eric&quot;</span>, <span class="string">&quot;Conte&quot;</span> &#125;.AsEnumerable();</span><br><span class="line">        values.Where(x =&gt; x == <span class="string">&quot;Eric&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-設定-Program-cs"><a href="#2-設定-Program-cs" class="headerlink" title="2. 設定 Program.cs"></a>2. 設定 Program.cs</h4><p>將Main 輸入<code>BenchmarkRunner.Run&lt;T&gt;();</code> 這裡就會把 TestFilter 類別跑一次，並且顯示結果。</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> summary = BenchmarkRunner.Run&lt;TestFilter&gt;();</span><br><span class="line">        Console.ReadKey();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-dotnet-cli"><a href="#3-dotnet-cli" class="headerlink" title="3. dotnet cli"></a>3. dotnet cli</h4><p>使用這個工具是能使用 release 方式執行，若要執行 debug 是無法正常執行。</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dotnet run -c release</span><br><span class="line"></span><br><span class="line">//若要輸出到記事本可以使用這個語法</span><br><span class="line">dotnet run -c release &gt; report.txt</span><br></pre></td></tr></table></figure><p><img src="/image/20231029_19-30-46.png"></p><h3 id="Job-不同環境驗證"><a href="#Job-不同環境驗證" class="headerlink" title="Job - 不同環境驗證"></a>Job - 不同環境驗證</h3><p>目前可以針對不同環境進行測試，這邊可以參考官方文件，這邊就不多做介紹。</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">SimpleJob(RuntimeMoniker.Net472, baseline: true)</span>]</span><br><span class="line">[<span class="meta">SimpleJob(RuntimeMoniker.NetCoreApp30)</span>]</span><br><span class="line">[<span class="meta">SimpleJob(RuntimeMoniker.NativeAot70)</span>]</span><br><span class="line">[<span class="meta">SimpleJob(RuntimeMoniker.Mono)</span>]</span><br></pre></td></tr></table></figure><h3 id="Export-輸出報告"><a href="#Export-輸出報告" class="headerlink" title="Export - 輸出報告"></a>Export - 輸出報告</h3><p>還有一個功能是可以將報告輸出，這邊可以參考官方文件，這邊就不多做介紹。如果是使用在CI&#x2F;CD可以將測試報告在CI&#x2F;CD上面顯示，這樣就能夠知道哪個方法效能比較好。</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">HtmlExporter</span>]</span><br><span class="line">[<span class="meta">AsciiDocExporter</span>]</span><br><span class="line">[<span class="meta">CsvExporter</span>]</span><br><span class="line">[<span class="meta">CsvMeasurementsExporter</span>]</span><br><span class="line">[<span class="meta">PlainExporter</span>]</span><br><span class="line">[<span class="meta">RPlotExporter</span>]</span><br></pre></td></tr></table></figure><p>備註 : 輸出位置會在 release 資料夾底下，如果要輸出到其他位置可以使用<code>--artifacts</code> 語法。<br><img src="/image/20231029_19-53-14.png"></p><h2 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h2><p>這工具花樣會相當多樣性，對於懶得寫 console.writeLine 來檢視效能的工程師來說，這是一個不錯的選擇。</p><h2 id="依據上使用filter-可以證明，IEnumerable-執行與-array-差異不大外，可以多觀察list部分，不但記憶體上有差異，執行時間也有差異。專案處理上可能需要再評估處理。"><a href="#依據上使用filter-可以證明，IEnumerable-執行與-array-差異不大外，可以多觀察list部分，不但記憶體上有差異，執行時間也有差異。專案處理上可能需要再評估處理。" class="headerlink" title="依據上使用filter 可以證明，IEnumerable 執行與 array 差異不大外，可以多觀察list部分，不但記憶體上有差異，執行時間也有差異。專案處理上可能需要再評估處理。"></a>依據上使用filter 可以證明，IEnumerable 執行與 array 差異不大外，可以多觀察list部分，不但記憶體上有差異，執行時間也有差異。專案處理上可能需要再評估處理。</h2><h2 id="參考文件"><a href="#參考文件" class="headerlink" title="參考文件"></a>參考文件</h2><ol><li><a href="https://igouist.github.io/post/2021/06/benchmarkdotnet/">C#: BenchmarkDotnet —— 效能測試好簡單</a></li><li><a href="https://github.com/dotnet/BenchmarkDotNet/blob/master/docs/articles/guides/console-args.md">Github-BenchmarkDotNet</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 後端技術 </category>
          
          <category> C# </category>
          
          <category> BenchmarkDotnet </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Angular (7)】使用 IndexedDb</title>
      <link href="/2023/10/23/%E5%89%8D%E7%AB%AF%E6%8A%80%E8%A1%93/Angular/Angular-07-%E4%BD%BF%E7%94%A8IndexedDb/"/>
      <url>/2023/10/23/%E5%89%8D%E7%AB%AF%E6%8A%80%E8%A1%93/Angular/Angular-07-%E4%BD%BF%E7%94%A8IndexedDb/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>IndexedDb 是一個瀏覽器內建的資料庫，可以透過 Javascript 進行操作，並且可以在瀏覽器關閉後，資料依然存在，因此可以用來做離線儲存的功能。實際應用上通常是紀錄暫存資料，按下存檔後一次檢查、存檔讓資料可以不用平凡使用在API 傳送的一項工具。</p><p>前陣子，需要用到暫存資料的功能，因此就研究了一下 IndexedDb 的使用方式，而初期使用的確不好學習。此範例會用簡單的CRUD製作。</p><hr><h2 id="實作-CRUD-範例"><a href="#實作-CRUD-範例" class="headerlink" title="實作 CRUD 範例"></a>實作 CRUD 範例</h2><p>在開始之前，不論是問 chatGPT 或是 其他教學文章，都會逃不了裝套件的問題。所以這邊就不用套件示範，直接使用原生的方式來實作。</p><h3 id="1-製作-Service-環境"><a href="#1-製作-Service-環境" class="headerlink" title="1. 製作 Service 環境"></a>1. 製作 Service 環境</h3><p>下方程式碼中，<code>IDBDatabase</code>為內建Interface可以不用特別引入。稍微補充下面程式碼，因為使用v16版本是強制要帶入預設值，所以 <code>private db: IDBDatabase | null = null;</code> 才會這樣寫。</p><p>初始化資料庫作法如下 : </p><ol><li>建立資料庫 : <code> indexedDB.open( 資料庫名稱 , 資料庫版本 );</code>。</li><li>版本更新 : <code>request.onupgradeneeded = (event: any) =&gt; &#123; ... &#125;</code>。</li><li>執行成功 : <code>request.onsuccess = (event: any) =&gt; &#123; ... &#125;</code>。</li><li>執行失敗 : <code>request.onerror = (event: any) =&gt; &#123; ... &#125;</code>。</li></ol><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Injectable</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span>;</span><br><span class="line"><span class="meta">@Injectable</span>(&#123;</span><br><span class="line">  <span class="attr">providedIn</span>: <span class="string">&#x27;root&#x27;</span>,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">IndexedDbService</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="attr">db</span>: <span class="title class_">IDBDatabase</span> | <span class="literal">null</span> = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">initDatabase</span>();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="title function_">initDatabase</span>(): <span class="title class_">Promise</span>&lt;<span class="built_in">void</span>&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>&lt;<span class="built_in">void</span>&gt;(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> request = indexedDB.<span class="title function_">open</span>(<span class="string">&#x27;MyDatabase&#x27;</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">      request.<span class="property">onupgradeneeded</span> = <span class="function">(<span class="params">event: <span class="built_in">any</span></span>) =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">      &#125;;</span><br><span class="line"></span><br><span class="line">      request.<span class="property">onsuccess</span> = <span class="function">(<span class="params">event: <span class="built_in">any</span></span>) =&gt;</span> &#123;</span><br><span class="line">      &#125;;</span><br><span class="line"></span><br><span class="line">      request.<span class="property">onerror</span> = <span class="function">(<span class="params">event: <span class="built_in">any</span></span>) =&gt;</span> &#123;</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-1-創建資料表"><a href="#1-1-創建資料表" class="headerlink" title="1-1 創建資料表"></a>1-1 創建資料表</h4><p>創建資料表必須要使用 <code>createObjectStore(資料表名稱, &#123;&#125;)</code> 才能執行作業。而 <code>createObjectStore</code> 的第二個參數是一個物件，裡面可以設定 <code>keyPath</code> 、 <code>autoIncrement</code> 、 <code>index</code> 等等。<br>本案例就使用 <code>keyPath</code> 、 <code>autoIncrement</code> 、 <code>index</code> 來做說明。</p><ol><li><code>keyPath</code> : 設定主鍵，可以是數字或是字串，但是必須要是唯一值，否則會報錯。</li><li><code>autoIncrement</code> : 設定是否自動增加，預設為 false。</li><li><code>index</code> : 設定索引，可以設定多個，但是必須要是唯一值，否則會報錯。</li></ol><p>補充 : 當資料庫存在且版本維持不變，卻結構變更情況下，onupgradeneeded 是不會執行的，因此需要刪除 IndexedDb 重新建立。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">request.<span class="property">onupgradeneeded</span> = <span class="function">(<span class="params">event: <span class="built_in">any</span></span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> db = event.<span class="property">target</span>.<span class="property">result</span>;</span><br><span class="line">  <span class="comment">// 建立資料表</span></span><br><span class="line">  <span class="keyword">const</span> contactsStore = db.<span class="title function_">createObjectStore</span>(<span class="string">&#x27;contacts&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">keyPath</span>: <span class="string">&#x27;id&#x27;</span>,</span><br><span class="line">    <span class="attr">autoIncrement</span>: <span class="literal">true</span>,</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="comment">// 定義資料表的索引</span></span><br><span class="line">  contactsStore.<span class="title function_">createIndex</span>(<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;name&#x27;</span>, &#123; <span class="attr">unique</span>: <span class="literal">false</span> &#125;);</span><br><span class="line">  contactsStore.<span class="title function_">createIndex</span>(<span class="string">&#x27;email&#x27;</span>, <span class="string">&#x27;email&#x27;</span>, &#123; <span class="attr">unique</span>: <span class="literal">true</span> &#125;);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;資料庫升級成功&#x27;</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="1-2-執行成功-失敗"><a href="#1-2-執行成功-失敗" class="headerlink" title="1-2 執行成功&#x2F;失敗"></a>1-2 執行成功&#x2F;失敗</h4><p>這邊就用簡單資訊確認是否成功執行，如果有錯誤就會顯示錯誤訊息。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">request.<span class="property">onsuccess</span> = <span class="function">(<span class="params">event: <span class="built_in">any</span></span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">db</span> = event.<span class="property">target</span>.<span class="property">result</span>;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;数据库打开成功&#x27;</span>);</span><br><span class="line">  <span class="title function_">resolve</span>();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">request.<span class="property">onerror</span> = <span class="function">(<span class="params">event: <span class="built_in">any</span></span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">reject</span>(event.<span class="property">target</span>.<span class="property">error</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="1-3-加入-Service-到-AppModule"><a href="#1-3-加入-Service-到-AppModule" class="headerlink" title="1-3 加入 Service 到 AppModule"></a>1-3 加入 Service 到 AppModule</h4><p>要加入component 之前，必須要先加入到 AppModule，否則無法正常使用。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@NgModule</span>(&#123;</span><br><span class="line">  <span class="attr">declarations</span>: [<span class="title class_">AppComponent</span>, <span class="title class_">HomeComponent</span>],</span><br><span class="line">  <span class="attr">imports</span>: [</span><br><span class="line">    <span class="title class_">BrowserModule</span>,</span><br><span class="line">    <span class="title class_">AppRoutingModule</span>,</span><br><span class="line">    <span class="title class_">FormsModule</span>,</span><br><span class="line">    <span class="title class_">MatTableModule</span>,</span><br><span class="line">    <span class="title class_">BrowserAnimationsModule</span>,</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">providers</span>: [<span class="title class_">IndexedDbService</span>], <span class="comment">// 这里添加 IndexedDbService</span></span><br><span class="line">  <span class="attr">bootstrap</span>: [<span class="title class_">AppComponent</span>],</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">AppModule</span> &#123;&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="2-加入component-UI"><a href="#2-加入component-UI" class="headerlink" title="2. 加入component UI"></a>2. 加入component UI</h3><p>如果要更詳細 UI 資訊，可以直接到下方參考文件取得。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;&quot;</span>&gt;</span>id<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;&quot;</span> [(<span class="attr">ngModel</span>)]=<span class="string">&quot;row.id&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;&quot;</span>&gt;</span>name<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;&quot;</span> [(<span class="attr">ngModel</span>)]=<span class="string">&quot;row.name&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;&quot;</span>&gt;</span>email<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;&quot;</span> [(<span class="attr">ngModel</span>)]=<span class="string">&quot;row.email&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> (<span class="attr">click</span>)=<span class="string">&quot;saveContact()&quot;</span>&gt;</span>Save<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>Data List<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">&quot;table&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">th</span>&gt;</span>id<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">th</span>&gt;</span>name<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">th</span>&gt;</span>email<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">th</span>&gt;</span>action<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span> *<span class="attr">ngFor</span>=<span class="string">&quot;let item of data&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;item.id&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;item.name&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;item.email&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;edit-button&quot;</span> &gt;</span>Edit<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;delete-button&quot;</span> &gt;</span>Delete<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">HomeComponent</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"><span class="keyword">private</span> dbService: IndexedDbService</span>) &#123;&#125;</span><br><span class="line">  <span class="attr">data</span>: <span class="built_in">any</span>;</span><br><span class="line">  row = &#123;</span><br><span class="line">    <span class="attr">id</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="attr">email</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  &#125; <span class="keyword">as</span> <span class="built_in">any</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="3-加入-Create-環境"><a href="#3-加入-Create-環境" class="headerlink" title="3. 加入 Create 環境"></a>3. 加入 Create 環境</h3><p>基本上我在建立 IndexedDbService 到 AppModule 是沒辦法像C# DI 一樣可以保留生命週期，所以我這邊就用早期作法。首先我這邊會建立一個 <code>connectDataBase</code> 方便其他API呼叫時候不會造成連線不到的問題。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">async</span> <span class="title function_">connectDataBase</span>(): <span class="title class_">Promise</span>&lt;<span class="title class_">IDBDatabase</span>&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>&lt;<span class="title class_">IDBDatabase</span>&gt;(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> request = indexedDB.<span class="title function_">open</span>(<span class="string">&#x27;MyDatabase&#x27;</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    request.<span class="property">onsuccess</span> = <span class="function">(<span class="params">event: <span class="built_in">any</span></span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> db = event.<span class="property">target</span>.<span class="property">result</span>;</span><br><span class="line">      <span class="keyword">const</span> objectStoreNames = db.<span class="property">objectStoreNames</span>;</span><br><span class="line">      <span class="title function_">resolve</span>(db);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    request.<span class="property">onerror</span> = <span class="function">(<span class="params">event: <span class="built_in">any</span></span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">reject</span>(event.<span class="property">target</span>.<span class="property">error</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>透過連線時候，可以讓確保 db 變數是否還活著。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="title function_">addContact</span>(<span class="attr">contact</span>: <span class="built_in">any</span>): <span class="title class_">Promise</span>&lt;<span class="built_in">void</span>&gt; &#123;</span><br><span class="line">  <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="title function_">connectDataBase</span>();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!<span class="variable language_">this</span>.<span class="property">db</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;Database is not initialized.&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> transaction = <span class="variable language_">this</span>.<span class="property">db</span>.<span class="title function_">transaction</span>([<span class="string">&#x27;contacts&#x27;</span>], <span class="string">&#x27;readwrite&#x27;</span>);</span><br><span class="line">  <span class="keyword">const</span> store = transaction.<span class="title function_">objectStore</span>(<span class="string">&#x27;contacts&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>&lt;<span class="built_in">void</span>&gt;(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> addRequest = store.<span class="title function_">add</span>(contact);</span><br><span class="line">    addRequest.<span class="property">onsuccess</span> = <span class="function">() =&gt;</span> <span class="title function_">resolve</span>();</span><br><span class="line">    addRequest.<span class="property">onerror</span> = <span class="function">() =&gt;</span> <span class="title function_">reject</span>(addRequest.<span class="property">error</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>備註: </p><ul><li><code>transaction(資料表, 權限)</code> : 權限有 readwrite &#x2F; readonly &#x2F; versionchange 三種。</li><li>add : 新增資料。</li><li>put : 修改資料。</li><li>delete : 刪除資料。</li><li>get&#x2F;getAll : 取得資料。</li></ul><h4 id="3-1-加入-component-新增"><a href="#3-1-加入-component-新增" class="headerlink" title="3-1 加入 component 新增"></a>3-1 加入 component 新增</h4><p>透過 row 方式取得資料或是新增即可。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">HomeComponent</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"><span class="keyword">private</span> dbService: IndexedDbService</span>) &#123;&#125; <span class="comment">//必須加入</span></span><br><span class="line">  <span class="attr">data</span>: <span class="built_in">any</span>;</span><br><span class="line">  row = &#123;</span><br><span class="line">    <span class="attr">id</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="attr">email</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  &#125; <span class="keyword">as</span> <span class="built_in">any</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="title function_">ngOnInit</span>(): <span class="built_in">void</span> &#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">addContact</span>(<span class="params">row: <span class="built_in">any</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">dbService</span></span><br><span class="line">      .<span class="title function_">addContact</span>(row)</span><br><span class="line">      ?.<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">//給getlist 使用</span></span><br><span class="line">      &#125;)</span><br><span class="line">      .<span class="title function_">catch</span>(<span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;Error adding contact&#x27;</span>, error);</span><br><span class="line">      &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">saveContact</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">addContact</span>(<span class="variable language_">this</span>.<span class="property">row</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="4-加入-Edit-Delete-環境"><a href="#4-加入-Edit-Delete-環境" class="headerlink" title="4 加入 Edit &#x2F; Delete 環境"></a>4 加入 Edit &#x2F; Delete 環境</h3><p>依據Create 作法，可以用同樣方式修改&#x2F;刪除資料。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// IndexDbService.ts</span></span><br><span class="line"><span class="keyword">async</span> <span class="title function_">updateContact</span>(<span class="attr">contact</span>: <span class="built_in">any</span>): <span class="title class_">Promise</span>&lt;<span class="built_in">void</span>&gt; &#123;</span><br><span class="line">  <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="title function_">connectDataBase</span>();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!<span class="variable language_">this</span>.<span class="property">db</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;Database is not initialized.&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> transaction = <span class="variable language_">this</span>.<span class="property">db</span>.<span class="title function_">transaction</span>([<span class="string">&#x27;contacts&#x27;</span>], <span class="string">&#x27;readwrite&#x27;</span>);</span><br><span class="line">  <span class="keyword">const</span> store = transaction.<span class="title function_">objectStore</span>(<span class="string">&#x27;contacts&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>&lt;<span class="built_in">void</span>&gt;(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> updateRequest = store.<span class="title function_">put</span>(contact);</span><br><span class="line">    updateRequest.<span class="property">onsuccess</span> = <span class="function">() =&gt;</span> <span class="title function_">resolve</span>();</span><br><span class="line">    updateRequest.<span class="property">onerror</span> = <span class="function">() =&gt;</span> <span class="title function_">reject</span>(updateRequest.<span class="property">error</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="title function_">deleteContact</span>(<span class="attr">id</span>: <span class="built_in">number</span>): <span class="title class_">Promise</span>&lt;<span class="built_in">void</span>&gt; &#123;</span><br><span class="line">  <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="title function_">connectDataBase</span>();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!<span class="variable language_">this</span>.<span class="property">db</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;Database is not initialized.&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> transaction = <span class="variable language_">this</span>.<span class="property">db</span>.<span class="title function_">transaction</span>([<span class="string">&#x27;contacts&#x27;</span>], <span class="string">&#x27;readwrite&#x27;</span>);</span><br><span class="line">  <span class="keyword">const</span> store = transaction.<span class="title function_">objectStore</span>(<span class="string">&#x27;contacts&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>&lt;<span class="built_in">void</span>&gt;(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> deleteRequest = store.<span class="title function_">delete</span>(id);</span><br><span class="line">    deleteRequest.<span class="property">onsuccess</span> = <span class="function">() =&gt;</span> <span class="title function_">resolve</span>();</span><br><span class="line">    deleteRequest.<span class="property">onerror</span> = <span class="function">() =&gt;</span> <span class="title function_">reject</span>(deleteRequest.<span class="property">error</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-1-加入-component-修改-刪除"><a href="#4-1-加入-component-修改-刪除" class="headerlink" title="4-1 加入 component 修改&#x2F;刪除"></a>4-1 加入 component 修改&#x2F;刪除</h4><p>備註 : onClickUpdate 作用是將資料帶入 row，並且將資料帶入 row，這樣就可以直接修改。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">deleteContact</span>(<span class="params">row: <span class="built_in">any</span></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> id = row.<span class="property">id</span>;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">dbService</span></span><br><span class="line">    .<span class="title function_">deleteContact</span>(id)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">//給getlist 使用</span></span><br><span class="line">    &#125;)</span><br><span class="line">    .<span class="title function_">catch</span>(<span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;Error deleting contact&#x27;</span>, error);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">updateContact</span>(<span class="params">row: <span class="built_in">any</span></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">dbService</span></span><br><span class="line">    .<span class="title function_">updateContact</span>(row)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">//給getlist 使用</span></span><br><span class="line">    &#125;)</span><br><span class="line">    .<span class="title function_">catch</span>(<span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;Error deleting contact&#x27;</span>, error);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">saveContact</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">row</span>.<span class="property">id</span> == <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">addContact</span>(<span class="variable language_">this</span>.<span class="property">row</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">updateContact</span>(<span class="variable language_">this</span>.<span class="property">row</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">row</span> = &#123;</span><br><span class="line">    <span class="attr">id</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="attr">email</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">onClickUpdate</span>(<span class="params">row:<span class="built_in">any</span></span>)&#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">row</span> = &#123;</span><br><span class="line">    <span class="attr">id</span>: row.<span class="property">id</span>,</span><br><span class="line">    <span class="attr">name</span>: row.<span class="property">name</span>,</span><br><span class="line">    <span class="attr">email</span>: row.<span class="property">email</span>,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-2-加入-component-UI-修改-刪除"><a href="#4-2-加入-component-UI-修改-刪除" class="headerlink" title="4-2 加入 component UI 修改&#x2F;刪除"></a>4-2 加入 component UI 修改&#x2F;刪除</h4><p>從 ADD 那段補click事件，並且傳入 item 即可。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;edit-button&quot;</span> (<span class="attr">click</span>)=<span class="string">&quot;onClickUpdate(item)&quot;</span>&gt;</span>Edit<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;delete-button&quot;</span> (<span class="attr">click</span>)=<span class="string">&quot;deleteContact(item)&quot;</span>&gt;</span>Delete<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="5-加入-List-清單"><a href="#5-加入-List-清單" class="headerlink" title="5 加入 List 清單"></a>5 加入 List 清單</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// IndexDbService.ts</span></span><br><span class="line">  <span class="keyword">async</span> <span class="title function_">getContactList</span>(): <span class="title class_">Promise</span>&lt;<span class="built_in">any</span>&gt; &#123;</span><br><span class="line">    <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="title function_">connectDataBase</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!<span class="variable language_">this</span>.<span class="property">db</span>) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;Database is not initialized.&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> transaction = <span class="variable language_">this</span>.<span class="property">db</span>.<span class="title function_">transaction</span>([<span class="string">&#x27;contacts&#x27;</span>], <span class="string">&#x27;readonly&#x27;</span>);</span><br><span class="line">    <span class="keyword">const</span> store = transaction.<span class="title function_">objectStore</span>(<span class="string">&#x27;contacts&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>&lt;<span class="built_in">void</span>&gt;(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> getRequest = store.<span class="title function_">getAll</span>();</span><br><span class="line">      getRequest.<span class="property">onsuccess</span> = <span class="function">(<span class="params">event: <span class="built_in">any</span></span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> contact = event.<span class="property">target</span>.<span class="property">result</span>;</span><br><span class="line">        <span class="title function_">resolve</span>(contact);</span><br><span class="line">      &#125;;</span><br><span class="line">      getRequest.<span class="property">onerror</span> = <span class="function">() =&gt;</span> <span class="title function_">reject</span>(getRequest.<span class="property">error</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h4 id="5-1-加入-component-List-清單"><a href="#5-1-加入-component-List-清單" class="headerlink" title="5-1 加入 component List 清單"></a>5-1 加入 component List 清單</h4><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">listContacts</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">dbService</span></span><br><span class="line">    .<span class="title function_">getContactList</span>()</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function">(<span class="params">contact</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">data</span> = contact;</span><br><span class="line">    &#125;)</span><br><span class="line">    .<span class="title function_">catch</span>(<span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;Error getting contact&#x27;</span>, error);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h2><p>以上完成簡單範例後，可以看到下方圖片一樣可以做簡單的CRUD，也能從F12 看到資料，而且不用裝套件，也不用擔心版本問題，相當方便。<br>但是務必小心每個瀏覽器規範，免得出現問題。<br><img src="/image/20231024_18-13-03.png"><br><img src="/image/20231024_18-13-56.png"></p><hr><h2 id="參考文件"><a href="#參考文件" class="headerlink" title="參考文件"></a>參考文件</h2><ul><li><a href="https://github.com/JontCont/angular_IndexedDb/tree/master">Github : angular_IndexedDb</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端技術 </category>
          
          <category> Angular </category>
          
          <category> IndexedDb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Angular </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【前端】何謂 IndexedDb</title>
      <link href="/2023/10/22/%E5%89%8D%E7%AB%AF%E6%8A%80%E8%A1%93/%E3%80%90%E5%89%8D%E7%AB%AF%E3%80%91%E4%BD%95%E8%AC%82%20IndexedDb/"/>
      <url>/2023/10/22/%E5%89%8D%E7%AB%AF%E6%8A%80%E8%A1%93/%E3%80%90%E5%89%8D%E7%AB%AF%E3%80%91%E4%BD%95%E8%AC%82%20IndexedDb/</url>
      
        <content type="html"><![CDATA[<p>IndexedDB 是一個強大的瀏覽器內本地資料庫技術，它允許網頁應用程式在客戶端存儲和檢索大量資料，而無需依賴傳統的伺服器資料庫。在本文中，我們將深入瞭解 IndexedDB，包括它的特點、用途以及如何使用它來增強網頁應用程式的功能。</p><h2 id="什麼是-IndexedDB？"><a href="#什麼是-IndexedDB？" class="headerlink" title="什麼是 IndexedDB？"></a>什麼是 IndexedDB？</h2><p>IndexedDB 是一個 Web API，用於在瀏覽器中存儲大量結構化資料。它提供了一個類似於資料庫的環境，允許網頁應用程式創建、讀取、更新和刪除資料。這種資料庫是基於 JavaScript 的，不依賴於任何伺服器端資料庫，因此可以在離線狀態下工作。</p><h3 id="IndexedDB-的特點"><a href="#IndexedDB-的特點" class="headerlink" title="IndexedDB 的特點"></a>IndexedDB 的特點</h3><ol><li><p><strong>非同步操作</strong>：IndexedDB 是一個非同步資料庫，這意味著它可以在後台執行長時間運行的操作而不會阻止網頁應用程式的其他部分。這有助於保持應用程式的反應性。</p></li><li><p><strong>支援索引</strong>：IndexedDB 允許您為資料建立索引，這有助於快速查詢資料，而無需掃描整個資料庫。</p></li><li><p><strong>大容量資料儲存</strong>：您可以存儲大量資料（通常以兆字節為單位），這對於需要離線存儲或高性能本地資料庫的應用程式非常有用。</p></li><li><p><strong>跨瀏覽器支援</strong>：IndexedDB 是一個標準的 Web API，支援大多數現代瀏覽器，包括 Chrome、Firefox、Edge 和 Safari。</p></li></ol><h3 id="IndexedDB-的應用"><a href="#IndexedDB-的應用" class="headerlink" title="IndexedDB 的應用"></a>IndexedDB 的應用</h3><p>IndexedDB 可以應用於各種場景，包括：</p><ol><li><p><strong>離線應用程式</strong>：當網絡連接不穩定或斷開時，IndexedDB 允許應用程式繼續運行並訪問先前存儲的資料。</p></li><li><p><strong>快取資源</strong>：瀏覽器可以使用 IndexedDB 來快取資源，例如圖像、CSS 檔案和 JavaScript 檔案，以減少網絡請求並提高網頁載入速度。</p></li><li><p><strong>資料同步</strong>：IndexedDB 可以用於將資料在多個設備之間同步，以實現跨設備的一致性。</p></li><li><p><strong>離線遊戲</strong>：遊戲開發者可以使用 IndexedDB 來存儲遊戲數據、進度和成就，從而實現離線遊玩體驗。</p></li></ol><h3 id="使用-IndexedDB"><a href="#使用-IndexedDB" class="headerlink" title="使用 IndexedDB"></a>使用 IndexedDB</h3><p>使用 IndexedDB 通常需要編寫一些 JavaScript 代碼。以下是一個簡單的 IndexedDB 應用程式示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 開啟或創建一個 IndexedDB 數據庫</span></span><br><span class="line"><span class="keyword">var</span> request = indexedDB.<span class="title function_">open</span>(<span class="string">&quot;myDatabase&quot;</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">request.<span class="property">onupgradeneeded</span> = <span class="keyword">function</span>(<span class="params">event</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> db = event.<span class="property">target</span>.<span class="property">result</span>;</span><br><span class="line">    <span class="keyword">var</span> objectStore = db.<span class="title function_">createObjectStore</span>(<span class="string">&quot;customers&quot;</span>, &#123; <span class="attr">keyPath</span>: <span class="string">&quot;id&quot;</span> &#125;);</span><br><span class="line">    objectStore.<span class="title function_">createIndex</span>(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;name&quot;</span>, &#123; <span class="attr">unique</span>: <span class="literal">false</span> &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">request.<span class="property">onsuccess</span> = <span class="keyword">function</span>(<span class="params">event</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> db = event.<span class="property">target</span>.<span class="property">result</span>;</span><br><span class="line">    <span class="comment">// 在這裡進行資料存取操作</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">request.<span class="property">onerror</span> = <span class="keyword">function</span>(<span class="params">event</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;錯誤：&quot;</span> + event.<span class="property">target</span>.<span class="property">errorCode</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>這個示例演示了如何打開或創建一個 IndexedDB 數據庫，以及如何設定數據庫結構。然後，您可以使用該數據庫來存儲和檢索資料。</p><hr><h2 id="補充：瞭解不同瀏覽器的-IndexedDB-容量限制"><a href="#補充：瞭解不同瀏覽器的-IndexedDB-容量限制" class="headerlink" title="補充：瞭解不同瀏覽器的 IndexedDB 容量限制"></a><strong>補充：瞭解不同瀏覽器的 IndexedDB 容量限制</strong></h2><p>在前面的文章中，我們已經深入瞭解了 IndexedDB 的基本原則和功能，並討論了它在瀏覽器中的應用。然而，值得注意的是，不同瀏覽器可能對 IndexedDB 的容量限制和使用者互動方式有所不同。在這個補充部分，我們將更詳細地討論這些差異，特別是針對 Firefox 瀏覽器的情況。</p><p><strong>Firefox 瀏覽器的容量限制</strong></p><p>在 Firefox 中，IndexedDB 資料庫的容量並無特定上限。這意味著您可以儲存大量資料，而無需擔心超出容量限制。然而，當您嘗試儲存大型 Blob（二進制大型對象）數據，並且這些 Blob 數據的大小超過 50 MB 時，Firefox 將觸發使用者介面提示，要求用戶授權儲存這些大型數據。這是 Firefox 的一種保護機制，用於確保用戶了解並同意儲存大型數據。</p><p><strong>自訂容量警告閾值</strong></p><p>值得一提的是，Firefox 允許開發者自訂容量警告閾值。這可以通過 <code>dom.indexedDB.warningQuota</code> 屬性進行設置。開發者可以根據應用程式的需求，提高或降低容量警告閾值，以確保最佳用戶體驗。</p><p><strong>其他瀏覽器的限制</strong></p><p>不同瀏覽器可能會有不同的 IndexedDB 容量限制。請注意，這些限制通常是瀏覽器的實現的一部分，因此可能會因為瀏覽器的版本和設定而有所不同。開發者在開發和測試 IndexedDB 應用程式時，應該注意這些限制，以確保應用程式在不同瀏覽器中的一致性運行。</p><hr><h2 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h2><p>IndexedDB 是一個強大的本地資料庫技術，但容量限制是開發者需要考慮的重要因素之一。了解不同瀏覽器的容量限制和使用者互動方式，以及如何自訂這些限制，對於確保應用程式的穩定性和性能非常重要。</p>]]></content>
      
      
      <categories>
          
          <category> 前端技術 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IndexedDb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Angular (6)】跨越 component 讀取資料</title>
      <link href="/2023/10/17/%E5%89%8D%E7%AB%AF%E6%8A%80%E8%A1%93/Angular/Angular-06-%E8%B7%A8component%E8%AE%80%E5%8F%96%E8%B3%87%E6%96%99/"/>
      <url>/2023/10/17/%E5%89%8D%E7%AB%AF%E6%8A%80%E8%A1%93/Angular/Angular-06-%E8%B7%A8component%E8%AE%80%E5%8F%96%E8%B3%87%E6%96%99/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>近期專案遇到一個當不是使用公用的component情況下，如何把 component 的資料傳遞到其他 component 中，確保已經有加入到暫存檔中。遇到這問題不用讓chatGpt 詢問答案，只需要執行方向就可以解決問題。</p><h3 id="解決方向"><a href="#解決方向" class="headerlink" title="解決方向"></a>解決方向</h3><ol><li>BehaviorSubject : 這個是一個可以讓資料傳遞的方式，可以讓資料傳遞到其他 component 中，也是在創建angular 會產生的 rsjx 套件。</li><li>localstorage : 這個是瀏覽器的暫存檔，可以讓資料傳遞到其他 component 中，但是這個方式會有一個問題，就是當資料量大的時候，會造成瀏覽器的效能問題 (備註 : 預設為5 ~ 10 MB 範圍大小)。</li><li>IndexedDB : 這是 網頁瀏覽器 提供的資料暫緩區，不會遇到資料太大無法存檔的問題 (因為時間問題之後再研究)。</li></ol><h3 id="最終解決方案"><a href="#最終解決方案" class="headerlink" title="最終解決方案"></a>最終解決方案</h3><p>因為專案時程關係，我會選擇比較能確認可行性的做法執行，BehaviorSubject + localstorage 是我最後選擇的方案。</p><p>BehaviorSubject 會因為瀏覽器關閉、重新整理會造成資料消失，因此需要 localstorage 來做資料儲存，這樣就可以確保資料不會消失問題，但是需要定期清除 localstorage 才不會讓暫存爆掉。</p><hr><h2 id="實作"><a href="#實作" class="headerlink" title="實作"></a>實作</h2><p>首先，我們起手專案就簡單創建一個專案，並且創建兩個 component，一個是傳遞資料的 component，一個是接收資料的 component。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ng new angular-app</span><br><span class="line">ng g @schematics/angular:component @View/PageOne</span><br><span class="line">ng g @schematics/angular:component @View/PageTwo</span><br><span class="line">ng g @schematics/angular:service @Service/GlobalData</span><br></pre></td></tr></table></figure><h3 id="一、設定-app-module-ts"><a href="#一、設定-app-module-ts" class="headerlink" title="一、設定 app.module.ts"></a>一、設定 app.module.ts</h3><p>因為我們專案會用到部分 formmodule，所以需要先引入進來。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@NgModule</span>(&#123;</span><br><span class="line">  <span class="attr">declarations</span>: [</span><br><span class="line">    <span class="title class_">AppComponent</span>,</span><br><span class="line">    <span class="title class_">PageOneComponent</span>,</span><br><span class="line">    <span class="title class_">PageTwoComponent</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">imports</span>: [</span><br><span class="line">    <span class="title class_">BrowserModule</span>,</span><br><span class="line">    <span class="title class_">AppRoutingModule</span>,</span><br><span class="line">    <span class="title class_">FormsModule</span>,</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">providers</span>: [],</span><br><span class="line">  <span class="attr">bootstrap</span>: [<span class="title class_">AppComponent</span>]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">AppModule</span> &#123; &#125;</span><br></pre></td></tr></table></figure><h3 id="二、設定-app-routing-module-ts"><a href="#二、設定-app-routing-module-ts" class="headerlink" title="二、設定 app-routing.module.ts"></a>二、設定 app-routing.module.ts</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="attr">routes</span>: <span class="title class_">Routes</span> = [</span><br><span class="line">  &#123; <span class="attr">path</span>: <span class="string">&#x27;page-one&#x27;</span>, <span class="attr">component</span>: <span class="title class_">PageOneComponent</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">path</span>: <span class="string">&#x27;page-two&#x27;</span>, <span class="attr">component</span>: <span class="title class_">PageTwoComponent</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">path</span>: <span class="string">&#x27;&#x27;</span>, <span class="attr">redirectTo</span>: <span class="string">&#x27;/page-one&#x27;</span>, <span class="attr">pathMatch</span>: <span class="string">&#x27;full&#x27;</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">path</span>: <span class="string">&#x27;**&#x27;</span>, <span class="attr">redirectTo</span>: <span class="string">&#x27;/page-one&#x27;</span>, <span class="attr">pathMatch</span>: <span class="string">&#x27;full&#x27;</span> &#125;</span><br><span class="line">];</span><br></pre></td></tr></table></figure><h3 id="三、設定-GlobalData"><a href="#三、設定-GlobalData" class="headerlink" title="三、設定 GlobalData"></a>三、設定 GlobalData</h3><p>這邊我就用 <code>setData</code> 、 <code>getData</code> 來做資料傳遞，並且在初始化時，會先去 localstorage 中讀取資料，確保資料不會消失。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Injectable</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">BehaviorSubject</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;rxjs&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Injectable</span>(&#123;</span><br><span class="line">  <span class="attr">providedIn</span>: <span class="string">&#x27;root&#x27;</span>,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">GlobalDataService</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> dataSubject = <span class="keyword">new</span> <span class="title class_">BehaviorSubject</span>&lt;<span class="built_in">any</span>&gt;(&#123;&#125;);</span><br><span class="line">  data = <span class="variable language_">this</span>.<span class="property">dataSubject</span>.<span class="title function_">asObservable</span>();</span><br><span class="line"></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 在服務初始化時，嘗試從本地存儲中讀取數據</span></span><br><span class="line">    <span class="keyword">const</span> storedData = <span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;myData&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span> (storedData) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">dataSubject</span>.<span class="title function_">next</span>(<span class="title class_">JSON</span>.<span class="title function_">parse</span>(storedData));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">setData</span>(<span class="params">name: <span class="built_in">string</span>, value: <span class="built_in">any</span></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> currentData = <span class="variable language_">this</span>.<span class="property">dataSubject</span>.<span class="property">value</span>;</span><br><span class="line">    <span class="keyword">const</span> updatedData = &#123; ...currentData, [name]: value &#125;;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">dataSubject</span>.<span class="title function_">next</span>(updatedData);</span><br><span class="line">    <span class="comment">// 同時保存到本地存儲</span></span><br><span class="line">    <span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&#x27;myData&#x27;</span>, <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(updatedData));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">getData</span>(<span class="params">name: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> currentData = <span class="variable language_">this</span>.<span class="property">dataSubject</span>.<span class="property">value</span>;</span><br><span class="line">    <span class="keyword">return</span> currentData[name] ?? <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="設定-PageOneComponent、PageTwoComponent"><a href="#設定-PageOneComponent、PageTwoComponent" class="headerlink" title="設定 PageOneComponent、PageTwoComponent"></a>設定 PageOneComponent、PageTwoComponent</h3><ol><li>PageOneComponent</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;&quot;</span>&gt;</span>測試傳值<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> [<span class="attr">ngModel</span>]=<span class="string">&quot;testValue&quot;</span> (<span class="attr">ngModelChange</span>)=<span class="string">&quot;onChangeValue($event)&quot;</span> &gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> [<span class="attr">routerLink</span>]=<span class="string">&quot;&#x27;/page-two&#x27;&quot;</span>&gt;</span>傳至 page two<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">testValue</span>:<span class="built_in">string</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="title function_">onChangeValue</span>(<span class="params">event: <span class="built_in">any</span> | <span class="literal">null</span></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">globalDataService</span>.<span class="title function_">setData</span>(<span class="string">&#x27;testValue&#x27;</span>, event);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>PageTwoComponent</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>page-two works!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  &#123;&#123;testValue&#125;&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> [<span class="attr">routerLink</span>]=<span class="string">&quot;&#x27;/page-one&#x27;&quot;</span>&gt;</span>傳至 page one<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">testValue</span>:<span class="built_in">string</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="title function_">constructor</span>(<span class="params"></span></span><br><span class="line"><span class="params">  <span class="keyword">private</span> globalDataService: GlobalDataService</span></span><br><span class="line"><span class="params"></span>) &#123; &#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">ngOnInit</span>(): <span class="built_in">void</span> &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">testValue</span> = <span class="variable language_">this</span>.<span class="property">globalDataService</span>.<span class="title function_">getData</span>(<span class="string">&#x27;testValue&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>完成以下動作後，可以利用 console.log 來確認資料是否有傳遞成功，功能相當簡單但是需要記得要將多餘資料清掉。<br>若使用 IndexedDB 或者情況就會變成更單純一點，之後有機會再來研究 ~。</p><p>更新 2023&#x2F;11&#x2F;22<br>以上敘述的方式，要當作為暫存資料的方式，需要被動存取簡易建議另外處理(例如 : 整理時彈出視窗)，否則暫存意義就會不存在。</p><hr><h2 id="範例程式碼"><a href="#範例程式碼" class="headerlink" title="範例程式碼"></a>範例程式碼</h2><ol><li><a href="https://github.com/JontCont/angular-storage">Github</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 前端技術 </category>
          
          <category> Angular </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Angular </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【C#】NPOI (三) 寫入 Excel</title>
      <link href="/2023/10/15/%E5%BE%8C%E7%AB%AF%E6%8A%80%E8%A1%93/CS/Nuget/NPOI%20(%E4%B8%89)%20%E9%80%8F%E9%81%8EModel%E7%94%A2%E7%94%9FExcel/"/>
      <url>/2023/10/15/%E5%BE%8C%E7%AB%AF%E6%8A%80%E8%A1%93/CS/Nuget/NPOI%20(%E4%B8%89)%20%E9%80%8F%E9%81%8EModel%E7%94%A2%E7%94%9FExcel/</url>
      
        <content type="html"><![CDATA[<p>近期會去整理一下歷經多年的NPOI文章，意外露寫了一小段章節。因此，我這邊特別把這段章節補完整一點，讓Excel的讀寫可以更加完整。</p><h2 id="Excel-寫入"><a href="#Excel-寫入" class="headerlink" title="Excel 寫入"></a>Excel 寫入</h2><p>Excel 在 NPOI 時候，必須知道自己的Excel 版本需要使用哪個版本、Sheet 頁面要用幾個、畫面樣式之類問題。這篇只著重Excel 匯出Table 方式，如果要參考寫入哪個Sheet 歡迎參考<code>【C#】NPOI (一) 如何使用NPOI Excel</code>。</p><h3 id="設定情境"><a href="#設定情境" class="headerlink" title="設定情境"></a>設定情境</h3><p>創建 table 方式有很多種，這邊設計我會依據 list 泛型的方式，來解決table 的問題。</p><p>首先，我們先創建一個 class，裡面有一些屬性，用來存放資料。因為只需要簡單例子就不用創太多了。</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Demo</span></span><br><span class="line">&#123;</span><br><span class="line">    [<span class="meta">DisplayName(<span class="string">&quot;名稱&quot;</span>)</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> name &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    [<span class="meta">DisplayName(<span class="string">&quot;日期&quot;</span>)</span>]</span><br><span class="line">    <span class="keyword">public</span> DateTime date &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面我利用 DisplayName 方式命名欄位名稱，最主要用意是讓他當table title (columns)，這樣就不用再另外寫一個title list 了。</p><h3 id="Function-寫法"><a href="#Function-寫法" class="headerlink" title="Function 寫法"></a>Function 寫法</h3><p>method 用簡單的 row 以及 columns 來源即可，row 代表為 <code>List&lt;T&gt;</code> columns <code>T</code>就好。這裡依據需求做調整。</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ExportExcel</span>&lt;<span class="title">T</span>&gt;(<span class="params">List&lt;T&gt; data</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="創建-Table-Columns"><a href="#創建-Table-Columns" class="headerlink" title="創建 Table Columns"></a>創建 Table Columns</h3><p>首先，我們要設定出 Sheet 在處理 columns ，columns 直接使用 T 裡面的 <code>GetProperties()</code> 可以取出 Attribute。</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//建立excel檔案物件</span></span><br><span class="line">IWorkbook workbook = <span class="keyword">new</span> XSSFWorkbook();</span><br><span class="line">ISheet sheet = (XSSFSheet)workbook.CreateSheet(<span class="string">&quot;Default&quot;</span>);</span><br><span class="line">Type header = <span class="keyword">typeof</span>(T);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>下方作法是沒有取得到 DisplayName 就直接取得本身屬性名稱。</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//製作header</span></span><br><span class="line">IRow headers = (XSSFRow)sheet.CreateRow(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span> (header.GetType().GetProperties().Any())</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">int</span> index = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="keyword">var</span> propertyInfo <span class="keyword">in</span> header.GetProperties())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> colName = propertyInfo.GetCustomAttribute&lt;DisplayNameAttribute&gt;()?.DisplayName ?? propertyInfo.Name;</span><br><span class="line">        headers.CreateCell(index).SetCellValue(colName);</span><br><span class="line">        index++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="創建-Table-Rows"><a href="#創建-Table-Rows" class="headerlink" title="創建 Table Rows"></a>創建 Table Rows</h3><p>創建完成columns後，list 只要處理資料面問題就好。</p><p>下方範例當中，我使用<code>Select</code> 來取得資料，並且使用<code>index</code> 來當作 row 的位置，這樣就不用再另外寫一個<code>for</code>迴圈了。留意一下<code>CreateRow(items.index + 1)</code> 這段問題，若columns 不是 0 情況下要記得調整。</p><blockquote><p>備註 : 不論是 foreach 或是 ForEach 之類的迴圈，之前需要從Select 取得index 才會出現。</p></blockquote><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (data.Any())</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="keyword">var</span> items <span class="keyword">in</span> data.Select((row, index) =&gt; <span class="keyword">new</span> &#123; row, index &#125;))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> item = items.row;</span><br><span class="line">        IRow row = (XSSFRow)sheet.CreateRow(items.index + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="keyword">var</span> prop <span class="keyword">in</span> item.GetType().GetProperties().Select((data, index) =&gt; <span class="keyword">new</span> &#123; data, index &#125;))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> values = prop.data.GetValue(item);</span><br><span class="line">            row.CreateCell(prop.index).SetCellValue(values.ToString());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="下載動作"><a href="#下載動作" class="headerlink" title="下載動作"></a>下載動作</h3><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> (<span class="keyword">var</span> fs = <span class="keyword">new</span> FileStream(<span class="string">&quot;Sample.xlsx&quot;</span>, FileMode.Create, FileAccess.Write))</span><br><span class="line">&#123;</span><br><span class="line">    workbook.Write(fs);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h2><p>以上作法為簡單寫入到Excel，這問題會因 model 而有所不同，若需要客製化可以考慮多加入Attribute 來處理。</p><hr><h2 id="參考文件"><a href="#參考文件" class="headerlink" title="參考文件"></a>參考文件</h2><ol><li><a href="https://github.com/JontCont/NPOI-ExportDemo">Github 範例</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 後端技術 </category>
          
          <category> C# </category>
          
          <category> Package </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【筆記】VSC套件 文件格式化 prettier (程式碼排序)</title>
      <link href="/2023/10/15/%E7%AD%86%E8%A8%98%E8%88%87%E7%94%9F%E6%B4%BB%E9%9B%9C%E8%A8%98/%E6%8A%80%E8%A1%93/%E3%80%90%E7%AD%86%E8%A8%98%E3%80%91VSC%E5%A5%97%E4%BB%B6%20%E6%96%87%E4%BB%B6%E6%A0%BC%E5%BC%8F%E5%8C%96%20prettier%20(%E7%A8%8B%E5%BC%8F%E7%A2%BC%E6%8E%92%E5%BA%8F)/"/>
      <url>/2023/10/15/%E7%AD%86%E8%A8%98%E8%88%87%E7%94%9F%E6%B4%BB%E9%9B%9C%E8%A8%98/%E6%8A%80%E8%A1%93/%E3%80%90%E7%AD%86%E8%A8%98%E3%80%91VSC%E5%A5%97%E4%BB%B6%20%E6%96%87%E4%BB%B6%E6%A0%BC%E5%BC%8F%E5%8C%96%20prettier%20(%E7%A8%8B%E5%BC%8F%E7%A2%BC%E6%8E%92%E5%BA%8F)/</url>
      
        <content type="html"><![CDATA[<h2 id="問題"><a href="#問題" class="headerlink" title="問題"></a>問題</h2><p>以前遇到排版時候，預設排版無法對參數方式排版，例如</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">ngx-card</span> [<span class="attr">title</span>]=<span class="string">&quot;&#x27;title&#x27;&quot;</span> [<span class="attr">subtitle</span>]=<span class="string">&quot;&#x27;subtitle&#x27;&quot;</span> [<span class="attr">content</span>]=<span class="string">&quot;&#x27;content&#x27;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ngx-card</span>&gt;</span></span><br></pre></td></tr></table></figure><p>這時候就需要 prettier 這個套件來幫忙排版。</p><h3 id="解決方式"><a href="#解決方式" class="headerlink" title="解決方式"></a>解決方式</h3><ol><li>安裝工具: <a href="https://marketplace.visualstudio.com/items?itemName=esbenp.prettier-vscode">Prettier - Code formatter</a></li><li>開啟 settings.json 後，輸入以下指令 <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;[html]&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;editor.defaultFormatter&quot;</span><span class="punctuation">:</span> <span class="string">&quot;esbenp.prettier-vscode&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;editor.codeActionsOnSave&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;source.fixAll.eslint&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;editor.formatOnSave&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;[typescript]&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;editor.defaultFormatter&quot;</span><span class="punctuation">:</span> <span class="string">&quot;dbaeumer.vscode-eslint&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;editor.codeActionsOnSave&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;source.fixAll.eslint&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;editor.formatOnSave&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li><li>vsc 搜尋列輸入 format document with… 選擇 prettier 讓他成為預設排版工具<br><img src="/image/20231015_22-49-38.png"></li></ol><p>之後排版就可以美美排版了。</p><hr><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><ol><li><a href="https://dev.to/this-is-angular/configure-prettier-and-eslint-with-angular-526c">Configure Prettier and ESLint with Angular</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 筆記 </category>
          
          <category> 生活雜記 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【C#】.NEt Cli Port 設定方式</title>
      <link href="/2023/10/12/%E5%BE%8C%E7%AB%AF%E6%8A%80%E8%A1%93/CS/NetCore/Core_10_Dotnet%20cli%20portg%E8%A8%AD%E5%AE%9A/"/>
      <url>/2023/10/12/%E5%BE%8C%E7%AB%AF%E6%8A%80%E8%A1%93/CS/NetCore/Core_10_Dotnet%20cli%20portg%E8%A8%AD%E5%AE%9A/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>近期想要用 Cli 執行專案遇到 Port 不是自己當初設定的Port，因此想要記錄一下。</p><h3 id="dotnet-run"><a href="#dotnet-run" class="headerlink" title="dotnet run"></a>dotnet run</h3><p>dotnet run 有含 –urls 參數可以將網址設定進去，如下方範例。</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dotnet run --urls=http://localhost:<span class="number">5000</span></span><br></pre></td></tr></table></figure><h4 id="補充-launchSettings-使用方式"><a href="#補充-launchSettings-使用方式" class="headerlink" title="補充 launchSettings 使用方式"></a>補充 launchSettings 使用方式</h4><p>可以透過 Properties &gt; launchSettings.json 進行設定並執行，如下方範例。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;profiles&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;WebApplication1&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;commandName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Project&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;dotnetRunMessages&quot;</span><span class="punctuation">:</span> <span class="string">&quot;true&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;launchBrowser&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;applicationUrl&quot;</span><span class="punctuation">:</span> <span class="string">&quot;http://localhost:5000;https://localhost:5001&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;environmentVariables&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;ASPNETCORE_ENVIRONMENT&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Development&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dotnet run --launch-profile &quot;WebApplication1&quot;</span><br></pre></td></tr></table></figure><h3 id="dotnet-watch"><a href="#dotnet-watch" class="headerlink" title="dotnet watch"></a>dotnet watch</h3><p>dotnet watch 與run 不同，沒有一個參數可以設定Port有關的參數，因此需要透過 Program.cs案進行設定。</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">builder.WebHost.ConfigureKestrel(options =&gt;</span><br><span class="line">&#123;</span><br><span class="line">    options.ListenAnyIP(<span class="number">5000</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dotnet watch </span><br></pre></td></tr></table></figure><h4 id="補充-launchSettings-使用方式-1"><a href="#補充-launchSettings-使用方式-1" class="headerlink" title="補充 launchSettings 使用方式"></a>補充 launchSettings 使用方式</h4><p>如果想要依照 launchSettings.json 進行設定，可以透過下方方式進行設定。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;profiles&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;test&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;commandName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Project&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;dotnetRunMessages&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;launchBrowser&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;launchUrl&quot;</span><span class="punctuation">:</span> <span class="string">&quot;swagger&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;applicationUrl&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://localhost:4001;http://localhost:4000&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;environmentVariables&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;ASPNETCORE_ENVIRONMENT&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Development&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dotnet watch run --launch-profile &quot;test&quot;</span><br></pre></td></tr></table></figure><pre><code>`</code></pre>]]></content>
      
      
      <categories>
          
          <category> 後端技術 </category>
          
          <category> C# </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
            <tag> Core </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【SCSS】使用方式與變數</title>
      <link href="/2023/10/11/%E5%89%8D%E7%AB%AF%E6%8A%80%E8%A1%93/CSS/%E3%80%90SCSS%E3%80%91%E4%BD%BF%E7%94%A8%E6%96%B9%E5%BC%8F%E8%88%87%E8%AE%8A%E6%95%B8/"/>
      <url>/2023/10/11/%E5%89%8D%E7%AB%AF%E6%8A%80%E8%A1%93/CSS/%E3%80%90SCSS%E3%80%91%E4%BD%BF%E7%94%A8%E6%96%B9%E5%BC%8F%E8%88%87%E8%AE%8A%E6%95%B8/</url>
      
        <content type="html"><![CDATA[<p>css 在各家公司無法脫離存在，但是 css 本身的語法不夠強大，因此有了 scss 的誕生，scss 是 css 的超集合，也就是說 scss 可以完全兼容 css 的語法，但是 css 不行。</p><h2 id="一、SCSS"><a href="#一、SCSS" class="headerlink" title="一、SCSS"></a>一、SCSS</h2><p>SCSS，或稱為Sass（Syntactically Awesome Stylesheets），是一種CSS的擴展語言，它引入了一些功能和語法，以使樣式表更具結構、可讀性和可維護性。以下是SCSS的由來：</p><h3 id="1-1-起源"><a href="#1-1-起源" class="headerlink" title="1-1 起源"></a>1-1 起源</h3><p>Sass最初是由哈馬德·卡瑟姆（Hampton Catlin）於2006年創建的，最初是一個Ruby的Gem，用於簡化和改進CSS的書寫。 Sass引入了變數、巢狀規則和混合等功能，以減少代碼的冗長性和提高可維護性。</p><h3 id="1-2-演進"><a href="#1-2-演進" class="headerlink" title="1-2 演進"></a>1-2 演進</h3><p>SCSS（Sassy CSS）則是對Sass的一種新語法的引入，它更接近傳統的CSS語法。SCSS允許開發者使用原生的CSS語法，同時利用Sass提供的功能，使得轉換和遷移變得更加容易。SCSS的語法更接近CSS，因此對於那些熟悉CSS的開發者而言，學習曲線相對較低。</p><h3 id="1-3-功能和語法的引入"><a href="#1-3-功能和語法的引入" class="headerlink" title="1-3 功能和語法的引入"></a>1-3 功能和語法的引入</h3><p>SCSS引入了許多功能，例如變數、嵌套規則、混合、繼承、模塊化等，這些功能有助於更有效地組織和管理樣式代碼。開發者可以使用變數來存儲和重複使用值，使用嵌套規則使代碼更具層次感，使用混合和繼承實現代碼的可重用性。</p><hr><h2 id="二、SCSS-vs-CSS"><a href="#二、SCSS-vs-CSS" class="headerlink" title="二、SCSS vs CSS"></a>二、SCSS vs CSS</h2><h3 id="2-1-基本使用"><a href="#2-1-基本使用" class="headerlink" title="2-1 基本使用"></a>2-1 基本使用</h3><p>CSS : 使用基本的語法，使用大括號 {} 和分號 ; 來定義樣式。使用方式如下</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">16px</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#333</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>SCSS : 使用較為進階的語法，支援巢狀結構、變數、混合（mixins）等功能。使用方式如下</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">16px</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#333</span>;</span><br><span class="line">  <span class="selector-tag">h1</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: blue;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2-變數"><a href="#2-2-變數" class="headerlink" title="2-2 變數"></a>2-2 變數</h3><p>css 無法使用變數，因此在 scss 中可以使用變數來定義樣式，使用方式如下</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$font-stack</span>: <span class="string">&#x27;Arial&#x27;</span>, sans-serif;</span><br><span class="line"><span class="variable">$base-font-size</span>: <span class="number">16px</span>;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>: <span class="variable">$font-stack</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="variable">$base-font-size</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-3-巢狀結構"><a href="#2-3-巢狀結構" class="headerlink" title="2-3 巢狀結構"></a>2-3 巢狀結構</h3><p>scss 可以使用巢狀結構，讓樣式更加清晰，使用方式如下</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">nav</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#333</span>;</span><br><span class="line">  <span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: white;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2-4-混合（Mixins）"><a href="#2-4-混合（Mixins）" class="headerlink" title="2-4 混合（Mixins）"></a>2-4 混合（Mixins）</h3><p>sass 支援混合，可以定義並重複使用樣式集合。</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@mixin</span> border-radius(<span class="variable">$radius</span>) &#123;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="variable">$radius</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">button</span> &#123;</span><br><span class="line">  <span class="keyword">@include</span> border-radius(<span class="number">5px</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端技術 </category>
          
          <category> scss </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Angular (五) - @Input、@Output 使用方式</title>
      <link href="/2023/09/25/%E5%89%8D%E7%AB%AF%E6%8A%80%E8%A1%93/Angular/Angular-05-@Input%E4%BD%BF%E7%94%A8%E6%96%B9%E5%BC%8F/"/>
      <url>/2023/09/25/%E5%89%8D%E7%AB%AF%E6%8A%80%E8%A1%93/Angular/Angular-05-@Input%E4%BD%BF%E7%94%A8%E6%96%B9%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>@Input 、@Output 用於公用模組時最常見的一個功能，透過 @Input 來接收父元件傳遞的資料，並且在子元件中使用。本篇就來簡單介紹 @Input、@Oupt 的使用方式。</p><h3 id="Input-vs-Output"><a href="#Input-vs-Output" class="headerlink" title="@Input vs @Output"></a>@Input vs @Output</h3><p><code>@Input</code> 和 <code>@Output</code> 是 Angular 中用於實現父子組件之間通信的重要裝飾器，它們用於在組件之間傳遞資料和觸發事件。以下是它們的使用時機和主要差異：</p><h4 id="1-Input："><a href="#1-Input：" class="headerlink" title="1. @Input："></a><strong>1. @Input</strong>：</h4><ul><li><strong>使用時機</strong>：<code>@Input</code> 主要用於從父組件向子組件傳遞資料。當你需要將資料從父組件傳遞到子組件以供子組件使用時，通常會使用 <code>@Input</code>。</li><li><strong>主要作用</strong>：<code>@Input</code> 用於聲明子組件的屬性，以允許外部傳遞資料給這些屬性。子組件可以讀取這些屬性的值並在其模板中使用。</li><li><strong>示例</strong>：通過 <code>@Input</code>，可以將父組件的資料傳遞到子組件，例如傳遞文本、配置選項，或任何需要在子組件中顯示或使用的資料。</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 子組件</span></span><br><span class="line"><span class="meta">@Input</span>() <span class="attr">inputData</span>: <span class="built_in">string</span>;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 父組件模板 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">app-child</span> [<span class="attr">inputData</span>]=<span class="string">&quot;parentData&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">app-child</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-Output："><a href="#2-Output：" class="headerlink" title="2. @Output："></a><strong>2. @Output</strong>：</h4><ul><li><strong>使用時機</strong>：<code>@Output</code> 主要用於從子組件向父組件傳遞事件。當子組件需要通知父組件發生了某些事件或需要與父組件進行通信時，通常會使用 <code>@Output</code>。</li><li><strong>主要作用</strong>：<code>@Output</code> 用於聲明自訂事件，並通過 <code>EventEmitter</code> 觸發這些事件。父組件可以監聽這些事件並執行相應的操作。</li><li><strong>示例</strong>：通過 <code>@Output</code>，子組件可以觸發自訂事件，例如按鈕點擊、表單提交，或其他使用者交互事件，以便父組件可以捕獲這些事件並作出回應。</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 子組件</span></span><br><span class="line"><span class="meta">@Output</span>() buttonClicked = <span class="keyword">new</span> <span class="title class_">EventEmitter</span>&lt;<span class="built_in">void</span>&gt;();</span><br><span class="line"></span><br><span class="line"><span class="title function_">onClick</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">buttonClicked</span>.<span class="title function_">emit</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 子組件模板 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> (<span class="attr">click</span>)=<span class="string">&quot;onClick()&quot;</span>&gt;</span>點擊按鈕<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 父組件模板 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">app-child</span> (<span class="attr">buttonClicked</span>)=<span class="string">&quot;handleButtonClick()&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">app-child</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Input-、-Output-差異"><a href="#Input-、-Output-差異" class="headerlink" title="@Input 、 @Output 差異"></a>@Input 、 @Output 差異</h3><ol><li><p><strong>資料流向</strong>：</p><ul><li><code>@Input</code>：資料由父組件傳遞給子組件。</li><li><code>@Output</code>：事件由子組件傳遞給父組件。</li></ul></li><li><p><strong>用途</strong>：</p><ul><li><code>@Input</code> 用於傳遞靜態或動態資料給子組件。</li><li><code>@Output</code> 用於觸發和傳遞事件，以便子組件可以與父組件進行通信。</li></ul></li><li><p><strong>通信方向</strong>：</p><ul><li><code>@Input</code> 是單向通信，從父組件到子組件。</li><li><code>@Output</code> 是單向通信，從子組件到父組件。</li></ul></li></ol><hr><h2 id="Input"><a href="#Input" class="headerlink" title="@Input"></a>@Input</h2><p>@Input 是一個用來在子組件中接收父組件傳遞資料的裝飾器。它允許你將資料從父組件傳遞到子組件，以便在子組件中使用這些資料來顯示或操作。</p><h3 id="一、使用方式"><a href="#一、使用方式" class="headerlink" title="一、使用方式"></a>一、使用方式</h3><h4 id="1-1-單一屬性綁定"><a href="#1-1-單一屬性綁定" class="headerlink" title="1-1 單一屬性綁定"></a>1-1 單一屬性綁定</h4><p>這是最基本的用法，用於將單一的屬性值從父組件傳遞到子組件。示例如下：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 子組件</span></span><br><span class="line"><span class="meta">@Input</span>() <span class="attr">inputData</span>: <span class="built_in">string</span>;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 父組件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">app-child</span> [<span class="attr">inputData</span>]=<span class="string">&quot;parentData&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">app-child</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="1-2-物件或複雜資料結構："><a href="#1-2-物件或複雜資料結構：" class="headerlink" title="1-2 物件或複雜資料結構："></a>1-2 物件或複雜資料結構：</h4><p>如果需要將複雜的物件或資料結構傳遞給子組件，你可以使用 @Input 來傳遞整個物件，如下所示：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 子組件</span></span><br><span class="line"><span class="meta">@Input</span>() <span class="attr">complexData</span>: <span class="title class_">SomeInterface</span>;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 父組件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">app-child</span> [<span class="attr">complexData</span>]=<span class="string">&quot;parentComplexData&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">app-child</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="1-3-多個-Input-屬性"><a href="#1-3-多個-Input-屬性" class="headerlink" title="1-3 多個 @Input 屬性:"></a>1-3 多個 @Input 屬性:</h4><p>一個子組件可以聲明多個 @Input 屬性，父組件可以分別傳遞這些屬性，每個屬性有自己的綁定，如下</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 子組件</span></span><br><span class="line"><span class="meta">@Input</span>() <span class="attr">input1</span>: <span class="built_in">string</span>;</span><br><span class="line"><span class="meta">@Input</span>() <span class="attr">input2</span>: <span class="built_in">number</span>;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 父組件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">app-child</span> [<span class="attr">input1</span>]=<span class="string">&quot;data1&quot;</span> [<span class="attr">input2</span>]=<span class="string">&quot;data2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">app-child</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="1-4-使用-Getter-和-Setter"><a href="#1-4-使用-Getter-和-Setter" class="headerlink" title="1-4 使用 Getter 和 Setter:"></a>1-4 使用 Getter 和 Setter:</h4><p>一個子組件可以聲明多個 @Input 屬性，父組件可以分別傳遞這些屬性，每個屬性有自己的綁定，如下</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 子組件</span></span><br><span class="line"><span class="keyword">private</span> <span class="attr">_inputData</span>: <span class="built_in">string</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Input</span>()</span><br><span class="line"><span class="keyword">set</span> <span class="title function_">inputData</span>(<span class="params">value: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">  <span class="comment">// 在資料設置前可進行自定邏輯</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">_inputData</span> = value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">get</span> <span class="title function_">inputData</span>(): <span class="built_in">string</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">_inputData</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="Output"><a href="#Output" class="headerlink" title="@Output"></a>@Output</h2><p>@Output 用於子元件與父元件溝通，子元件透過 @Output 來觸發父元件的事件，並且將資料傳遞給父元件。儘管在本質上只有一種 @Output 的使用方式，但可以根據事件的具體需求和用例採用不同的模式和技巧來使用它，以滿足不同的情況。以下是幾種常見的 @Output 使用方式：</p><h3 id="一、使用方式-1"><a href="#一、使用方式-1" class="headerlink" title="一、使用方式"></a>一、使用方式</h3><h4 id="1-1-基本的事件綁定："><a href="#1-1-基本的事件綁定：" class="headerlink" title="1-1 基本的事件綁定："></a>1-1 基本的事件綁定：</h4><p>最常見的用法是將一個自定義事件綁定到子組件，然後在子組件中觸發該事件。父組件可以監聽這個事件並採取相應的行動。示例如下</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 子組件</span></span><br><span class="line"><span class="meta">@Output</span>() myEvent = <span class="keyword">new</span> <span class="title class_">EventEmitter</span>&lt;<span class="built_in">string</span>&gt;();</span><br><span class="line"></span><br><span class="line"><span class="title function_">triggerEvent</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">myEvent</span>.<span class="title function_">emit</span>(<span class="string">&#x27;從子組件傳來的資料&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 子組件模板 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> (<span class="attr">click</span>)=<span class="string">&quot;triggerEvent()&quot;</span>&gt;</span>觸發事件<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 父組件模板 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">app-child</span> (<span class="attr">myEvent</span>)=<span class="string">&quot;handleChildEvent($event)&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">app-child</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="1-2-使用-event-物件："><a href="#1-2-使用-event-物件：" class="headerlink" title="1-2 使用 $event 物件："></a>1-2 使用 $event 物件：</h4><p>在父組件中，可以通過 $event 物件來訪問從子組件傳遞過來的資料。這是一種常見的方式，用於在事件處理程序中獲取子組件傳遞的資料。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 父組件</span></span><br><span class="line"><span class="title function_">handleChildEvent</span>(<span class="params">data: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;從子組件收到的資料：&#x27;</span>, data);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-3-自訂事件物件："><a href="#1-3-自訂事件物件：" class="headerlink" title="1-3. 自訂事件物件："></a>1-3. 自訂事件物件：</h4><p>你可以創建一個自訂的事件物件，將多個資料字段傳遞給父組件。這對於需要傳遞多個資料值的情況非常有用。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 子組件</span></span><br><span class="line"><span class="meta">@Output</span>() customEvent = <span class="keyword">new</span> <span class="title class_">EventEmitter</span>&lt;&#123; <span class="attr">value1</span>: <span class="built_in">string</span>, <span class="attr">value2</span>: <span class="built_in">number</span> &#125;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="title function_">triggerCustomEvent</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">customEvent</span>.<span class="title function_">emit</span>(&#123; <span class="attr">value1</span>: <span class="string">&#x27;你好&#x27;</span>, <span class="attr">value2</span>: <span class="number">42</span> &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 子組件模板 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> (<span class="attr">click</span>)=<span class="string">&quot;triggerCustomEvent()&quot;</span>&gt;</span>觸發自訂事件<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 父組件模板 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">app-child</span> (<span class="attr">customEvent</span>)=<span class="string">&quot;handleCustomEvent($event)&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">app-child</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="1-4-透過-ViewChild-和子組件方法："><a href="#1-4-透過-ViewChild-和子組件方法：" class="headerlink" title="1-4. 透過 ViewChild 和子組件方法："></a>1-4. 透過 ViewChild 和子組件方法：</h4><p>有時，父組件可以使用 <code>@ViewChild</code> 來引用子組件的實例，並直接調用子組件的方法來實現與子組件的通信。這種方式不涉及 <code>@Output</code>。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 父組件</span></span><br><span class="line"><span class="meta">@ViewChild</span>(<span class="title class_">ChildComponent</span>) <span class="attr">childComponent</span>: <span class="title class_">ChildComponent</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_">triggerChildMethod</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">childComponent</span>.<span class="title function_">someMethod</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="本篇重點整理"><a href="#本篇重點整理" class="headerlink" title="本篇重點整理"></a>本篇重點整理</h3><p>這個表格總結了 <code>@Input</code> 和 <code>@Output</code> 的主要特性和用途，可以方便理解它們之間的差異。</p><table><thead><tr><th>特性</th><th>@Input</th><th>@Output</th></tr></thead><tbody><tr><td>用途</td><td>從父元件向子元件傳遞資料</td><td>從子元件向父元件傳遞事件</td></tr><tr><td>資料流向</td><td>父元件到子元件</td><td>子元件到父元件</td></tr><tr><td>聲明方式</td><td>在子元件中使用<code>@Input()</code>裝飾器聲明屬性</td><td>在子元件中使用<code>@Output()</code>裝飾器聲明事件</td></tr><tr><td>事件類型</td><td>不適用</td><td>使用 <code>EventEmitter</code> 觸發自定義事件</td></tr><tr><td>資料類型</td><td>可以傳遞任何類型的資料（原始類型、物件、陣列等）</td><td>通常用於觸發無資料或自定義事件的 void 類型</td></tr><tr><td>與模板綁定的方式</td><td>使用方括號<code>[inputProperty]=&quot;data&quot;</code></td><td>使用圓括號<code>(outputEvent)=&quot;handler()&quot;</code></td></tr><tr><td>觸發事件</td><td>不適用</td><td>子元件透過調用<code>emit()</code>觸發事件</td></tr><tr><td>監聽事件</td><td>不適用</td><td>父元件可以監聽子元件的事件並執行相應操作</td></tr><tr><td>多個屬性或事件</td><td>可以在子元件中聲明多個 <code>@Input</code> 屬性</td><td>可以在子元件中聲明多個 <code>@Output</code> 事件</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 前端技術 </category>
          
          <category> Angular </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Angular </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C# Discord (一) - 製作簡易版本機器人</title>
      <link href="/2023/09/24/%E5%BE%8C%E7%AB%AF%E6%8A%80%E8%A1%93/CS/Discord/discord-01_bot%E6%A9%9F%E5%99%A8%E8%A3%BD%E4%BD%9C/"/>
      <url>/2023/09/24/%E5%BE%8C%E7%AB%AF%E6%8A%80%E8%A1%93/CS/Discord/discord-01_bot%E6%A9%9F%E5%99%A8%E8%A3%BD%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<p>Discord Bot 是一個很好玩的東西，可以讓你的 Discord 伺服器更加的有趣，而且可以自己寫程式來控制機器人。本人已經玩過幾次，想要將爬蟲功能加入在伺服器當中。這篇文章會教你如何製作一個 Discord Bot，並且讓他加入你的伺服器。</p><h2 id="前置作業"><a href="#前置作業" class="headerlink" title="前置作業"></a>前置作業</h2><h3 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h3><ol><li><a href="https://visualstudio.microsoft.com/zh-hant/vs/whatsnew/">Visual Studio 2022</a></li><li><a href="https://code.visualstudio.com/">Visual Studio Code</a></li></ol><h3 id="套件"><a href="#套件" class="headerlink" title="套件"></a>套件</h3><ol><li><a href="https://www.nuget.org/packages/Discord.Net.WebSocket/">Discord.Net.WebSocket</a></li><li><a href="https://www.nuget.org/packages/HtmlAgilityPack/">HtmlAgilityPack</a></li></ol><hr><h2 id="Discord-Bots"><a href="#Discord-Bots" class="headerlink" title="Discord Bots"></a>Discord Bots</h2><h3 id="前往網站、填寫資料"><a href="#前往網站、填寫資料" class="headerlink" title="前往網站、填寫資料"></a>前往網站、填寫資料</h3><p>下方網址是前往 Discord Developer Portal 的網址，目的是要設定 Discord Bot 的資料，包含名稱、圖片、說明等等。<br>設定方式會比 line bot 簡單很多，可以參考下方圖片。</p><ul><li><a href="https://discord.com/developers/applications">Discord Developer Portal</a></li></ul><h4 id="1-創建-Bot"><a href="#1-創建-Bot" class="headerlink" title="1. 創建 Bot"></a>1. 創建 Bot</h4><p>填寫bot 名稱，並且選擇創建。<br><img src="/image/20230924_15-49-45.png"></p><div class="note info flat"><p>備註 : APPLICATION ID、PUBLIC KEY 目前本篇不會用到，之後看情況再補充。<br><img src="/image/20230924_15-51-01.png"></p></div><h4 id="2-設定權限"><a href="#2-設定權限" class="headerlink" title="2. 設定權限"></a>2. 設定權限</h4><p>接下來，需要設定bot允許的權限。 當然，目前只需要讓他輸入文字，勾選輸入文字的選項即可。<br><img src="/image/20230924_16-14-49.png"><br>選擇完畢後，按下複製按鈕並貼在瀏覽器搜尋，會導到加入哪個伺服器的地方。<br><img src="/image/20230924_16-15-45.png"></p><h3 id="3-取得-token"><a href="#3-取得-token" class="headerlink" title="3. 取得 token"></a>3. 取得 token</h3><h2 id=""><a href="#" class="headerlink" title=""></a><img src="/image/20230924_17-09-37.png"></h2><h2 id="C-撰寫程式碼"><a href="#C-撰寫程式碼" class="headerlink" title="C# 撰寫程式碼"></a>C# 撰寫程式碼</h2><h3 id="建立專案"><a href="#建立專案" class="headerlink" title="建立專案"></a>建立專案</h3><p>這邊使用 <code>Discord.WebSocket</code> 製作機器人。首先，新增一個 <code>class discordMessage</code>。</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">discordMessage</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> DiscordSocketClient _client;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task <span class="title">RunAsync</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        _client = <span class="keyword">new</span> DiscordSocketClient();</span><br><span class="line">        _client.Log += Log;</span><br><span class="line">        <span class="keyword">var</span> token = <span class="string">&quot;OTkwNTgzNTMzNTAyMzQ5Mzky.G1DKyM.EZaO8x8Ny177WCDmpv7YspS2RdMRYKoPug5HGQ&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">await</span> _client.LoginAsync(TokenType.Bot, token);</span><br><span class="line">        <span class="keyword">await</span> _client.StartAsync();</span><br><span class="line">        <span class="comment">// Block this task until the program is closed.</span></span><br><span class="line">        <span class="keyword">await</span> Task.Delay(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>這邊就是他初始化的部分，<code>token</code> 是剛剛在 Discord Developer Portal &gt; Bot 頁面複製的，這邊就是讓機器人登入的部分。</p><h3 id="加入回覆留言功能"><a href="#加入回覆留言功能" class="headerlink" title="加入回覆留言功能"></a>加入回覆留言功能</h3><p>我們將觸發狀態加入在 LoginAsync 前，這樣就可以讓機器人在登入後，就可以觸發事件。可以直接對機器人留言就可以取得到<code>Hello</code>的回覆。</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="comment">//準備好時候觸發。</span></span><br><span class="line">_client.Ready += () =&gt;</span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(<span class="string">&quot;Bot is ready!&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> Task.CompletedTask;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 當使用者輸入訊息時候觸發。</span></span><br><span class="line">_client.MessageReceived += <span class="keyword">async</span> (message) =&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (message.Author.Id == _client.CurrentUser.Id) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">await</span> message.Channel.SendMessageAsync(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">await</span> _client.LoginAsync(TokenType.Bot, token);</span><br><span class="line"><span class="keyword">await</span> _client.StartAsync();</span><br><span class="line">...</span><br><span class="line">...</span><br></pre></td></tr></table></figure><hr><h2 id="實作爬蟲後回覆訊息"><a href="#實作爬蟲後回覆訊息" class="headerlink" title="實作爬蟲後回覆訊息"></a>實作爬蟲後回覆訊息</h2><p>這邊我另外用 <code>reptileWeb</code> 撰寫，裡面內容是用 <code>A.V.A</code>當作本次範例，將活動資訊寫回到我得Discord裡面。</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">reptileWeb</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">async</span> Task&lt;List&lt;<span class="built_in">string</span>&gt;&gt; GetWebInformation()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> doc = <span class="keyword">await</span> LoadAsync(<span class="string">&quot;http://ava.mangot5.com/game/ava/notice&quot;</span>);</span><br><span class="line">        <span class="keyword">var</span> xPath = <span class="string">&quot;//*[@id=\&quot;bodyContent_List1_Notice\&quot;]/div/table/tbody/tr&quot;</span>;</span><br><span class="line">        HtmlNodeCollection content = doc.DocumentNode.SelectNodes(xPath);</span><br><span class="line">        List&lt;<span class="built_in">string</span>&gt; list = <span class="keyword">new</span>();</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="keyword">var</span> item <span class="keyword">in</span> content)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> title = item.SelectSingleNode(<span class="string">&quot;td[1]/a/text()&quot;</span>).InnerText;</span><br><span class="line">            title = Regex.Replace(title, <span class="string">@&quot;\r\n?|\n|\r|\t&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> href = item.SelectNodes(<span class="string">&quot;td[1]/a/@href&quot;</span>).FirstOrDefault().Attributes.FirstOrDefault().Value.ToString(); ;</span><br><span class="line">            Console.WriteLine(title + <span class="string">&quot;: http://ava.mangot5.com/&quot;</span> + href);</span><br><span class="line">            list.Add(title + <span class="string">&quot;: http://ava.mangot5.com/&quot;</span> + href);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">async</span> Task&lt;HtmlDocument&gt; <span class="title">LoadAsync</span>(<span class="params"><span class="built_in">string</span> url</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//取得當前 html 字串</span></span><br><span class="line">        HttpClient client = <span class="keyword">new</span>();</span><br><span class="line">        HttpResponseMessage response = <span class="keyword">await</span> client.GetAsync(url);</span><br><span class="line">        response.EnsureSuccessStatusCode();</span><br><span class="line">        <span class="built_in">string</span> responseBody = <span class="keyword">await</span> response.Content.ReadAsStringAsync();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//設定response Body</span></span><br><span class="line">        HtmlDocument doc = <span class="keyword">new</span>();</span><br><span class="line">        doc.LoadHtml(responseBody);</span><br><span class="line">        <span class="keyword">return</span> doc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>這邊將剛才 discord 改寫，就可以得到我的要的結果。</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">discordMessage</span></span><br><span class="line">   &#123;</span><br><span class="line">       <span class="keyword">private</span> DiscordSocketClient _client;</span><br><span class="line"></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task <span class="title">RunAsync</span>()</span></span><br><span class="line">       &#123;</span><br><span class="line">           _client = <span class="keyword">new</span> DiscordSocketClient();</span><br><span class="line">           _client.Log += Log;</span><br><span class="line">           <span class="keyword">var</span> token = <span class="string">&quot;YOUER CLIENT SOCKET&quot;</span>;</span><br><span class="line"></span><br><span class="line">           _client.Ready += () =&gt;</span><br><span class="line">           &#123;</span><br><span class="line">               Console.WriteLine(<span class="string">&quot;Bot is ready!&quot;</span>);</span><br><span class="line">               <span class="keyword">return</span> Task.CompletedTask;</span><br><span class="line">           &#125;;</span><br><span class="line"></span><br><span class="line">           _client.MessageReceived += <span class="keyword">async</span> (message) =&gt;</span><br><span class="line">           &#123;</span><br><span class="line">               Console.WriteLine(message);</span><br><span class="line">               <span class="comment">// Ignore messages sent by the bot itself</span></span><br><span class="line">               <span class="keyword">if</span> (message.Author.Id == _client.CurrentUser.Id)</span><br><span class="line">                   <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">               <span class="comment">// Respond to messages that contain &quot;hello&quot;</span></span><br><span class="line">               <span class="keyword">if</span> (message.Content.Contains(<span class="string">&quot;ava&quot;</span>))</span><br><span class="line">               &#123;</span><br><span class="line">                   <span class="keyword">var</span> reptile = <span class="keyword">new</span> reptileWeb();</span><br><span class="line">                   <span class="keyword">var</span> list = reptile.GetWebInformation();</span><br><span class="line">                   <span class="keyword">foreach</span> (<span class="keyword">var</span> item <span class="keyword">in</span> list.Result)</span><br><span class="line">                   &#123;</span><br><span class="line">                       <span class="keyword">await</span> message.Channel.SendMessageAsync(item);</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;;</span><br><span class="line">           <span class="keyword">await</span> _client.LoginAsync(TokenType.Bot, token);</span><br><span class="line">           <span class="keyword">await</span> _client.StartAsync();</span><br><span class="line"></span><br><span class="line">           <span class="comment">// Block this task until the program is closed.</span></span><br><span class="line">           <span class="keyword">await</span> Task.Delay(<span class="number">-1</span>);</span><br><span class="line"></span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="function"><span class="keyword">private</span> Task <span class="title">Log</span>(<span class="params">LogMessage msg</span>)</span></span><br><span class="line">       &#123;</span><br><span class="line">           Console.WriteLine(msg.ToString());</span><br><span class="line">           <span class="keyword">return</span> Task.CompletedTask;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>這邊我使用 netcore 7.0，<code>Program.cs</code> 撰寫長度只需要這樣就好。</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">using</span> BasicDiscordBot;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> discordBot = <span class="keyword">new</span> discordMessage();</span><br><span class="line"><span class="keyword">await</span> discordBot.RunAsync();</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="效果如下"><a href="#效果如下" class="headerlink" title="效果如下"></a>效果如下</h3><p><img src="/image/20230924_17-08-51.png"></p><h3 id="範例"><a href="#範例" class="headerlink" title="範例"></a>範例</h3><p>以下就是我撰寫的範例，可以參考看看。</p><ul><li><a href="https://github.com/JontCont/BasicDiscordBot">BasicDiscordBot</a></li></ul><hr><h2 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h2><p>最近有比較繁忙無法定期撰寫文章，這個樁案我擺他放了兩周才拿出來寫。後續看看Discord Bot 還有什麼花樣，我在另外寫一篇文章來介紹。</p>]]></content>
      
      
      <categories>
          
          <category> 後端技術 </category>
          
          <category> C# </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
            <tag> Discord </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Angular (四) - component生命週期</title>
      <link href="/2023/09/23/%E5%89%8D%E7%AB%AF%E6%8A%80%E8%A1%93/Angular/Angular-04-component%E7%94%9F%E5%91%BD%E9%80%B1%E6%9C%9F/"/>
      <url>/2023/09/23/%E5%89%8D%E7%AB%AF%E6%8A%80%E8%A1%93/Angular/Angular-04-component%E7%94%9F%E5%91%BD%E9%80%B1%E6%9C%9F/</url>
      
        <content type="html"><![CDATA[<p>本篇主要備註、紀錄 Angular component 的生命週期，方便之後查詢。</p><h2 id="component生命週期"><a href="#component生命週期" class="headerlink" title="component生命週期"></a>component生命週期</h2><p>Angular 元件生命週期中從 建立、渲染、更新、銷毀過程中，會觸發一些事件，這些事件可以讓我們在元件生命週期中做一些事情，例如：在元件建立時，可以做一些初始化的動作，或是在元件銷毀時，可以做一些清除的動作。</p><p>參考下圖生命週期以及程式範例。<br><img src="/image/20230827_20-01-12.png"></p><ul><li><a href="https://stackblitz.com/edit/angular-lifecycle-hooks">Will保哥-範例程式</a></li></ul><hr><h3 id="一、生命週期階段"><a href="#一、生命週期階段" class="headerlink" title="一、生命週期階段"></a>一、生命週期階段</h3><p>元件的生命週期在Angular中被分為八種主要階段，每個階段都對應著特定的生命週期鉤子方法。這些階段按照順序依次發生，從元件的創建到銷毀。</p><h4 id="1-1-建立階段（Creation-Phase）"><a href="#1-1-建立階段（Creation-Phase）" class="headerlink" title="1-1 建立階段（Creation Phase）"></a>1-1 建立階段（Creation Phase）</h4><ul><li>constructor: 元件類的建構子。通常是當元件被建立時，會先執行建構子，並且只會執行一次。</li></ul><h4 id="1-2-渲染階段（Render-Phase）"><a href="#1-2-渲染階段（Render-Phase）" class="headerlink" title="1-2 渲染階段（Render Phase）"></a>1-2 渲染階段（Render Phase）</h4><ul><li>ngOnChanges: 當元件的輸入屬性發生變化時，會觸發此鉤子方法。</li><li>ngOnInit: 當元件初始化完成時，會觸發此鉤子方法。通常是當元件初始化完成後，會執行一些初始化的動作，例如：呼叫API取得資料、訂閱事件等等。</li></ul><h4 id="1-3-更新階段（Update-Phase）"><a href="#1-3-更新階段（Update-Phase）" class="headerlink" title="1-3 更新階段（Update Phase）"></a>1-3 更新階段（Update Phase）</h4><ul><li>ngDoCheck: 當元件的變更偵測機制被觸發時，會觸發此鉤子方法。通常是當元件的輸入屬性發生變化時，會觸發此鉤子方法。</li></ul><h4 id="1-4-銷毀階段（Destruction-Phase）"><a href="#1-4-銷毀階段（Destruction-Phase）" class="headerlink" title="1-4 銷毀階段（Destruction Phase）"></a>1-4 銷毀階段（Destruction Phase）</h4><ul><li>ngOnDestroy: 當元件被銷毀時，會觸發此鉤子方法。通常是當元件被銷毀時，會執行一些清除的動作，例如：取消訂閱事件、清除計時器等等。</li></ul><hr><h3 id="二、生命週期鉤子方法"><a href="#二、生命週期鉤子方法" class="headerlink" title="二、生命週期鉤子方法"></a>二、生命週期鉤子方法</h3><h4 id="2-1-constructor"><a href="#2-1-constructor" class="headerlink" title="2-1 constructor"></a>2-1 constructor</h4><p>元件類的建構子。通常是當元件被建立時，會先執行建構子，並且只會執行一次。這裡不會有任何狀態可以取得，唯一可以取得是class當中預設的屬性(property)。</p><h4 id="2-2-ngOnChanges"><a href="#2-2-ngOnChanges" class="headerlink" title="2-2 ngOnChanges"></a>2-2 ngOnChanges</h4><p>當元件的輸入屬性發生變化時，會觸發此鉤子方法。這裡觸發事件會比 OnInit 早，所以通常不會在這裡做初始化的動作。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">ngOnChanges</span>(<span class="params">changes: SimpleChanges</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;ngOnChanges&#x27;</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(changes);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-3-ngOnInit"><a href="#2-3-ngOnInit" class="headerlink" title="2-3 ngOnInit"></a>2-3 ngOnInit</h4><p>當元件初始化完成時，會觸發此鉤子方法。通常是當元件初始化完成後，會執行一些初始化的動作，例如：呼叫API取得資料、訂閱事件等等。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">ngOnInit</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;ngOnInit&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-4-ngDoCheck"><a href="#2-4-ngDoCheck" class="headerlink" title="2-4 ngDoCheck"></a>2-4 ngDoCheck</h4><p>當元件的變更偵測機制被觸發時，會觸發此鉤子方法。通常是當元件的輸入屬性發生變化時，會觸發此鉤子方法。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">ngDoCheck</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;ngDoCheck&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-5-ngAfterContentInit"><a href="#2-5-ngAfterContentInit" class="headerlink" title="2-5 ngAfterContentInit"></a>2-5 ngAfterContentInit</h4><p>當元件內容初始化完成時，會觸發此鉤子方法。通常是當元件內容初始化完成後，會執行一些初始化的動作，例如：呼叫API取得資料、訂閱事件等等。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">ngAfterContentInit</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;ngAfterContentInit&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-6-ngAfterContentChecked"><a href="#2-6-ngAfterContentChecked" class="headerlink" title="2-6 ngAfterContentChecked"></a>2-6 ngAfterContentChecked</h4><p>當元件內容變更偵測機制被觸發時，會觸發此鉤子方法。通常是當元件內容發生變化時，會觸發此鉤子方法。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">ngAfterContentChecked</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;ngAfterContentChecked&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-7-ngAfterViewInit"><a href="#2-7-ngAfterViewInit" class="headerlink" title="2-7 ngAfterViewInit"></a>2-7 ngAfterViewInit</h4><p>當元件視圖初始化完成時，會觸發此鉤子方法。通常是當元件視圖初始化完成後，會執行一些初始化的動作，例如：呼叫API取得資料、訂閱事件等等。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">ngAfterViewInit</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;ngAfterViewInit&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-8-ngAfterViewChecked"><a href="#2-8-ngAfterViewChecked" class="headerlink" title="2-8 ngAfterViewChecked"></a>2-8 ngAfterViewChecked</h4><p>當元件視圖變更偵測機制被觸發時，會觸發此鉤子方法。通常是當元件視圖發生變化時，會觸發此鉤子方法。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">ngAfterViewChecked</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;ngAfterViewChecked&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-9-ngOnDestroy"><a href="#2-9-ngOnDestroy" class="headerlink" title="2-9 ngOnDestroy"></a>2-9 ngOnDestroy</h4><p>當元件被銷毀時，會觸發此鉤子方法。通常是當元件被銷毀時，會執行一些清除的動作，例如：取消訂閱事件、清除計時器等等。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">ngOnDestroy</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;ngOnDestroy&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="三、子元件與內容元件事件"><a href="#三、子元件與內容元件事件" class="headerlink" title="三、子元件與內容元件事件"></a>三、子元件與內容元件事件</h3><h4 id="3-1-子元件"><a href="#3-1-子元件" class="headerlink" title="3-1 子元件"></a>3-1 子元件</h4><ul><li>ngAfterViewInit : 當 View 裡面所有元件都初始化完成後，才會觸發。</li><li>ngAfterViewChecked : 當 View 裡面所有文件都完成變更偵測後，才會觸發。</li></ul><h4 id="3-2-內容元件"><a href="#3-2-內容元件" class="headerlink" title="3-2 內容元件"></a>3-2 內容元件</h4><ul><li>ngAfterContentInit : 當 Content 裡面所有元件都初始化完成後，才會觸發。</li><li>ngAfterContentChecked : 當 Content 裡面所有文件都完成變更偵測後，才會觸發。</li></ul><hr><h2 id="參考文件"><a href="#參考文件" class="headerlink" title="參考文件"></a>參考文件</h2><ol><li><a href="https://hackmd.io/@Heidi-Liu/angular-lifecycle">[學習筆記] 淺談 Angular 元件生命週期</a></li><li><a href="https://www.youtube.com/watch?v=-HoKK2KyurQ">Angular 完整元件生命週期介紹</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 前端技術 </category>
          
          <category> Angular </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Angular </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【JS】變數應用 let vs const vs var</title>
      <link href="/2023/09/17/%E5%89%8D%E7%AB%AF%E6%8A%80%E8%A1%93/JS/%E3%80%90JS%E3%80%91%E8%AE%8A%E6%95%B8%E6%87%89%E7%94%A8%20let%20vs%20const%20vs%20var/"/>
      <url>/2023/09/17/%E5%89%8D%E7%AB%AF%E6%8A%80%E8%A1%93/JS/%E3%80%90JS%E3%80%91%E8%AE%8A%E6%95%B8%E6%87%89%E7%94%A8%20let%20vs%20const%20vs%20var/</url>
      
        <content type="html"><![CDATA[<h2 id="何謂-ES6"><a href="#何謂-ES6" class="headerlink" title="何謂 ES6"></a>何謂 ES6</h2><p>ECMAScript 2015（簡稱ES6）是JavaScript語言的一個重要版本，於2015年正式發布。它帶來了許多新的功能、語法和增強的功能，以改進JavaScript的可讀性、可維護性和功能性。ES6的主要目標之一是使JavaScript更現代化且更容易使用，以滿足不斷增長的Web應用程式需求。</p><p>以下是ES6中一些重要的功能和變化：</p><ol><li><p><strong><code>let</code> 和 <code>const</code> 宣告：</strong> ES6引入了 <code>let</code> 和 <code>const</code> 關鍵字，以取代 <code>var</code> 來宣告變數。它們具有區塊級作用域，可以解決 <code>var</code> 所帶來的一些問題。</p></li><li><p><strong>箭頭函式：</strong> 箭頭函式是一種新的函式宣告語法，可以簡化函式的定義和上下文綁定。這有助於減少程式碼量，並改進了函式內部的 <code>this</code> 行為。</p></li><li><p><strong>模板字串：</strong> 模板字串允許您在字串中插入表達式，以更方便地創建多行字串和字串模板。</p></li><li><p><strong>解構賦值：</strong> ES6引入了解構賦值語法，使您可以輕鬆地從陣列和物件中提取值並賦給變數，以減少重複性的程式碼。</p></li><li><p><strong>Promise：</strong> Promise是處理異步操作的新方式，有助於更清晰和可維護的異步程式碼編寫。</p></li><li><p><strong>類別：</strong> ES6引入了類別和類別繼承，使面向物件程式設計更加清晰和方便。</p></li><li><p><strong>模組：</strong> ES6引入了模組化系統，允許開發人員更好地組織和匯入&#x2F;匯出程式碼。</p></li><li><p><strong>迭代器和產生器：</strong> ES6引入了可迭代物件和產生器函式，以簡化迭代操作和異步程式碼編寫。</p></li><li><p><strong>新的資料結構：</strong> ES6引入了新的資料結構，如 <code>Map</code> 和 <code>Set</code>，以提供更多資料處理選項。</p></li><li><p><strong>其他改進：</strong> 還有許多其他小的改進和語法糖，以提高JavaScript的可讀性和可維護性。</p></li></ol><p>ES6的引入使JavaScript變得更強大、更靈活，有助於更好地滿足現代Web應用程式的需求。由於其重要性，它已成為JavaScript開發的標準之一，並為後續的ECMAScript版本奠定了基礎。</p><hr><h2 id="let、const-由來"><a href="#let、const-由來" class="headerlink" title="let、const 由來"></a>let、const 由來</h2><p>在 ES6 之前，JavaScript 主要使用 var 關鍵字來聲明變數。然而，var 存在一些問題，最突出的是它的作用域是函數級別的，而不是塊級別的，這導致了變數洩漏和不可預測的行為。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> x = <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(x); <span class="comment">// 輸出 10</span></span><br></pre></td></tr></table></figure><p>在上面的程式碼中，x 被聲明在 if 語句塊內，但它在塊外仍然可見，這可能導致錯誤。為了解決 var 的問題，ES6 引入了 let 和 const 關鍵字。</p><ul><li>let：let 聲明的變數具有塊級別作用域，這意味著它們只在聲明它們的塊內可見。這解決了 var 的作用域問題。<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> y = <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(y); <span class="comment">// 錯誤，y 不可見</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li>const: const 聲明的變數也具有塊級別作用域，但它們還要求被賦值一次後就不能再被重新賦值。這使得 const 適用於常數的聲明。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> z = <span class="number">10</span>;</span><br><span class="line">z = <span class="number">20</span>; <span class="comment">// 錯誤，不能重新賦值</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>let 和 const 的引入提高了 JavaScript 中變數的可控性和可維護性，減少了錯誤發生的可能性。選擇使用哪個關鍵字取決於變數是否需要重新賦值，如果不需要重新賦值，最好使用 const，這樣可以避免意外修改變數的值。如果需要重新賦值，可以使用 let。</p><hr><h2 id="區塊作用域-block-scope-vs-函式作用域-function-scope"><a href="#區塊作用域-block-scope-vs-函式作用域-function-scope" class="headerlink" title="區塊作用域 (block scope) vs 函式作用域 (function scope)"></a>區塊作用域 (block scope) vs 函式作用域 (function scope)</h2><h3 id="一、函式作用域-function-scope"><a href="#一、函式作用域-function-scope" class="headerlink" title="一、函式作用域 (function scope)"></a>一、函式作用域 (function scope)</h3><p>var在 JavaScript 中，變數的作用域是函式級別的，這意味著變數在聲明它們的函式內可見，但在函式外不可見。這種作用域稱為函式作用域。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">myFunction</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> x = <span class="number">10</span>;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(x); <span class="comment">// 可見</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(x); <span class="comment">// 不可見</span></span><br></pre></td></tr></table></figure><p>在上面的程式碼中，變數 x 在函式 myFunction 內可見，但在函式外不可見。這是因為它具有函式作用域。</p><h3 id="二、區塊作用域-block-scope"><a href="#二、區塊作用域-block-scope" class="headerlink" title="二、區塊作用域 (block scope)"></a>二、區塊作用域 (block scope)</h3><p>let 和 const 關鍵字引入了區塊作用域，這意味著變數在聲明它們的塊內可見，但在塊外不可見。這種作用域稱為區塊作用域。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> y = <span class="number">10</span>;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(y); <span class="comment">// 可見</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(y); <span class="comment">// 不可見</span></span><br></pre></td></tr></table></figure><p>在上面的程式碼中，變數 y 在 if 語句塊內可見，但在塊外不可見。這是因為它具有區塊作用域。</p><hr><h2 id="區塊作用域-block-scope-vs-函式作用域-function-scope-差異"><a href="#區塊作用域-block-scope-vs-函式作用域-function-scope-差異" class="headerlink" title="區塊作用域 (block scope) vs 函式作用域 (function scope) 差異"></a>區塊作用域 (block scope) vs 函式作用域 (function scope) 差異</h2><h3 id="一、重複聲明-Redeclaration"><a href="#一、重複聲明-Redeclaration" class="headerlink" title="一、重複聲明 (Redeclaration)"></a>一、重複聲明 (Redeclaration)</h3><h4 id="1-函式作用域-function-scope"><a href="#1-函式作用域-function-scope" class="headerlink" title="1. 函式作用域 (function scope)"></a>1. 函式作用域 (function scope)</h4><p>在 JavaScript 中，變數可以被多次聲明，而不會引發錯誤。這種行為稱為重複聲明。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">var</span> x = <span class="number">20</span>; <span class="comment">// 沒有錯誤</span></span><br></pre></td></tr></table></figure><p>在上面的程式碼中，變數 x 被聲明了兩次，但沒有錯誤。這是因為它具有函式作用域，因此第二個聲明只是重新賦值。</p><h4 id="2-區塊作用域-block-scope"><a href="#2-區塊作用域-block-scope" class="headerlink" title="2. 區塊作用域 (block scope)"></a>2. 區塊作用域 (block scope)</h4><p>let 和 const 關鍵字不允許重複聲明，重複聲明會引發錯誤。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> y = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">let</span> y = <span class="number">20</span>; <span class="comment">// 錯誤</span></span><br></pre></td></tr></table></figure><p>在上面的程式碼中，變數 y 被聲明了兩次，這導致錯誤。這是因為它具有區塊作用域，因此第二個聲明不是重新賦值，而是重複聲明。</p><h3 id="二、重新賦值-Reassignment"><a href="#二、重新賦值-Reassignment" class="headerlink" title="二、重新賦值 (Reassignment)"></a>二、重新賦值 (Reassignment)</h3><h4 id="1-函式作用域-function-scope-1"><a href="#1-函式作用域-function-scope-1" class="headerlink" title="1. 函式作用域 (function scope)"></a>1. 函式作用域 (function scope)</h4><p>在 JavaScript 中，變數可以被重新賦值，這意味著可以在不重新聲明的情況下更改變數的值。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="number">10</span>;</span><br><span class="line">x = <span class="number">20</span>; <span class="comment">// 沒有錯誤</span></span><br></pre></td></tr></table></figure><p>在上面的程式碼中，變數 x 被重新賦值，但沒有錯誤。這是因為它具有函式作用域，因此可以在不重新聲明的情況下重新賦值。</p><h4 id="2-區塊作用域-block-scope-1"><a href="#2-區塊作用域-block-scope-1" class="headerlink" title="2. 區塊作用域 (block scope)"></a>2. 區塊作用域 (block scope)</h4><p>const 關鍵字不允許重新賦值，重新賦值會引發錯誤。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> y = <span class="number">10</span>;</span><br><span class="line">y = <span class="number">20</span>; <span class="comment">// 錯誤</span></span><br></pre></td></tr></table></figure><p>在上面的程式碼中，變數 y 被重新賦值，這導致錯誤。這是因為它具有區塊作用域，因此不能重新賦值。</p><hr><h2 id="let-vs-const"><a href="#let-vs-const" class="headerlink" title="let vs const"></a>let vs const</h2><h3 id="一、重新賦值-Reassignment"><a href="#一、重新賦值-Reassignment" class="headerlink" title="一、重新賦值 (Reassignment)"></a>一、重新賦值 (Reassignment)</h3><h4 id="1-let"><a href="#1-let" class="headerlink" title="1. let"></a>1. let</h4><p>let 關鍵字允許變數被重新賦值，這意味著可以在不重新聲明的情況下更改變數的值。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> x = <span class="number">10</span>;</span><br><span class="line">x = <span class="number">20</span>; <span class="comment">// 沒有錯誤</span></span><br></pre></td></tr></table></figure><h4 id="2-const"><a href="#2-const" class="headerlink" title="2. const"></a>2. const</h4><p>const 關鍵字不允許重新賦值，重新賦值會引發錯誤。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> y = <span class="number">10</span>;</span><br><span class="line">y = <span class="number">20</span>; <span class="comment">// 錯誤</span></span><br></pre></td></tr></table></figure><h3 id="二、重複聲明-Redeclaration"><a href="#二、重複聲明-Redeclaration" class="headerlink" title="二、重複聲明 (Redeclaration)"></a>二、重複聲明 (Redeclaration)</h3><h4 id="1-let-1"><a href="#1-let-1" class="headerlink" title="1. let"></a>1. let</h4><p>let 關鍵字不允許重複聲明，重複聲明會引發錯誤。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> x = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">let</span> x = <span class="number">20</span>; <span class="comment">// 錯誤</span></span><br></pre></td></tr></table></figure><h4 id="2-const-1"><a href="#2-const-1" class="headerlink" title="2. const"></a>2. const</h4><p>const 關鍵字不允許重複聲明，重複聲明會引發錯誤。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> y = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> y = <span class="number">20</span>; <span class="comment">// 錯誤</span></span><br></pre></td></tr></table></figure><h3 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h3><p>let 和 const 關鍵字的主要區別在於它們是否允許重新賦值。let 允許重新賦值，而 const 不允許重新賦值。除此之外，它們的行為是相同的。<br><img src="/image/20230917_10-25-50.png"></p>]]></content>
      
      
      <categories>
          
          <category> 前端技術 </category>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【JS】常見除錯(debugger) 方式</title>
      <link href="/2023/09/16/%E5%89%8D%E7%AB%AF%E6%8A%80%E8%A1%93/JS/%E3%80%90JS%E3%80%91%E5%B8%B8%E8%A6%8B%E9%99%A4%E9%8C%AF(debugger)%20%E6%96%B9%E5%BC%8F/"/>
      <url>/2023/09/16/%E5%89%8D%E7%AB%AF%E6%8A%80%E8%A1%93/JS/%E3%80%90JS%E3%80%91%E5%B8%B8%E8%A6%8B%E9%99%A4%E9%8C%AF(debugger)%20%E6%96%B9%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>javascript 是前端必備之一的工具，開發過程中，有時候會遇到一些問題、驗證資料，這時候就需要使用到debugger來幫助我們找出問題。</p><h2 id="除錯-debugger-的使用方式"><a href="#除錯-debugger-的使用方式" class="headerlink" title="除錯(debugger)的使用方式"></a>除錯(debugger)的使用方式</h2><p>javascript 除錯方式比較常見為 <code>console</code>、<code>alert()</code>，以下介紹常見的javascript 除錯方式。</p><ol><li><code>console</code> : 這功能比較常見為 <code>log()</code>、<code>warn()</code>、<code>error()</code>，可以快速知道錯誤、問題內容。</li><li><code>alert</code> : 這功能期初是用來提示使用者的，但也可以用來除錯，但是會有一個缺點，就是會中斷程式的執行，操作上也會綁手綁腳。</li><li><code>debugger</code> : 這功能是javascript內建的除錯功能，可以在瀏覽器中直接使用，不需要額外安裝套件，也不會中斷程式的執行，操作上也比較方便。</li><li><code>try...catch</code> : 這功能是javascript內建的除錯功能，可以在瀏覽器中直接使用，不需要額外安裝套件，也不會中斷程式的執行，操作上也比較方便。</li></ol><hr><h3 id="一、console"><a href="#一、console" class="headerlink" title="一、console"></a>一、console</h3><p>基本上比較少人使用 <code>warn()</code>、<code>error()</code>，通常都是使用 <code>log()</code> ，呈現效果如下方顯示。<br><img src="/image/20230916_09-11-23.png"></p><p>補充一點 console 其實還有其他功能 ，例如 : <code>table()</code>、<code>time()</code>、<code>timeEnd()</code>、<code>dir()</code></p><h4 id="1-table"><a href="#1-table" class="headerlink" title="1. table()"></a>1. table()</h4><p>table() 會將資料以表格方式呈現。table()可以把array 資料轉成表格，方便觀看資料，與log()呈現方式不同，可以參酌使用方式。<br><img src="/image/20230916_09-16-23.png"><br><img src="/image/20230916_09-17-47.png"></p><h4 id="2-time-、timeEnd"><a href="#2-time-、timeEnd" class="headerlink" title="2. time()、timeEnd()"></a>2. time()、timeEnd()</h4><figure class="highlight plaintext"><figcaption><span>會計算程式執行時間，可以用來測試程式執行效率。</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">*備註 : time與timeEnd必須搭配使用，並且內容必須相同，才能計算出正確的時間。*</span><br><span class="line">```js</span><br><span class="line">console.time(&#x27;test&#x27;);</span><br><span class="line">for(let i=0;i&lt;100;i++)&#123;</span><br><span class="line">    console.log(i);</span><br><span class="line">&#125;</span><br><span class="line">console.timeEnd(&#x27;test&#x27;);</span><br></pre></td></tr></table></figure><h4 id="3-dir"><a href="#3-dir" class="headerlink" title="3. dir()"></a>3. dir()</h4><p><code>dir()</code> 會將資料以物件方式呈現，可以參考下方呈現方式。<br><img src="/image/20230916_09-24-09.png"></p><hr><h3 id="二、alert"><a href="#二、alert" class="headerlink" title="二、alert"></a>二、alert</h3><p>alert 是新手常用的除錯、初期學會的方式。alert 限制會比 console 來的多很多，例如 : 物件、陣列、函式等等，都無法正常顯示，所以通常都是用來顯示字串、數字等等。</p><hr><h3 id="三、debugger"><a href="#三、debugger" class="headerlink" title="三、debugger"></a>三、debugger</h3><p>debugger 是一個可以讓瀏覽器知道你要停留的位置，會直接到達那個位置，並且可以檢視變數的值，可以參考下方呈現方式。(備註 : 範例使用 console 視窗輸入)</p><p><img src="/image/20230916_09-59-40.png"></p><p>那些除錯視窗會在於 <code>source</code> 視窗中，可以看變數狀態、stack 、dom 等相關之訊。<br><img src="/image/20230916_10-00-35.png"></p><hr><h2 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h2><p>以上介紹了常見的除錯方式，可以依照需求選擇使用方式，但是建議還是以 <code>console</code>、<code>debugger</code> 為主，<code>alert</code> 可以當作是緊急使用方式。</p><p>如果是使用前端架構(vue、react、angular等)，這些方式是相當實用的。若是用一般網頁的js、jqery可以直接把資訊印在網頁上除錯，也是除錯方式之一。</p><p>這篇簡單介紹到這邊，如果有任何問題，歡迎留言討論。</p><h2 id="參考文件"><a href="#參考文件" class="headerlink" title="參考文件"></a>參考文件</h2><ul><li><a href="https://israynotarray.com/javascript/20200313/3743352418/">淺談 JavaScript 中的 Debug 神器 Console</a></li><li><a href="https://www.w3schools.com/js/js_debugging.asp">JavaScript Debugging</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端技術 </category>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> debugger </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【HTML】套件-電子簽名 signature</title>
      <link href="/2023/09/02/%E5%89%8D%E7%AB%AF%E6%8A%80%E8%A1%93/HTML/Html-07-%E9%9B%BB%E5%AD%90%E7%B0%BD%E5%90%8Dsignature_pad/"/>
      <url>/2023/09/02/%E5%89%8D%E7%AB%AF%E6%8A%80%E8%A1%93/HTML/Html-07-%E9%9B%BB%E5%AD%90%E7%B0%BD%E5%90%8Dsignature_pad/</url>
      
        <content type="html"><![CDATA[<p>這篇是多年前要製作電子簽名的時候，找到的一個套件，剛好文章沒有紀錄，所以就在這邊紀錄一下。</p><ul><li>官方範例 : <a href="https://szimek.github.io/signature_pad/">Signature Pad demo</a></li><li>Npm : <a href="https://www.npmjs.com/package/signature_pad">signature_pad</a></li></ul><h2 id="signature-pad"><a href="#signature-pad" class="headerlink" title="signature pad"></a>signature pad</h2><p>這裡範例只使用 <code>signature_pad.umd.js</code> 並用javascript 去實作。</p><h3 id="html-製作"><a href="#html-製作" class="headerlink" title="html 製作"></a>html 製作</h3><p>這邊我分別使用了兩個 div 來製作，一個是用來放置簽名的區域，另一個是用來放置簽名的畫布。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;signature-pad&quot;</span> <span class="attr">class</span>=<span class="string">&quot;signature-pad&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;signature-pad--body&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">canvas</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--功能列區塊 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--..... --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>功能部份我切分成兩個區塊，一個是功能列，另一個是存檔列。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;toolslist&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;func-itme&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;&quot;</span>&gt;</span>功能列<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;button clear&quot;</span> <span class="attr">data-action</span>=<span class="string">&quot;clear&quot;</span>&gt;</span>Clear<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;button&quot;</span> <span class="attr">data-action</span>=<span class="string">&quot;change-color&quot;</span>&gt;</span>Change color<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;button&quot;</span> <span class="attr">data-action</span>=<span class="string">&quot;undo&quot;</span>&gt;</span>Undo<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;save-item&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;&quot;</span>&gt;</span>存檔列<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;button save&quot;</span> <span class="attr">data-action</span>=<span class="string">&quot;save-png&quot;</span>&gt;</span>Save as PNG<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;button save&quot;</span> <span class="attr">data-action</span>=<span class="string">&quot;save-jpg&quot;</span>&gt;</span>Save as JPG<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;button save&quot;</span> <span class="attr">data-action</span>=<span class="string">&quot;save-svg&quot;</span>&gt;</span>Save as SVG<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="css-製作"><a href="#css-製作" class="headerlink" title="css 製作"></a>css 製作</h3><p>css依據自己喜好設定，若沒有想每可以直接使用</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span>&#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#eee</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.toolslist</span>&#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.func-itme</span>&#123;<span class="attribute">display</span>: inline-block;&#125;</span><br><span class="line"><span class="selector-class">.save-item</span>&#123;<span class="attribute">margin-top</span>: <span class="number">5px</span>;&#125;</span><br><span class="line"><span class="selector-class">.signature-pad</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: auto;</span><br><span class="line">    <span class="attribute">height</span>: auto;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="selector-class">.signature-pad--body</span> &#123;</span><br><span class="line">    <span class="attribute">min-height</span>: <span class="number">300px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="selector-class">.signature-pad--actions</span> &#123;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="selector-class">.signature-pad--actions</span> &gt; <span class="selector-tag">div</span><span class="selector-pseudo">:first</span>-child &#123;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="selector-class">.signature-pad--actions</span> &gt; <span class="selector-tag">div</span><span class="selector-pseudo">:last-child</span> &#123;</span><br><span class="line">    <span class="attribute">float</span>: right;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="selector-class">.signature-pad--body</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="comment">/* width: 25%; */</span></span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#aaa</span>;</span><br><span class="line">    <span class="comment">/* -webkit-box-flex: 1;</span></span><br><span class="line"><span class="comment">        -ms-flex: 1;</span></span><br><span class="line"><span class="comment">            flex: 1; */</span></span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="selector-class">.signature-pad--body</span></span><br><span class="line">  <span class="selector-tag">canvas</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">4px</span>;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">5px</span> <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.02</span>) inset;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br></pre></td></tr></table></figure><h3 id="javascript"><a href="#javascript" class="headerlink" title="javascript"></a>javascript</h3><p>創建畫布區塊</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 簽名區域</span></span><br><span class="line"><span class="keyword">var</span> wrapper = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;signature-pad&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> canvas = wrapper.<span class="title function_">querySelector</span>(<span class="string">&quot;canvas&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> signaturePad = <span class="keyword">new</span> <span class="title class_">SignaturePad</span>(canvas, &#123;</span><br><span class="line">  <span class="attr">backgroundColor</span>: <span class="string">&#x27;rgb(255, 255, 255)&#x27;</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>設定功能列使用方式如下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//清除</span></span><br><span class="line"><span class="keyword">var</span> clearButton = wrapper.<span class="title function_">querySelector</span>(<span class="string">&quot;[data-action=clear]&quot;</span>);</span><br><span class="line">clearButton.<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, <span class="keyword">function</span> (<span class="params">event</span>) &#123;</span><br><span class="line">  signaturePad.<span class="title function_">clear</span>();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//變更顏色</span></span><br><span class="line"><span class="keyword">var</span> changeColorButton = wrapper.<span class="title function_">querySelector</span>(<span class="string">&quot;[data-action=change-color]&quot;</span>);</span><br><span class="line">changeColorButton.<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, <span class="keyword">function</span> (<span class="params">event</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> r = <span class="title class_">Math</span>.<span class="title function_">round</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="number">255</span>);</span><br><span class="line">  <span class="keyword">var</span> g = <span class="title class_">Math</span>.<span class="title function_">round</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="number">255</span>);</span><br><span class="line">  <span class="keyword">var</span> b = <span class="title class_">Math</span>.<span class="title function_">round</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="number">255</span>);</span><br><span class="line">  <span class="keyword">var</span> color = <span class="string">&quot;rgb(&quot;</span> + r + <span class="string">&quot;,&quot;</span> + g + <span class="string">&quot;,&quot;</span> + b +<span class="string">&quot;)&quot;</span>;</span><br><span class="line"></span><br><span class="line">  signaturePad.<span class="property">penColor</span> = color;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//還原</span></span><br><span class="line"><span class="keyword">var</span> undoButton = wrapper.<span class="title function_">querySelector</span>(<span class="string">&quot;[data-action=undo]&quot;</span>);</span><br><span class="line">undoButton.<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, <span class="keyword">function</span> (<span class="params">event</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> data = signaturePad.<span class="title function_">toData</span>();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (data) &#123;</span><br><span class="line">    data.<span class="title function_">pop</span>(); <span class="comment">// remove the last dot or line</span></span><br><span class="line">    signaturePad.<span class="title function_">fromData</span>(data);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>設定存檔列使用方式如下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> savePNGButton = wrapper.<span class="title function_">querySelector</span>(<span class="string">&quot;[data-action=save-png]&quot;</span>);</span><br><span class="line">savePNGButton.<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, <span class="keyword">function</span> (<span class="params">event</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (signaturePad.<span class="title function_">isEmpty</span>()) &#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&quot;Please provide a signature first.&quot;</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> dataURL = signaturePad.<span class="title function_">toDataURL</span>();</span><br><span class="line">    <span class="title function_">download</span>(dataURL, <span class="string">&quot;signature.png&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> saveJPGButton = wrapper.<span class="title function_">querySelector</span>(<span class="string">&quot;[data-action=save-jpg]&quot;</span>);</span><br><span class="line">saveJPGButton.<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, <span class="keyword">function</span> (<span class="params">event</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (signaturePad.<span class="title function_">isEmpty</span>()) &#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&quot;Please provide a signature first.&quot;</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> dataURL = signaturePad.<span class="title function_">toDataURL</span>(<span class="string">&quot;image/jpeg&quot;</span>);</span><br><span class="line">    <span class="title function_">download</span>(dataURL, <span class="string">&quot;signature.jpg&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> saveSVGButton = wrapper.<span class="title function_">querySelector</span>(<span class="string">&quot;[data-action=save-svg]&quot;</span>);</span><br><span class="line">saveSVGButton.<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, <span class="keyword">function</span> (<span class="params">event</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (signaturePad.<span class="title function_">isEmpty</span>()) &#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&quot;Please provide a signature first.&quot;</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> dataURL = signaturePad.<span class="title function_">toDataURL</span>(<span class="string">&#x27;image/svg+xml&#x27;</span>);</span><br><span class="line">    <span class="title function_">download</span>(dataURL, <span class="string">&quot;signature.svg&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 下載</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">download</span>(<span class="params">dataURL, filename</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (navigator.<span class="property">userAgent</span>.<span class="title function_">indexOf</span>(<span class="string">&quot;Safari&quot;</span>) &gt; -<span class="number">1</span> &amp;&amp; navigator.<span class="property">userAgent</span>.<span class="title function_">indexOf</span>(<span class="string">&quot;Chrome&quot;</span>) === -<span class="number">1</span>) &#123;</span><br><span class="line">    <span class="variable language_">window</span>.<span class="title function_">open</span>(dataURL);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> blob = <span class="title function_">dataURLToBlob</span>(dataURL);</span><br><span class="line">    <span class="keyword">var</span> url = <span class="variable language_">window</span>.<span class="property">URL</span>.<span class="title function_">createObjectURL</span>(blob);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> a = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">    a.<span class="property">style</span> = <span class="string">&quot;display: none&quot;</span>;</span><br><span class="line">    a.<span class="property">href</span> = url;</span><br><span class="line">    a.<span class="property">download</span> = filename;</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(a);</span><br><span class="line">    a.<span class="title function_">click</span>();</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">window</span>.<span class="property">URL</span>.<span class="title function_">revokeObjectURL</span>(url);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//產生blob</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">dataURLToBlob</span>(<span class="params">dataURL</span>) &#123;</span><br><span class="line">  <span class="comment">// Code taken from https://github.com/ebidel/filer.js</span></span><br><span class="line">  <span class="keyword">var</span> parts = dataURL.<span class="title function_">split</span>(<span class="string">&#x27;;base64,&#x27;</span>);</span><br><span class="line">  <span class="keyword">var</span> contentType = parts[<span class="number">0</span>].<span class="title function_">split</span>(<span class="string">&quot;:&quot;</span>)[<span class="number">1</span>];</span><br><span class="line">  <span class="keyword">var</span> raw = <span class="variable language_">window</span>.<span class="title function_">atob</span>(parts[<span class="number">1</span>]);</span><br><span class="line">  <span class="keyword">var</span> rawLength = raw.<span class="property">length</span>;</span><br><span class="line">  <span class="keyword">var</span> uInt8Array = <span class="keyword">new</span> <span class="title class_">Uint8Array</span>(rawLength);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; rawLength; ++i) &#123;</span><br><span class="line">    uInt8Array[i] = raw.<span class="title function_">charCodeAt</span>(i);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Blob</span>([uInt8Array], &#123; <span class="attr">type</span>: contentType &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="參考文件"><a href="#參考文件" class="headerlink" title="參考文件"></a>參考文件</h2><ol><li><a href="https://dotblogs.com.tw/sungnoone/2014/08/08/146202">jQuery plugin - Signature Pad</a></li><li><a href="https://github.com/JontCont/html-signature">html-signature</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 前端技術 </category>
          
          <category> html </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> front-end </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【CSS】- Border-box vs Content-box</title>
      <link href="/2023/09/01/%E5%89%8D%E7%AB%AF%E6%8A%80%E8%A1%93/CSS/%E3%80%90CSS%E3%80%91-%20Border-box%20vs%20Content-box/"/>
      <url>/2023/09/01/%E5%89%8D%E7%AB%AF%E6%8A%80%E8%A1%93/CSS/%E3%80%90CSS%E3%80%91-%20Border-box%20vs%20Content-box/</url>
      
        <content type="html"><![CDATA[<h2 id="Content-box"><a href="#Content-box" class="headerlink" title="Content-box"></a>Content-box</h2><p>content-box這是根據 CSS 標準的起始值和預設值。 width  與  height 只包括內容本身的寬和高， 不包括邊框（border）、內邊距（padding）、外邊距（margin）。注意：內邊距、邊框和外邊距都在這個盒子的外部。例如，如果 .box {width: 350px}; 而且 {border: 10px solid black;} ，那麼在瀏覽器中的渲染該容器的實際寬度將是370px，;</p><p>簡單來說，尺寸計算公式：width &#x3D; 內容的寬度，height &#x3D; 內容的高度。寬度和高度都不包含內容的邊框（border）和內邊距（padding）。</p><h2 id="Border-box"><a href="#Border-box" class="headerlink" title="Border-box"></a>Border-box</h2><p>width 和 height 屬性包括內容（content），內邊距（padding）和邊框（border），但不包括外邊距（margin）。這是當文檔處於 Quirks 模式時 Internet Explorer 所使用的盒模型。注意，內邊距和邊框都將在盒子內 ，例如，.box {width: 350px; border: 10px solid black;} ，渲染出的容器寬度會固定在 350px，而內容（content）的寬度就會變成 330px， 因為邊框（border）佔了20px。內容框不能為負，並且進位到 0，使得不可能使用 border-box 使元素消失。</p><p>這裡的維度計算為：<br>width &#x3D; border + padding + 內容的  width，<br>height &#x3D; border + padding + 內容的 height。<br>當你設定一個元素樣式為 box-sizing: border-box;，這個元素的內距和邊框將不會增加元素本身的寬度。</p><p><img src="/image/20230901_23-27-59.png"></p><p>這樣可以確保所有元素的寬度都可以用比較直觀的方式來定義。<br>因為 box-sizing 算是個比較新的屬性，所以你還應該還是要加上我之前在例子中使用的 -webkit- 和 -moz- 前綴（Prefixes），這樣才能啟用特定瀏覽器實驗中的 CSS 特性。請記得該屬性從 IE8+ 之後就開始支援。</p>]]></content>
      
      
      <categories>
          
          <category> 前端技術 </category>
          
          <category> css </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【CSS】-基本使用方式</title>
      <link href="/2023/09/01/%E5%89%8D%E7%AB%AF%E6%8A%80%E8%A1%93/CSS/%E3%80%90CSS%E3%80%91-%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8%E6%96%B9%E5%BC%8F/"/>
      <url>/2023/09/01/%E5%89%8D%E7%AB%AF%E6%8A%80%E8%A1%93/CSS/%E3%80%90CSS%E3%80%91-%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8%E6%96%B9%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="CSS的構成與規則"><a href="#CSS的構成與規則" class="headerlink" title="CSS的構成與規則"></a>CSS的構成與規則</h2><p><img src="/image/20230901_23-21-50.png"></p><p>CSS(Cascading Style Sheets) 使用方式如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">選取器 &#123; 屬性 :  值;&#125;</span><br></pre></td></tr></table></figure><p>說明</p><ol><li>選取器 : 使用在html 中的地方，ex : class 、 id 、object</li><li>屬性 : 設定哪個屬性，ex： 背景、大小、寬度</li><li>值 : 設定什麼值，ex  :  #ddd ， px，1s</li></ol><h3 id="選取器"><a href="#選取器" class="headerlink" title="選取器"></a>選取器</h3><ol><li><p>Class 選取器</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.title</span>&#123;</span><br><span class="line">    <span class="attribute">background</span>: yellow;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>ID 選取器</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#title</span>&#123;</span><br><span class="line">    <span class="attribute">background</span>: yellow;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>後代選取器</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.list1</span> <span class="selector-tag">li</span>&#123;</span><br><span class="line">    <span class="attribute">list-style</span>: decimal;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li><li><p>屬性選取器</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.img-resp</span><span class="selector-attr">[alt]</span>&#123;</span><br><span class="line">  <span class="attribute">border-color</span>:<span class="number">#000</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>擬態選取器</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span>&#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#000</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/image/20230901_23-26-00.png"></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 前端技術 </category>
          
          <category> css </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【CSS】-為什麼要用CSS -Reset</title>
      <link href="/2023/09/01/%E5%89%8D%E7%AB%AF%E6%8A%80%E8%A1%93/CSS/%E3%80%90CSS%E3%80%91-%E7%82%BA%E4%BB%80%E9%BA%BC%E8%A6%81%E7%94%A8CSS%20-Reset/"/>
      <url>/2023/09/01/%E5%89%8D%E7%AB%AF%E6%8A%80%E8%A1%93/CSS/%E3%80%90CSS%E3%80%91-%E7%82%BA%E4%BB%80%E9%BA%BC%E8%A6%81%E7%94%A8CSS%20-Reset/</url>
      
        <content type="html"><![CDATA[<h2 id="為什麼要用CSS-Reset"><a href="#為什麼要用CSS-Reset" class="headerlink" title="為什麼要用CSS -Reset"></a>為什麼要用CSS -Reset</h2><p>在 W3C 制訂 HTML 與 CSS 規格時，並沒有強制規定各家瀏覽器應該怎樣實作每一個 HTML tag 的 CSS 預設樣式，只有提供資訊參考的範例[1]，加上IE 獨霸的時期，那時候還沒有其他瀏覽器， CSS Reset 的需求主要落在 IE 各版本之間的調整，後來 Firefox、safari、Chrome 陸續出現，網頁設計師必須要針對每個瀏覽器去做調整，因此 CSS Reset 的需求漸漸增加。</p><h2 id="CSS-Reset"><a href="#CSS-Reset" class="headerlink" title="CSS Reset"></a>CSS Reset</h2><p>有幾套常見的 CSS Reset</p><ul><li><a href="https://meyerweb.com/eric/tools/css/reset/">Reset CSS</a>，此為 Eric Meyer 的版本</li><li><a href="http://html5doctor.com/html-5-reset-stylesheet/">HTML5 Reset Stylesheet</a>，HTML5 Doctor 網站修改自 Eric A. Meyer 的版本。</li><li><a href="https://clarle.github.io/yui3/yui/docs/cssreset/">CSS Reset</a> - YUI Library ，由 Yahoo UI Library v3 所提供的 CSS Reset 版本。</li></ul><h2 id="MeyerWeb-CSS-Reset"><a href="#MeyerWeb-CSS-Reset" class="headerlink" title="MeyerWeb-[CSS Reset]"></a>MeyerWeb-[CSS Reset]</h2><p>是Eric整理出來一個解決方案[CSS Reset]，強制把所有地方強制歸零，可以看到最一開始一大串的html標籤都設為0。缺點則是必須要重做設定，比較沒有彈性。</p><ul><li>參考網址：<a href="https://meyerweb.com/eric/tools/css/reset/">https://meyerweb.com/eric/tools/css/reset/</a></li></ul><h2 id="CSS-Normalize"><a href="#CSS-Normalize" class="headerlink" title="CSS Normalize"></a>CSS Normalize</h2><p>因為 reset.css 重置了各個瀏覽器的樣式設定，使得有些有用、常用標籤的默認樣式必須要重新設定，因為這個問題，有人開發出了 normalize.css<br>在 Normalize.css 的官方頁面上點出了他們的目標：</p><ul><li>保留有用的瀏覽器默認設置，而不是將其刪除。</li><li>為廣泛的 HTML 元素提供一般化的樣式。</li><li>修正瀏覽器的 Bug 與不一致。</li><li>透過微妙的改善提高可用性。</li><li>有詳細的文檔來解釋代碼。(每個樣式都有註解是處理什麼問題。)</li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端技術 </category>
          
          <category> css </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VS-離線版解決方案</title>
      <link href="/2023/09/01/%E7%AD%86%E8%A8%98%E8%88%87%E7%94%9F%E6%B4%BB%E9%9B%9C%E8%A8%98/%E6%8A%80%E8%A1%93/%E3%80%90%E7%AD%86%E8%A8%98%E3%80%91VS%20%E9%9B%A2%E7%B7%9A%E7%89%88%E8%A7%A3%E6%B1%BA%E6%96%B9%E6%A1%88/"/>
      <url>/2023/09/01/%E7%AD%86%E8%A8%98%E8%88%87%E7%94%9F%E6%B4%BB%E9%9B%9C%E8%A8%98/%E6%8A%80%E8%A1%93/%E3%80%90%E7%AD%86%E8%A8%98%E3%80%91VS%20%E9%9B%A2%E7%B7%9A%E7%89%88%E8%A7%A3%E6%B1%BA%E6%96%B9%E6%A1%88/</url>
      
        <content type="html"><![CDATA[<h2 id="備註"><a href="#備註" class="headerlink" title="備註"></a>備註</h2><p>這問題以前紀錄過，因為壓縮檔其實是自己登入過的電腦取出來的，文章內壓縮檔就是 <code>C:\Users\Users\AppData\Local\Microsoft\VSCommon</code> 資料夾，將版本以及OnlineLicensing都要複製過去，就可以使用了。</p><p><img src="/image/20230901_23-15-10.png"></p><h2 id="解決說明"><a href="#解決說明" class="headerlink" title="解決說明"></a>解決說明</h2><p>VS 2019 comunity是免費的，但是需要登錄微軟帳戶，不登錄只能使用30天，30天之後就無法使用了，如下圖：<br><img src="/image/20230901_23-00-30.png"></p><h3 id="操作清單"><a href="#操作清單" class="headerlink" title="操作清單"></a>操作清單</h3><p>使用前，可以使用下方壓縮檔，完成此作業。</p><ol><li>下載註冊碼</li><li>複製註冊碼檔案到~\AppData\Local\Microsoft\VSCommon</li><li>打開登入註冊編輯程式尋找以下路徑HKEY_LOCAL_MACHINE\SOFTWARE\WOW6432Node\Microsoft\VisualStudio</li><li>找到VisualStudio_(隨機碼) </li><li>更改隨機碼</li></ol><h3 id="使用步驟"><a href="#使用步驟" class="headerlink" title="使用步驟"></a>使用步驟</h3><h4 id="1-確認檔案"><a href="#1-確認檔案" class="headerlink" title="1. 確認檔案"></a>1. 確認檔案</h4><p>找到註冊檔，路徑：<br><code>C:\Users\&#123;系統登錄使用者&#125;\AppData\Local\Microsoft\VSCommon</code></p><h4 id="2-複製檔案到該路徑"><a href="#2-複製檔案到該路徑" class="headerlink" title="2. 複製檔案到該路徑"></a>2. 複製檔案到該路徑</h4><p>將兩個資料夾複製到需要註冊的電腦上，路徑： <code>C:\Users\&#123;系統登錄使用者&#125;\AppData\Local\Microsoft\VSCommon</code><br><img src="/image/20230901_23-04-35.png"></p><h4 id="3-查看VS2019-Community-的註冊表項"><a href="#3-查看VS2019-Community-的註冊表項" class="headerlink" title="3.查看VS2019 Community 的註冊表項"></a>3.查看VS2019 Community 的註冊表項</h4><p>路徑: <code>HKEY_LOCAL_MACHINE\SOFTWARE\WOW6432Node\Microsoft\VisualStudio</code></p><h4 id="4-找VisualStudio-隨機碼"><a href="#4-找VisualStudio-隨機碼" class="headerlink" title="4. 找VisualStudio_(隨機碼)"></a>4. 找VisualStudio_(隨機碼)</h4><p>在該註冊表的下方有一個或多個類似於 VisualStudio_de1f9721 的註冊表項</p><h4 id="5-複製隨機碼"><a href="#5-複製隨機碼" class="headerlink" title="5. 複製隨機碼"></a>5. 複製隨機碼</h4><p>找到社區版的註冊表項，複製隨機碼，我這裡是“de1f9721”，如下圖：</p><h4 id="6-打開資料夾"><a href="#6-打開資料夾" class="headerlink" title="6. 打開資料夾"></a>6. 打開資料夾</h4><p>打開資料夾 <code>C:\Users\&#123;系統登錄使用者&#125;\AppData\Local\Microsoft\VSCommon\OnlineLicensing\VisualStudio\16.0\Community</code></p><h4 id="7-更改隨機碼"><a href="#7-更改隨機碼" class="headerlink" title="7. 更改隨機碼"></a>7. 更改隨機碼</h4><p>將裡面僅有的一個資料夾名稱（我的是“938c060f”）改為上面的隨機碼，如下圖：<br><img src="/image/20230901_23-06-55.png"></p><h3 id="完成後"><a href="#完成後" class="headerlink" title="完成後"></a>完成後</h3><p>完成後就可以繼續使用此VS功能。<br><img src="/image/20230901_23-07-15.png"></p>]]></content>
      
      
      <categories>
          
          <category> 筆記 </category>
          
          <category> 生活雜記 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vsc </tag>
            
            <tag> Chocolatey </tag>
            
            <tag> mkcert </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C# - 雙重認證（2FA）使用方式</title>
      <link href="/2023/08/31/%E5%BE%8C%E7%AB%AF%E6%8A%80%E8%A1%93/CS/NetCore/Core_08_%E9%9B%99%E9%87%8D%E8%AA%8D%E8%AD%89%EF%BC%882FA%EF%BC%89%E4%BD%BF%E7%94%A8%E6%96%B9%E5%BC%8F/"/>
      <url>/2023/08/31/%E5%BE%8C%E7%AB%AF%E6%8A%80%E8%A1%93/CS/NetCore/Core_08_%E9%9B%99%E9%87%8D%E8%AA%8D%E8%AD%89%EF%BC%882FA%EF%BC%89%E4%BD%BF%E7%94%A8%E6%96%B9%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>近期沒有特別技術性的文章，這次就來介紹一下2FA驗證的使用方式。</p><h2 id="2FA驗證"><a href="#2FA驗證" class="headerlink" title="2FA驗證"></a>2FA驗證</h2><p>雙重要素驗證 (2FA) 是一種身分識別和存取權管理方法，它會要求您提供兩種形式的身分識別，才會讓您存取資源和資料。企業可以透過 2FA 進行監控，並協助保護其最容易受到攻擊的資訊和網路。</p><h2 id="終端機QrCode"><a href="#終端機QrCode" class="headerlink" title="終端機QrCode"></a>終端機QrCode</h2><p>這篇就推薦以下工具，可以快速產生QRCODE。</p><ol><li><a href="https://www.npmjs.com/package/qrcode-terminal">qrcode-terminal</a></li><li><a href="https://qrenco.de/">qrenco.de</a></li></ol><p>本文會使用 qrenco.de 來產生QRCODE，使用方式如下。將要輸入的文字放在”&#x2F;“後面即可。</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl qrenco.de/qrcode123</span><br></pre></td></tr></table></figure><p><img src="/image/20230831_22-38-18.png"></p><h3 id="製作方式"><a href="#製作方式" class="headerlink" title="製作方式"></a>製作方式</h3><p>這邊製作方向會需要使用到<a href="https://www.nuget.org/packages/Otp.NET">Otp.NET</a>。</p><h4 id="1-安裝套件"><a href="#1-安裝套件" class="headerlink" title="1. 安裝套件"></a>1. 安裝套件</h4><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dotnet add package Otp.<span class="built_in">NET</span> --version <span class="number">1</span>.<span class="number">3</span>.<span class="number">0</span></span><br></pre></td></tr></table></figure><h4 id="2-加入Process設定"><a href="#2-加入Process設定" class="headerlink" title="2. 加入Process設定"></a>2. 加入Process設定</h4><p>備註 : C# 若要使用終端機指令必須要加入Process設定才可以使用。<br>下面範例其實還可以再簡化，若有興趣歡迎修改。</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">ProcessStartInfo startInfo = <span class="keyword">new</span> ProcessStartInfo</span><br><span class="line">&#123;</span><br><span class="line">    FileName = <span class="string">&quot;cmd.exe&quot;</span>, <span class="comment">// 設定要執行的檔案名稱</span></span><br><span class="line">    RedirectStandardInput = <span class="literal">true</span> <span class="comment">// 設定是否從 RedirectStandardInput 取得輸入</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 建立Process</span></span><br><span class="line">Process process = <span class="keyword">new</span> Process &#123; StartInfo = startInfo &#125;;</span><br><span class="line">process.Start();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 輸入指令</span></span><br><span class="line">process.StandardInput.WriteLine(<span class="string">$&quot;curl qrenco.de/123&quot;</span>);</span><br><span class="line">process.StandardInput.Flush();</span><br><span class="line">process.StandardInput.Close();</span><br><span class="line"></span><br><span class="line">process.WaitForExit();</span><br><span class="line">process.Close();</span><br></pre></td></tr></table></figure><h4 id="3-產生QRCode"><a href="#3-產生QRCode" class="headerlink" title="3. 產生QRCode"></a>3. 產生QRCode</h4><p>2FA 其實是有特別規定要使用哪個<a href="https://docs.yubico.com/yesdk/users-manual/application-oath/uri-string-format.html">url 格式</a>來設定參數。</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">string</span> Issuer = <span class="string">&quot;test&quot;</span>; <span class="comment">// 發行者</span></span><br><span class="line"><span class="built_in">string</span> Account = <span class="string">&quot;test1&quot;</span>; <span class="comment">// 帳號or使用者名稱</span></span><br><span class="line"><span class="keyword">var</span> generateKey = KeyGeneration.GenerateRandomKey(); <span class="comment">// 產生亂數金鑰</span></span><br><span class="line"><span class="keyword">var</span> secret = Base32Encoding.ToString(generateKey);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> genQrCode =</span><br><span class="line">    <span class="string">$&quot;\&quot;otpauth://totp/<span class="subst">&#123;Account&#125;</span>?secret=<span class="subst">&#123;Uri.EscapeDataString(secret)&#125;</span>&amp;issuer=<span class="subst">&#123;Uri.EscapeDataString(Issuer)&#125;</span>\&quot;&quot;</span>;</span><br></pre></td></tr></table></figure><p>這樣QRCode 就產生完成了，接下來就是將QRCode輸出到終端機上。只要把上面產生的QRCode放在curl後面即可。</p><p>備註 : 終端機遇到&amp;會截斷，所以要使用【”】來處理。</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">process.StandardInput.WriteLine(<span class="string">$&quot;curl qrenco.de/<span class="subst">&#123;genQrCode&#125;</span>&quot;</span>);</span><br></pre></td></tr></table></figure><h4 id="4-製作驗證碼驗證"><a href="#4-製作驗證碼驗證" class="headerlink" title="4. 製作驗證碼驗證"></a>4. 製作驗證碼驗證</h4><p>這樣短短幾行就結束了，接下來就是把功能跑一次就可以使用了。因為url是統一格式，所以google 、microsoft 、authenticator 都可以使用。</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> Totp totpInstance = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (totpInstance == <span class="literal">null</span>)</span><br><span class="line">&#123;</span><br><span class="line">    totpInstance = <span class="keyword">new</span> Totp(Base32Encoding.ToBytes(secret));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">long</span> timedWindowUsed;</span><br><span class="line"><span class="keyword">if</span> (totpInstance.VerifyTotp(totp, <span class="keyword">out</span> timedWindowUsed))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">$&quot;驗證通過 - <span class="subst">&#123;timedWindowUsed&#125;</span>&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;驗證失敗&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="完整程式碼"><a href="#完整程式碼" class="headerlink" title="完整程式碼"></a>完整程式碼</h3><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Diagnostics;</span><br><span class="line"><span class="keyword">using</span> OtpNet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">string</span> Issuer = <span class="string">&quot;test&quot;</span>;</span><br><span class="line">        <span class="built_in">string</span> Account = <span class="string">&quot;test1&quot;</span>;</span><br><span class="line">        <span class="keyword">var</span> generateKey = KeyGeneration.GenerateRandomKey();</span><br><span class="line">        <span class="keyword">var</span> secret =Base32Encoding.ToString(generateKey);</span><br><span class="line">        <span class="keyword">var</span> genQrCode =</span><br><span class="line">            <span class="string">$&quot;\&quot;otpauth://totp/<span class="subst">&#123;Account&#125;</span>?secret=<span class="subst">&#123;Uri.EscapeDataString(secret)&#125;</span>&amp;issuer=<span class="subst">&#123;Uri.EscapeDataString(Issuer)&#125;</span>\&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">        Console.WriteLine(<span class="string">&quot;QR Code Content: &quot;</span> + genQrCode);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 執行 curl 指令</span></span><br><span class="line">        ExecuteCurlCommand(<span class="string">$&quot;qrenco.de/<span class="subst">&#123;genQrCode&#125;</span>&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 驗證 TOTP</span></span><br><span class="line">        <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;Enter TOTP to validate:&quot;</span>);</span><br><span class="line">            <span class="built_in">string</span> inputTotp = Console.ReadLine();</span><br><span class="line">            <span class="built_in">string</span> validationMessage = ValidateTotp(inputTotp, secret);</span><br><span class="line">            Console.WriteLine(validationMessage);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">ExecuteCurlCommand</span>(<span class="params"><span class="built_in">string</span> url</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        ProcessStartInfo startInfo = <span class="keyword">new</span> ProcessStartInfo</span><br><span class="line">        &#123;</span><br><span class="line">            FileName = <span class="string">&quot;cmd.exe&quot;</span>,</span><br><span class="line">            RedirectStandardInput = <span class="literal">true</span></span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        Process process = <span class="keyword">new</span> Process &#123; StartInfo = startInfo &#125;;</span><br><span class="line">        process.Start();</span><br><span class="line"></span><br><span class="line">        process.StandardInput.WriteLine(<span class="string">$&quot;curl <span class="subst">&#123;url&#125;</span>&quot;</span>);</span><br><span class="line">        process.StandardInput.Flush();</span><br><span class="line">        process.StandardInput.Close();</span><br><span class="line"></span><br><span class="line">        process.WaitForExit();</span><br><span class="line">        process.Close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> Totp totpInstance = <span class="literal">null</span>;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="built_in">string</span> <span class="title">ValidateTotp</span>(<span class="params"><span class="built_in">string</span> totp, <span class="built_in">string</span> secret</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (totpInstance == <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            totpInstance = <span class="keyword">new</span> Totp(Base32Encoding.ToBytes(secret));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">long</span> timedWindowUsed;</span><br><span class="line">        <span class="keyword">if</span> (totpInstance.VerifyTotp(totp, <span class="keyword">out</span> timedWindowUsed))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">$&quot;驗證通過 - <span class="subst">&#123;timedWindowUsed&#125;</span>&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;驗證失敗&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>這篇我把2FA介紹留給下一章節，這邊只是簡單介紹一下使用方式，比較多人做法是image產生QRCODE，但是我覺得這樣比較麻煩，所以就用curl的方式來產生QRCODE (限制終端機部分)。</p><p>留意一下 windows 10 以下的命令提示字元(command prompt)會遇到亂碼或是無法正常顯示可以用powershell &#x2F; bash來執行。</p><h2 id="參考文件"><a href="#參考文件" class="headerlink" title="參考文件"></a>參考文件</h2><ul><li><a href="https://www.microsoft.com/zh-tw/security/business/security-101/what-is-two-factor-authentication-2fa">Microsoft Docs - 2FA驗證</a></li><li><a href="https://blog.darkthread.net/blog/mfa-with-ms-authenticator/">多重要素驗證免費解決方案 - 使用微軟及 Google Authenticator App</a></li><li><a href="https://github.com/JontCont/AuthenticatorApp">AuthenticatorApp</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 後端技術 </category>
          
          <category> C# </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
            <tag> Core </tag>
            
            <tag> 2FA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C# - 雙重認證（2FA）Url 格式</title>
      <link href="/2023/08/31/%E5%BE%8C%E7%AB%AF%E6%8A%80%E8%A1%93/CS/NetCore/Core_09_%E9%9B%99%E9%87%8D%E8%AA%8D%E8%AD%89%EF%BC%882FA%EF%BC%89Url%E6%A0%BC%E5%BC%8F/"/>
      <url>/2023/08/31/%E5%BE%8C%E7%AB%AF%E6%8A%80%E8%A1%93/CS/NetCore/Core_09_%E9%9B%99%E9%87%8D%E8%AA%8D%E8%AD%89%EF%BC%882FA%EF%BC%89Url%E6%A0%BC%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="2FA-雙重驗證-URL格式"><a href="#2FA-雙重驗證-URL格式" class="headerlink" title="2FA 雙重驗證 URL格式"></a>2FA 雙重驗證 URL格式</h2><p>2FA URL 格式如下方。透由 Scheme、Type、Label、Parameters 組成。</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">otpauth://<span class="title">TYPE</span>/<span class="title">LABEL</span>?<span class="title">PARAMETERS</span></span></span><br></pre></td></tr></table></figure><h3 id="一、Scheme"><a href="#一、Scheme" class="headerlink" title="一、Scheme"></a>一、Scheme</h3><p>otpauth 期初由Google提出，用於將帳號與雙重驗證綁定，大多驗證格式都會用optauth，例如Google、Microsoft 等等。</p><h3 id="二、Type"><a href="#二、Type" class="headerlink" title="二、Type"></a>二、Type</h3><p>Type 代表驗證類型，目前有兩種驗證類型，分別為 HOTP 與 TOTP。</p><h4 id="HOTP"><a href="#HOTP" class="headerlink" title="HOTP"></a>HOTP</h4><p>HOTP 是基於 HMAC-based One-Time Password Algorithm，是一種基於 HMAC 的一次性密碼演算法，主要是透過一個密鑰與計數器產生一個一次性密碼，並且透過驗證計數器是否一致來驗證是否正確。<br><img src="/image/20230901_22-56-41.png"></p><blockquote><p>參考文件 -&gt; <a href="https://zh.wikipedia.org/wiki/%E5%9F%BA%E4%BA%8E%E6%95%A3%E5%88%97%E6%B6%88%E6%81%AF%E9%AA%8C%E8%AF%81%E7%A0%81%E7%9A%84%E4%B8%80%E6%AC%A1%E6%80%A7%E5%AF%86%E7%A0%81%E7%AE%97%E6%B3%95">基於雜湊訊息驗證碼的一次性密碼演算法</a></p></blockquote><h4 id="TOTP"><a href="#TOTP" class="headerlink" title="TOTP"></a>TOTP</h4><p>TOTP 是基於 Time-based One-Time Password Algorithm，是一種基於時間的一次性密碼演算法，主要是透過一個密鑰與時間產生一個一次性密碼，並且透過驗證時間是否一致來驗證是否正確。<br><img src="/image/20230901_22-55-57.png"></p><blockquote><p>參考文件 -&gt; <a href="https://zh.wikipedia.org/wiki/%E5%9F%BA%E4%BA%8E%E6%97%B6%E9%97%B4%E7%9A%84%E4%B8%80%E6%AC%A1%E6%80%A7%E5%AF%86%E7%A0%81%E7%AE%97%E6%B3%95">基於時間的一次性密碼演算法</a></p></blockquote><h3 id="三、Label"><a href="#三、Label" class="headerlink" title="三、Label"></a>三、Label</h3><p>Label 代表帳號，通常是使用者帳號，例如電子郵件、帳號等等。</p><h3 id="四、Parameters"><a href="#四、Parameters" class="headerlink" title="四、Parameters"></a>四、Parameters</h3><p>Parameters 代表參數，主要是透過參數來設定驗證相關資訊，例如密鑰、驗證次數、驗證時間等等。</p><h4 id="1-Secret"><a href="#1-Secret" class="headerlink" title="1. Secret"></a>1. Secret</h4><p>Secret 代表密鑰，主要是透過密鑰來產生一次性密碼。</p><h4 id="2-Counter"><a href="#2-Counter" class="headerlink" title="2. Counter"></a>2. Counter</h4><p>Counter 代表驗證次數，主要是透過驗證次數來產生一次性密碼。</p><h4 id="3-Period"><a href="#3-Period" class="headerlink" title="3. Period"></a>3. Period</h4><p>Period 代表驗證時間，主要是透過驗證時間來產生一次性密碼。</p><h4 id="4-Algorithm"><a href="#4-Algorithm" class="headerlink" title="4. Algorithm"></a>4. Algorithm</h4><p>Algorithm 代表演算法，主要是透過演算法來產生一次性密碼，目前有兩種演算法，分別為 SHA1 與 SHA256。</p><h4 id="5-Digits"><a href="#5-Digits" class="headerlink" title="5. Digits"></a>5. Digits</h4><p>Digits 代表驗證碼位數，主要是透過驗證碼位數來產生一次性密碼，目前有兩種驗證碼位數，分別為 6 位數與 8 位數。</p><h3 id="6-Issuer"><a href="#6-Issuer" class="headerlink" title="6. Issuer"></a>6. Issuer</h3><p>Issuer 代表發行者，主要是透過發行者來產生一次性密碼。</p><h2 id="實作"><a href="#實作" class="headerlink" title="實作"></a>實作</h2><h3 id="NuGet-安裝"><a href="#NuGet-安裝" class="headerlink" title="NuGet 安裝"></a>NuGet 安裝</h3><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Install-Package OtpNet</span><br></pre></td></tr></table></figure><h3 id="實作程式碼"><a href="#實作程式碼" class="headerlink" title="實作程式碼"></a>實作程式碼</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> OtpNet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConsoleApp</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 產生密鑰</span></span><br><span class="line">            <span class="keyword">var</span> secretKey = KeyGeneration.GenerateRandomKey(<span class="number">20</span>);</span><br><span class="line">            <span class="comment">// 產生驗證碼</span></span><br><span class="line">            <span class="keyword">var</span> totp = <span class="keyword">new</span> Totp(secretKey);</span><br><span class="line">            <span class="comment">// 產生驗證碼</span></span><br><span class="line">            <span class="keyword">var</span> code = totp.ComputeTotp(DateTime.UtcNow);</span><br><span class="line">            <span class="comment">// 產生驗證碼 Url</span></span><br><span class="line">            <span class="keyword">var</span> url = KeyUrl.GetTotpUrl(secretKey, <span class="string">&quot;account&quot;</span>, <span class="string">&quot;issuer&quot;</span>, <span class="number">6</span>, OtpHashMode.Sha1);</span><br><span class="line">            Console.WriteLine(<span class="string">$&quot;secretKey: <span class="subst">&#123;Encoding.UTF8.GetString(secretKey)&#125;</span>&quot;</span>);</span><br><span class="line"></span><br><span class="line">            Console.WriteLine(<span class="string">$&quot;code: <span class="subst">&#123;code&#125;</span>&quot;</span>);</span><br><span class="line"></span><br><span class="line">            Console.WriteLine(<span class="string">$&quot;url: <span class="subst">&#123;url&#125;</span>&quot;</span>);</span><br><span class="line"></span><br><span class="line">            Console.ReadLine();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="參考文件"><a href="#參考文件" class="headerlink" title="參考文件"></a>參考文件</h2><ul><li><a href="https://docs.yubico.com/yesdk/users-manual/application-oath/uri-string-format.html">URI string format</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 後端技術 </category>
          
          <category> C# </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
            <tag> Core </tag>
            
            <tag> 2FA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C# - 雙重認證（2FA）介紹</title>
      <link href="/2023/08/31/%E5%BE%8C%E7%AB%AF%E6%8A%80%E8%A1%93/CS/NetCore/Core_09_%E9%9B%99%E9%87%8D%E8%AA%8D%E8%AD%89%EF%BC%882FA%EF%BC%89%E4%BB%8B%E7%B4%B9/"/>
      <url>/2023/08/31/%E5%BE%8C%E7%AB%AF%E6%8A%80%E8%A1%93/CS/NetCore/Core_09_%E9%9B%99%E9%87%8D%E8%AA%8D%E8%AD%89%EF%BC%882FA%EF%BC%89%E4%BB%8B%E7%B4%B9/</url>
      
        <content type="html"><![CDATA[<p>在當今的數位世界中，我們的生活日益依賴於互聯網和數位資產。從社交媒體帳戶到銀行賬戶，我們的重要資訊和數據都存儲在網絡上。然而，這種方便也伴隨著安全風險，因為網絡黑客和網絡犯罪分子不斷尋找機會來入侵我們的帳戶並竊取我們的數位資產。為了應對這種威脅，雙重認證（2FA）已經成為保護個人和組織數位資產的最佳方式之一。</p><h2 id="什麼是雙重認證（2FA）？"><a href="#什麼是雙重認證（2FA）？" class="headerlink" title="什麼是雙重認證（2FA）？"></a>什麼是雙重認證（2FA）？</h2><p>雙重認證（2FA）是一種安全措施，要求用戶在登錄或訪問他們的帳戶時提供兩種或多種不同類型的識別驗證。通常，這兩種驗證方式包括：</p><ol><li>知識驗證：這是您知道的事情，例如密碼或PIN碼。</li><li>物理驗證：這是您擁有的物品，例如智能卡、USB密鑰或手機。</li></ol><h2 id="為什麼需要2FA？"><a href="#為什麼需要2FA？" class="headerlink" title="為什麼需要2FA？"></a>為什麼需要2FA？</h2><p>2FA的主要目的是增加帳戶的安全性。它使黑客更難入侵您的帳戶，因為他們不僅需要知道您的密碼，還需要擁有您的物理設備或其他驗證因素。以下是一些2FA的優點：</p><ol><li><p>防止密碼泄露：即使您的密碼被盗，黑客仍然無法訪問您的帳戶，除非他們擁有額外的驗證因素。</p></li><li><p>降低帳戶風險：對於具有重要資訊的帳戶，如銀行帳戶或電子郵件，2FA可以額外保護您的數據，避免潛在的金融損失或信息洩露。</p></li><li><p>提高安全性：2FA可以幫助您確保您的個人和敏感信息不會落入錯誤的手中，這是網絡安全的關鍵一環。</p></li></ol><h2 id="2FA的實施方式"><a href="#2FA的實施方式" class="headerlink" title="2FA的實施方式"></a>2FA的實施方式</h2><p>2FA的實施方式多種多樣，可以選擇不同的技術和工具來實現。以下是一些常見的2FA實施方式：</p><ol><li><p>短信驗證碼：用戶在登錄時會收到一條包含驗證碼的短信。他們必須將這個碼確認為他們的身份。</p></li><li><p>移動應用程式驗證：許多網站和服務提供移動應用程式，用戶可以通過這些應用程式生成或接收驗證碼。</p></li><li><p>硬體令牌：這是一種物理設備，用戶需要將其插入計算機或觸摸以生成驗證碼。</p></li><li><p>生物識別驗證：使用指紋、虹膜掃描或面部識別等生物識別特徵來確認用戶身份。</p></li></ol><hr><h2 id="雙重認證（2FA）特性"><a href="#雙重認證（2FA）特性" class="headerlink" title="雙重認證（2FA）特性"></a>雙重認證（2FA）特性</h2><ol><li><p>多因素驗證： 2FA通常需要至少兩個驗證因素，這些因素可以是「知識」（例如密碼）、「物理」（例如硬體令牌）或「生物識別」（例如指紋或面部識別）等。</p></li><li><p>一次性驗證碼： 許多2FA方法使用一次性驗證碼，這些碼在每次登錄時都會生成，並且僅在一定時間內有效。這增加了安全性，因為黑客無法重複使用這些碼。</p></li><li><p>易於實施： 大多數網絡服務和應用程序都支持2FA，因此用戶可以輕鬆啟用它。實施2FA通常不需要特殊的技術知識。</p></li></ol><h2 id="雙重認證（2FA）優缺點"><a href="#雙重認證（2FA）優缺點" class="headerlink" title="雙重認證（2FA）優缺點"></a>雙重認證（2FA）優缺點</h2><p>雙重認證（2FA）是一種增強帳戶和系統安全性的重要安全措施，它具有一些優點和特性，同時也有一些缺點。以下是有關2FA的優缺點和特性的詳細說明：</p><h3 id="一、優點"><a href="#一、優點" class="headerlink" title="一、優點"></a>一、優點</h3><ol><li><p>強化安全性： 2FA增加了安全性，因為它要求用戶提供兩個或多個驗證因素，而不僅僅是一個密碼。這使得黑客更難以入侵帳戶，因為他們需要更多的信息和設備。</p></li><li><p>防止密碼泄露： 即使您的密碼被洩露，黑客仍然無法訪問您的帳戶，除非他們也能提供另一種驗證因素。這減少了由於弱密碼或泄露而導致的安全風險。</p></li><li><p>降低帳戶風險： 對於包含敏感信息的帳戶，如銀行帳戶或電子郵件，2FA提供了額外的保護，減少了金融損失和個人信息洩露的風險。</p></li><li><p>多種實施方式： 2FA可以根據需求和用戶的偏好以多種方式實施，包括短信驗證碼、移動應用程式驗證、硬體令牌和生物識別驗證等。這使得它非常靈活並適用於不同的用例。</p></li></ol><h3 id="二、缺點"><a href="#二、缺點" class="headerlink" title="二、缺點"></a>二、缺點</h3><ol><li><p>可能造成不便： 有時2FA可能會導致用戶不便，特別是當他們需要在每次登錄時輸入驗證碼或使用其他驗證方法時。</p></li><li><p>失去驗證因素的風險： 如果用戶失去了硬體令牌或移動設備，他們可能會被鎖在帳戶外，這需要特別的程序來恢復訪問。</p></li><li><p>不兼容性： 有些較老的應用程序或系統可能不支持2FA，這可能會導致用戶在使用這些服務時降低安全性。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 後端技術 </category>
          
          <category> C# </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
            <tag> Core </tag>
            
            <tag> 2FA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C# Net5 MVC - 使用 VSC</title>
      <link href="/2023/08/31/%E5%BE%8C%E7%AB%AF%E6%8A%80%E8%A1%93/CS/NetFramework/NF_02_dotnetMvcOnVSC/"/>
      <url>/2023/08/31/%E5%BE%8C%E7%AB%AF%E6%8A%80%E8%A1%93/CS/NetFramework/NF_02_dotnetMvcOnVSC/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>近期太多事情沒有時間創建、撰寫文件，分享近期為甚麼開始使用 <em>VSC ( Visual Studio Code )</em> 原因。<br>對於剛進去軟體公司的新人都會安裝環境，通常會用到VS 開發工具進行撰寫，衍生舊版本與新版本使用差異以及便捷度。如果使用環境使用CLI創建可能帶來一些便捷，這當然不是主要原因。</p><p>VSC 不是開發軟體需要畫區分，他的優勢上帶來不少。例如: 輕量、執行、快捷鍵、豐富外掛等，減少安裝時間。</p><hr><h1 id="使用VSC"><a href="#使用VSC" class="headerlink" title="使用VSC"></a>使用VSC</h1><p>不論是 VS2019、VS2022之類都很清楚有所謂版本，只要開發版本有落差就會需要學習時間。<strong>本章節會使用.net5.0</strong>。</p><h2 id="創建專案"><a href="#創建專案" class="headerlink" title="創建專案"></a>創建專案</h2><p>打開 VSC 輸入命令字元視窗 (快捷鍵 : <code>ctrl+ `</code> )。<br>因為要使用 net5.0 所以使用下方指令， -f : force 、 -o : output name。</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dotnet new mvc -f net5.0 -o dotnetMVC_itextsharp</span><br></pre></td></tr></table></figure><p>版本有很多種，可以參考下方網址可以知道使用方式。<br><a href="https://docs.microsoft.com/en-us/dotnet/core/tools/dotnet-new#console">https://docs.microsoft.com/en-us/dotnet/core/tools/dotnet-new#console</a></p><h3 id="指令參考"><a href="#指令參考" class="headerlink" title="指令參考"></a>指令參考</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dotnet new &lt;TEMPLATE&gt; [--dry-run] [--force] [-lang|--language &#123;&quot;C#&quot;|&quot;F#&quot;|VB&#125;]</span><br><span class="line">    [-n|--name &lt;OUTPUT_NAME&gt;] [--no-update-check] [-o|--output &lt;OUTPUT_DIRECTORY&gt;] [Template options]</span><br><span class="line"></span><br><span class="line">dotnet new -h|--help</span><br></pre></td></tr></table></figure><h2 id="套件"><a href="#套件" class="headerlink" title="套件"></a>套件</h2><h3 id="新增"><a href="#新增" class="headerlink" title="新增"></a>新增</h3><p>網站 : <a href="https://www.nuget.org/">Nuget</a><br>Nuget 是目前最常使用的package，使用方式也相對簡單。<br><img src="/img/dotnet/cs/cs_vsc_002.png"></p><p>選擇其中你要的package ，按下你目前要使用的Command進行使用即可。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dotnet add dotnetMVC_itextsharp package iTextSharp --version 5.5.13.3</span><br></pre></td></tr></table></figure><p><img src="/img/dotnet/cs/cs_vsc_001.png"></p><h3 id="移除"><a href="#移除" class="headerlink" title="移除"></a>移除</h3><p>移除套件可以參考下方指令 。</p><ol><li>Package Manager<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dotnet remove package iTextSharp</span><br></pre></td></tr></table></figure></li><li>.NET CLI<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uninstall-package iTextSharp</span><br></pre></td></tr></table></figure></li></ol><h2 id="檢視方式"><a href="#檢視方式" class="headerlink" title="檢視方式"></a>檢視方式</h2><p>[參閱]使用檔案監看員開發 ASP.NET Core 應用程式<br><a href="https://docs.microsoft.com/zh-tw/aspnet/core/tutorials/dotnet-watch?view=aspnetcore-6.0">https://docs.microsoft.com/zh-tw/aspnet/core/tutorials/dotnet-watch?view=aspnetcore-6.0</a></p><p>NET Core 近期更新多一個指令 <code> dotnet watch</code> 。這優點是可以在處理階段時可以修改，並呈現畫面效果。<br>之前開發時候都是使用Debugger 或是 Compiler影響很多行為上不便，各位有空可以嘗試。</p><h2 id="發行"><a href="#發行" class="headerlink" title="發行"></a>發行</h2><p>[參閱]dotnet publish<br><a href="https://docs.microsoft.com/zh-tw/dotnet/core/tools/dotnet-publish">https://docs.microsoft.com/zh-tw/dotnet/core/tools/dotnet-publish</a></p><h3 id="指令參考-1"><a href="#指令參考-1" class="headerlink" title="指令參考"></a>指令參考</h3><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">dotnet publish [&lt;PROJECT&gt;|&lt;SOLUTION&gt;] [-a|--arch &lt;ARCHITECTURE&gt;]</span><br><span class="line">    [-c|--configuration &lt;CONFIGURATION&gt;]</span><br><span class="line">    [-f|--framework &lt;FRAMEWORK&gt;] [--force] [--interactive]</span><br><span class="line">    [--manifest &lt;PATH_TO_MANIFEST_FILE&gt;] [--no-build] [--no-dependencies]</span><br><span class="line">    [--no-restore] [--nologo] [-o|--output &lt;OUTPUT_DIRECTORY&gt;]</span><br><span class="line">    [--os &lt;OS&gt;] [-r|--runtime &lt;RUNTIME_IDENTIFIER&gt;]</span><br><span class="line">    [--self-contained [true|false]] [--no-self-contained]</span><br><span class="line">     [-s|--source &lt;SOURCE&gt;] [-v|--verbosity &lt;LEVEL&gt;]</span><br><span class="line">    [--version-suffix &lt;VERSION_SUFFIX&gt;]</span><br><span class="line"></span><br><span class="line">dotnet publish -h|--help</span><br></pre></td></tr></table></figure><p>這邊用最簡單方式呈現如何發行，這邊要確認是否有沒有到專案底下。下方只用output即可非常簡單。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dotnet publish -o &quot;c:/core_publish/&quot;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 後端技術 </category>
          
          <category> C# </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
            <tag> VSC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Azure DevOps】 - Boards 功能介紹</title>
      <link href="/2023/08/26/DevOps/Azure/Azure%20DevOps%20Boards%E4%BD%BF%E7%94%A8%E4%BB%8B%E7%B4%B9/"/>
      <url>/2023/08/26/DevOps/Azure/Azure%20DevOps%20Boards%E4%BD%BF%E7%94%A8%E4%BB%8B%E7%B4%B9/</url>
      
        <content type="html"><![CDATA[<h2 id="Boards-vs-notion-boards"><a href="#Boards-vs-notion-boards" class="headerlink" title="Boards vs notion boards"></a>Boards vs notion boards</h2><p>notion boards 是一個很好用的工具，可以用來管理專案進度，但是在團隊合作上，就顯得不太方便，因為沒有辦法知道其他人的進度，也沒有辦法知道其他人的進度是否會影響到自己的進度，所以在團隊合作上，還是需要一個專門的工具來管理專案進度，而 Azure DevOps Boards 就是一個很好用的工具。</p><p>Azure DevOps 可以針對 Repos 、 Pipelines 、 Boards 、 Test Plans 、 Artifacts 進行管理，而 Boards 就是專門用來管理專案進度的工具，可以針對專案進度進行管理，並且可以針對專案進度進行分析，讓團隊可以更好的管理專案進度。</p><h2 id="Boards-功能介紹"><a href="#Boards-功能介紹" class="headerlink" title="Boards 功能介紹"></a>Boards 功能介紹</h2><p>Azure DevOps 提供以下八種功能，方便管理專案進度業界最常使用功能之一。</p><ol><li>Work Item</li><li>Boards</li><li>Backlogs</li><li>Sprints</li><li>Queries</li><li>Charts</li><li>Dashboards</li><li>Analytics view</li></ol><h3 id="一、Work-Item-工作項目"><a href="#一、Work-Item-工作項目" class="headerlink" title="一、Work Item 工作項目"></a>一、Work Item 工作項目</h3><p>工作項目是只要給目前需要做的事情，可以是一個功能、一個需求、一個 bug、一個測試案例等等，可以針對工作項目進行分類，並且可以針對工作項目進行分配，讓團隊可以更好的管理專案進度。(可以透過 filter 來進行篩選)</p><p><img src="/image/20230826_11-15-34.png"></p><h3 id="二、Boards-看板"><a href="#二、Boards-看板" class="headerlink" title="二、Boards 看板"></a>二、Boards 看板</h3><p>看板是一個可以針對工作項目進行管理的介面，可以針對工作項目進行分類，並且可以針對工作項目進行分配，讓團隊可以更好的管理專案進度。<br><img src="/image/20230826_11-18-42.png"></p><p>這邊我使用規則為 </p><ol><li>feature : 開法功能功能名稱</li><li>User Story : 當前要製作方向、功能</li><li>Task : 當前要製作的工作項目</li></ol><p>Task 命名會使用 [名字 + 工作項目名稱] 這樣的方式，例如：[小明] - [製作登入頁面]，這樣的方式可以讓其他人知道這個工作項目是由誰負責的，並且可以知道這個工作項目是要做什麼的。</p><p>Git 部分就用 Task ID 標示對應的工作項目，這樣可以讓其他人知道這個 commit 是要做什麼的，同時，也可以追蹤 Task ID 。時間部分可已透過下方客製化方式加入。<br><img src="/image/20230826_11-36-47.png"><br>下圖管理方式可以參照。<br><img src="/image/20230810_20-57-19.png"></p><h3 id="三、Backlogs-待辦事項"><a href="#三、Backlogs-待辦事項" class="headerlink" title="三、Backlogs 待辦事項"></a>三、Backlogs 待辦事項</h3><p>與[Work Item 工作項目]會比較直覺，可以選擇需要看得階層。內容用Group 方式顯示，相當直覺。</p><p><img src="/image/20230826_11-39-59.png"></p><h3 id="四、Sprints-短期衝刺"><a href="#四、Sprints-短期衝刺" class="headerlink" title="四、Sprints 短期衝刺"></a>四、Sprints 短期衝刺</h3><p>這功能可以讓團隊可以針對短期內要做的事情進行管理，並且可以針對短期內要做的事情進行分配，讓團隊可以更好的管理專案進度，依據專案緊急項目可以做歸類。</p><p><img src="/image/20230826_11-47-46.png"><br><img src="/image/20230826_14-07-57.png"></p><h3 id="五、Queries-查詢"><a href="#五、Queries-查詢" class="headerlink" title="五、Queries 查詢"></a>五、Queries 查詢</h3><p>Queries 可以針對工作項目進行查詢，能夠在當中創建 Chart 來進行分析，讓團隊可以更好的管理專案進度。同時，可以把Chart放置在 Dashboard 上，透過 Effort (Hours) 可以查詢工時。</p><p><img src="/image/20230826_14-14-03.png"><br><img src="/image/20230826_14-15-18.png"></p><h3 id="六、Delivery-Plans-傳遞計畫"><a href="#六、Delivery-Plans-傳遞計畫" class="headerlink" title="六、Delivery Plans 傳遞計畫"></a>六、Delivery Plans 傳遞計畫</h3><p>傳遞計畫著重於 Sprints、Team 衝刺計畫，可以管控 Feature 專案進度，比較偏向是 googel 日曆呈現。<br><img src="/image/20230826_14-20-36.png"></p><h3 id="七、Analytics-view-分析檢視"><a href="#七、Analytics-view-分析檢視" class="headerlink" title="七、Analytics view 分析檢視"></a>七、Analytics view 分析檢視</h3><p>分析檢視提供簡化的方式，可根據分析資料指定 Power BI 報表的篩選準則。 分析檢視僅支援Azure Boards資料 (工作專案) 。 分析檢視不支援其他資料類型，例如管線和測試。 每個檢視都會對應至工作專案的一般清單。 不支援工作專案階層。</p><p><img src="/image/20230826_17-13-26.png"></p><p>當您使用 Power BI 資料連線器時，這些相同的預設檢視會出現在 [導覽器] 對話方塊中。 您選取的檢視會決定載入 Power BI 的記錄、欄位和歷程記錄集。 您可以使用 [導覽器] 對話方塊中的 [編輯查詢] 按鈕來編輯檢視，或是使用 [Power BI Desktop] 來編輯檢視。<br><img src="/image/20230826_17-13-35.png"></p><h2 id="參考文件"><a href="#參考文件" class="headerlink" title="參考文件"></a>參考文件</h2><ol><li><a href="https://ithelp.ithome.com.tw/articles/10209547">[DAY28] 用Azure DevOps Boards管理專案進度：Agile團隊的好工具</a></li><li><a href="https://learn.microsoft.com/zh-tw/azure/devops/boards/sprints/best-practices-scrum?view=azure-devops#sprint-retrospective-meetings">Scrum 和最佳做法</a></li><li><a href="https://learn.microsoft.com/zh-tw/azure/devops/boards/plans/review-team-plans?view=azure-devops">檢閱 Azure Boards 中的小組傳遞計畫</a></li><li><a href="https://learn.microsoft.com/zh-tw/azure/devops/report/powerbi/what-are-analytics-views?view=azure-devops">關於分析檢視</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 雲端平台 </category>
          
          <category> Azure </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Azure </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Azure DevOps】 - Boards</title>
      <link href="/2023/08/10/DevOps/Azure/Azure%20DevOps%20Boards/"/>
      <url>/2023/08/10/DevOps/Azure/Azure%20DevOps%20Boards/</url>
      
        <content type="html"><![CDATA[<h2 id="Azure-DevOps-Boards"><a href="#Azure-DevOps-Boards" class="headerlink" title="Azure DevOps - Boards"></a>Azure DevOps - Boards</h2><p>Azure DevOps - Boards 提供了工作項目追蹤系統，讓團隊可以計畫、追蹤工作項目。</p><h3 id="1-工作模式"><a href="#1-工作模式" class="headerlink" title="1. 工作模式"></a>1. 工作模式</h3><p>Azure Devops 起始時候預設Basic模式可以自行設定為其他模式。Boards 提供了4種工作模式：</p><ul><li>Agile : 敏捷開發模式</li><li>Scrum : Scrum 開發模式</li><li>Basic : 基本開發模式</li><li>CMMI (Capability Maturity Model Integration) : CMMI 開發模式</li></ul><h3 id="2-工作項目"><a href="#2-工作項目" class="headerlink" title="2. 工作項目"></a>2. 工作項目</h3><p>Azure DevOps - Boards 提供了4種工作項目：</p><ul><li>Epic : 史詩</li><li>Feature : 功能</li><li>User Story : 使用者描述</li><li>Task : 工作項目</li></ul><div class="tabs" id="temp"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#temp-1">Agile 敏捷開發模式</button></li><li class="tab"><button type="button" data-href="#temp-2">Basic 開發模式</button></li><li class="tab"><button type="button" data-href="#temp-3">CMMI 開發模式</button></li><li class="tab"><button type="button" data-href="#temp-4">Scrum 開發模式</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="temp-1"><p>敏捷式程式會使用各種工作專案類型，例如使用者劇本、工作、Bug、功能和 Epic 來規劃和追蹤工作。 首先，新增使用者劇本，並視需要將它們分組至功能。 您可以將工作新增至使用者劇本，以追蹤更多詳細資料。</p><p><img src="/image/20230810_20-57-19.png"><br><img src="/image/20230810_20-57-34.png"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="temp-2"><p>基本程式提供三種工作專案類型：Epic、問題和工作，用於規劃和追蹤工作。 首先，新增問題以追蹤使用者劇本、Bug 或功能專案。<br><img src="/image/20230810_20-58-43.png"><br><img src="/image/20230810_20-58-50.png"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="temp-3"><p>CMMI 程式會使用工作專案類型，例如需求、工作、Bug、功能和 Epic 來規劃和追蹤工作。<br><img src="/image/20230810_20-59-39.png"><br><img src="/image/20230810_20-59-43.png"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="temp-4"><p>Scrum 程式會使用各種工作專案類型，包括產品待辦專案、工作、Bug、功能和 Epic，來規劃和追蹤工作。</p><p>在每個工作專案表單中，描述工作、指派參與者、追蹤狀態，以及在討論區段中共同作業。 我們會示範如何在入口網站上新增產品待辦專案、子工作和工作專案詳細資料<br><img src="/image/20230810_20-58-16.png"><br><img src="/image/20230810_20-58-20.png"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="關聯工作項目"><a href="#關聯工作項目" class="headerlink" title="關聯工作項目"></a>關聯工作項目</h2><ul><li>關聯工作項目可以讓工作項目之間建立關聯，例如：關聯工作項目之間的相依性、關聯工作項目之間的父子關係。</li><li>關聯工作項目可以在工作項目的右上角選單中選擇關聯工作項目。</li></ul><p><img src="/image/20230810_21-05-36.png"></p><h2 id="Bug-沒出現在-Backlog"><a href="#Bug-沒出現在-Backlog" class="headerlink" title="Bug 沒出現在 Backlog"></a>Bug 沒出現在 Backlog</h2><ul><li>Bug 預設是不會出現在 Backlog 中，只會出現在 Board 中。 </li><li>如果要讓 Bug 出現在 Backlog 中，可以在 Project Settings -&gt; Boards -&gt; Bugs -&gt; Bugs are managed with requirements  或是  Bugs are managed with task -&gt; On<br><img src="/image/20230810_21-11-07.png"><br><img src="/image/20230810_21-13-05.png"><br><img src="/image/20230810_21-11-48.png"></li></ul><h2 id="參考文件"><a href="#參考文件" class="headerlink" title="參考文件"></a>參考文件</h2><ul><li><a href="https://docs.microsoft.com/en-us/azure/devops/?view=azure-devops">Azure DevOps Documentation</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 雲端平台 </category>
          
          <category> Azure </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Azure </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Angular (三) - router子層作法</title>
      <link href="/2023/07/26/%E5%89%8D%E7%AB%AF%E6%8A%80%E8%A1%93/Angular/Angular-03-router%E5%AD%90%E5%B1%A4%E4%BD%9C%E6%B3%95/"/>
      <url>/2023/07/26/%E5%89%8D%E7%AB%AF%E6%8A%80%E8%A1%93/Angular/Angular-03-router%E5%AD%90%E5%B1%A4%E4%BD%9C%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>上篇有簡單帶過 router 使用方式，若需要底下有階層需要怎麼做。這次會使用子層方式展示。</p><h2 id="router-子層作法"><a href="#router-子層作法" class="headerlink" title="router 子層作法"></a>router 子層作法</h2><h3 id="一、-設定-app-routing-module-ts"><a href="#一、-設定-app-routing-module-ts" class="headerlink" title="一、 設定 app-routing.module.ts"></a>一、 設定 app-routing.module.ts</h3><p>設定路由，這邊會有兩層，一層是 home，一層是 other，other 下面有 book。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="attr">routes</span>: <span class="title class_">Routes</span> = [</span><br><span class="line">  &#123;<span class="attr">path</span>:<span class="string">&#x27;&#x27;</span>, <span class="attr">component</span>: <span class="title class_">HomeComponent</span>&#125;,</span><br><span class="line">  &#123;<span class="attr">path</span>:<span class="string">&#x27;other&#x27;</span>, <span class="attr">component</span>: <span class="title class_">OtherComponent</span>,<span class="attr">children</span>:[</span><br><span class="line">    &#123; <span class="attr">path</span>: <span class="string">&#x27;book&#x27;</span>, <span class="attr">component</span>: <span class="title class_">BookComponent</span>, &#125;,</span><br><span class="line">  ]&#125;</span><br><span class="line">];</span><br></pre></td></tr></table></figure><h3 id="二、-設定-app-component-html"><a href="#二、-設定-app-component-html" class="headerlink" title="二、 設定 app.component.html"></a>二、 設定 app.component.html</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">router-outlet</span>&gt;</span><span class="tag">&lt;/<span class="name">router-outlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="三、-設定-home-component-html"><a href="#三、-設定-home-component-html" class="headerlink" title="三、 設定 home.component.html"></a>三、 設定 home.component.html</h3><p>這邊目的需要有一個連結可以連到 other，所以會有一個 routerLink。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>home works!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span> <span class="tag">&lt;<span class="name">a</span> [<span class="attr">routerLink</span>]=<span class="string">&quot;&#x27;/other&#x27;&quot;</span>&gt;</span>其他 other<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span> <span class="tag">&lt;<span class="name">a</span> [<span class="attr">routerLink</span>]=<span class="string">&quot;&#x27;/other/book&#x27;&quot;</span>&gt;</span>書籍 book<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="四、設定-other-component-html"><a href="#四、設定-other-component-html" class="headerlink" title="四、設定 other.component.html"></a>四、設定 other.component.html</h2><p>這邊提示一下，因為 other 下面有子層，所以需要有一個 router-outlet，這樣才能顯示子層的內容。若沒有加入會發生 book 連結過去，會沒有顯示內容。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;bg&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>other works!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">router-outlet</span>&gt;</span><span class="tag">&lt;/<span class="name">router-outlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>以上完成後效果如下，背景部分可以透過 css 設定。<br><img src="/image/20230826_20-48-36.png"><br><img src="/image/20230826_20-48-22.png"></p><hr><h2 id="module-製作-router"><a href="#module-製作-router" class="headerlink" title="module 製作 router"></a>module 製作 router</h2><p>module 不但可以放置版面的模組以外，也可以製作一個routing環境。</p><h3 id="一、創建一個-module"><a href="#一、創建一個-module" class="headerlink" title="一、創建一個 module"></a>一、創建一個 module</h3><p>首先要創建一個 module ，名稱建議要加入routing 才會知道這個 module 作用。</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ng g m children-routing</span><br></pre></td></tr></table></figure><h3 id="二、設定-app-module"><a href="#二、設定-app-module" class="headerlink" title="二、設定 app-module"></a>二、設定 app-module</h3><p>這動作是告訴讀取app-module 需要讀到我們的 module 才會到這裡面的頁面。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">  <span class="keyword">const</span> <span class="attr">routes</span>: <span class="title class_">Routes</span> = [</span><br><span class="line">  &#123; <span class="attr">path</span>: <span class="string">&#x27;&#x27;</span>, <span class="attr">component</span>: <span class="title class_">HomeComponent</span> &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;other&#x27;</span>, <span class="attr">component</span>: <span class="title class_">OtherComponent</span>, <span class="attr">children</span>: </span><br><span class="line">    [</span><br><span class="line">      &#123; <span class="attr">path</span>: <span class="string">&#x27;book&#x27;</span>, <span class="attr">component</span>: <span class="title class_">BookComponent</span>, &#125;,</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;children&#x27;</span>, <span class="attr">loadChildren</span>: <span class="function">() =&gt;</span> <span class="title class_">ChildrenRoutingModule</span></span><br><span class="line">  &#125;</span><br><span class="line">];</span><br></pre></td></tr></table></figure><p>到目前為止，app-routing 就完成設定了。<br>(備註 : angular 創建文件時候會寫入 app.module.ts ，若有發生錯誤記得在那看看有沒有imports)</p><h3 id="三、設定-children-預設頁面"><a href="#三、設定-children-預設頁面" class="headerlink" title="三、設定 children 預設頁面"></a>三、設定 children 預設頁面</h3><p>接下來，創建一個 children 預設畫面。並開始設定我們的 children-routing。</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ng g c page1</span><br></pre></td></tr></table></figure><p>設定 children-routing 環境。<br>這邊要留意，如果沒有 exports <code>RouterModule</code> 會造成無法轉入頁面。 </p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="attr">routes</span>: <span class="title class_">Routes</span> = [</span><br><span class="line">  &#123; <span class="attr">path</span>: <span class="string">&#x27;&#x27;</span>, <span class="attr">component</span>: <span class="title class_">Page1Component</span> &#125;,</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="meta">@NgModule</span>(&#123;</span><br><span class="line">  <span class="attr">imports</span>: [<span class="title class_">RouterModule</span>.<span class="title function_">forChild</span>(routes)],</span><br><span class="line">  <span class="attr">exports</span>: [<span class="title class_">RouterModule</span>],</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>設定完成後，就可以將 <code>http://localhost:4200/children</code> 打開。</p><hr><h2 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h2><p>為了製作子層 router時候，比較多人會創建兩個 module，一個是放 routing 、一個是放模組或是擴充的 module 這樣來使用。 事實上可以直接使用一個routing 唯一缺點會比較亂一些。若要加入第二個module 下面的補充可以參考。</p><h3 id="補充"><a href="#補充" class="headerlink" title="補充"></a>補充</h3><p>若有第二個module 需要改以下內容就可以正常使用了。</p><ol><li>children.module<figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@NgModule</span>(&#123;</span><br><span class="line">  <span class="attr">declarations</span>: [</span><br><span class="line"></span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">imports</span>: [</span><br><span class="line">    <span class="title class_">ChildrenRoutingModule</span>,</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li>app-routing.module<figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">  <span class="keyword">const</span> <span class="attr">routes</span>: <span class="title class_">Routes</span> = [</span><br><span class="line">  &#123; <span class="attr">path</span>: <span class="string">&#x27;&#x27;</span>, <span class="attr">component</span>: <span class="title class_">HomeComponent</span> &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;other&#x27;</span>, <span class="attr">component</span>: <span class="title class_">OtherComponent</span>, <span class="attr">children</span>: </span><br><span class="line">    [</span><br><span class="line">      &#123; <span class="attr">path</span>: <span class="string">&#x27;book&#x27;</span>, <span class="attr">component</span>: <span class="title class_">BookComponent</span>, &#125;,</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;children&#x27;</span>, <span class="attr">loadChildren</span>: <span class="function">() =&gt;</span> <span class="title class_">ChildrenModule</span></span><br><span class="line">  &#125;</span><br><span class="line">];</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> 前端技術 </category>
          
          <category> Angular </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Angular </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【前端】nodeJs 版本管理工具</title>
      <link href="/2023/07/25/%E5%89%8D%E7%AB%AF%E6%8A%80%E8%A1%93/%E3%80%90%E5%89%8D%E7%AB%AF%E3%80%91nodeJs%20%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/"/>
      <url>/2023/07/25/%E5%89%8D%E7%AB%AF%E6%8A%80%E8%A1%93/%E3%80%90%E5%89%8D%E7%AB%AF%E3%80%91nodeJs%20%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在開發Node.js的過程中，我們經常會面臨版本管理的問題。不同的專案可能需要使用不同的Node.js版本，這時候我們可以使用一個稱為Node Version Manager（nvm）的工具來管理Node.js版本，輕鬆在不同的專案中切換所需的Node.js版本。</p><h2 id="一、Node-Version-Manager-nvm"><a href="#一、Node-Version-Manager-nvm" class="headerlink" title="一、Node Version Manager (nvm)"></a>一、Node Version Manager (nvm)</h2><h3 id="1-1-簡介"><a href="#1-1-簡介" class="headerlink" title="1-1 簡介"></a>1-1 簡介</h3><p>Node Version Manager (nvm) 是一個功能強大的Node.js版本管理工具，它可以讓我們在同一台電腦上安裝並管理多個Node.js版本。這意味著你可以在不同的專案中使用不同的Node.js版本，而無需全局改變你的系統環境。</p><h3 id="1-2-前置作業"><a href="#1-2-前置作業" class="headerlink" title="1-2 前置作業"></a>1-2 前置作業</h3><p>在開始使用nvm之前，請確保你已經安裝了Git。你可以在 Node Version Manager 的 GitHub 頁面 上找到相關資訊。</p><ul><li>Github : <a href="https://github.com/nvm-sh/nvm">Node Version Manager</a></li></ul><p>如果你使用的是Linux系統，可以從 Node Version Manager 的 Linux Release 頁面 下載nvm。</p><ul><li>Release (Linux) : <a href="https://github.com/nvm-sh/nvm/releases">Node Version Manager</a><br>對於Windows用戶，可以從 Node Version Manager 的 Windows Release 頁面 下載nvm。</li><li>Release (Windows) : <a href="https://github.com/coreybutler/nvm-windows/releases">Node Version Manager</a></li></ul><h2 id="二、安裝"><a href="#二、安裝" class="headerlink" title="二、安裝"></a>二、安裝</h2><p>在開始安裝之前，如果你已經安裝了全局的Node.js版本，建議先將其移除，以免產生衝突。</p><h3 id="2-1-下載nvm-setup-exe並安裝"><a href="#2-1-下載nvm-setup-exe並安裝" class="headerlink" title="2-1 下載nvm-setup.exe並安裝"></a>2-1 下載nvm-setup.exe並安裝</h3><p>下載並運行 nvm-setup.exe 安裝程式，安裝完成後，你需要記住以下兩個重要的路徑：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//--- nvm ---//</span><br><span class="line"><span class="function">C:\<span class="title">Users</span>\你的用戶名\<span class="title">AppData</span>\<span class="title">Roaming</span>\<span class="title">nvm</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">//--- <span class="title">node</span> ---//</span></span><br><span class="line"><span class="function"><span class="title">C</span>:\<span class="title">Program</span> <span class="title">Files</span>\<span class="title">nodejs</span></span></span><br></pre></td></tr></table></figure><p><img src="/image/20230725_21-42-42.png"></p><h3 id="2-2-開啟-nvm-、查看版本"><a href="#2-2-開啟-nvm-、查看版本" class="headerlink" title="2-2 開啟 nvm 、查看版本"></a>2-2 開啟 nvm 、查看版本</h3><p>安裝完成後，你可以在命令提示符號（Command Prompt）中輸入以下指令來查看 nvm 的版本：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//--- 查看版本 ---//</span><br><span class="line">nvm version</span><br></pre></td></tr></table></figure><h2 id="三、使用-nvm"><a href="#三、使用-nvm" class="headerlink" title="三、使用 nvm"></a>三、使用 nvm</h2><h3 id="3-1-安裝最新版本"><a href="#3-1-安裝最新版本" class="headerlink" title="3-1 安裝最新版本"></a>3-1 安裝最新版本</h3><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//--- 安裝最新版本 ---//</span><br><span class="line">nvm install latest</span><br></pre></td></tr></table></figure><h3 id="3-2-安裝指定版本"><a href="#3-2-安裝指定版本" class="headerlink" title="3-2 安裝指定版本"></a>3-2 安裝指定版本</h3><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//--- 安裝指定版本 ---//</span><br><span class="line">nvm install <span class="number">14</span>.<span class="number">17</span>.<span class="number">3</span></span><br></pre></td></tr></table></figure><h3 id="3-3-查看已安裝版本以及使用版本"><a href="#3-3-查看已安裝版本以及使用版本" class="headerlink" title="3-3 查看已安裝版本以及使用版本"></a>3-3 查看已安裝版本以及使用版本</h3><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//--- 查看已安裝版本 ---//</span><br><span class="line">nvm list</span><br></pre></td></tr></table></figure><p><img src="/image/20230725_21-50-32.png"></p><p>現在，你已經學會了如何使用 Node Version Manager（nvm）來管理你的 Node.js 版本。這將使你在開發不同專案時更加靈活和方便，並確保你能夠使用最新的Node.js功能和修復錯誤。快樂地開發吧！</p>]]></content>
      
      
      <categories>
          
          <category> 前端技術 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Node </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Angular (二) - component 與 router 介紹與實作</title>
      <link href="/2023/07/25/%E5%89%8D%E7%AB%AF%E6%8A%80%E8%A1%93/Angular/Angular-02-component%20%E8%88%87%20router%20%E4%BB%8B%E7%B4%B9%E8%88%87%E5%AF%A6%E4%BD%9C/"/>
      <url>/2023/07/25/%E5%89%8D%E7%AB%AF%E6%8A%80%E8%A1%93/Angular/Angular-02-component%20%E8%88%87%20router%20%E4%BB%8B%E7%B4%B9%E8%88%87%E5%AF%A6%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>由於近期到公司使用Angular框架開發，本人使用次數不會超過10次，所以會有些許不正確的地方，如果有錯誤的地方歡迎指正。<br>(本文目的: 學習專用)</p><h3 id="Typescript"><a href="#Typescript" class="headerlink" title="Typescript"></a>Typescript</h3><p>Angular 當初與三個框架當中，最早使用Ts來當作開發語言，之後Vue、React也跟進使用Ts，所以如果有使用過Vue、React的人，會比較熟悉。</p><h3 id="VSCode"><a href="#VSCode" class="headerlink" title="VSCode"></a>VSCode</h3><p>初學者如果要快速建立環境可以使用下方套件:</p><ol><li><p><a href="https://gist.github.com/doggy8088/6539a140f28924d3a1f053a8d3a9f49e">設定檔案</a></p></li><li><p><a href="https://marketplace.visualstudio.com/items?itemName=doggy8088.angular-extension-pack">Angular Extension Pack</a></p></li></ol><h3 id="其餘工具"><a href="#其餘工具" class="headerlink" title="其餘工具"></a>其餘工具</h3><p>有時候因為版本問題，會需要安裝其他工具，這邊我們建議使用nvm 來管控版本，可以參考下方連結。</p><ol><li><a href="../nvm_node%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7.md">nvm-node版本管理工具</a></li><li><a href="https://titangene.github.io/article/nvm.html">nvm：安裝、切換不同 Node.js 版本的管理器</a></li></ol><hr><h2 id="Component"><a href="#Component" class="headerlink" title="Component"></a>Component</h2><p>在 Angular 中，組件（Component）是應用程式的基本構建塊之一，用於將使用者界面分解成獨立且可重用的部分。</p><p>組件是 Angular 應用程式的基本單位，每個組件代表一個特定的使用者界面區域或元素。每個組件擁有自己的 HTML 模板、CSS 樣式和 TypeScript 代碼，這使得組件能夠獨立運作並與其他組件協同工作。</p><p>以下是 Angular 組件的一些主要特點和組成部分：</p><ol><li><p>模板（Template）： 模板是組件的視覺表示，使用 HTML 標記和 Angular 樣板語法結合，來定義組件的外觀。模板中可以使用變數、指令和事件處理器來實現動態的內容呈現。</p></li><li><p>類別（Class）： 每個組件都對應一個 TypeScript 類，這個類用於處理組件的邏輯和行為。它包含了各種方法和屬性，用於處理數據、事件處理、生命週期鉤子等。</p></li><li><p>元數據（Metadata）： 元數據是一個由裝飾器（Decorator）提供的對象，用於指定組件的元信息，例如組件的選擇器、模板、樣式、生命週期鉤子等。</p></li><li><p>樣式（Styles）： 每個組件可以有自己的 CSS 樣式，用於定義組件的外觀和風格。這些樣式可以直接寫在組件文件中，也可以引用外部的樣式文件。</p></li><li><p>數據繫結（Data Binding）： Angular 支援多種數據繫結方式，包括插值表達式、屬性繫結、事件繫結和雙向繫結，這使得數據在組件和模板之間能夠流動並保持同步。</p></li><li><p>生命週期鉤子（Lifecycle Hooks）： Angular 提供一系列生命週期鉤子方法，允許你在組件生命週期的不同階段執行自定義的程式碼，例如初始化數據、訂閱事件、銷毀資源等。</p></li></ol><h3 id="實作"><a href="#實作" class="headerlink" title="實作"></a>實作</h3><p>首先我們先創建一個Component，這邊我們創建一個Pages 為 Home。<br><img src="/image/20230823_22-50-11.png"></p><p>開始前，請到 app-routing.module.ts 設定 router設定位置。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">NgModule</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">RouterModule</span>, <span class="title class_">Routes</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/router&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">HomeComponent</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./@Views/home/home.component&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">routes</span>: <span class="title class_">Routes</span> = [</span><br><span class="line">  &#123;<span class="attr">path</span>:<span class="string">&#x27;home&#x27;</span>, <span class="attr">component</span>: <span class="title class_">HomeComponent</span>,&#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="meta">@NgModule</span>(&#123;</span><br><span class="line">  <span class="attr">imports</span>: [<span class="title class_">RouterModule</span>.<span class="title function_">forRoot</span>(routes)],</span><br><span class="line">  <span class="attr">exports</span>: [<span class="title class_">RouterModule</span>]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">AppRoutingModule</span> &#123; &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>之後將 app.component.html 的內容刪除，並加入下方程式碼。就完成簡易版本的component。與上篇 <code>&lt;router-outlet&gt;&lt;/router-outlet&gt;</code>使用方式不相同。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- &lt;router-outlet&gt;&lt;/router-outlet&gt; --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>app component<span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">app-home</span>&gt;</span><span class="tag">&lt;/<span class="name">app-home</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Component 很多人會誤解為是一個頁面，其實不是，Component是一個頁面的一部分，可以想像成是一個頁面的區塊。因此，我們可以在一個頁面中使用多個Component，也可以在一個Component中使用多個Component。</p><h3 id="什麼是-spec"><a href="#什麼是-spec" class="headerlink" title="什麼是 .spec"></a>什麼是 .spec</h3><p>在 Angular 開發中，<code>.spec.ts</code> 檔案通常是用來撰寫測試的文件。這些測試文件被稱為「測試規格」（Test Spec），通常用來驗證你的程式碼是否按照預期工作。<br>具體來說，每個 Angular 組件和服務都可以有相對應的測試規格，這些測試規格會測試該組件或服務的行為和功能，以確保它們正常運作並符合預期行為。</p><p>以下是一些常見的 Angular 測試規格概念：</p><ol><li><p>單元測試（Unit Testing）： 單元測試是針對應用程式的最小單元進行測試，例如組件、服務、指令等。在 .spec.ts 檔案中，你可以使用測試框架（如 Jasmine）提供的函式來定義和執行這些測試。</p></li><li><p>測試套件（Test Suite）： 測試套件是一組相關的測試用例，通常與一個組件或服務相關聯。你可以使用 Jasmine 提供的 describe 函式來定義測試套件。</p></li><li><p>測試用例（Test Case）： 測試用例是單一的測試單元，用來驗證一個特定的行為或功能。你可以使用 it 函式來定義測試用例，並在其中斷言（assert）預期的結果。</p></li><li><p>斷言（Assertion）： 斷言是在測試用例中使用的語句，用於比較實際結果和預期結果是否一致。常見的斷言函式包括 expect、toBe、toEqual 等。</p></li><li><p>測試替身（Test Double）： 測試雙是在測試中替代真實依賴項的模擬對象，包括測試假的服務、假的 HTTP 請求等。這有助於隔離單元測試，避免對外部資源造成影響。</p></li></ol><p>在 Angular 項目中，通常會在每個組件或服務的同名文件夾中創建對應的 .spec.ts 檔案，然後使用測試框架（如 Jasmine）和測試工具（如 TestBed）來撰寫和執行測試。這有助於確保你的程式碼在修改或擴展時仍然保持預期的行為，同時提高程式碼的品質和穩定性。</p><h2 id="router"><a href="#router" class="headerlink" title="router"></a>router</h2><p>Router 是一個核心的功能，用於處理應用程式中不同視圖之間的導航和狀態管理。Angular 的路由模組提供了一種方式來定義應用程式的不同路由，並根據 URL 的變化來顯示對應的組件內容。以下是 Angular 路由的介紹：</p><ol><li><p>路由配置（Route Configuration）： 路由配置是指定應用程式中不同路由的設定。你可以在應用程式的路由模組中定義路由配置，每個路由都包括一個 URL 路徑和對應的組件。路由配置也可以包含路由參數、子路由、守門員（Guards）、解析器（Resolvers）等。</p></li><li><p>Router Outlet： <router-outlet> 是 Angular 提供的指令，用於在畫面中顯示當前路由對應的組件內容。當 URL 路徑改變時，路由器會根據路由配置從對應的組件中渲染內容，並將其插入到 <router-outlet> 中。</p></li><li><p>路由導航（Router Navigation）： 路由導航是通過改變 URL 路徑來切換不同路由的過程。你可以在組件中使用 Angular 提供的 Router 服務的方法來進行路由導航，例如 router.navigate()。</p></li><li><p>路由參數（Route Parameters）： 路由參數是 URL 中的變數部分，用於傳遞給特定路由的資訊。你可以在路由配置中定義路由參數，並在路由導航時傳遞參數值。</p></li><li><p>子路由（Child Routes）： 子路由允許你在一個父路由中定義子路由，這樣你可以在同一個父路由下顯示多個相關聯的子組件。子路由可以在父組件的 <router-outlet> 中顯示。</p></li><li><p>守門員（Guards）： 守門員是用於保護特定路由的功能，例如驗證使用者權限、確保使用者已登入等。你可以使用守門員在路由導航之前進行身份驗證或授權檢查。</p></li><li><p>解析器（Resolvers）： 解析器用於在路由導航之前獲取需要的數據，並將這些數據提供給目標組件。這可以確保在顯示組件之前，所需的數據已經可用。</p></li><li><p>延遲載入（Lazy Loading）： 延遲載入是一種優化技術，允許你在需要時才動態載入特定模組和相關的路由。這可以改善初始載入時間，僅在需要時載入所需的代碼。</p></li></ol><p>Angular 的路由模組提供了一個強大的機制，用於管理應用程式中不同視圖之間的導航和狀態。通過定義路由配置，使用路由導航來切換路由，以及利用守門員、解析器等功能，你可以建立出結構良好且功能豐富的單頁應用程式。</p>]]></content>
      
      
      <categories>
          
          <category> 前端技術 </category>
          
          <category> Angular </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Angular </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Angular筆記 - error Unknow argument prod 錯誤</title>
      <link href="/2023/07/21/%E5%89%8D%E7%AB%AF%E6%8A%80%E8%A1%93/Angular/Angular%E7%AD%86%E8%A8%98-%E7%99%BC%E4%BD%88%E6%99%82%E7%99%BC%E7%94%9F%20error%20Unknow%20argument%20prod%20%E9%8C%AF%E8%AA%A4%20/"/>
      <url>/2023/07/21/%E5%89%8D%E7%AB%AF%E6%8A%80%E8%A1%93/Angular/Angular%E7%AD%86%E8%A8%98-%E7%99%BC%E4%BD%88%E6%99%82%E7%99%BC%E7%94%9F%20error%20Unknow%20argument%20prod%20%E9%8C%AF%E8%AA%A4%20/</url>
      
        <content type="html"><![CDATA[<h2 id="Error-Unknow-argument-prod"><a href="#Error-Unknow-argument-prod" class="headerlink" title="Error Unknow argument prod"></a>Error Unknow argument prod</h2><p>當初使用時， <code>ng build --prod</code>已經無法使用這指令，請使用下方指令排除現狀。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ng build --configuration production</span><br></pre></td></tr></table></figure><h3 id="備註"><a href="#備註" class="headerlink" title="備註"></a>備註</h3><p>Angular 14 之後版本已經移除 <code>--prod</code>指令，改為 <code>--configuration production</code>。</p><h3 id="Angular-Cli"><a href="#Angular-Cli" class="headerlink" title="Angular Cli"></a>Angular Cli</h3><p><img src="/imgage/20221201_16-10-33.png"></p><h2 id="參考文件"><a href="#參考文件" class="headerlink" title="參考文件"></a>參考文件</h2><ul><li>ithome : <a href="https://ithelp.ithome.com.tw/articles/10195372">https://ithelp.ithome.com.tw/articles/10195372</a></li><li>stackoverflow : <a href="https://stackoverflow.com/questions/73156911/ng-build-prod-error-unknown-argument-prod">https://stackoverflow.com/questions/73156911/ng-build-prod-error-unknown-argument-prod</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端技術 </category>
          
          <category> Angular </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Angular </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Angular筆記-發行到IIS時，Config加入方式</title>
      <link href="/2023/07/20/%E5%89%8D%E7%AB%AF%E6%8A%80%E8%A1%93/Angular/Angular%E7%AD%86%E8%A8%98-%E7%99%BC%E8%A1%8CConfig%E5%8A%A0%E5%85%A5%E6%96%B9%E5%BC%8F/"/>
      <url>/2023/07/20/%E5%89%8D%E7%AB%AF%E6%8A%80%E8%A1%93/Angular/Angular%E7%AD%86%E8%A8%98-%E7%99%BC%E8%A1%8CConfig%E5%8A%A0%E5%85%A5%E6%96%B9%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>近期在開發Angular專案都會需要發行專案檔案，往往 Windows 都會使用IIS來發行，但是在發行後架站會出現404錯誤，這時候就需要在Config加入路由設定。<br>(如果放置Config時候，發現網站掛掉或是其他原因可以參考以下做法。)</p><h2 id="安裝-URL-Rewrite-2-0"><a href="#安裝-URL-Rewrite-2-0" class="headerlink" title="安裝  URL Rewrite 2.0"></a>安裝  URL Rewrite 2.0</h2><p>下載連結 : <a href="https://www.iis.net/downloads/microsoft/url-rewrite">點選我</a><br>一開始需要安裝 URL Rewrite 2.0，安裝完後，就可以開始設定Config。(如果已經安裝過，可以跳過這步驟。)<br><img src="/image/20230901_22-32-39.png"></p><h2 id="設定-Config"><a href="#設定-Config" class="headerlink" title="設定 Config"></a>設定 Config</h2><p>選擇 IIS 管理員，選擇網站，點選 URL Rewrite。點選右邊新增規則，選擇空白規則。<br><img src="/image/20230901_22-33-25.png"></p><p>從編輯輸入規則修改以下內容。若修改完可以直接套用即可，詳細內容可以參考下方參考文件。<br><img src="/image/20230901_22-34-53.png"><br><img src="/image/20230901_22-36-22.png"><br><img src="/image/20230901_22-37-20.png"></p><h2 id="參考文件"><a href="#參考文件" class="headerlink" title="參考文件"></a>參考文件</h2><ul><li><a href="https://devblogs.microsoft.com/premier-developer/tips-for-running-an-angular-app-in-iis/">Tips for Running an Angular app in IIS</a></li><li><a href="https://blog.miniasp.com/post/2017/01/17/Angular-2-deploy-on-IIS">如何將 Angular 含有路由機制的 SPA 網頁應用程式部署到 IIS 網站伺服器</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端技術 </category>
          
          <category> Angular </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Angular </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Vue】axios因延遲提交無法顯示在頁面</title>
      <link href="/2023/05/17/%E5%89%8D%E7%AB%AF%E6%8A%80%E8%A1%93/Vue/%E3%80%90Vue%E3%80%91axios%E5%9B%A0%E5%BB%B6%E9%81%B2%E6%8F%90%E4%BA%A4%E7%84%A1%E6%B3%95%E9%A1%AF%E7%A4%BA%E5%9C%A8%E9%A0%81%E9%9D%A2/"/>
      <url>/2023/05/17/%E5%89%8D%E7%AB%AF%E6%8A%80%E8%A1%93/Vue/%E3%80%90Vue%E3%80%91axios%E5%9B%A0%E5%BB%B6%E9%81%B2%E6%8F%90%E4%BA%A4%E7%84%A1%E6%B3%95%E9%A1%AF%E7%A4%BA%E5%9C%A8%E9%A0%81%E9%9D%A2/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>近期有努力將 adminlte 套版在專案上，有試著用別人的專案上面改成自己的API，遇到專案上”Menu”是寫死並非是Ajax 回拋過來進行改寫。</p><h3 id="使用專案"><a href="#使用專案" class="headerlink" title="使用專案"></a>使用專案</h3><p>本篇是用這個來做練習。</p><ul><li>Github : <a href="https://github.com/erdkse/adminlte-3-vue">erdkse&#x2F;adminlte-3-vue</a></li></ul><h2 id="撰寫-ajax"><a href="#撰寫-ajax" class="headerlink" title="撰寫 ajax"></a>撰寫 ajax</h2><p>使用前務必要自行安裝 axios</p><ul><li>使用教學 : <a href="https://www.runoob.com/vue3/vue3-ajax-axios.html">點選我</a></li></ul><h3 id="修改服務-Auth-ts"><a href="#修改服務-Auth-ts" class="headerlink" title="修改服務 Auth.ts"></a>修改服務 Auth.ts</h3><p>這邊有關 authorizer 定義，我們將 Menu API 加入在這裡專案上面即可。<br>這個版本有幫你寫好 alert 工具 ，只需要改寫 getError 內容即可。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">getUsersMenus</span> = <span class="keyword">async</span> (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        <span class="keyword">const</span> url :<span class="built_in">string</span> = <span class="string">&quot;https://localhost:5001/api/user/menus&quot;</span>;</span><br><span class="line">        <span class="keyword">let</span> <span class="attr">menus</span>:<span class="built_in">any</span>;</span><br><span class="line">        <span class="keyword">await</span> axios</span><br><span class="line">            .<span class="title function_">get</span>(url)</span><br><span class="line">            .<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">                menus = res.<span class="property">data</span>;</span><br><span class="line">                <span class="keyword">return</span> menus;</span><br><span class="line">            &#125;);</span><br><span class="line">        <span class="keyword">return</span> menus;</span><br><span class="line">    &#125;<span class="keyword">catch</span>(error : <span class="built_in">any</span>)&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="title function_">getError</span>(&#123;</span><br><span class="line">            message : <span class="string">&quot;伺服器暫時無法使用&quot;</span></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="加入-menu-sidebar-ts"><a href="#加入-menu-sidebar-ts" class="headerlink" title="加入 menu-sidebar.ts"></a>加入 menu-sidebar.ts</h2><p>這段需要注意。axios 是利用非同步方式回傳，若網頁是先載完後就不再回頭撈一次未跑完的 ajax 。</p><p>這驗就使用使用 created() 把 this.menu 資訊存入，可以確保完成前必定會完成這段 ajax 。</p><ul><li>生命週期 : <a href="https://book.vue.tw/CH1/1-7-lifecycle.html">點選我</a></li></ul><pre><code class="ts">import &#123;IUser&#125; from &#39;@/interfaces/user&#39;;import &#123;Options, Vue&#125; from &#39;vue-class-component&#39;;import MenuItem from &#39;@/components/menu-item/menu-item.vue&#39;;import &#123;PfImage&#125; from &#39;@profabric/vue-components&#39;;import SidebarSearch from &#39;@/components/sidebar-search/sidebar-search.vue&#39;;// import &#123;i18n&#125; from &#39;@/translation&#39;;import &#123;getUsersMenus&#125; from &#39;@/services/auth&#39;@Options(&#123;    name: &#39;app-menu-sidebar&#39;,    components: &#123;        &#39;app-menu-item&#39;: MenuItem,        &#39;app-sidebar-search&#39;: SidebarSearch,        &#39;pf-image&#39;: PfImage    &#125;&#125;)export default class MenuSidebar extends Vue &#123;    public menu: any = []; // 設置為空數組，直到 Promise 解決為止    get user(): IUser &#123;        return this.$store.getters[&#39;auth/user&#39;];    &#125;    get sidebarSkin() &#123;        return this.$store.getters[&#39;ui/sidebarSkin&#39;];    &#125;    async created() &#123; // 確保 Promise 解決後，再繼續創建組件        this.menu = await getUsersMenus();    &#125;&#125;``</code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端技術 </category>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【IIS】應用程式集區的進階設定的CPU限制</title>
      <link href="/2023/05/15/%E7%AD%86%E8%A8%98%E8%88%87%E7%94%9F%E6%B4%BB%E9%9B%9C%E8%A8%98/%E6%8A%80%E8%A1%93/%E3%80%90%E7%AD%86%E8%A8%98%E3%80%91IIS_%E6%87%89%E7%94%A8%E7%A8%8B%E5%BC%8F%E9%9B%86%E5%8D%80%E7%9A%84%E9%80%B2%E9%9A%8E%E8%A8%AD%E5%AE%9A%E7%9A%84CPU%E9%99%90%E5%88%B6/"/>
      <url>/2023/05/15/%E7%AD%86%E8%A8%98%E8%88%87%E7%94%9F%E6%B4%BB%E9%9B%9C%E8%A8%98/%E6%8A%80%E8%A1%93/%E3%80%90%E7%AD%86%E8%A8%98%E3%80%91IIS_%E6%87%89%E7%94%A8%E7%A8%8B%E5%BC%8F%E9%9B%86%E5%8D%80%E7%9A%84%E9%80%B2%E9%9A%8E%E8%A8%AD%E5%AE%9A%E7%9A%84CPU%E9%99%90%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>引用 “<br>🐰 IIS 應用程式集區的 進階設定 的CPU限制(% 的 1&#x2F;1000), 只能用 50% 的 CPU，要怎麼設?</p><p>您可以透過以下步驟設定 IIS 應用程式集區的 CPU 限制：</p><ol><li>打開 IIS 管理員。</li><li>選擇您要設定的應用程式集區。</li><li>在右側窗格中，點擊「進階設定」。</li><li>找到「CPU 限制(% 的 1&#x2F;1000)」的設定，並將值設為 50000。這表示該應用程式集區只能使用 50% 的 CPU。</li><li>點擊「確定」以保存設定。</li></ol><p>完成上述步驟後，IIS 應用程式集區將會在運行時限制 CPU 使用率，並避免使用過多的系統資源。請注意，這個設定僅能控制單一應用程式集區的 CPU 使用率，若需要限制整個伺服器的 CPU 使用率，您可能需要考慮其他方式，例如透過作業系統的工具進行設定。<br>“</p><h3 id="IIS-程式集"><a href="#IIS-程式集" class="headerlink" title="IIS 程式集"></a>IIS 程式集</h3><p>程式集的主要作用是提供一個強大的網頁伺服器平台，用於建立、部署和管理各種網站和應用程式<br><img src="/image/2023-05-15-21-00-05.png"></p><hr><h2 id="查看”正在執行的要求列表”"><a href="#查看”正在執行的要求列表”" class="headerlink" title="查看”正在執行的要求列表”"></a>查看”正在執行的要求列表”</h2><p><img src="/image/2023-05-15-21-16-29.png"><br>下圖因為只有短暫開啟網頁，沒使用對外開放表面會看不出來是否有直接關係。若檔案本身有特別處理就會有明顯的效果。<br><img src="/image/2023-05-15-21-17-08.png"></p><h2 id="w3wp-exe-工作程序"><a href="#w3wp-exe-工作程序" class="headerlink" title="w3wp.exe 工作程序"></a>w3wp.exe 工作程序</h2><p>運行於 Microsoft Internet Information Services (IIS) 的工作程序 (Worker Process)。在 IIS 中，w3wp.exe 負責處理接收到的 HTTP 請求並執行相應的網站應用程式。</p><p>通常這東西會常遇到多的 w3wp.exe 問題，主要由程式集的多寡會呈現多個w3wp.exe問題。<br>引用　＂<br>The problem is that when it comes to w3wp.exe processes for the diagram above, there are three of them and just by looking in the task manager there is no easy way to tell them apart. Each instance of a w3wp.exe process has a PID (short for process identifier), but the question is which PID belongs to which application pool.<br>＂<br><img src="/image/20230515_21-58-41.png"></p><h3 id="解決方式"><a href="#解決方式" class="headerlink" title="解決方式"></a>解決方式</h3><p>IIS 6.0 使用方式</p><ul><li>Start &gt; Run &gt; Cmd</li><li>Go To Windows &gt; System32</li><li>Run cscript iisapp.vbs</li><li>You will get the list of Running Worker ProcessID and the Application Pool Name.<br><img src="/image/20230515_22-02-27.png"></li></ul><p>IIS 7.0 使用方式</p><ul><li>Start &gt; Run &gt; Cmd</li><li>Go To Windows &gt; System32 &gt; Inetsrv</li><li>Run appcmd list wp<br><img src="/image/20230515_22-02-40.png"></li></ul><h2 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h2><ul><li><a href="https://blog.uwinfo.com.tw/auth/article/bike/485">限制 IIS Process 的 CPU 使用量</a></li><li><a href="https://blog.miniasp.com/post/2010/02/12/IIS7-View-Currently-Executing-Requests-in-a-Worker-Process">如何檢視 IIS7 各工作者處理序正在執行的要求列表</a></li><li><a href="https://kenneth2011.pixnet.net/blog/post/110253254">怎麼找出進程中的w3wp.exe對應哪個IIS網站 Which w3wp.exe PID corresponds to which application pool ?</a></li><li><a href="https://stackoverflow.com/questions/5490773/how-to-get-a-list-of-all-the-asp-net-running-worker-process-and-its-associated-a">How to get a list of all the ASP.NET running worker process and its associated application pools?</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 筆記 </category>
          
          <category> 生活雜記 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>【筆記】IIS排除 &quot;必須使用Localhost或是127.0.0.1問題&quot;</title>
      <link href="/2023/05/14/%E7%AD%86%E8%A8%98%E8%88%87%E7%94%9F%E6%B4%BB%E9%9B%9C%E8%A8%98/%E6%8A%80%E8%A1%93/%E3%80%90%E7%AD%86%E8%A8%98%E3%80%91IIS_%E6%8E%92%E9%99%A4%E5%BF%85%E9%A0%88%E4%BD%BF%E7%94%A8Localhost%E5%95%8F%E9%A1%8C/"/>
      <url>/2023/05/14/%E7%AD%86%E8%A8%98%E8%88%87%E7%94%9F%E6%B4%BB%E9%9B%9C%E8%A8%98/%E6%8A%80%E8%A1%93/%E3%80%90%E7%AD%86%E8%A8%98%E3%80%91IIS_%E6%8E%92%E9%99%A4%E5%BF%85%E9%A0%88%E4%BD%BF%E7%94%A8Localhost%E5%95%8F%E9%A1%8C/</url>
      
        <content type="html"><![CDATA[<h2 id="紀錄目的"><a href="#紀錄目的" class="headerlink" title="紀錄目的"></a>紀錄目的</h2><p>架設網站時若連線出現下圖問題，可以參考以下作法。<br><img src="/img/Note/IIS/bg.png"></p><h2 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h2><p>請打開 [服務] 後找尋下圖的ASP.NET State service，將它設為自動後並啟動，完成後網站將可連線<br><img src="/img/Note/IIS/01.png"></p>]]></content>
      
      
      <categories>
          
          <category> 筆記 </category>
          
          <category> 生活雜記 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(筆記) IIS - 排除 &quot;APK檔案無法下載&quot;</title>
      <link href="/2023/05/13/%E7%AD%86%E8%A8%98%E8%88%87%E7%94%9F%E6%B4%BB%E9%9B%9C%E8%A8%98/%E6%8A%80%E8%A1%93/%E3%80%90%E7%AD%86%E8%A8%98%E3%80%91IIS_APK%E6%AA%94%E6%A1%88%E7%84%A1%E6%B3%95%E4%B8%8B%E8%BC%89/"/>
      <url>/2023/05/13/%E7%AD%86%E8%A8%98%E8%88%87%E7%94%9F%E6%B4%BB%E9%9B%9C%E8%A8%98/%E6%8A%80%E8%A1%93/%E3%80%90%E7%AD%86%E8%A8%98%E3%80%91IIS_APK%E6%AA%94%E6%A1%88%E7%84%A1%E6%B3%95%E4%B8%8B%E8%BC%89/</url>
      
        <content type="html"><![CDATA[<h2 id="紀錄目的"><a href="#紀錄目的" class="headerlink" title="紀錄目的"></a>紀錄目的</h2><p>若遇到APK檔案無法下載時候，先確認IIS中的MIME是否有設定。<br><img src="/img/Note/IIS/bg_2_0.png"></p><h2 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h2><p>按下新增按鈕後，打下方提供的字輸入在MIME類型中，記得副檔名要打.apk 才會生效。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">application/vnd.android.package-archive</span><br></pre></td></tr></table></figure><p><img src="/img/Note/IIS/2_1.png"></p><h2 id="備註"><a href="#備註" class="headerlink" title="備註"></a>備註</h2><p>網際網路媒體型別(Internet media type)</p><p>原名叫“Type MIME”或“MIME”或在頭資訊中各種協議之後的內容種類(Content-type),他有兩部分用來在Internet上鑑別資料格式。<br>一個Type MIME至少包括兩個部分:一個型別和一個子型別和一個或多個其他需要的引數。<br>引數要求一個Uri 和一個網際網路媒體型別,返回一個Intent物件。通過setDataAndType  就可以實現更新,下載,開啟新應用等功能。<br>P.S. APK 檔案基於 ZIP 檔案格式，它與JAR檔案的構造方式相似。它的網際網路媒體類型是：application&#x2F;vnd.android.package-archive</p>]]></content>
      
      
      <categories>
          
          <category> 筆記 </category>
          
          <category> 生活雜記 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Git】- 比較前後差異(二) diff2html 產生UI差異報告</title>
      <link href="/2023/04/26/DevOps/Git/Git_02_%E6%AF%94%E8%BC%83%E5%89%8D%E5%BE%8C%E5%B7%AE%E7%95%B0(%E4%BA%8C)%20diff2html%20%E7%94%A2%E7%94%9FUI%E5%B7%AE%E7%95%B0%E5%A0%B1%E5%91%8A/"/>
      <url>/2023/04/26/DevOps/Git/Git_02_%E6%AF%94%E8%BC%83%E5%89%8D%E5%BE%8C%E5%B7%AE%E7%95%B0(%E4%BA%8C)%20diff2html%20%E7%94%A2%E7%94%9FUI%E5%B7%AE%E7%95%B0%E5%A0%B1%E5%91%8A/</url>
      
        <content type="html"><![CDATA[<h2 id="diff2html"><a href="#diff2html" class="headerlink" title="diff2html"></a>diff2html</h2><p>Git 是現今程式開發中不可或缺的工具之一，它讓我們可以輕鬆地追蹤程式碼的變更並且進行版本控制。不過遇到需要產出與前一版本的差異給其他人看，因此我使用這個套件。這邊我們使用cli 方便用指令與commit 之間去做比較。</p><p>官方網址 : <a href="https://diff2html.xyz/">https://diff2html.xyz/</a><br><img src="/image/20230426_22-59-09.png"></p><h2 id="前置作業"><a href="#前置作業" class="headerlink" title="前置作業"></a>前置作業</h2><p>必須先有 Node.js 才能進行下列順序。</p><ol><li>安裝diff2html : <code>npm install -g diff2html-cli</code></li><li>確認 diff2html 可以使用 : <code>diff2html -v</code></li></ol><p>如果不能正常使用，主要原因exe 沒有憑證，會被系統擋住不可以使用，解決方式如下 :</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Set-ExecutionPolicy</span> RemoteSigned</span><br></pre></td></tr></table></figure><p>&#96;<br>官方網址 : <a href="https://learn.microsoft.com/zh-tw/powershell/module/microsoft.powershell.core/about/about_execution_policies?view=powershell-7.3">https://learn.microsoft.com/zh-tw/powershell/module/microsoft.powershell.core/about/about_execution_policies?view&#x3D;powershell-7.3</a></p><h2 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h2><p>Github : <a href="https://github.com/rtfpessoa/diff2html-cli">https://github.com/rtfpessoa/diff2html-cli</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">diff2html [ flags and/or options ] -- [git diff passthrough flags and options]</span><br></pre></td></tr></table></figure><p>上面指令意思是 – 後面是跟git diff 指令相同，只需要 commid 或是檔名資類即可使用，但是測試後來發現 PowerShell 指令遇到 – 會造成執行失效，所以我改用 git bash 暫時解決現行狀況。</p><p>設定裡面參數可以先看github 教學文件，會有更詳細內容。官方提供格式讓你擇一去呈現畫面。<br>diff2html : <a href="https://diff2html.xyz/demo.html">https://diff2html.xyz/demo.html</a></p><h2 id="使用-sh-懶人包"><a href="#使用-sh-懶人包" class="headerlink" title="使用 .sh 懶人包"></a>使用 .sh 懶人包</h2><p>以下指令需要使用.sh 副檔名，裡面內容主要是用來呈現時間、commit id 比較的id 來使用。原則上 – 之後的指令是如同 git diff 效果，可以使用資料夾比較。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">!/bin/bash</span><br><span class="line"></span><br><span class="line"><span class="comment"># Prompt for the newest commit ID</span></span><br><span class="line"><span class="built_in">read</span> -p <span class="string">&quot;Enter the newest commit ID: &quot;</span> new_commit</span><br><span class="line"></span><br><span class="line"><span class="comment"># # Prompt for the oldest commit ID</span></span><br><span class="line"><span class="built_in">read</span> -p <span class="string">&quot;Enter the oldest commit ID: &quot;</span> old_commit</span><br><span class="line"></span><br><span class="line"><span class="comment"># Get the current timestamp</span></span><br><span class="line">timestamp=$(<span class="built_in">date</span> +%Y%m%d_%H%M%S)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Generate the output file name</span></span><br><span class="line">output_file=<span class="string">&quot;<span class="variable">$&#123;timestamp&#125;</span>_diff_report.html&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Generate the report title</span></span><br><span class="line">report_title=<span class="string">&quot;Diff_Report: <span class="variable">$&#123;old_commit:0:7&#125;</span>..<span class="variable">$&#123;new_commit:0:7&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Run the diff2html command and generate the report</span></span><br><span class="line">diff2html -s side -t <span class="string">&quot;<span class="variable">$report_title</span>&quot;</span> -F <span class="string">&quot;<span class="variable">$output_file</span>&quot;</span> -- <span class="string">&quot;<span class="variable">$old_commit</span>&quot;</span> <span class="string">&quot;<span class="variable">$new_commit</span>&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> DevOps </category>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Azure】Confidential 費用</title>
      <link href="/2023/04/05/DevOps/Azure/Azure%20WebApp%20Config%20%E8%B2%BB%E7%94%A8/"/>
      <url>/2023/04/05/DevOps/Azure/Azure%20WebApp%20Config%20%E8%B2%BB%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="Confidential-Ledgers"><a href="#Confidential-Ledgers" class="headerlink" title="Confidential Ledgers"></a>Confidential Ledgers</h2><p>近期為了要研究 Azure 設定檔如何使用不斷嘗試，Confidential Ledgers 是透過而外機密總帳是一種分佈式帳本技術（DLT）可以加入Web Application 當中，目前下圖頁面是創建一個 Confidential Ledgers 底下會有多個 Configuration 進行使用。</p><h2 id="總結費用"><a href="#總結費用" class="headerlink" title="總結費用"></a>總結費用</h2><p>下圖是我在3月份進行測試時的價錢，費用相當高如果不是試用版 一個月就是5000左右 😥😥。<br><img src="/image/20230405_11-51-23.png"></p><p>第一次創建價格多少，從下圖可以看到 505.76 相當合理 (裡面有包含DB創建費用)，往下看可以看到平均一天要付287~271元算是一天三餐吃90元左右的便當，一般小資族無法承受的金額🤮。<br><img src="/image/20230405_11-53-45.png"></p><h2 id="持續扣錢"><a href="#持續扣錢" class="headerlink" title="持續扣錢 ?!"></a>持續扣錢 ?!</h2><p>Configuration Groups 已經完全刪除，但是還是持續扣費用。主要原因為 Confidential Ledgers 會扣除使用費用，即使沒有使用一樣會扣除相關費用，累加上去非常可怕。<br><img src="/image/20230405_11-59-17.png"></p><h2 id="只開啟-DataBase-功能"><a href="#只開啟-DataBase-功能" class="headerlink" title="只開啟 DataBase 功能"></a>只開啟 DataBase 功能</h2><p>目前使用 DB 功能，除非大量呼叫、壓力測試才有機會把流量、費用增大，原則上單一測試只需要 2~6元左右，相當便宜許多，Web Application 最大特赦是可以放置 10個免費專案項目，所以只需要付DB費用相當於電費加維護費用價格。<br> <img src="/image/20230405_12-23-18.png"></p>]]></content>
      
      
      <categories>
          
          <category> 雲端平台 </category>
          
          <category> Azure </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Azure </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Azure】Web Application 設定方式</title>
      <link href="/2023/04/05/DevOps/Azure/Azure%20WebApp%20Config%20%E8%A8%AD%E5%AE%9A%E6%96%B9%E5%BC%8F/"/>
      <url>/2023/04/05/DevOps/Azure/Azure%20WebApp%20Config%20%E8%A8%AD%E5%AE%9A%E6%96%B9%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h2><p>可以使用 <a href="https://www.nuget.org/packages/StartFMS.Extensions.Configuration">StartFMS.Extensions.Configuration</a>進行開發</p><h2 id="使用概念"><a href="#使用概念" class="headerlink" title="使用概念"></a>使用概念</h2><p>開始前，先釐清 json 呼叫方式。以下為 appsetting.json 並示範如何呼叫下方內容</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;Line&quot;</span> <span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;LineToken&quot;</span> <span class="punctuation">:</span><span class="string">&quot;&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;Setting&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>使用方式很簡單，只需要知道上層下層關係即可，例如 需要取得 <code>LineToken</code> 對應是 <code>Line:LineToken</code>，若只有單層只需要 “Setting” 就可以舉得到值。</p><h2 id="應用程式設定"><a href="#應用程式設定" class="headerlink" title="應用程式設定"></a>應用程式設定</h2><p>位於 【Web 應用程式】&gt; 【組態】專案進行設定即可，使用方式需要用 Json 命名如下圖。<br><img src="/image/20230405_12-49-29.png"></p><p>如何在 C# 舉得到 Azure 參數，其實是透過 <code>AddEnvironmentVariables()</code>這個來取得，預設它會自動帶入 <code>EnvironmentVariables</code> 所以無需要特別針對 <code>AddAzureAppConfiguration</code>進行設定。</p><h2 id="連接字串"><a href="#連接字串" class="headerlink" title="連接字串"></a>連接字串</h2><p>連線字串與上面不同使用方式，呼叫方式則是用 <code>GetConnectionString()</code>取得連線字串與DB連線。</p><h2 id="StartFMS-Extensions-Configuration-作法"><a href="#StartFMS-Extensions-Configuration-作法" class="headerlink" title="StartFMS.Extensions.Configuration 作法"></a>StartFMS.Extensions.Configuration 作法</h2><p>如果是用這擴充套件使用方式如下範例，如同 Azure 參數設定一樣很簡單。</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> config = Config.GetConfiguration(); <span class="comment">//加入設定檔</span></span><br><span class="line"><span class="keyword">var</span>  ChannelToken = config.GetValue&lt;<span class="built_in">string</span>&gt;(<span class="string">&quot;Line:Bots:channelToken&quot;</span>);</span><br><span class="line"><span class="keyword">var</span>  AdminUserID = config.GetValue&lt;<span class="built_in">string</span>&gt;(<span class="string">&quot;Line:Bots:adminUserID&quot;</span>);</span><br></pre></td></tr></table></figure><p>目前有以下Function可以使用</p><ol><li>GetConnectionString(string name)</li><li>GetAzureConfiguration(string connectionString)</li><li>GetConfiguration()</li><li>GetConfiguration(string path)</li><li>GetAzureConfiguration<T>()</li><li>GetAzureConfiguration<T>(string path)</li></ol><p>GetAzureConfiguration(string connectionString) 主要是給 Azure Configuration 使用，記得把連線字串加入上去即可。</p>]]></content>
      
      
      <categories>
          
          <category> 雲端平台 </category>
          
          <category> Azure </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Azure </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【筆記】出現警告「找不到該資料夾路徑」，文件內容都是顯示0KB，無論如何無法刪除</title>
      <link href="/2023/04/02/%E7%AD%86%E8%A8%98%E8%88%87%E7%94%9F%E6%B4%BB%E9%9B%9C%E8%A8%98/%E6%8A%80%E8%A1%93/%E3%80%90%E7%AD%86%E8%A8%98%E3%80%91%E5%87%BA%E7%8F%BE%E8%AD%A6%E5%91%8A%E3%80%8C%E6%89%BE%E4%B8%8D%E5%88%B0%E8%A9%B2%E8%B3%87%E6%96%99%E5%A4%BE%E8%B7%AF%E5%BE%91%E3%80%8D%EF%BC%8C%E7%9C%8B%E6%96%87%E4%BB%B6%E5%85%A7%E5%AE%B9%E9%83%BD%E6%98%AF%E9%A1%AF%E7%A4%BA0KB%EF%BC%8C%E7%84%A1%E8%AB%96%E5%A6%82%E4%BD%95%E7%84%A1%E6%B3%95%E5%88%AA%E9%99%A4/"/>
      <url>/2023/04/02/%E7%AD%86%E8%A8%98%E8%88%87%E7%94%9F%E6%B4%BB%E9%9B%9C%E8%A8%98/%E6%8A%80%E8%A1%93/%E3%80%90%E7%AD%86%E8%A8%98%E3%80%91%E5%87%BA%E7%8F%BE%E8%AD%A6%E5%91%8A%E3%80%8C%E6%89%BE%E4%B8%8D%E5%88%B0%E8%A9%B2%E8%B3%87%E6%96%99%E5%A4%BE%E8%B7%AF%E5%BE%91%E3%80%8D%EF%BC%8C%E7%9C%8B%E6%96%87%E4%BB%B6%E5%85%A7%E5%AE%B9%E9%83%BD%E6%98%AF%E9%A1%AF%E7%A4%BA0KB%EF%BC%8C%E7%84%A1%E8%AB%96%E5%A6%82%E4%BD%95%E7%84%A1%E6%B3%95%E5%88%AA%E9%99%A4/</url>
      
        <content type="html"><![CDATA[<h2 id="問題"><a href="#問題" class="headerlink" title="問題"></a>問題</h2><p>“引用3C硬炫風強尼圖片”<br><img src="/image/20230402_19-54-58.png"></p><p>遇到問題是 永久刪除、重新開機、系統管理刪除等無法正常刪除，需要用以下作法有機會解決。</p><h2 id="解決方式"><a href="#解決方式" class="headerlink" title="解決方式"></a>解決方式</h2><ol><li>創建 “文件文件.txt”</li><li>內容輸入<figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">DEL</span> /F /A /Q \\?\%<span class="number">1</span></span><br><span class="line"><span class="built_in">RD</span> /S /Q \\?\%<span class="number">1</span></span><br></pre></td></tr></table></figure></li><li>另存新檔為 “刪除工具.bat”</li><li>將要刪除的檔案拖曳到”刪除工具.bat”</li></ol><p>相關文件 : <a href="https://www.e-show.tw/module/pageinfo/3.html">https://www.e-show.tw/module/pageinfo/3.html</a></p>]]></content>
      
      
      <categories>
          
          <category> 筆記 </category>
          
          <category> 生活雜記 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用 Github Action (一) - CI/CD</title>
      <link href="/2023/04/01/DevOps/Github/%E4%BD%BF%E7%94%A8%20Github%20Action%20(%E4%B8%80)%20-%20CICD/"/>
      <url>/2023/04/01/DevOps/Github/%E4%BD%BF%E7%94%A8%20Github%20Action%20(%E4%B8%80)%20-%20CICD/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>CI&#x2F;CD 之前很多人提倡的架構，近期努力學習之前新技術。企業、工作上面都可以發現DevOps工程師，DevOps 也是會用到CI&#x2F;CD功能。這篇用簡單方式使用 Github Actions，若是剛學習的人可以參考使用方式。</p><h1 id="Github-Actions"><a href="#Github-Actions" class="headerlink" title="Github Actions"></a>Github Actions</h1><p>Github提供的CI工具是2019年上架，之前Github通常與Jenkins、Gitlab 配合 CI&#x2F;CD ，直到2019年後Github Actions可簡易製作CI&#x2F;CD。</p><h2 id="1-創建Github-Action-檔案"><a href="#1-創建Github-Action-檔案" class="headerlink" title="1. 創建Github Action 檔案"></a>1. 創建Github Action 檔案</h2><p>進入Github 選擇 repository，按下[Action] 創建Workflows。<br><img src="/img/GitHub/action/01.png"><br>自訂自己的 Workflow ，可以點選圖片中的選項。<br><img src="/img/GitHub/action/02.png"></p><p>回到選單，可以看到repository內，已經存放workflows，副檔名為[yml]。<br><img src="/img/GitHub/action/03.png"></p><h2 id="2-設定-CI-配置"><a href="#2-設定-CI-配置" class="headerlink" title="2. 設定 CI 配置"></a>2. 設定 CI 配置</h2><p>下方是本篇設定方式，可以依據自己想要的順序調整。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">.NET</span></span><br><span class="line"></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">branches:</span> [ <span class="string">DEV</span> ]</span><br><span class="line">  <span class="attr">pull_request:</span></span><br><span class="line">    <span class="attr">branches:</span> [ <span class="string">DEV</span> ]</span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">build:</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Setup</span> <span class="string">.NET</span></span><br><span class="line">      <span class="attr">uses:</span> <span class="string">actions/setup-dotnet@v1</span></span><br><span class="line">      <span class="attr">with:</span></span><br><span class="line">        <span class="attr">dotnet-version:</span> <span class="number">5.0</span><span class="string">.x</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Restore</span> <span class="string">NuGet</span> <span class="string">Packages</span></span><br><span class="line">      <span class="attr">run:</span> <span class="string">nuget</span> <span class="string">restore</span> <span class="string">./MVC_CI_Demo/MVC_CI_Demo.sln</span> </span><br><span class="line">        </span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Build</span> <span class="string">Project</span></span><br><span class="line">      <span class="attr">run:</span> <span class="string">dotnet</span> <span class="string">build</span> <span class="string">./MVC_CI_Demo/MVC_CI_Demo.sln</span>       </span><br><span class="line">      </span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">UnitTest</span> <span class="string">Project</span></span><br><span class="line">      <span class="attr">run:</span> <span class="string">dotnet</span> <span class="string">test</span> <span class="string">./MVC_CI_Demo/MVC_CI_Demo.sln</span>   </span><br></pre></td></tr></table></figure><div class="note info flat"><p>說明 :</p><ol><li>(第1行) name : 設定Workflows名稱，如果run在Actions可以看得出來要使用哪種檔案。</li><li>(第3行) on : 設定狀態，範例用push、pull_request觸發時，會啟動workflows，但是要記得填寫相對應的branch。</li><li>(第9行) jobs : 執行工作(作業)，當中一定要設定到<code>runs-on</code>，actions有提供 windows 、liunx 、MacOS自行參閱官方網文件。</li><li>(第14行) step : 請自行依規劃順序執行(本文為.Net Core 開啟)。</li></ol></div><p>這邊不一樣的是<code>Restore NuGet Packages</code> 用.sln安裝，這點請大家留意。</p><p>設定完成後，就可以Commit 上去。下方圖為執行成功的畫面，點選方式請到Actions頁面點選。</p><p><img src="/img/GitHub/action/04.png"></p><hr><h1 id="IIS-Deploy"><a href="#IIS-Deploy" class="headerlink" title="IIS Deploy"></a>IIS Deploy</h1><p>本篇使用CD方式為以下文章參考。參考文件 : [ <a href="https://ithelp.ithome.com.tw/articles/10266050">https://ithelp.ithome.com.tw/articles/10266050</a> ]</p><p>CI部分設定方式都可以快速理解，從 code -&gt; bulid -&gt; Test，workflows 可以簡單創建完畢。使用指令部分會遇到需要使用系統管理員身分或是系統管理員帳號。安裝方式按照下方指令輸入即可。<br><img src="/img/GitHub/action/06.png"></p><div class="note info flat"><p>備註 : </p><ol><li>執行前，請確認command 、powershell 是否使用 系統管理員身分執行。</li><li>上圖runs-on:<code>self-hosted</code> 是待會要設定的workflows。</li></ol></div><p>執行完畢後，可以到Runners上可以看到 PC 名稱，表示安裝成功。</p><h2 id="設定runners"><a href="#設定runners" class="headerlink" title="設定runners"></a>設定runners</h2><p>設定位置為Reopitory -&gt; settings -&gt; Actions -&gt; Runners -&gt; New self-hosted runner。<br>按照執行部屬的主機OS為主，此範例為Windows x64。<br><img src="/img/GitHub/action/05.png"></p><h2 id="設定workflow"><a href="#設定workflow" class="headerlink" title="設定workflow"></a>設定workflow</h2><p>注意: 如果不要對上方功能有衝突問題，可以再新增一個workflow。<br>大概簡述下方執行內容 : </p><ol><li>使用Actions 提供的ubuntu-latest環境執行。</li><li>將專案發布指定位置存放。</li><li>將發布完畢的檔案，上傳到actions並指定名稱。</li><li>使用指定的主機環境。</li><li>下載指定名稱的檔案。</li><li>存放在iis 指定路徑。</li></ol><p>原則上，執行完畢後會成功執行，但會遇到權限上的問題，必須要留意。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span>  <span class="string">Build</span> <span class="string">and</span> <span class="string">deploy</span> <span class="string">ASP.Net</span> <span class="string">Core</span> <span class="string">app</span> <span class="string">to</span> <span class="string">IIS</span> <span class="bullet">-</span> <span class="string">GitHubDemo</span></span><br><span class="line"></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">branches:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">main</span></span><br><span class="line">  <span class="attr">workflow_dispatch:</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">build:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Setup</span> <span class="string">.NET</span></span><br><span class="line">      <span class="attr">uses:</span> <span class="string">actions/setup-dotnet@v1</span></span><br><span class="line">      <span class="attr">with:</span></span><br><span class="line">        <span class="attr">dotnet-version:</span> <span class="number">5.0</span><span class="string">.x</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">dotnet</span> <span class="string">publish</span></span><br><span class="line">      <span class="attr">run:</span> <span class="string">dotnet</span> <span class="string">publish</span> <span class="string">./MVC_CI_Demo/MVC_CI_Demo.sln</span> <span class="string">-c</span> <span class="string">Release</span> <span class="string">-o</span> <span class="string">$&#123;&#123;env.DOTNET_ROOT&#125;&#125;/demo</span></span><br><span class="line">  </span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Upload</span> <span class="string">artifact</span> <span class="string">for</span> <span class="string">deployment</span> <span class="string">job</span></span><br><span class="line">      <span class="attr">uses:</span> <span class="string">actions/upload-artifact@v2</span></span><br><span class="line">      <span class="attr">with:</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">.net-app</span></span><br><span class="line">        <span class="attr">path:</span> <span class="string">$&#123;&#123;env.DOTNET_ROOT&#125;&#125;/demo</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">deploy:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">self-hosted</span></span><br><span class="line">    <span class="attr">needs:</span> <span class="string">build</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Download</span> <span class="string">artifact</span> <span class="string">from</span> <span class="string">build</span> <span class="string">job</span></span><br><span class="line">      <span class="attr">uses:</span> <span class="string">actions/download-artifact@v2</span></span><br><span class="line">      <span class="attr">with:</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">.net-app</span></span><br><span class="line">        <span class="attr">path:</span> <span class="string">D:/GitHub_Action/dotnetcore-webapp</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Deploy</span> <span class="string">to</span> <span class="string">IIS</span></span><br><span class="line">      <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">        iisreset /stop</span></span><br><span class="line"><span class="string">        Copy-Item D:\GitHub_Action\dotnetcore-webapp C:/inetpub -Recurse -Force</span></span><br><span class="line"><span class="string">        iisreset /start</span></span><br></pre></td></tr></table></figure><h2 id="選擇性-開啟-administrator"><a href="#選擇性-開啟-administrator" class="headerlink" title="(選擇性)開啟 administrator"></a>(選擇性)開啟 administrator</h2><p>如果你遇到權限問題可以參考以下步驟。</p><ol><li><p>在”我的電腦”按右鍵”，進入“管理-系統工具-本機使用者和群組-administrator”<br><img src="/img/GitHub/action/07.png"></p></li><li><p>找到administrator，按右鍵內容，把 “帳戶已停用”前面的勾去掉。<br><img src="/img/GitHub/action/08.png"></p></li><li><p>重新開機看看是否有出現 administrator 系統管理員用戶選項若無則以其他使用者登入後</p></li><li><p>左下方-&gt;開始-&gt;附屬應用程式-&gt;命令提示字元</p></li><li><p>按滑鼠右鍵，選擇 以系統管理員身分執行</p></li><li><p>輸入 net user administrator &#x2F;active:yes</p></li><li><p>按下Enter鍵執行</p></li><li><p>重新開機</p></li></ol><p>完成後，直接重新Re-run all jobs即可。<br><img src="/img/GitHub/action/09.png"></p><hr><h2 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h2><p>執行 command 部分麻煩點，重啟iis需要用到 administrator身分，這部分網路上沒有詳細的說明，執行過程中可以得知主機環境會直接影響run.cmd的執行效果，也就是command (&#x2F;windows&#x2F;system32&#x2F;)部分。 </p><h2 id="參考文件"><a href="#參考文件" class="headerlink" title="參考文件"></a>參考文件</h2><ol><li>[<a href="https://caiomsouza.medium.com/fix-for-powershell-script-not-digitally-signed-69f0ed518715]">https://caiomsouza.medium.com/fix-for-powershell-script-not-digitally-signed-69f0ed518715]</a></li><li>[<a href="https://social.technet.microsoft.com/Forums/zh-TW/956f9d90-bdf1-4fbc-ac76-a77602c0084a/win10209862969438656352013666420837319953211331649297022172923494?forum=win10itprogeneralTW%5D">https://social.technet.microsoft.com/Forums/zh-TW/956f9d90-bdf1-4fbc-ac76-a77602c0084a/win10209862969438656352013666420837319953211331649297022172923494?forum=win10itprogeneralTW]</a></li><li>[<a href="https://ithelp.ithome.com.tw/articles/10266050]">https://ithelp.ithome.com.tw/articles/10266050]</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> DevOps </category>
          
          <category> Github </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Github Action </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用 Github Action (三) - 自動發行至指定 repository</title>
      <link href="/2023/04/01/DevOps/Github/%E4%BD%BF%E7%94%A8%20Github%20Action%20(%E4%B8%89)%20-%20%E8%87%AA%E5%8B%95%E7%99%BC%E8%A1%8C%E8%87%B3%E6%8C%87%E5%AE%9A%20repository/"/>
      <url>/2023/04/01/DevOps/Github/%E4%BD%BF%E7%94%A8%20Github%20Action%20(%E4%B8%89)%20-%20%E8%87%AA%E5%8B%95%E7%99%BC%E8%A1%8C%E8%87%B3%E6%8C%87%E5%AE%9A%20repository/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>近期希望可以有不同的 Server 可以去 clone 相對應的 repository 找很多使用方式，這邊使用 git 方式偏向新手使用方式，歡迎各位可以用自己方式使用 github actions。這邊使用asp.net mvc framework 4.7.3 舊型專案，經歷這連假三天不斷測試、實驗，終於成功執行相當感動，也慢慢提升一些git command 使用方式。</p><h1 id="一、-Github-Actions-操作方式"><a href="#一、-Github-Actions-操作方式" class="headerlink" title="一、 Github Actions 操作方式"></a>一、 Github Actions 操作方式</h1><h2 id="✔前置作業"><a href="#✔前置作業" class="headerlink" title="✔前置作業"></a>✔前置作業</h2><p>這邊我們先建立 兩個環境。</p><ol><li>專案 : ASP.net MVC </li><li>發行 : 存放 Deploy 位置</li></ol><h2 id="✔製作流程"><a href="#✔製作流程" class="headerlink" title="✔製作流程"></a>✔製作流程</h2><ol><li>創建 token key - 請點選: <a href="https://jontcont.github.io/2022/03/21/Github_UseToken/">參考章節</a></li><li>設定 repository secrets  - for 專案 repository</li><li>創建 workflows - 請點選: <a href="https://jontcont.github.io/2022/03/13/GithubActions(1)/">參考章節</a><br>介於設定 workflows 內容有摻雜很多語法、指令，本篇會用簡述方式帶過。</li></ol><h1 id="二、開始操作"><a href="#二、開始操作" class="headerlink" title="二、開始操作"></a>二、開始操作</h1><h2 id="1-創建-token-key"><a href="#1-創建-token-key" class="headerlink" title="1. 創建 token key"></a>1. 創建 token key</h2><p>創造目的是為了可以取得repository權限，如果有時間長短設定就請使用者自行評估。</p><h2 id="2-設定-repository-secrets"><a href="#2-設定-repository-secrets" class="headerlink" title="2. 設定 repository secrets"></a>2. 設定 repository secrets</h2><p>設定secrets 需要到 repository &gt; settings &gt; secrets &gt; Action<br>name : 輸入可識別的名稱 ,ex : commit_secret<br>value : token key<br><img src="/img/GitHub/action/3-1.jpg"><br><img src="/img/GitHub/action/3-2.jpg"><br><img src="/img/GitHub/action/3-3.jpg"></p><h2 id="3-創建-workflows"><a href="#3-創建-workflows" class="headerlink" title="3. 創建 workflows"></a>3. 創建 workflows</h2><p>這邊我直接奉上設定檔，如果讀者想要創建方式可以參考上一篇。 下方設定逐一說明。</p><h3 id="3-1-設定環境"><a href="#3-1-設定環境" class="headerlink" title="3-1. 設定環境"></a>3-1. 設定環境</h3><p>環境 mvc framework 4.7.3  環境一定要設定 windows ，如果需要linux環境請自行爬文。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">build:</span></span><br><span class="line">    <span class="comment"># for asp.net mvc msbuild 專用</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">windows-latest</span></span><br><span class="line">  <span class="attr">step:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br></pre></td></tr></table></figure><h3 id="3-2-新增參數"><a href="#3-2-新增參數" class="headerlink" title="3-2. 新增參數"></a>3-2. 新增參數</h3><p>如果想要隨時改參數設定，可以使用env 後續再介紹如何使用env。理論上，上面參數是待會一定會用到的參數，設定上先知道 publish 路徑位置以及sln後，再填入workflows當中。<br>USER_NAME、USER_EMAIL的參數並非是亂填，本案例是為了不要洩漏我的信箱、名稱才這樣創建，優點是查詢時候就可以區別commit角色。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">build:</span></span><br><span class="line">    <span class="comment"># for asp.net mvc msbuild 專用</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">windows-latest</span></span><br><span class="line">    <span class="attr">env:</span></span><br><span class="line">      <span class="attr">MY_SECRET   :</span> <span class="string">$&#123;&#123;secrets.commit_secret&#125;&#125;</span></span><br><span class="line">      <span class="attr">USER_NAME   :</span> <span class="string">github-actions[bot]</span></span><br><span class="line">      <span class="attr">USER_EMAIL  :</span> <span class="number">41898282</span><span class="string">+github-actions[bot]@users.noreply.github.com</span></span><br><span class="line">      <span class="attr">PUBLISH_DIR :</span> <span class="string">./dotnetMVC/dotnetMVC/bin/publish</span></span><br><span class="line">      <span class="attr">PRJ_SLN     :</span> <span class="string">./dotnetMVC/dotnetMVC.sln</span></span><br><span class="line">  <span class="attr">step:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br></pre></td></tr></table></figure><div class="note info flat"><h3 id="GithubAction-Bot"><a href="#GithubAction-Bot" class="headerlink" title="GithubAction Bot"></a>GithubAction Bot</h3><p>官方網有提供Bots 信箱、名稱，在論壇上也能查得到。<br>使用方式 :</p><ul><li>取得 GithubAction bot Url : <a href="https://api.github.com/users/github-actions%5Bbot%5D">https://api.github.com/users/github-actions%5Bbot%5D</a></li><li>name &#x3D; 可以任意更改，這邊我則是用 <code>[  github-actions[bot] ]</code></li><li>email &#x3D; 格式為 <code>id +github-actions[bot]@users.noreply.github.com</code>，如果看到api出來的id值為41898282 就是這樣輸入 <code>41898282+github-actions[bot]@users.noreply.github.com</code></li></ul><p>參考文件 : <a href="https://github.community/t/github-actions-bot-email-address/17204/4">https://github.community/t/github-actions-bot-email-address/17204/4</a></p></div><h3 id="3-3-新增流程順序"><a href="#3-3-新增流程順序" class="headerlink" title="3-3. 新增流程順序"></a>3-3. 新增流程順序</h3><p>這邊輸入完畢之後，就是從 action -&gt; bulid 這時需要加入git 元素。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">build:</span></span><br><span class="line">    <span class="comment"># for asp.net mvc msbuild 專用</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">windows-latest</span></span><br><span class="line">    <span class="attr">env:</span></span><br><span class="line">      <span class="attr">MY_SECRET   :</span> <span class="string">$&#123;&#123;secrets.commit_secret&#125;&#125;</span></span><br><span class="line">      <span class="attr">USER_NAME   :</span> <span class="string">github-actions[bot]</span></span><br><span class="line">      <span class="attr">USER_EMAIL  :</span> <span class="number">41898282</span><span class="string">+github-actions[bot]@users.noreply.github.com</span></span><br><span class="line">      <span class="attr">PUBLISH_DIR :</span> <span class="string">./dotnetMVC/dotnetMVC/bin/publish</span></span><br><span class="line">      <span class="attr">PRJ_SLN     :</span> <span class="string">./dotnetMVC/dotnetMVC.sln</span></span><br><span class="line">          </span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line">      </span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">setup-msbuild</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">microsoft/setup-msbuild@v1.1</span></span><br><span class="line">      </span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Setup</span> <span class="string">NuGet.exe</span> <span class="string">for</span> <span class="string">use</span> <span class="string">with</span> <span class="string">actions</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">NuGet/setup-nuget@v1.0.5</span></span><br><span class="line">      </span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Restore</span> <span class="string">NuGet</span> <span class="string">Packages</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">nuget</span> <span class="string">restore</span> <span class="string">$&#123;&#123;env.PRJ_SLN&#125;&#125;</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Build</span> <span class="string">and</span> <span class="string">Publish</span> <span class="string">Web</span> <span class="string">App</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">msbuild</span> <span class="string">$&#123;&#123;env.PRJ_SLN&#125;&#125;</span> <span class="string">/p:Configuration=Release</span> <span class="string">/p:DeployOnBuild=true</span> <span class="string">/p:PublishProfile=FolderProfile</span></span><br></pre></td></tr></table></figure><p>下方用git 方式取得。說明一下使用順序。</p><ol><li>創建publish (原因是專案裡面是沒有那個資料夾)</li><li>初始git 環境，並加入 遠端repository 環境</li><li>設定角色後，自動pull一次資料</li><li>Build之後，在commits 、push上去。</li></ol><p>這邊流程比較單純不會複雜，原本有考慮使用 push –force 但我還是堅持要使用有正常的commits 流程，因此有pull載入時間。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">steps:</span></span><br><span class="line">     <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line">     </span><br><span class="line">     <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">setup-msbuild</span></span><br><span class="line">       <span class="attr">uses:</span> <span class="string">microsoft/setup-msbuild@v1.1</span></span><br><span class="line">     </span><br><span class="line">     <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Setup</span> <span class="string">NuGet.exe</span> <span class="string">for</span> <span class="string">use</span> <span class="string">with</span> <span class="string">actions</span></span><br><span class="line">       <span class="attr">uses:</span> <span class="string">NuGet/setup-nuget@v1.0.5</span></span><br><span class="line">     </span><br><span class="line">     <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Restore</span> <span class="string">NuGet</span> <span class="string">Packages</span></span><br><span class="line">       <span class="attr">run:</span> <span class="string">nuget</span> <span class="string">restore</span> <span class="string">$&#123;&#123;env.PRJ_SLN&#125;&#125;</span></span><br><span class="line">     </span><br><span class="line">     <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">git</span> <span class="string">pull</span> <span class="string">repository</span> </span><br><span class="line">       <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">         echo &quot;--- create dir. and move dir. path ---&quot;</span></span><br><span class="line"><span class="string">         mkdir $&#123;&#123;env.PUBLISH_DIR&#125;&#125;</span></span><br><span class="line"><span class="string">         cd $&#123;&#123;env.PUBLISH_DIR&#125;&#125;</span></span><br><span class="line"><span class="string"></span>         </span><br><span class="line">         <span class="string">echo</span> <span class="string">&quot;--- init dir. and add remote repository ---&quot;</span></span><br><span class="line">         <span class="string">git</span> <span class="string">init</span></span><br><span class="line">         <span class="string">git</span> <span class="string">remote</span> <span class="string">add</span> <span class="string">deploy</span> <span class="string">$&#123;&#123;env.PUBLISH_URL&#125;&#125;</span></span><br><span class="line">         <span class="string">git</span> <span class="string">checkout</span> <span class="string">-b</span> <span class="string">master</span></span><br><span class="line">         </span><br><span class="line">         <span class="string">echo</span> <span class="string">&quot;--- set config  ---&quot;</span></span><br><span class="line">         <span class="string">git</span> <span class="string">config</span> <span class="string">--global</span> <span class="string">user.name</span>  <span class="string">&quot;$<span class="template-variable">&#123;&#123;env.USER_NAME&#125;&#125;</span>&quot;</span></span><br><span class="line">         <span class="string">git</span> <span class="string">config</span> <span class="string">--global</span> <span class="string">user.email</span> <span class="string">&quot;$<span class="template-variable">&#123;&#123;env.USER_EMAIL&#125;&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line">         <span class="string">echo</span> <span class="string">============</span> <span class="string">&quot; pull &quot;</span> <span class="string">================</span></span><br><span class="line">         <span class="string">git</span> <span class="string">pull</span> <span class="string">deploy</span> <span class="string">master</span> <span class="string">--rebase</span></span><br><span class="line">         </span><br><span class="line">     <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Build</span> <span class="string">and</span> <span class="string">Publish</span> <span class="string">Web</span> <span class="string">App</span></span><br><span class="line">       <span class="attr">run:</span> <span class="string">msbuild</span> <span class="string">$&#123;&#123;env.PRJ_SLN&#125;&#125;</span> <span class="string">/p:Configuration=Release</span> <span class="string">/p:DeployOnBuild=true</span> <span class="string">/p:PublishProfile=FolderProfile</span></span><br><span class="line"></span><br><span class="line">     <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">git</span> <span class="string">push</span> <span class="string">publish</span> <span class="string">From</span> <span class="string">Repository</span></span><br><span class="line">       <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">         cd $&#123;&#123;env.PUBLISH_DIR&#125;&#125;</span></span><br><span class="line"><span class="string">                 </span></span><br><span class="line"><span class="string">         echo ============ &quot; config list &quot; ============</span></span><br><span class="line"><span class="string">         git config --list</span></span><br><span class="line"><span class="string"></span>     </span><br><span class="line">         <span class="string">echo</span> <span class="string">============</span> <span class="string">&quot;statut and content add &quot;</span> <span class="string">============</span></span><br><span class="line">         <span class="string">git</span> <span class="string">add</span> <span class="string">--all</span></span><br><span class="line">         <span class="string">git</span> <span class="string">status</span></span><br><span class="line">         </span><br><span class="line">         <span class="string">echo</span> <span class="string">============</span> <span class="string">&quot; check branch list&quot;</span> <span class="string">============</span></span><br><span class="line">         <span class="string">git</span> <span class="string">branch</span> <span class="string">-a</span></span><br><span class="line">         </span><br><span class="line">         <span class="string">echo</span> <span class="string">============</span> <span class="string">&quot; commit &quot;</span> <span class="string">=============</span></span><br><span class="line">         <span class="string">git</span> <span class="string">commit</span> <span class="string">-m</span> <span class="string">&quot;$<span class="template-variable">&#123;&#123;env.COMMIT_STR&#125;&#125;</span>&quot;</span></span><br><span class="line">         </span><br><span class="line">         <span class="string">echo</span> <span class="string">============</span> <span class="string">&quot; PUSH &quot;</span> <span class="string">==============</span></span><br><span class="line">         <span class="string">git</span> <span class="string">push</span> <span class="string">-u</span> <span class="string">deploy</span> </span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="完成品"><a href="#完成品" class="headerlink" title="完成品"></a>完成品</h2><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">build:</span></span><br><span class="line">    <span class="comment"># for asp.net mvc msbuild 專用</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">windows-latest</span></span><br><span class="line">    <span class="attr">env:</span></span><br><span class="line">        <span class="attr">MY_SECRET   :</span> <span class="string">$&#123;&#123;secrets.commit_secret&#125;&#125;</span></span><br><span class="line">        <span class="attr">USER_NAME   :</span> <span class="string">github-actions[bot]</span></span><br><span class="line">        <span class="attr">USER_EMAIL  :</span> <span class="number">41898282</span><span class="string">+github-actions[bot]@users.noreply.github.com</span></span><br><span class="line">        <span class="attr">PUBLISH_DIR :</span> <span class="string">./dotnetMVC/dotnetMVC/bin/publish</span></span><br><span class="line">        <span class="attr">PRJ_SLN     :</span> <span class="string">./dotnetMVC/dotnetMVC.sln</span></span><br><span class="line">        <span class="attr">COMMIT_STR  :</span> <span class="string">&quot;github-actions[bot] Update : $(Get-Date -Format \&quot;yyyy.MMdd.HHmm\&quot;)&quot;</span></span><br><span class="line">        </span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line">      </span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">setup-msbuild</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">microsoft/setup-msbuild@v1.1</span></span><br><span class="line">      </span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Setup</span> <span class="string">NuGet.exe</span> <span class="string">for</span> <span class="string">use</span> <span class="string">with</span> <span class="string">actions</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">NuGet/setup-nuget@v1.0.5</span></span><br><span class="line">      </span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Restore</span> <span class="string">NuGet</span> <span class="string">Packages</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">nuget</span> <span class="string">restore</span> <span class="string">$&#123;&#123;env.PRJ_SLN&#125;&#125;</span></span><br><span class="line">      </span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">git</span> <span class="string">pull</span> <span class="string">repository</span> </span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          echo &quot;--- create dir. and move dir. path ---&quot;</span></span><br><span class="line"><span class="string">          mkdir $&#123;&#123;env.PUBLISH_DIR&#125;&#125;</span></span><br><span class="line"><span class="string">          cd $&#123;&#123;env.PUBLISH_DIR&#125;&#125;</span></span><br><span class="line"><span class="string"></span>          </span><br><span class="line">          <span class="string">echo</span> <span class="string">&quot;--- init dir. and add remote repository ---&quot;</span></span><br><span class="line">          <span class="string">git</span> <span class="string">init</span></span><br><span class="line">          <span class="string">git</span> <span class="string">remote</span> <span class="string">add</span> <span class="string">deploy</span> <span class="string">$&#123;&#123;env.PUBLISH_URL&#125;&#125;</span></span><br><span class="line">          <span class="string">git</span> <span class="string">checkout</span> <span class="string">-b</span> <span class="string">master</span></span><br><span class="line">          </span><br><span class="line">          <span class="string">echo</span> <span class="string">&quot;--- set config  ---&quot;</span></span><br><span class="line">          <span class="string">git</span> <span class="string">config</span> <span class="string">--global</span> <span class="string">user.name</span>  <span class="string">&quot;$<span class="template-variable">&#123;&#123;env.USER_NAME&#125;&#125;</span>&quot;</span></span><br><span class="line">          <span class="string">git</span> <span class="string">config</span> <span class="string">--global</span> <span class="string">user.email</span> <span class="string">&quot;$<span class="template-variable">&#123;&#123;env.USER_EMAIL&#125;&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line">          <span class="string">echo</span> <span class="string">============</span> <span class="string">&quot; pull &quot;</span> <span class="string">================</span></span><br><span class="line">          <span class="string">git</span> <span class="string">pull</span> <span class="string">deploy</span> <span class="string">master</span> <span class="string">--rebase</span></span><br><span class="line">          </span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Build</span> <span class="string">and</span> <span class="string">Publish</span> <span class="string">Web</span> <span class="string">App</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">msbuild</span> <span class="string">$&#123;&#123;env.PRJ_SLN&#125;&#125;</span> <span class="string">/p:Configuration=Release</span> <span class="string">/p:DeployOnBuild=true</span> <span class="string">/p:PublishProfile=FolderProfile</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">git</span> <span class="string">push</span> <span class="string">publish</span> <span class="string">From</span> <span class="string">Repository</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          cd $&#123;&#123;env.PUBLISH_DIR&#125;&#125;</span></span><br><span class="line"><span class="string">                  </span></span><br><span class="line"><span class="string">          echo ============ &quot; config list &quot; ============</span></span><br><span class="line"><span class="string">          git config --list</span></span><br><span class="line"><span class="string"></span>      </span><br><span class="line">          <span class="string">echo</span> <span class="string">============</span> <span class="string">&quot;statut and content add &quot;</span> <span class="string">============</span></span><br><span class="line">          <span class="string">git</span> <span class="string">add</span> <span class="string">--all</span></span><br><span class="line">          <span class="string">git</span> <span class="string">status</span></span><br><span class="line">          </span><br><span class="line">          <span class="string">echo</span> <span class="string">============</span> <span class="string">&quot; check branch list&quot;</span> <span class="string">============</span></span><br><span class="line">          <span class="string">git</span> <span class="string">branch</span> <span class="string">-a</span></span><br><span class="line">          </span><br><span class="line">          <span class="string">echo</span> <span class="string">============</span> <span class="string">&quot; commit &quot;</span> <span class="string">=============</span></span><br><span class="line">          <span class="string">git</span> <span class="string">commit</span> <span class="string">-m</span> <span class="string">&quot;$<span class="template-variable">&#123;&#123;env.COMMIT_STR&#125;&#125;</span>&quot;</span></span><br><span class="line">          </span><br><span class="line">          <span class="string">echo</span> <span class="string">============</span> <span class="string">&quot; PUSH &quot;</span> <span class="string">==============</span></span><br><span class="line">          <span class="string">git</span> <span class="string">push</span> <span class="string">-u</span> <span class="string">deploy</span> </span><br></pre></td></tr></table></figure><h1 id="心得"><a href="#心得" class="headerlink" title="心得"></a>心得</h1><p>這功能耗了我兩天連價沒得好好休息，大多遇到git指令、actions參數、查詢資料，參數部分也被很多範例誤導可能是用windows環境緣故。下篇會用action參數方式寫一篇，希望各位會喜歡。</p><p>這邊在小抱怨一下，git remote使用方式，本範例分支是用預設(master)主要原因是只要一指定就會發生意外錯誤(push部分)，後來被妥協用master分支。如果各位知道如何指定分支方式歡迎到下方留言讓我知道。</p>]]></content>
      
      
      <categories>
          
          <category> DevOps </category>
          
          <category> Github </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Github Action </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用 Github Action (二) - 使用 MVC (MSbuild) CI/CD</title>
      <link href="/2023/04/01/DevOps/Github/%E4%BD%BF%E7%94%A8%20Github%20Action%20(%E4%BA%8C)%20-%20%E4%BD%BF%E7%94%A8%20MVC%20(MSbuild)/"/>
      <url>/2023/04/01/DevOps/Github/%E4%BD%BF%E7%94%A8%20Github%20Action%20(%E4%BA%8C)%20-%20%E4%BD%BF%E7%94%A8%20MVC%20(MSbuild)/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>繼上篇文章，快速進行MVC CI&#x2F;CD 這部分相對的有很多使用者還在使用這種架框，本篇使用<code>Framework 4.7.2</code> ，當中有得知一些github actions小技巧。本篇只有到Publish，剩下請參考上篇使用方式。</p><h1 id="Github-Action"><a href="#Github-Action" class="headerlink" title="Github Action"></a>Github Action</h1><h2 id="一、創建Workflow"><a href="#一、創建Workflow" class="headerlink" title="一、創建Workflow"></a>一、創建Workflow</h2><p>下方參考使用方式。<br><em><strong>注意 : MVC 建議是使用Windows系統進行編譯，這邊再次聲明 MVC Framework 是用 MSbuild 會跟上篇 CLI使用方式有差異 。</strong></em></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">dontnet</span> <span class="string">Mvc</span> <span class="string">to</span> <span class="string">CI</span> <span class="string">Test</span></span><br><span class="line"></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">branches:</span> [ <span class="string">main</span> ]</span><br><span class="line">  <span class="attr">workflow_dispatch:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># A workflow run is made up of one or more jobs that can run sequentially or in parallel</span></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">build:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">windows-latest</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line">               </span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">setup-msbuild</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">microsoft/setup-msbuild@v1.1</span></span><br><span class="line">      </span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Setup</span> <span class="string">NuGet.exe</span> <span class="string">for</span> <span class="string">use</span> <span class="string">with</span> <span class="string">actions</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">NuGet/setup-nuget@v1.0.5</span></span><br><span class="line">      </span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Restore</span> <span class="string">NuGet</span> <span class="string">Packages</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">nuget</span> <span class="string">restore</span> <span class="string">./dotnetMVC/dotnetMVC.sln</span></span><br><span class="line">      </span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Build</span> <span class="string">and</span> <span class="string">Publish</span> <span class="string">Web</span> <span class="string">App</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">msbuild</span> <span class="string">./dotnetMVC/dotnetMVC.sln</span> <span class="string">/p:Configuration=Release</span> <span class="string">/p:DeployOnBuild=true</span> <span class="string">/p:PublishProfile=FolderProfile</span></span><br><span class="line"></span><br><span class="line">      <span class="comment"># Runs a set of commands using the runners shell</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Upload</span> <span class="string">Artifact</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/upload-artifact@v1.0.0</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">published_webapp</span></span><br><span class="line">          <span class="attr">path:</span> <span class="string">./dotnetMVC/dotnetMvcUnitTests/bin/Release</span></span><br></pre></td></tr></table></figure><h2 id="二、創建FolderProfile-pubxml"><a href="#二、創建FolderProfile-pubxml" class="headerlink" title="二、創建FolderProfile.pubxml"></a>二、創建FolderProfile.pubxml</h2><p>如過上方圖有通過，恭喜你可以跳過這邊。<br>MVC初始化的專案是沒有.pubxml相關的檔案，下方直接用快速方式創建.pubxml。</p><ol><li><p>按下[建置]-&gt;[發佈]。<br><img src="/img/GitHub/action/2-01.png"></p></li><li><p>如果事先有發行過的可以再新增一個。<br><img src="/img/GitHub/action/2-02.png"></p></li><li><p>選擇資料夾，直接按下下一步、完成<br><img src="/img/GitHub/action/2-03.png"><br><img src="/img/GitHub/action/2-04.png"></p></li><li><p>產生完成，也可以用下拉式查看有哪些.pubxml<br><img src="/img/GitHub/action/2-05.png"></p></li></ol><h2 id="三、確認最後小問題"><a href="#三、確認最後小問題" class="headerlink" title="三、確認最後小問題"></a>三、確認最後小問題</h2><ol><li>NeGet 失效?<br>NeGet 安裝失效問題，網路上很多有寫Nuget動作，但是怎樣做都會失敗。排除方式可以看右側選項，Github Action提供很方便的功能，可以直接使用安裝指令、寫法。</li></ol><p><img src="/img/GitHub/action/2-06.png"></p><ol start="2"><li><p>msbuild 注意點<br>msbuild 部分可以使用.csproj ，必須要留意<code>/p:DeployOnBuild=true</code>必須要一起填寫，<code>/p:PublishProfile=FolderProfile</code>就不會引發錯誤。</p></li><li><p>upload抓取publish路徑<br>[ Upload Artifact ] 本篇最需要的動作，必須要對應Repoitory路徑，若有錯誤訊息可以得知.pubxml檔案，會發行到哪個位置。</p></li></ol><h2 id="參考文件"><a href="#參考文件" class="headerlink" title="參考文件"></a>參考文件</h2><ol><li><a href="https://timheuer.com/blog/building-net-framework-apps-using-github-actions/">Using GitHub Actions for .NET Framework apps</a></li><li><a href="https://docs.microsoft.com/zh-tw/aspnet/web-forms/overview/deployment/visual-studio-web-deployment/command-line-deployment">使用 Visual Studio：命令列部署來 ASP.NET Web 部署</a></li><li><a href="https://blog.miniasp.com/post/2021/08/28/Build-Solution-or-Csproj-using-MSBuild">使用 MSBuild 建置方案檔(sln)與建置專案檔(csproj)的陷阱與注意事項</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> DevOps </category>
          
          <category> Github </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Github Action </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用 Github Action (五) - 排除Azure 因Storage 無法發佈</title>
      <link href="/2023/04/01/DevOps/Github/%E4%BD%BF%E7%94%A8%20Github%20Action%20(%E4%BA%94)%20-%20%E6%8E%92%E9%99%A4Azure%20%E5%9B%A0Storage%20%E7%84%A1%E6%B3%95%E7%99%BC%E4%BD%88/"/>
      <url>/2023/04/01/DevOps/Github/%E4%BD%BF%E7%94%A8%20Github%20Action%20(%E4%BA%94)%20-%20%E6%8E%92%E9%99%A4Azure%20%E5%9B%A0Storage%20%E7%84%A1%E6%B3%95%E7%99%BC%E4%BD%88/</url>
      
        <content type="html"><![CDATA[<h2 id="無法發佈問題"><a href="#無法發佈問題" class="headerlink" title="無法發佈問題"></a>無法發佈問題</h2><p>開發完成後，開心進行發佈專案發現不能發行通過，看到這畫面非常錯愕Azure不可能因為是有免費限制這樣搞我吧 。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Error: Failed to deploy web package to App Service.</span><br><span class="line">Error: Deployment Failed with Error: Error: Failed to deploy web package to App Service.</span><br></pre></td></tr></table></figure><p><img src="/image/20230401_23-13-00.png"></p><h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><p>Cache 已經使用超出 10GB 無法再使用，而且不能清除Cache 容量相當麻煩。</p><p>參考 : <a href="https://github.blog/changelog/2021-11-23-github-actions-cache-size-is-now-increased-to-10gb-per-repository/">https://github.blog/changelog/2021-11-23-github-actions-cache-size-is-now-increased-to-10gb-per-repository/</a></p><h2 id="解決方式"><a href="#解決方式" class="headerlink" title="解決方式"></a>解決方式</h2><p>解決方是相當簡單，只要把發行至 Azure 移至上面即可，並把 <code>actions/upload-artifact@v2</code>移除。以下參考</p><h3 id="創建參數"><a href="#創建參數" class="headerlink" title="創建參數"></a>創建參數</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">env:</span></span><br><span class="line">  <span class="attr">AZURE_WEBAPP_NAME:</span> <span class="string">StartFMS-BackendAPI</span>    <span class="comment"># set this to your application&#x27;s name</span></span><br><span class="line">  <span class="attr">AZURE_WEBAPP_PACKAGE_PATH:</span> <span class="string">&#x27;.&#x27;</span>      <span class="comment"># set this to the path to your web app project, defaults to the repository root</span></span><br><span class="line">  <span class="attr">DOTNET_VERSION:</span> <span class="string">&#x27;6.0.x&#x27;</span>           <span class="comment"># set this to the dot net version to use</span></span><br></pre></td></tr></table></figure><h3 id="deploy-區塊只保留-“Deploy-to-Azure-Web-App”"><a href="#deploy-區塊只保留-“Deploy-to-Azure-Web-App”" class="headerlink" title="deploy 區塊只保留 “Deploy to Azure Web App”"></a>deploy 區塊只保留 “Deploy to Azure Web App”</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Deploy</span> <span class="string">to</span> <span class="string">Azure</span> <span class="string">Web</span> <span class="string">App</span></span><br><span class="line">  <span class="attr">id:</span> <span class="string">deploy-to-webapp</span></span><br><span class="line">  <span class="attr">uses:</span> <span class="string">azure/webapps-deploy@v2</span></span><br><span class="line">  <span class="attr">with:</span></span><br><span class="line">    <span class="attr">app-name:</span> <span class="string">&#x27;StartFMS-BackendAPI&#x27;</span></span><br><span class="line">    <span class="attr">slot-name:</span> <span class="string">&#x27;Production&#x27;</span></span><br><span class="line">    <span class="attr">publish-profile:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.AZUREAPPSERVICE_PUBLISHPROFILE_xxxxxxxxxxxxxxxxx</span> <span class="string">&#125;&#125;</span></span><br><span class="line">    <span class="attr">package:</span> <span class="string">.</span></span><br></pre></td></tr></table></figure><h3 id="成品如下"><a href="#成品如下" class="headerlink" title="成品如下"></a>成品如下</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Docs for the Azure Web Apps Deploy action: https://github.com/Azure/webapps-deploy</span></span><br><span class="line"><span class="comment"># More GitHub Actions for Azure: https://github.com/Azure/actions</span></span><br><span class="line"></span><br><span class="line"><span class="attr">name:</span> <span class="string">Build</span> <span class="string">and</span> <span class="string">deploy</span> <span class="string">ASP.Net</span> <span class="string">Core</span> <span class="string">app</span> <span class="string">to</span> <span class="string">Azure</span> <span class="string">Web</span> <span class="string">App</span> <span class="bullet">-</span> <span class="string">StartFMS-BackendAPI</span></span><br><span class="line"></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">branches:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">master</span></span><br><span class="line">  <span class="attr">workflow_dispatch:</span></span><br><span class="line">  </span><br><span class="line"><span class="attr">env:</span></span><br><span class="line">  <span class="attr">AZURE_WEBAPP_NAME:</span> <span class="string">StartFMS-BackendAPI</span>    <span class="comment"># set this to your application&#x27;s name</span></span><br><span class="line">  <span class="attr">AZURE_WEBAPP_PACKAGE_PATH:</span> <span class="string">&#x27;.&#x27;</span>      <span class="comment"># set this to the path to your web app project, defaults to the repository root</span></span><br><span class="line">  <span class="attr">DOTNET_VERSION:</span> <span class="string">&#x27;6.0.x&#x27;</span>           <span class="comment"># set this to the dot net version to use</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">build:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">windows-latest</span> <span class="comment"># 若使用 net core 可以改成 ubuntu-latest</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Set</span> <span class="string">up</span> <span class="string">.NET</span> <span class="string">Core</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/setup-dotnet@v1</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">dotnet-version:</span> <span class="string">&#x27;6.0.x&#x27;</span></span><br><span class="line">          <span class="attr">include-prerelease:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Build</span> <span class="string">with</span> <span class="string">dotnet</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">dotnet</span> <span class="string">build</span> <span class="string">--configuration</span> <span class="string">Release</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">dotnet</span> <span class="string">publish</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">dotnet</span> <span class="string">publish</span> <span class="string">-c</span> <span class="string">Release</span> <span class="string">-o</span> <span class="string">$&#123;&#123;env.DOTNET_ROOT&#125;&#125;/myapp</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Deploy</span> <span class="string">to</span> <span class="string">Azure</span> <span class="string">Web</span> <span class="string">App</span></span><br><span class="line">        <span class="attr">id:</span> <span class="string">deploy-to-webapp</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">azure/webapps-deploy@v2</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">app-name:</span> <span class="string">&#x27;StartFMS-BackendAPI&#x27;</span></span><br><span class="line">          <span class="attr">slot-name:</span> <span class="string">&#x27;Production&#x27;</span></span><br><span class="line">          <span class="attr">publish-profile:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.AZUREAPPSERVICE_PUBLISHPROFILE_xxxxxxxxxxxxxxxxx</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">package:</span> <span class="string">.</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> DevOps </category>
          
          <category> Github </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Github Action </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用 Github Action (四) - 使用 Runner、參數介紹</title>
      <link href="/2023/04/01/DevOps/Github/%E4%BD%BF%E7%94%A8%20Github%20Action%20(%E5%9B%9B)%20-%20%E4%BD%BF%E7%94%A8%20Runner%E3%80%81%E5%8F%83%E6%95%B8%E4%BB%8B%E7%B4%B9/"/>
      <url>/2023/04/01/DevOps/Github/%E4%BD%BF%E7%94%A8%20Github%20Action%20(%E5%9B%9B)%20-%20%E4%BD%BF%E7%94%A8%20Runner%E3%80%81%E5%8F%83%E6%95%B8%E4%BB%8B%E7%B4%B9/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本篇設定會與 <a href="https://jontcont.github.io/2022/03/13/GithubActions(1)/">使用 Github Action (一) - CI&#x2F;CD</a> 設定很類似，這次要細講與上篇提到的 <em>server pull repository</em> 問題。此外，本章會在說明 windows 參數使用。</p><h1 id="Github-Action"><a href="#Github-Action" class="headerlink" title="Github Action"></a>Github Action</h1><h2 id="Runner"><a href="#Runner" class="headerlink" title="Runner"></a>Runner</h2><p>如果要使用本機執行，會需要準備路徑給他存放。</p><h3 id="1-指定-repository-按下新增-runners"><a href="#1-指定-repository-按下新增-runners" class="headerlink" title="1. 指定 repository 按下新增 runners"></a>1. 指定 repository 按下新增 runners</h3><p><img src="/img/GitHub/action/4-1.png"></p><h3 id="2-新增前往創建資料夾"><a href="#2-新增前往創建資料夾" class="headerlink" title="2. 新增前往創建資料夾"></a>2. 新增前往創建資料夾</h3><p>按照github 上面的指令輸入即可，如果有錯誤訊息可以參考第一章節。<br><img src="/img/GitHub/action/4-2.png"></p><h3 id="3-打開-run-cmd"><a href="#3-打開-run-cmd" class="headerlink" title="3. 打開 run.cmd"></a>3. 打開 run.cmd</h3><p>用意是要確認有沒有有效執行。<br><img src="/img/GitHub/action/4-4.png"></p><h3 id="4-撰寫-Github-Actions"><a href="#4-撰寫-Github-Actions" class="headerlink" title="4. 撰寫 Github Actions"></a>4. 撰寫 Github Actions</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">pull_repository:</span></span><br><span class="line">  <span class="attr">runs-on:</span> <span class="string">self-hosted</span></span><br><span class="line">  <span class="attr">need:</span> <span class="string">build</span></span><br><span class="line">  <span class="attr">steps:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">確認</span> <span class="string">當前位置</span></span><br><span class="line">      <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line">        <span class="string">ls</span></span><br></pre></td></tr></table></figure><h2 id="Runner-執行路徑"><a href="#Runner-執行路徑" class="headerlink" title="Runner 執行路徑"></a>Runner 執行路徑</h2><p>從圖片可以看到，這邊他會將當前檔案download下來，執行後都會在指定repository path，如果你要確認指定路徑使用pull 就會需要用<code>ls</code> 或是 <code>dir</code>確認。<br><img src="/img/GitHub/action/4-3.png"></p><h2 id="使用參數"><a href="#使用參數" class="headerlink" title="使用參數"></a>使用參數</h2><p>參數部分比較需要注意，如果使用widowns輸入會遇到兩種問題。</p><ol><li>全域參數<br>全域參數方式是，在 build 底下區塊都可以使用這變數，需要取用方式則是要 <code>$&#123;&#123;env.name&#125;&#125;</code>方式填寫，這邊也可以當作<code>$&#123;&#123;&#125;&#125;</code>是全域變數的外殼。</li></ol><p>echo 使用方式如果你的變數是指令的名稱，powershell使用方式則為<code>$()</code>，例如:<code>$($&#123;&#123;env.name&#125;&#125;)</code>。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">jobs:</span></span><br><span class="line"><span class="attr">build:</span></span><br><span class="line">  <span class="attr">runs-on:</span> <span class="string">windows-latest</span></span><br><span class="line">  <span class="attr">env:</span></span><br><span class="line">      <span class="attr">MY_SECRET   :</span> <span class="string">$&#123;&#123;secrets.commit_secret&#125;&#125;</span></span><br><span class="line">      <span class="attr">USER_NAME   :</span> <span class="string">github-actions[bot]</span></span><br><span class="line">      <span class="attr">USER_EMAIL  :</span> <span class="number">41898282</span><span class="string">+github-actions[bot]@users.noreply.github.com</span></span><br><span class="line">      <span class="attr">PUBLISH_DIR :</span> <span class="string">./dotnetMVC/dotnetMVC/bin/publish</span></span><br><span class="line">      <span class="attr">PRJ_SLN     :</span> <span class="string">./dotnetMVC/dotnetMVC.sln</span></span><br><span class="line">      <span class="attr">COMMIT_STR  :</span> <span class="string">&quot;Bots Update : $(Get-Date -Format \&quot;yyyy.MMdd.HHmm\&quot;)&quot;</span></span><br><span class="line">  <span class="attr">steps:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">git</span> <span class="string">pull</span> <span class="string">repository</span> </span><br><span class="line">      <span class="attr">run:</span> <span class="string">| </span></span><br><span class="line"><span class="string">        echo &quot;$&#123;&#123;env.MY_SECRET&#125;&#125;&quot;</span></span><br><span class="line"><span class="string">        echo &quot;$&#123;&#123;env.COMMIT_STR&#125;&#125;&quot;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>區域參數<br>windows、macos 使用方式為<code>$env:name</code>取得，如果是用linux 執行只需要<code>$name</code>就好，所以需要小心留意使用。<figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">jobs:</span></span><br><span class="line"><span class="attr">build:</span></span><br><span class="line">  <span class="attr">runs-on:</span> <span class="string">windows-latest</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">steps:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">git</span> <span class="string">pull</span> <span class="string">repository</span> </span><br><span class="line">      <span class="attr">env:</span></span><br><span class="line">        <span class="attr">USER_NAME   :</span> <span class="string">github-actions[bot]</span></span><br><span class="line">        <span class="attr">USER_EMAIL  :</span> <span class="number">41898282</span><span class="string">+github-actions[bot]@users.noreply.github.com</span></span><br><span class="line">        <span class="attr">PUBLISH_DIR :</span> <span class="string">./dotnetMVC/dotnetMVC/bin/publish</span></span><br><span class="line">        <span class="attr">PRJ_SLN     :</span> <span class="string">./dotnetMVC/dotnetMVC.sln</span></span><br><span class="line">      <span class="attr">run:</span> <span class="string">| </span></span><br><span class="line"><span class="string">        echo &quot;$env:MY_SECRET&quot;</span></span><br><span class="line"><span class="string">        echo &quot;$env:COMMIT_STR&quot;</span></span><br></pre></td></tr></table></figure></li></ol><h1 id="參考文件"><a href="#參考文件" class="headerlink" title="參考文件"></a>參考文件</h1><ul><li>github : <a href="https://docs.github.com/en/actions/learn-github-actions/environment-variables">Environment variables</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> DevOps </category>
          
          <category> Github </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Github Action </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Azure AD 創建 SQL 資料庫</title>
      <link href="/2023/03/10/DevOps/Azure/Azure%20AD%20%E5%89%B5%E5%BB%BA%20SQL%20%E8%B3%87%E6%96%99%E5%BA%AB/"/>
      <url>/2023/03/10/DevOps/Azure/Azure%20AD%20%E5%89%B5%E5%BB%BA%20SQL%20%E8%B3%87%E6%96%99%E5%BA%AB/</url>
      
        <content type="html"><![CDATA[<h1 id="SQL-資料庫"><a href="#SQL-資料庫" class="headerlink" title="SQL 資料庫"></a>SQL 資料庫</h1><ul><li>Azure 入口 : <a href="https://portal.azure.com/#home">https://portal.azure.com/#home</a></li></ul><h2 id="創建SQL-Server"><a href="#創建SQL-Server" class="headerlink" title="創建SQL Server"></a>創建SQL Server</h2><p>Azure 可以設定 Server 、DataBase 細項，主要是介面上會看到兩個Icons ，如果你只需要SQL Server 就可以不用理會 SQL資料庫。</p><p><img src="/img/dotnet/cs/cs_azure_004.png"></p><p>這邊我使用[SQL資料庫]，需要先自定義一個資源群組。接下來會創建SQL Server ，創建需要注意每個地區會有所謂延遲，如我不知道如何選擇可以參考下方網址。</p><ul><li><a href="https://www.azurespeed.com/Information/AzureRegions">Azure Regions</a><br><img src="/img/dotnet/cs/cs_azure_006.png"><br><img src="/img/dotnet/cs/cs_azure_005.png"></li></ul><p>創建兩項完成後，可以點開設定資料庫，上面有10個DTU並包含250GB儲存體，目前他上面沒寫價格可以點選設定資料庫即可看到資料庫設定內容，並包含其他使用費用。</p><p>目前預設版本是DTU 1 個 1.5 USD，目前是沒有地方讓你向下條整DTU，如果是簡易版試用版本就會是2GB。<br><img src="/img/dotnet/cs/cs_azure_007.png"><br><img src="/img/dotnet/cs/cs_azure_008.png"><br><img src="/img/dotnet/cs/cs_azure_009.png"></p><p>另一種是 vCore 可以去做調整， 實際落差、性能沒有實際驗證方式，但是如果要讓價格便宜一點可以考慮使用這個。<br><img src="/img/dotnet/cs/cs_azure_010.png"><br><img src="/img/dotnet/cs/cs_azure_011.png"><br><img src="/img/dotnet/cs/cs_azure_012.png"></p><h2 id="其他設定"><a href="#其他設定" class="headerlink" title="其他設定"></a>其他設定</h2><h3 id="網路"><a href="#網路" class="headerlink" title="網路"></a>網路</h3><p>Azure 最特別是可以設定防火牆，可以鎖定ip不讓外來人連線至該位置、Server。<br><img src="/img/dotnet/cs/cs_azure_013.png"></p><h3 id="資料庫定序"><a href="#資料庫定序" class="headerlink" title="資料庫定序"></a>資料庫定序</h3><p>SQL Server 必須要注意定序設定，如果按照預設值可能會遇到亂碼的問題。<br><img src="/img/dotnet/cs/cs_azure_014.png"></p><h3 id="已刪除的資料庫"><a href="#已刪除的資料庫" class="headerlink" title="已刪除的資料庫"></a>已刪除的資料庫</h3><p>Azure 有還原資料庫功能會還原特定時間點的DB，所以不小心刪除可以不用再害怕了。<br><img src="/img/dotnet/cs/cs_azure_014.png"></p><h2 id="資料庫傳送量單元-DTU-Database-Throughput-Unit"><a href="#資料庫傳送量單元-DTU-Database-Throughput-Unit" class="headerlink" title="資料庫傳送量單元 DTU (Database Throughput Unit)"></a>資料庫傳送量單元 DTU (Database Throughput Unit)</h2><p>DTU是由CPU、記憶體、實際讀取和交易記錄寫入合併成一個單位，也就是一種綜合效能評價的方式，應用這種評價方式，將伺服器規模分為BASIC、STANDARD和PREMIUM三種不同等級。</p><h2 id="參考文件"><a href="#參考文件" class="headerlink" title="參考文件"></a>參考文件</h2><ul><li><p><a href="https://azure.microsoft.com/zh-tw/pricing/details/active-directory/external-identities/">定價(MAU)</a></p></li><li><p><a href="https://docs.microsoft.com/zh-tw/azure/active-directory/fundamentals/active-directory-whatis">什麼是 Azure Active Directory？</a></p></li><li><p><a href="https://docs.microsoft.com/zh-tw/azure/active-directory/authentication/concept-mfa-licensing">Azure AD Multi-Factor Authentication 的功能與授權</a></p></li><li><p><a href="https://docs.microsoft.com/zh-tw/sql/connect/ado-net/sql/azure-active-directory-authentication?view=sql-server-ver15">dotnet連線方式</a> </p></li><li><p><a href="https://www.azurespeed.com/Information/AzureRegions">Azure Regions</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 雲端平台 </category>
          
          <category> Azure </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Azure </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【筆記】Azure - 使用 Node 18 LTS 發行</title>
      <link href="/2023/03/10/DevOps/Azure/Azure%20Angular%20%E7%99%BC%E8%A1%8C/"/>
      <url>/2023/03/10/DevOps/Azure/Azure%20Angular%20%E7%99%BC%E8%A1%8C/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>如果使用 Azure Node 版本更新前端，遇到無法顯示問題。請參考下方做法。</p><h2 id="組態設定"><a href="#組態設定" class="headerlink" title="組態設定"></a>組態設定</h2><p>請到 【Web 應用程式】  &gt; 【組態】 &gt; 【一般設定】進行設定。指令如下 : </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx serve -s </span><br></pre></td></tr></table></figure><p><img src="/image/20230310_08-56-01.png"></p>]]></content>
      
      
      <categories>
          
          <category> 雲端平台 </category>
          
          <category> Azure </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Azure </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Azure DevOps】 - 簡介</title>
      <link href="/2023/03/10/DevOps/Azure/Azure%20DevOps%20%E7%B0%A1%E4%BB%8B/"/>
      <url>/2023/03/10/DevOps/Azure/Azure%20DevOps%20%E7%B0%A1%E4%BB%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="Azure-DevOps-簡介"><a href="#Azure-DevOps-簡介" class="headerlink" title="Azure DevOps 簡介"></a>Azure DevOps 簡介</h2><p>Azure DevOps 是一個雲端服務，它提供了一個開發人員可以使用的軟體開發工具，Azure DevOps 服務可以讓團隊共享程式碼，追蹤工作項目，協作軟體開發，並且可以透過 Azure DevOps 服務來自動化軟體交付流程。</p><p>Azure DevOps 服務包含了以下幾個服務：</p><ul><li>Azure Repos：提供了 Git 儲存庫或 TFVC 儲存庫，讓團隊可以共享程式碼。</li><li>Azure Boards：提供了工作項目追蹤系統，讓團隊可以計畫、追蹤工作項目。</li><li>Azure Pipelines：提供了 CI&#x2F;CD 服務，讓團隊可以自動化建置、測試、發佈程式碼。</li><li>Azure Test Plans：提供了測試計畫，讓團隊可以計畫、追蹤測試工作項目。</li><li>Azure Artifacts：提供了 NuGet 儲存庫或 npm 儲存庫，讓團隊可以共享套件。</li></ul><h2 id="Azure-vs-Azure-DevOps"><a href="#Azure-vs-Azure-DevOps" class="headerlink" title="Azure vs Azure DevOps"></a>Azure vs Azure DevOps</h2><p>Azure 是一個雲端平台，它提供了雲端服務，讓開發人員可以使用這些雲端服務來開發應用程式，Azure DevOps 服務是 Azure 平台上的一個雲端服務，它提供了一個開發人員可以使用的軟體開發工具，Azure DevOps 服務可以讓團隊共享程式碼，追蹤工作項目，協作軟體開發，並且可以透過 Azure DevOps 服務來自動化軟體交付流程。</p><h2 id="Azure-DevOps-使用範圍"><a href="#Azure-DevOps-使用範圍" class="headerlink" title="Azure DevOps 使用範圍"></a>Azure DevOps 使用範圍</h2><p>Azure DevOps 服務可以用來管理任何專案，不管是使用哪種程式語言，或是使用哪種平台，都可以使用 Azure DevOps 服務來管理專案。</p>]]></content>
      
      
      <categories>
          
          <category> 雲端平台 </category>
          
          <category> Azure </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Azure </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Azure 重點整理、簡介</title>
      <link href="/2023/03/10/DevOps/Azure/Azure%20%E9%87%8D%E9%BB%9E%E6%95%B4%E7%90%86%E3%80%81%E7%B0%A1%E4%BB%8B%20/"/>
      <url>/2023/03/10/DevOps/Azure/Azure%20%E9%87%8D%E9%BB%9E%E6%95%B4%E7%90%86%E3%80%81%E7%B0%A1%E4%BB%8B%20/</url>
      
        <content type="html"><![CDATA[<h1 id="Azure"><a href="#Azure" class="headerlink" title="Azure"></a>Azure</h1><p>Microsoft Azure 是微軟所打造的一個公有雲端服務平台，過去稱為 Windows Azure。Azure 一開始是以 IaaS 來提供基礎雲端服務，到現在Azure 已經橫跨 IaaS 到 PaaS 甚至是 SaaS 的豐富雲端服務。</p><p>目前全球有54座資料中心以及44個CDN跳躍點 (POP)，並且於2015年時被 Gartner 列為雲端運算的領先者。Microsoft Azure 已包含 30 餘種服務，數百項功能，並且為微軟帶來了12億美元的獲利 (2015年度) </p><h2 id="特色"><a href="#特色" class="headerlink" title="特色"></a>特色</h2><p>Azure特色之一是他有更快的部署次數，客戶端採用時間可以大幅縮短，開發資源庫也相當豐富，能大幅的降低應用程序生命周期成本。當你的伺服器有季節性的流量時，Azure也可以針對不同的需求做調整。<br>Azure 的服務可以分為以下七大類：</p><ol><li>計算與網路</li><li>網路與行動</li><li>資料與分析</li><li>儲存體與備份</li><li>媒體與 CDN</li><li>混合式整合</li><li>身份識別與存取管理</li></ol><h2 id="提供服務"><a href="#提供服務" class="headerlink" title="提供服務"></a>提供服務</h2><ul><li><p>基礎設施即服務 &#x2F; IaaS ( Infrastructure as a Service ) :<br>當購買、安裝、設定及管理軟體 (包括作業系統、中介軟體與應用程式) 時，可由Azure 來管理基礎結構，相當節省時間也很方便。而IaaS 也可視公司或個人需求快速增加與減少，每個資源都是獨立服務元件。</p></li><li><p>平台即服務 &#x2F; PaaS ( Platform as a Service ) :<br>Azure 負責提供並管理大部分的基礎設施，讓使用者只需要負責管理自己的資料以及應用程式，把使用者從繁複的基礎設施管理解放出來，就可以專注在應用程式優化以及精進商業邏輯。</p></li><li><p>軟體即服務 &#x2F; SaaS ( Software as a Service ) :<br>Microsoft Azure 提供從硬體到上層應用程式一整套的服務，使用者可以直接透過 Azure 所提供的軟體，像是常見的線上郵件 Outlook 都是大眾平時都有在使用的 SaaS。</p></li></ul><h2 id="運算服務"><a href="#運算服務" class="headerlink" title="運算服務"></a>運算服務</h2><p>執行應用程式是在雲端平台中最重要也是最基本的一項作業，在 Azure 中依照服務的彈性程度不同提供了三種主要的選擇：虛擬機器 (Virtual Machines)、雲端服務 (Cloud Services) 以及網站服務 (Websites)。</p><ol><li><p>虛擬機器 (Virtual Machines)<br>虛擬機器 (Virtual Machines) 是一種 IaaS 服務，提供了最高度彈性的服務，您可以透過 Azure Gallery 組件庫使用預先建立好的作業系統映像檔，其中包括了各個版本的 Windows Server 甚至是 Ubuntu、CentOS 等開源的作業系統環境，或是您也可以自行上傳預先準備好的 VHD 檔，將原本的本地環境部署至虛擬機器服務。在虛擬機器服務中，您擁有了 100% 的主控權，可以透過 SSH 或是遠端桌面連線的方式管理您的伺服器。其中很特別的是，微軟也預先準備好了許多預載好像 SQL Server 或 Visual Studio 的映像檔，您可以在數分鐘之內就部署好一台裝有 Visual Studio 14 CTP 的開發測試環境。</p></li><li><p>雲端服務 (Cloud Services)<br>雲端服務 (Cloud Services) 是一種介於前兩者之間的 PaaS 服務，它提供了比網站服務更高的彈性，但其背後的虛擬機器是由微軟資料中心所代管，您可以專注在您的應用程式及服務本身。而依照應用程式不同的需求，雲端服務提供了兩種運轉模式，分別是 Worker Role 及 Web Role，並且也提供了對 .NET 以外程式語言的支援。</p></li><li><p>網站服務 (Websites)。<br>網站服務 (Websites) 是一種最容易部署網站的服務，他是建構在微軟自家的 IIS 服務之上，除了過去熟悉的 ASP.NET 之外，也同時提供了對 PHP、Python 及 node.js 等語言的支援，讓您可以在數分鐘之內就將一個網站應用程式部署至雲端。同時，網站服務也提供了高度延展的設定，您可以依照需求選擇不同大小&#x2F;價位的服務，並且可以依照流量及 CPU 運算資源做 auto-scaling。最重要的是，每個 Azure 帳戶擁有 10 個免費 (Free) 量級的網站服務，您可以不需花費任何金錢就將輕量級的網站服務部署在雲端資料中心</p></li></ol><h2 id="資料管理"><a href="#資料管理" class="headerlink" title="資料管理"></a>資料管理</h2><p>大部份的應用程式都需要存取資料，您除了可以在 IaaS 服務上自行建立資料庫的儲存環境外，在 Azure 中也依照不同的需求提供了幾種主要的選擇：SQL Database、資料表 (Table) 以及 Blob。</p><ol><li><p><a href="https://azure.microsoft.com/zh-tw/products/azure-sql/database/">SQL Database</a><br>SQL Database (過去稱為 SQL Azure) 是一個針對雲端環境優化的 SQL Server 服務，提供了關聯式資料庫的所有重要功能，而且如同過去熟悉的 SQL Server，您可以使用 Entity Framework、ADO.NET 或是其他熟悉的資料存取技術來存取 SQL Databse。如果您過去的服務是建立在 SQL Server 上，SQL Database 會是一個您很好的雲端化選擇，透過 SQL Management Studio 就可以輕鬆的將資料放上雲端</p></li><li><p><a href="https://azure.microsoft.com/zh-tw/product-categories/storage/">資料表</a><br>資料表 (Table) 是一種提供大量儲存 key&#x2F;value 型式的 NoSQL 服務，它不提供關聯式資料庫的功能，但如果您所要存的資料量相當龐大，或是不需要對這些資料執行複雜的 SQL 查詢，那麼它會是一個簡單明瞭而且成本遠低於 SQL Database 的選擇。</p></li><li><p><a href="https://azure.microsoft.com/zh-tw/product-categories/storage/">Blob</a><br>Blob 是設計用來儲存非結構化二進位資料的服務，而且單一個 Blob 就有多達 1 TB 的容量，適合用來儲存視訊或備份資料等等，您可以使用 Blob 作為簡單而且成本低廉的儲存體服務。</p></li></ol><h2 id="網路"><a href="#網路" class="headerlink" title="網路"></a>網路</h2><p>Azure 目前在亞洲、歐洲及美洲數個資料中心內運行，您除了可以在 Azure 上部署您的雲端應用程式之外，也可以用來作為本地資料中心或網路的延伸，透過虛擬網路 (Virtual Network) 以及流量管理員 (Traffic Manager) 的服務來達成。</p><h2 id="行動裝置"><a href="#行動裝置" class="headerlink" title="行動裝置"></a>行動裝置</h2><p>過去撰寫行動應用程式時，您可能會需要使用到資料存取、身份驗證、推播通知等功能，往往需要自行建構 API 來提供行動裝置端呼叫各項服務。而在 Azure 上，針對 Mobile App 的各種基本需求，提供了包括各式基本服務的行動服務 (Mobile Services) 以及可以大量將訊息推送至用戶端的通知中樞 (Notification Hubs)，大幅降低了開發 App 後端所需的時間，而且透過單一的服務就可以提供 Android、iOS 以及 Windows Phone 各個平台所需的服務。</p><h2 id="訊息服務"><a href="#訊息服務" class="headerlink" title="訊息服務"></a>訊息服務</h2><ol><li><p>佇列 (Queues)<br>佇列 (Queues) 是一種 FIFO (First-In-First-Out) 的設計概念，一個應用程式將訊息放入佇列中，而另一個應用程式來讀取該訊息並進行進一步的處理。舉一個簡單的例子，目前最熱門的相簿服務 Flickr 在使用者將照片上傳後，會自動將照片做各種尺寸的縮圖，這種服務變可以透過佇列來達成，在網頁應用程式接收到上傳的照片後，便將該照片資訊放入佇列當中，而在背景工作的另一個角色便不停的從佇列中讀取新上傳的照片，並進行一些需要較長時間的縮圖處理。</p></li><li><p>服務匯流排 (Service Bus)<br>服務匯流排 (Service Bus) 與上面所提到的佇列不同的地方在於，服務匯流排的目的是讓應用程式在任何地方都能交換資料。除了佇列所能提供的一對一通訊之外，服務匯流排還提供了發佈與訂閱 (pub&#x2F;sub) 的機制，應用程式可以將訊息傳送到某個主題，而有訂閱該主題的多位收件者可以同時讀取相同訊息，達成一對多的通訊。此外，服務匯流排也提供了轉送 (Relay) 的機制，提供通過防火牆的安全通訊方式。</p></li></ol><h2 id="快取"><a href="#快取" class="headerlink" title="快取"></a>快取</h2><p>應用程式可能會一再存取相同的資料，若要提升服務的效能，最直覺的做法就是將大量被取用的資料就近保留一份，這就是快取的概念。Azure 提供了兩種不同的快取架構，分別是針對應用程式記憶體的內部快取以及針對 Blob 資料的內容傳遞網路 (CDN)。</p><h2 id="參考資源"><a href="#參考資源" class="headerlink" title="參考資源"></a>參考資源</h2><ol><li><a href="https://www.pcschool.com.tw/blog/it/what-is-azure">Azure是什麼？想進入IT產業的你不能不知道的雲端技術</a></li><li><a href="https://ithelp.ithome.com.tw/articles/10157344">認識 Microsoft Azure</a></li><li><a href="http://azure.microsoft.com/zh-tw/documentation/articles/fundamentals-introduction-to-azure/">Azure 簡介</a></li><li><a href="http://azure.microsoft.com/en-us/documentation/articles/fundamentals-introduction-to-azure/">Introducing Microsoft Azure</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 雲端平台 </category>
          
          <category> Azure </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Azure </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>API - REST 與 SOAP</title>
      <link href="/2023/03/05/%E5%BE%8C%E7%AB%AF%E6%8A%80%E8%A1%93/API_REST%E8%88%87SOAP/"/>
      <url>/2023/03/05/%E5%BE%8C%E7%AB%AF%E6%8A%80%E8%A1%93/API_REST%E8%88%87SOAP/</url>
      
        <content type="html"><![CDATA[<h1 id="REST-與-SOAP"><a href="#REST-與-SOAP" class="headerlink" title="REST 與 SOAP"></a>REST 與 SOAP</h1><p>在現代網路應用程式開發中，REST 和 SOAP 是兩種最流行的服務架構。REST 和 SOAP 有著截然不同的設計哲學和工作方式，因此開發人員需要在設計 API 時仔細考慮這些差異。</p><h2 id="REST"><a href="#REST" class="headerlink" title="REST"></a>REST</h2><p>REST 的全名是 Representational State Transfer，是一種基於 HTTP 協定的軟體架構，用於建立網路應用程式的 Web 服務。REST 是一種輕量級、簡單的協定，以資源為中心，通常使用 JSON 或 XML 作為資料格式。REST 架構的基本特點是客戶端-伺服器架構、狀態無關性、可快取性、分層架構、統一介面等。</p><h3 id="優點"><a href="#優點" class="headerlink" title="優點"></a>優點</h3><p>REST 基於 HTTP 協議，因此它具有以下優點：</p><ul><li>輕量級：REST 傳輸的數據量小，因此非常適合移動設備和低帶寬網路。</li><li>簡單：REST 的設計原則簡單明了，易於理解和實現。</li><li>可緩存：REST 支持緩存，可以提高效能和可擴展性。</li><li>可擴展：REST 可以使用不同的數據格式和傳輸協議，並且易於擴展。</li><li>易於測試：REST 的接口易於測試，可以使用瀏覽器、命令行工具等進行測試。</li></ul><h3 id="缺點"><a href="#缺點" class="headerlink" title="缺點"></a>缺點</h3><ul><li>安全性：REST無法保證資料安全性，需要透過其他方式進行安全保護。</li><li>可靠性：REST沒有內建的錯誤處理機制，需要手動處理。</li></ul><h2 id="SOAP"><a href="#SOAP" class="headerlink" title="SOAP"></a>SOAP</h2><p>SOAP 的全名是 Simple Object Access Protocol，是一種基於 XML 的協定，用於在網路上進行資料交換。SOAP 是一種複雜的協定，使用 XML 作為資料格式，支援多種協定，如 HTTP、SMTP、TCP 等。SOAP 架構的基本特點是基於對象的架構、支援多種協定、複雜性高等。</p><h3 id="優點-1"><a href="#優點-1" class="headerlink" title="優點"></a>優點</h3><ul><li>精準：SOAP 的精度高，可以提供極高的資料準確度。</li><li>安全：SOAP 提供了較高的安全性，可使用多種安全機制，如 SSL 和 WS-Security。</li><li>靈活性：SOAP 的設計靈活，可支援多種協定和介面。</li><li>互操作性：SOAP 可在不同的平臺上運行，可實現不同平臺之間的互操作性。</li><li>交易性 : 支援事務處理的機制，讓多個網路服務可以一起參與同一個交易，並能保證這個交易的完整性。</li></ul><h3 id="缺點-1"><a href="#缺點-1" class="headerlink" title="缺點"></a>缺點</h3><h2 id="複雜性：SOAP複雜，需要更多的程式碼和設定。效率：SOAP的通訊協議複雜，需要更多的資源和帶寬。"><a href="#複雜性：SOAP複雜，需要更多的程式碼和設定。效率：SOAP的通訊協議複雜，需要更多的資源和帶寬。" class="headerlink" title="複雜性：SOAP複雜，需要更多的程式碼和設定。效率：SOAP的通訊協議複雜，需要更多的資源和帶寬。"></a>複雜性：SOAP複雜，需要更多的程式碼和設定。<br>效率：SOAP的通訊協議複雜，需要更多的資源和帶寬。</h2><h2 id="REST-與-SOAP-的區別"><a href="#REST-與-SOAP-的區別" class="headerlink" title="REST 與 SOAP 的區別"></a>REST 與 SOAP 的區別</h2><p>REST 與 SOAP 在設計理念、資料格式、傳輸方式等方面有較大的不同。總體來說，REST 架構較為簡單、輕量級，適合快速開發和部署，而 SOAP 架構則更加完備、複雜，適合較為複雜和嚴格的應用場景。</p><h2 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h2><p>綜合上述，REST和SOAP各自有自己的優點和缺點。REST輕量級、簡單易懂、可擴展性強，而SOAP則是安全性和可靠性較高，且支持多種協定，如HTTP、TCP、SMTP等。在實際應用中，應根據項目需求和技術特點選擇適合的協議。</p><p>此外，由於REST和SOAP都是用於服務器之間的通信，因此安全性是非常重要的。對於REST API，常用的安全機制包括基於令牌(Token)的身份驗證和OAuth授權機制；對於SOAP，則可以使用WS-Security協議提供消息安全保護。在設計REST API和SOAP時，必須考慮到安全性問題，並選擇合適的安全機制。</p><p>總之，REST和SOAP都是用於服務器之間的通信，各自有自己的優點和缺點。在實際應用中，需要根據項目需求和技術特點來選擇合適的協議，同時關注安全性問題，選擇合適的安全機制。</p>]]></content>
      
      
      <categories>
          
          <category> 後端技術 </category>
          
          <category> API </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 後端技術 </tag>
            
            <tag> API </tag>
            
            <tag> Web Service </tag>
            
            <tag> Web API </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>API - Web Service 與 Web API</title>
      <link href="/2023/03/05/%E5%BE%8C%E7%AB%AF%E6%8A%80%E8%A1%93/API_WebSerice%E8%88%87WebAPI/"/>
      <url>/2023/03/05/%E5%BE%8C%E7%AB%AF%E6%8A%80%E8%A1%93/API_WebSerice%E8%88%87WebAPI/</url>
      
        <content type="html"><![CDATA[<h1 id="Web-Service"><a href="#Web-Service" class="headerlink" title="Web Service"></a>Web Service</h1><p>Web Service 是一種基於 Web 技術的軟體系統，可以讓不同的應用程式之間進行互操作。Web Service 使用標準化的 XML 消息進行通訊，並支援跨平台的互操作性。它可以通過 HTTP、SMTP 或其他通訊協定來提供網路服務。Web Service 通常使用 SOAP 協議來處理請求和回應。最初是為了解決企業應用系統的互操作性問題而出現的，通常使用 XML 或 JSON 編碼進行消息的傳輸。Web Service 通常包含一組 WSDL（Web Services Description Language）文件，這個文件定義了 Web Service 所支持的方法、引數、傳輸協議等細節。</p><p>Web Service 是一個通用的、標準化的、可互操作的應用程式介面，可以讓不同的應用程式互相溝通。它主要使用 SOAP 協議進行消息傳輸，並且通常包含一組 WSDL 文件。Web Service 的優點是可靠性高、安全性好、支持跨平台等，缺點是效率較低。</p><p>Web Service 可以被用於不同的場合，例如：</p><ol><li><p>集成不同平台的系統：Web Service 可以讓不同平台的系統進行互操作，透過 Web Service，企業可以更輕鬆地集成他們的內部系統和外部系統。</p></li><li><p>組件化的設計：Web Service 可以幫助開發者設計組件化的系統，透過 Web Service，開發者可以將系統分解成多個小的模組，每個模組可以透過 Web Service 進行通訊和交互。</p></li><li><p>分布式的應用程式：Web Service 可以讓分布式的應用程式進行互操作，透過 Web Service，開發者可以輕鬆地實現分布式的應用程式。</p></li></ol><h2 id="優勢"><a href="#優勢" class="headerlink" title="優勢"></a>優勢</h2><ul><li>廣泛適用於各種平台、語言，如 Java、PHP、C#等。</li><li>可以使用 SOAP 協定進行通訊，保證資料安全性。</li><li>有豐富的開發工具和支援。</li></ul><h2 id="劣勢"><a href="#劣勢" class="headerlink" title="劣勢"></a>劣勢</h2><ul><li>效能較差，因為要使用 SOAP 協定進行通訊，需編解碼、加解密等多個步驟，增加了傳輸時間和資源消耗。</li><li>程式碼較為複雜，開發維護成本高。</li></ul><h1 id="Web-API"><a href="#Web-API" class="headerlink" title="Web API"></a>Web API</h1><p>Web API是一個基於HTTP協議的Web服務，可以用於向應用程序或客戶端提供數據。</p><p>Web API可以返回多種格式的數據，如XML、JSON等，這使得Web API可以與不同的應用程序和客戶端進行交互。與Web服務不同，Web API主要基於HTTP協議進行操作，使用輕量級的JSON格式進行數據交換，因此其效率較高，且更易於維護和開發。</p><p>Web API的優點包括：</p><ol><li>輕量級：Web API使用輕量級的JSON數據格式，並且基於HTTP協議，因此效率較高。</li><li>易於維護和開發：Web API可以與不同的應用程序和客戶端進行交互，且具有良好的可擴展性和易於維護性。</li><li>支持多種數據格式：Web API可以返回多種格式的數據，如XML、JSON等，且支持自定義數據格式。</li><li>安全性高：Web API支持OAuth等安全協議，保護數據的安全性。</li></ol><h2 id="優勢-1"><a href="#優勢-1" class="headerlink" title="優勢"></a>優勢</h2><ul><li>可以使用多種通訊協定，如 RESTful、HTTP等，效能較好，因為不需要進行編解碼、加解密等多個步驟。</li><li>開發維護成本相對較低，因為程式碼簡單，易於開發和維護。</li><li>與前端的整合更緊密，開發過程中更易於測試和調試。</li></ul><h2 id="劣勢-1"><a href="#劣勢-1" class="headerlink" title="劣勢"></a>劣勢</h2><ul><li>無法保證資料安全性，需要透過其他方式來進行安全保護。</li><li>對於非 HTTP 協定的支援較差。</li></ul><blockquote><p><strong>資訊: 傳輸的資料可能會被竊聽或篡改</strong><br>以下是一些常見的保護方式：</p><ol><li>HTTPS：使用 SSL&#x2F;TLS 進行加密通訊，確保數據在傳輸過程中不被竊聽或篡改。</li><li>身分驗證：對 API 請求進行身分驗證，確保只有經過驗證的用戶才能訪問敏感資料。</li><li>授權：對不同的用戶或角色授權不同的權限，確保只有擁有權限的用戶才能訪問對應的資料。</li><li>防火牆：限制來自不信任網路的請求，防止未經授權的訪問和攻擊。<br>透過這些方式，可以提高 Web API 的安全性，保護資料不被未授權的用戶訪問。</li></ol></blockquote><hr><h2 id="Web-Service及-Web-API-不同處"><a href="#Web-Service及-Web-API-不同處" class="headerlink" title="Web Service及 Web API 不同處"></a>Web Service及 Web API 不同處</h2><ol><li>傳輸方式<ul><li>Web Service 使用 SOAP 協議</li><li>Web API 使用 HTTP 協議 ，設計架構通常由 REST 為主。</li></ul></li><li>開發方式<ul><li>Web Service 需要使用 WSDL（Web Services Description Language）文件定義服務的範圍、端點等等。</li><li>Web API 可以使用 ASP.NET、Node.js、Ruby on Rails 等框架來開發，並且更加簡單易用。</li></ul></li><li>安全性<ul><li>Web Service 支援多種安全性標準，例如 WS-Security 和 SAML。</li><li>Web API 則加強調基於 HTTPS 的安全性。</li></ul></li></ol><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><ol><li><a href="https://cychen59.blogspot.com/2019/06/web-service-web-api.html">Web Service及 Web API 有何不同?</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 後端技術 </category>
          
          <category> API </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 後端技術 </tag>
            
            <tag> API </tag>
            
            <tag> Web Service </tag>
            
            <tag> Web API </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C# Unit Test (一) - 使用Unit Test</title>
      <link href="/2023/03/05/%E5%BE%8C%E7%AB%AF%E6%8A%80%E8%A1%93/CS/NetCore/Core_05_%E4%BD%BF%E7%94%A8Unit%20Test/"/>
      <url>/2023/03/05/%E5%BE%8C%E7%AB%AF%E6%8A%80%E8%A1%93/CS/NetCore/Core_05_%E4%BD%BF%E7%94%A8Unit%20Test/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>目前開發至今已經快要邁向第二年，公司沒有人使用過單元測試，因此我決定要記錄Unit Test使用方式。紀錄主要原因是目前為止我尚未使用過Unit Test ，請各位見諒&lt;(＿　＿)&gt;。</p><hr><h1 id="單元測試-Unit-Test"><a href="#單元測試-Unit-Test" class="headerlink" title="單元測試 (Unit Test)"></a>單元測試 (Unit Test)</h1><p>單元測試可以稱模組測試，它主要針對程式模組正確性的驗證。它的優點開發過程可以用在早期開發抓到錯誤問題。</p><h2 id="使用-VS-C"><a href="#使用-VS-C" class="headerlink" title="使用 VS C#"></a>使用 VS C#</h2><p>這邊使用[主控台應用程式]展示UnitTest開啟方式。<br><img src="/img/UnitTest/Test01.jpg"><br>創建好之後輸入額外的Class並簡單撰寫Function。</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Arithmetic</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">decimal</span> <span class="title">Additon</span>(<span class="params"><span class="built_in">int</span> GetValue , <span class="built_in">int</span> SetValue</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">decimal</span> Result = GetValue + SetValue;</span><br><span class="line">        <span class="keyword">return</span> Result;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">decimal</span> <span class="title">Minus</span>(<span class="params"><span class="built_in">int</span> GetValue, <span class="built_in">int</span> SetValue</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">decimal</span> Result = GetValue - SetValue;</span><br><span class="line">        <span class="keyword">return</span> Result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="創建單元測試"><a href="#創建單元測試" class="headerlink" title="創建單元測試"></a>創建單元測試</h2><p>單元測試創建方式有兩種，一種是按下右鍵後，可以看見建立單元測試選項。這邊我就不展示這邊單元測試。<br><img src="/img/UnitTest/Test02.jpg"></p><p>請在我們的 [ 解決方案 ] 創建 [ MsTest 專案]，但要注意創建完沒有包含這區域裡面的專案中，所以要在[ 相容性 ]按下右鍵，在按下[ 新增專案參考 ]即可，通常會出現第一個選項。</p><p><img src="/img/UnitTest/Test03.jpg"><br><img src="/img/UnitTest/Test04.jpg"><br><img src="/img/UnitTest/Test05.jpg"></p><p>要非常要注意，相容性新增參考要注意不要加入到要進行測試的專案當中。</p><h2 id="撰寫測試Function"><a href="#撰寫測試Function" class="headerlink" title="撰寫測試Function"></a>撰寫測試Function</h2><p>這邊我們隨便在一個位置隨便輸入回傳值，進行查看測試樣子。</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> 測試四則運算_加號()</span><br><span class="line">&#123;</span><br><span class="line">    Arithmetic ari = <span class="keyword">new</span> Arithmetic();</span><br><span class="line">    <span class="built_in">decimal</span> result =  ari.Additon(<span class="number">3</span>, <span class="number">4</span>);</span><br><span class="line">    Assert.AreEqual(<span class="number">8</span>, result);<span class="comment">//</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>執行位置會在[測試]選項，選擇[執行所有測試]，會看到有錯誤訊息得知它會傳的內容。<br><img src="/img/UnitTest/Test06.jpg"><br><img src="/img/UnitTest/Test07.jpg"></p><p>如果改為正常後，就會如下圖。會明確知道這測試function是正常的，可以有效避免開發時意外錯誤問題。<br><img src="/img/UnitTest/Test08.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> 後端技術 </category>
          
          <category> C# </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
            <tag> core </tag>
            
            <tag> UnitTest </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C# Unit Test (2) - Assert method</title>
      <link href="/2023/03/05/%E5%BE%8C%E7%AB%AF%E6%8A%80%E8%A1%93/CS/NetCore/Core_06_Assert%20method/"/>
      <url>/2023/03/05/%E5%BE%8C%E7%AB%AF%E6%8A%80%E8%A1%93/CS/NetCore/Core_06_Assert%20method/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>上次使用 Unit Test 有注意到Assert的字眼，使用下來Assert主要判斷回傳值結果進行比較跟驗證，比較簡易的方式。<br>這次就來大概說幾個Assert method。</p><hr><h1 id="前置作業"><a href="#前置作業" class="headerlink" title="前置作業"></a>前置作業</h1><h2 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h2><p>目前我寫以下方式是取得自定義連線字串，記得去 <code>appsettings.json</code> 新增連線資訊。<br>繼上次使用新增專案方式，這次使用的是 <code>右鍵</code> &gt; <code>建立單元測試</code>方式。</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Comm</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">string</span> <span class="title">ConnectionString</span>(<span class="params"><span class="built_in">string</span> Connect</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        IConfiguration config = <span class="keyword">new</span> ConfigurationBuilder()</span><br><span class="line">            .SetBasePath(Directory.GetCurrentDirectory())</span><br><span class="line">            .AddJsonFile(<span class="string">&quot;appsettings.json&quot;</span>, optional: <span class="literal">true</span>, reloadOnChange: <span class="literal">true</span>)</span><br><span class="line">            .Build();</span><br><span class="line">        <span class="keyword">return</span> config.GetConnectionString(Connect);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下圖可以看到 [Project]Tests，[Project]會自動帶入你當前的Project名稱也相當的方便，其他欄位同等意思。</p><p><img src="/img/UnitTest/Test09.jpg"></p><p>進行測試內容</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">TestMethod()</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ConnectionStringTest</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    Comm comm = <span class="keyword">new</span> Comm();</span><br><span class="line">    <span class="built_in">string</span> str = comm.ConnectionString(<span class="string">&quot;Dev&quot;</span>);</span><br><span class="line">    <span class="built_in">string</span> result = <span class="string">&quot;Data Source=***;Initial Catalog=***;Persist Security Info=True;User ID=***;Password=***&quot;</span>;</span><br><span class="line">    Assert.AreEqual(result, str);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Assert-method"><a href="#Assert-method" class="headerlink" title="Assert method"></a>Assert method</h1><p>Assert 類別目的驗證特定功能。單元測試方法會執行應用程式程式碼中方法的程式碼，但只有在包含 Assert 時，才會報告程式碼行為的正確性。</p><h2 id="Assert-AreEqual"><a href="#Assert-AreEqual" class="headerlink" title="Assert.AreEqual"></a>Assert.AreEqual</h2><p>這function是用來比較 str 、 result 是否相符，也是上次使用第一個method。</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">TestMethod()</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ConnectionStringTest</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    Comm comm = <span class="keyword">new</span> Comm();</span><br><span class="line">    <span class="built_in">string</span> str = comm.ConnectionString(<span class="string">&quot;Dev&quot;</span>);</span><br><span class="line">    <span class="built_in">string</span> result = <span class="string">&quot;Data Source=***;Initial Catalog=***;Persist Security Info=True;User ID=***;Password=***&quot;</span>;</span><br><span class="line">    Assert.AreEqual(result, str);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Assert-AreNotEqual"><a href="#Assert-AreNotEqual" class="headerlink" title="Assert.AreNotEqual"></a>Assert.AreNotEqual</h2><p>剛好是AreEqual的相反意思，可以用來測試有沒有null或是””。</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">TestMethod()</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ConnectionStringTest</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    Comm comm = <span class="keyword">new</span> Comm();</span><br><span class="line">    <span class="built_in">string</span> str = comm.ConnectionString(<span class="string">&quot;Dev&quot;</span>);</span><br><span class="line">    <span class="built_in">string</span> result = <span class="string">&quot;Data Source=***;Initial Catalog=***;Persist Security Info=True;User ID=***;Password=***&quot;</span>;</span><br><span class="line">    Assert.AreNotEqual(result, str);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Assert-AreSame"><a href="#Assert-AreSame" class="headerlink" title="Assert.AreSame"></a>Assert.AreSame</h2><p>這邊AreSame比較物件屬性，但如果分別Option、Result一起比較會發生錯誤。<br>這邊特點是物件相同外、記憶體位置也必須要相同才可以。</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">[<span class="meta">TestMethod()</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">TestSame</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    List&lt;<span class="built_in">string</span>&gt; option = <span class="keyword">new</span> List&lt;<span class="built_in">string</span>&gt;() &#123; <span class="string">&quot;Hello&quot;</span>, <span class="string">&quot;UnitTest&quot;</span> &#125;;</span><br><span class="line">    List&lt;<span class="built_in">string</span>&gt; Result = <span class="keyword">new</span> List&lt;<span class="built_in">string</span>&gt;() &#123; <span class="string">&quot;Hello&quot;</span>, <span class="string">&quot;UnitTest&quot;</span> &#125;;</span><br><span class="line">    Assert.AreSame(option, option);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Assert-AreNoSame"><a href="#Assert-AreNoSame" class="headerlink" title="Assert.AreNoSame"></a>Assert.AreNoSame</h2><p>這邊如同上面一樣，當初以為會以物件屬性以及內值比較差異o(￣┰￣*)ゞ。</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">TestMethod()</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">TestSame</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    List&lt;<span class="built_in">string</span>&gt; option = <span class="keyword">new</span> List&lt;<span class="built_in">string</span>&gt;() &#123; <span class="string">&quot;Hello&quot;</span>, <span class="string">&quot;UnitTest&quot;</span> &#125;;</span><br><span class="line">    List&lt;<span class="built_in">string</span>&gt; Result = <span class="keyword">new</span> List&lt;<span class="built_in">string</span>&gt;() &#123; <span class="string">&quot;Hello&quot;</span>, <span class="string">&quot;UnitTest&quot;</span> &#125;;</span><br><span class="line">    Assert.AreNotSame(option, Result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Assert-Fail"><a href="#Assert-Fail" class="headerlink" title="Assert.Fail"></a>Assert.Fail</h2><p>Fail 為失敗意思。使用這方發可能遇到null或是Exception使用，可以配合try{}catch{}使用。</p><h2 id="Assert-Inconclusive"><a href="#Assert-Inconclusive" class="headerlink" title="Assert.Inconclusive"></a>Assert.Inconclusive</h2><p>這邊主要是忽略功能，如果從Test Explorer 打開，可以發現有驚嘆號，代表已經被忽略過了。</p><h2 id="Assert-IsFalse-Assert-IsTrue"><a href="#Assert-IsFalse-Assert-IsTrue" class="headerlink" title="Assert.IsFalse &amp;&amp; Assert.IsTrue"></a>Assert.IsFalse &amp;&amp; Assert.IsTrue</h2><p>下方範例判斷為是否為False。當然也會有IsTrue。</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">TestMethod()</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ConnectionStringTest</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    Comm comm = <span class="keyword">new</span> Comm();</span><br><span class="line">    <span class="built_in">string</span> str = comm.ConnectionString(<span class="string">&quot;Dev&quot;</span>);</span><br><span class="line">    <span class="built_in">string</span> result = <span class="string">&quot;Data Source=***;Initial Catalog=***;Persist Security Info=True;User ID=***;Password=***&quot;</span>;</span><br><span class="line">    Assert.IsFalse((str!=result));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Assert-IsInstanceOfType"><a href="#Assert-IsInstanceOfType" class="headerlink" title="Assert.IsInstanceOfType"></a>Assert.IsInstanceOfType</h2><p>這邊主要驗證對方預期類型的執行個體。</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">TestClass()</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">CommTests</span></span><br><span class="line">&#123;</span><br><span class="line">    [<span class="meta">TestMethod()</span>]</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ConnectionStringTest</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Comm comm = <span class="keyword">new</span> Comm();</span><br><span class="line">        <span class="built_in">string</span> str = comm.ConnectionString(<span class="string">&quot;Dev&quot;</span>);</span><br><span class="line">        <span class="built_in">string</span> result = <span class="string">&quot;Data Source=***;Initial Catalog=***;Persist Security Info=True;User ID=***;Password=***&quot;</span>;</span><br><span class="line">        Assert.IsInstanceOfType(str,<span class="keyword">typeof</span>(<span class="built_in">string</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Assert-IsNotInstanceOfType"><a href="#Assert-IsNotInstanceOfType" class="headerlink" title="Assert.IsNotInstanceOfType"></a>Assert.IsNotInstanceOfType</h2><p>這與上方相反，這兩種反而比較常會用到。</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">TestClass()</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">CommTests</span></span><br><span class="line">&#123;</span><br><span class="line">    [<span class="meta">TestMethod()</span>]</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ConnectionStringTest</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Comm comm = <span class="keyword">new</span> Comm();</span><br><span class="line">        <span class="built_in">string</span> str = comm.ConnectionString(<span class="string">&quot;Dev&quot;</span>);</span><br><span class="line">        <span class="built_in">string</span> result = <span class="string">&quot;Data Source=***;Initial Catalog=***;Persist Security Info=True;User ID=***;Password=***&quot;</span>;</span><br><span class="line">        Assert.IsNotInstanceOfType(str,<span class="keyword">typeof</span>(<span class="built_in">int</span>)));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Assert-IsNotNull-Assert-IsNull"><a href="#Assert-IsNotNull-Assert-IsNull" class="headerlink" title="Assert.IsNotNull &amp;&amp; Assert.IsNull"></a>Assert.IsNotNull &amp;&amp; Assert.IsNull</h2><p>這邊主要判斷使否為Null狀況，這也常常會用上。</p><h2 id="Assert-ThrowsException"><a href="#Assert-ThrowsException" class="headerlink" title="Assert.ThrowsException"></a>Assert.ThrowsException</h2><p>測試委派 action 所指定的程式碼會擲回 T 類型的確切指定例外狀況</p><h2 id="Assert-ReferenceEquals"><a href="#Assert-ReferenceEquals" class="headerlink" title="Assert.ReferenceEquals"></a>Assert.ReferenceEquals</h2><p>判斷指定的 Object 執行個體是否為相同的執行個體。<br>別懷疑內值並不會去做檢查。</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">TestMethod()</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ExceptionReuslt</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">object</span> a_obj = <span class="keyword">new</span> List&lt;<span class="built_in">string</span>&gt;() &#123; <span class="string">&quot;1&quot;</span>,<span class="string">&quot;5&quot;</span>&#125;;</span><br><span class="line">    List&lt;<span class="built_in">string</span>&gt; b_obj =<span class="keyword">new</span> List&lt;<span class="built_in">string</span>&gt;() &#123; <span class="string">&quot;3&quot;</span>, <span class="string">&quot;5&quot;</span> &#125;;</span><br><span class="line">    <span class="built_in">object</span> c_obj = <span class="keyword">new</span> <span class="built_in">object</span>();</span><br><span class="line">    Assert.ReferenceEquals(a_obj, b_obj);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 後端技術 </category>
          
          <category> C# </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
            <tag> UnitTest </tag>
            
            <tag> 單元測試 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C# .NET 與 Net Framework</title>
      <link href="/2023/03/04/%E5%BE%8C%E7%AB%AF%E6%8A%80%E8%A1%93/CS/%E7%AD%86%E8%A8%98/CS_NOTE_00_.NET%E8%88%87NET%20Framework/"/>
      <url>/2023/03/04/%E5%BE%8C%E7%AB%AF%E6%8A%80%E8%A1%93/CS/%E7%AD%86%E8%A8%98/CS_NOTE_00_.NET%E8%88%87NET%20Framework/</url>
      
        <content type="html"><![CDATA[<h2 id="Net"><a href="#Net" class="headerlink" title=".Net"></a>.Net</h2><p>.NET 是一個由 Microsoft 開發的跨平台框架，用於開發和執行各種應用程式。它提供了一個統一的編程模型，使開發人員可以使用不同的語言（例如 C#、VB.NET、F# 等）和工具（例如 Visual Studio、Visual Studio Code 等）來開發應用程式。.NET 還提供了各種庫和工具，使開發人員可以輕鬆地開發高品質、高效和安全的應用程式。</p><p>.NET 包括兩個主要部分：.NET Framework 和 .NET Core。.NET Framework 是 .NET 的最初版本，它運行在 Windows 平台上，支持使用 C#、VB.NET 等語言開發各種應用程式。.NET Core 是 .NET 的新一代版本，它是跨平台的，支持在 Windows、Linux 和 macOS 等平台上運行，同時也支持使用 C#、VB.NET、F# 等語言開發各種應用程式。.NET Core 還支持微服務架構、容器化部署和現代 Web 開發等新特性。</p><h3 id="特色"><a href="#特色" class="headerlink" title="特色"></a>特色</h3><ol><li><p>跨平台支持：.NET Core 可以在 Windows、Linux 和 macOS 等多種平台上運行，這使得開發人員可以使用相同的代碼庫在不同的平台上開發和部署應用程式。</p></li><li><p>開源：.NET Core 是開源的，這意味著開發人員可以自由地訪問和修改 .NET Core 的源代碼，進行定制和優化。</p></li><li><p>高效：.NET Core 通過優化運行時、編譯器和庫等多個方面來實現高效性能，使得應用程式可以更快地執行。</p></li><li><p>輕量級：.NET Core 是一個輕量級的框架，它只包含必要的庫和工具，這使得應用程式可以更小、更快地部署和運行。</p></li><li><p>支持現代 Web 開發：.NET Core 提供了強大的支持現代 Web 開發的功能，包括 Razor Pages、MVC、Web API 等，開發人員可以使用這些功能開發高品質、高效的 Web 應用程式。</p></li><li><p>支持微服務架構：.NET Core 提供了豐富的支持微服務架構的功能，包括輕量級的、可互換的容器化部署、健康檢查、熱插拔等，使得開發人員可以輕鬆地開發和部署微服務應用程式。</p></li></ol><h3 id="與其他平台的關係"><a href="#與其他平台的關係" class="headerlink" title="與其他平台的關係"></a>與其他平台的關係</h3><p>NET Core 經常會拿來與其他平台做類比，尤其是它的源頭 .NET Framework 以及另一個相似性質的開源平台 Mono。</p><hr><h2 id="Framework"><a href="#Framework" class="headerlink" title="Framework"></a>Framework</h2><h3 id="NET-Framework"><a href="#NET-Framework" class="headerlink" title=".NET Framework"></a>.NET Framework</h3><p>據微軟的說明，.NET Core 和 .NET Framework 是子集 (Subset) 與超集 (Superset) 的關係，.NET Core 將會實作出部份的 .NET Framework 功能 (基本上是不含使用者介面的部份)，例如 JIT (.NET Core 採用 RyuJIT)、垃圾收集器 (GC) 以及型別 (包含基本型別以及泛型型別等)。未來 .NET Framework 和 .NET Core 也將會是各自發展，但它們也會同時使用彼此的功能，例如 .NET Compiler Platform 與 RyuJIT 等技術。</p><h3 id="Mono"><a href="#Mono" class="headerlink" title="Mono"></a>Mono</h3><p>Mono 是另一個已發展許久的 .NET Framework 跨平台開源版本，基本上並不隸屬微軟官方，而是由社群的力量所主導，自成一個生態系統，也開發出了像Xamarin這樣的跨平台.NET行動應用，.NET Core 與 Mono 未來會是合作的關係，Mono 仍會維持社群力量的維護與發展，而 .NET Core 則會以官方角度來進行發展，兩邊也會一起進行彼此功能上的增進。</p><h3 id="NET-CLI"><a href="#NET-CLI" class="headerlink" title=".NET CLI"></a>.NET CLI</h3><p>.NET CLI (Command-Line Interface) 指令列工具是 .NET Core 處理建造、執行與編輯工作的主要工具 ，有幾個主要的動作：</p><h3 id="ASP-net-Core"><a href="#ASP-net-Core" class="headerlink" title="ASP.net Core"></a>ASP.net Core</h3><p>ASP.NET Core 是一種跨平台且高效能的開放原始碼架構<br>建置現代化、雲端式、網際網路連線的應用程式、 Web 應用程式和服務、IoT 應用程式、以及行動後端<br>可以在 Windows、macOS 和 Linux 上使用慣用的開發工具<br>部署到雲端或在內部部署。<br>在 .NET Core 或 .NET Framework 上執行。</p><p>ASP.NET 5的Stack，為了開放原始碼與跨平台(Linux、iOS)，擺脫了對 System.Web 的依賴</p><hr><h2 id="NET-vs-NET-Framework"><a href="#NET-vs-NET-Framework" class="headerlink" title=".NET vs NET Framework"></a>.NET vs NET Framework</h2><h3 id="差異"><a href="#差異" class="headerlink" title="差異"></a>差異</h3><p>.NET本身是一個跨平台的開發框架，它提供了一個統一的開發環境和庫，開發人員可以使用不同的編程語言，如C#、VB.NET和F#等來編寫應用程序，並且可以在Windows、Linux和macOS等操作系統上運行。</p><p>.NET Framework是.NET框架的一個特定實現，它只能運行在Windows操作系統上。.NET Framework提供了一個完整的開發環境和庫，包括Windows Forms、WPF、ASP.NET等等。.NET Framework的版本是固定的，開發人員需要安裝對應的版本才能開發和運行應用程序。</p><h3 id="優點-缺點"><a href="#優點-缺點" class="headerlink" title="優點 &amp; 缺點"></a>優點 &amp; 缺點</h3><h4 id="NET-的優點："><a href="#NET-的優點：" class="headerlink" title=".NET 的優點："></a>.NET 的優點：</h4><p>跨平台：.NET支援在多種作業系統上運行，包括Windows、Linux和macOS等，使開發人員可以開發跨平台應用程序。<br>開放原始碼：.NET是一個開源的開發框架，開發人員可以查看和修改庫的源代碼。<br>支援多種編程語言：.NET支援多種編程語言，如C#、VB.NET和F#等。<br>輕量級：.NET運行時庫是輕量級的，可在資源有限的設備上運行。</p><h4 id="NET-的缺點："><a href="#NET-的缺點：" class="headerlink" title=".NET 的缺點："></a>.NET 的缺點：</h4><h2 id="開發環境和庫相對較少：由於-NET是一個相對較新的開發框架，開發環境和庫相對較少。運行速度較慢：由於-NET需要運行在運行時環境中，因此運行速度可能較慢。"><a href="#開發環境和庫相對較少：由於-NET是一個相對較新的開發框架，開發環境和庫相對較少。運行速度較慢：由於-NET需要運行在運行時環境中，因此運行速度可能較慢。" class="headerlink" title="開發環境和庫相對較少：由於.NET是一個相對較新的開發框架，開發環境和庫相對較少。運行速度較慢：由於.NET需要運行在運行時環境中，因此運行速度可能較慢。"></a>開發環境和庫相對較少：由於.NET是一個相對較新的開發框架，開發環境和庫相對較少。<br>運行速度較慢：由於.NET需要運行在運行時環境中，因此運行速度可能較慢。</h2><h4 id="NET-Framework-的優點："><a href="#NET-Framework-的優點：" class="headerlink" title=".NET Framework 的優點："></a>.NET Framework 的優點：</h4><p>強大的開發環境和庫：.NET Framework提供了豐富的開發環境和庫，包括Windows Forms、WPF、ASP.NET等等，使開發人員可以輕鬆地開發各種應用程序。<br>支援多種開發工具：.NET Framework支援多種開發工具，如Visual Studio、Visual Basic等。<br>穩定性和可靠性：.NET Framework經過了多年的發展和驗證，已經被廣泛使用，因此非常穩定和可靠。</p><h4 id="NET-Framework-的缺點："><a href="#NET-Framework-的缺點：" class="headerlink" title=".NET Framework 的缺點："></a>.NET Framework 的缺點：</h4><p>只能在Windows上運行：.NET Framework只能在Windows操作系統上運行，對於其他操作系統沒有支援。<br>安裝和升級困難：由於.NET Framework的版本是固定的，因此安裝和升級可能比較困難。</p>]]></content>
      
      
      <categories>
          
          <category> 後端技術 </category>
          
          <category> C# </category>
          
          <category> 筆記 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Git】- 何謂 Git Flow</title>
      <link href="/2023/03/02/DevOps/Git/Git_01_%E4%BD%95%E8%AC%82%20Git%20Flow%20/"/>
      <url>/2023/03/02/DevOps/Git/Git_01_%E4%BD%95%E8%AC%82%20Git%20Flow%20/</url>
      
        <content type="html"><![CDATA[<h1 id="Git-Flow"><a href="#Git-Flow" class="headerlink" title="Git Flow"></a>Git Flow</h1><p>期初使用 Git 多人開發時候，常因為沒定義規則，遇到 Commit 集中一堆會造成後續維護很大困擾。因此於 2010年提出一套流程 <a href="https://nvie.com/posts/a-successful-git-branching-model/">【Git Flow】</a>，而這套流程廣泛被應用。</p><h2 id="五種分支"><a href="#五種分支" class="headerlink" title="五種分支"></a>五種分支</h2><p>Git Flow 使用主分支（master）和開發分支（develop）以及支援分支（feature）、修復分支（hotfix）、發布分支（release）分支類型，以適應不同的開發場景和需求。</p><h3 id="主要-Branch"><a href="#主要-Branch" class="headerlink" title="主要 Branch"></a>主要 Branch</h3><p>通常會用來給 DevOps 或是程式碼集中點，不會輕易刪除掉 Branch 。 </p><ol><li>正式環境 (Master) : 代表著穩定的產品版本，只會從發布分支或熱修分支合併過來。</li><li>開發環境 (Develop): 代表著正在開發的下一個版本，所有的開發工作都在這個分支上進行。</li></ol><h3 id="次要-Branch"><a href="#次要-Branch" class="headerlink" title="次要 Branch"></a>次要 Branch</h3><ol><li>功能分支（feature）：代表著新功能的開發分支，通常是由開發分支分出來的，完成後再合併回開發分支。</li><li>修復分支（hotfix）：代表著緊急修復的分支，通常是由主分支分出來的，完成後再合併回主分支和開發分支。</li><li>發布分支（release）：代表著發布準備的分支，通常是由開發分支分出來的，完成後再合併回主分支和開發分支。</li></ol><p><img src="/image/20240202_21-51-52.png"></p><hr><h2 id="分支運作方式"><a href="#分支運作方式" class="headerlink" title="分支運作方式"></a>分支運作方式</h2><h3 id="Master-Develop-分支"><a href="#Master-Develop-分支" class="headerlink" title="Master &#x2F; Develop 分支"></a>Master &#x2F; Develop 分支</h3><p>當中 Master 與 Develop 會有一定的關聯性，必須要與 Develop 、Master 維持上下版本關係，才能有效達到效果。<br>如果過程中遇到Master 更新有 Bug 其實相當危險，所以會需要使用到 release 分支。<br><img src="/image/20230302_09-47-37.png"></p><h3 id="發布分支-release"><a href="#發布分支-release" class="headerlink" title="發布分支 release"></a>發布分支 release</h3><p>作用是在更新到 Master 前，需要建立一版到 Release 進行測試，可以達到版本號、控管作用。<br><img src="/image/20230302_09-53-51.png"></p><h3 id="整體運作模式"><a href="#整體運作模式" class="headerlink" title="整體運作模式"></a>整體運作模式</h3><p>功能分支（feature） 使用情境會是因”需求”而需要加入到 Develop 。修復分支（hotfix）則情境會是功能Bug 需要修繕需要更新雙方分支達到同步修繕效果。</p><p><img src="/image/20230302_10-01-46.png"></p><p>圖片中有標示 (1)、(2)是指雙方分支需要同步過去。留意是 release 不能直接把它當作測試區使用，因為他作用是作為 Develop 進版時測試環境，並非測試區。</p>]]></content>
      
      
      <categories>
          
          <category> DevOps </category>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Git】- 比較前後差異(一) git diff</title>
      <link href="/2023/03/02/DevOps/Git/Git_02_%E6%AF%94%E8%BC%83%E5%89%8D%E5%BE%8C%E5%B7%AE%E7%95%B0(%E4%B8%80)%20git%20diff/"/>
      <url>/2023/03/02/DevOps/Git/Git_02_%E6%AF%94%E8%BC%83%E5%89%8D%E5%BE%8C%E5%B7%AE%E7%95%B0(%E4%B8%80)%20git%20diff/</url>
      
        <content type="html"><![CDATA[<p>近期遇到很多版本、程式更新總類、修改內容需要調資料，當中可以知道 git 可以從 UI看到差異性，同時有包含diff 這個指令到目前為止我都沒用過，因此來實際玩玩看就知道了。</p><h2 id="git-diff"><a href="#git-diff" class="headerlink" title="git diff"></a>git diff</h2><p>這功能主要是比對 Git Commit 之間的版本差異之外，也同樣可以跟資料與資料比對。依據任何情境下會使用不能的方式。</p><ol><li>單一檔案比對 : 若有 script 或是 一些檔案透過資料夾備份管理 (無使用git管理)，需要使用資料差異性確認差異。</li><li>版本差異比對 : 針對特定版本或是穩定版本查看差異性。</li><li>資料夾比對 : 這邊會偏向TFS沒有上git 版本可以考慮使用這個功能。</li></ol><h2 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h2><h3 id="一、檔案比對"><a href="#一、檔案比對" class="headerlink" title="一、檔案比對"></a>一、檔案比對</h3><p>這邊用簡單txt 檔案進行比較，可以看出diff不會因為檔案名稱不同判斷錯誤。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git diff .\text1.txt .\text2.txt</span><br></pre></td></tr></table></figure><p>以下範例 :<br><img src="/image/20230426_21-33-42.png"></p><h3 id="二、資料夾比較"><a href="#二、資料夾比較" class="headerlink" title="二、資料夾比較"></a>二、資料夾比較</h3><p>這功能主要以資料夾互相比較結果，以上兩點為離線版使用的指令，相當實用。 (如果有資料夾比對部分，裡面資料必須要相同不然就會遇到判讀問題)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git diff text_1 text_2</span><br></pre></td></tr></table></figure><p><img src="/image/20230426_22-04-07.png"></p><h3 id="三、Commit-比較"><a href="#三、Commit-比較" class="headerlink" title="三、Commit 比較"></a>三、Commit 比較</h3><p>這會由git commit 進行比對，首先需要知道 commit 再進行比對即可。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git diff commit_id commit_id</span><br></pre></td></tr></table></figure><hr><p>進階用法可以參考 will 保哥 使用過的git diff 用法。</p><h2 id="文件參考"><a href="#文件參考" class="headerlink" title="文件參考"></a>文件參考</h2><ol><li><a href="https://ithelp.ithome.com.tw/articles/10135441">30 天精通 Git 版本控管 (09)：比對檔案與版本差異</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> DevOps </category>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Git】- 使用 remote 強制覆蓋 repository</title>
      <link href="/2023/03/02/DevOps/Git/Git_03_%E4%BD%BF%E7%94%A8%20remote%20%E5%BC%B7%E5%88%B6%E8%A6%86%E8%93%8B%20repository/"/>
      <url>/2023/03/02/DevOps/Git/Git_03_%E4%BD%BF%E7%94%A8%20remote%20%E5%BC%B7%E5%88%B6%E8%A6%86%E8%93%8B%20repository/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>這篇為記錄用途，但也強烈不推薦使用在 git 已經有良好版本時候使用這個招式，否則找不回來原本的版本。</p><h2 id="local-加入到-remote"><a href="#local-加入到-remote" class="headerlink" title="local 加入到 remote"></a>local 加入到 remote</h2><p>git remote 常見指令如下 :</p><ul><li>加入遠端：git remote add <code>&lt;remote name&gt;</code> <code>&lt;url&gt;</code></li><li>觀看遠端列表：git remote</li><li>觀看遠端列表(包含 rul)：git remote -v</li><li>下載遠端：git clone <code>&lt;url&gt;</code></li></ul><p>從 local 匯入 remote 有兩種情況 “初始專案”、”離線開發”這種有機會用到這個東西。remote 是為了要上傳到 【github】、【gitlab】之類的 resp 。</p><h3 id="一、取得-repository-url"><a href="#一、取得-repository-url" class="headerlink" title="一、取得 repository url"></a>一、取得 repository url</h3><p>首先，可以先把 repository 創建完畢並且取得 url 即可。<br><img src="/image/20230604_13-19-22.png"></p><h3 id="二、加入-remote"><a href="#二、加入-remote" class="headerlink" title="二、加入 remote"></a>二、加入 remote</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add &lt;remote name&gt; &lt;url&gt;</span><br></pre></td></tr></table></figure><h3 id="三、Push-專案"><a href="#三、Push-專案" class="headerlink" title="三、Push 專案"></a>三、Push 專案</h3><p>備註 : 因為是初始化專案，可以直接使用force，但不推薦有很多 history commits 情況下覆蓋。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push &lt;remote name&gt; &lt;branch&gt; --force</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> DevOps </category>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Git】- 如何使用 SSH 連線到 Git</title>
      <link href="/2023/03/02/DevOps/Git/Git_04_%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8%20SSH%20%E9%80%A3%E7%B7%9A%E5%88%B0%20Git/"/>
      <url>/2023/03/02/DevOps/Git/Git_04_%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8%20SSH%20%E9%80%A3%E7%B7%9A%E5%88%B0%20Git/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>這邊主要是針對使用SSH方式進行Git操作，因為有時候會遇到需要使用SSH方式進行操作，因此這邊紀錄一下。</p><h2 id="什麼是-SSH（Secure-Shell）"><a href="#什麼是-SSH（Secure-Shell）" class="headerlink" title="什麼是 SSH（Secure Shell）"></a>什麼是 SSH（Secure Shell）</h2><p>SSH（Secure Shell）是一種網路協議，用於安全地在網絡上進行數據通信、遠程訪問和遠程管理。SSH 的目的是通過加密和認證機制來保護網絡通信的安全性，特別是在不受信任的網絡中進行數據傳輸。</p><ol><li><p>遠程登錄（Remote Login）：SSH 允許用戶從遠程位置（例如家中或辦公室之外）安全地登錄到遠程服務器或計算機上，並在遠程計算機上運行命令。</p></li><li><p>文件傳輸（Secure File Transfer）：SSH 提供了安全的文件傳輸機制，允許用戶在本地計算機和遠程服務器之間傳輸文件，這種機制通常用於上傳或下載文件。</p></li><li><p>遠程管理（Remote Management）：系統管理員可以使用 SSH 遠程管理遠程服務器或設備，包括配置、監控和維護。</p></li></ol><h3 id="安全性"><a href="#安全性" class="headerlink" title="安全性"></a>安全性</h3><ol><li><p>加密（Encryption）：SSH 使用加密算法對數據進行加密，使得數據在傳輸過程中無法被未經授權的第三方窺探或修改。</p></li><li><p>身份驗證（Authentication）：SSH 使用公鑰加密和私鑰解密的技術，允許用戶通過憑證來證明自己的身份，從而防止未經授權的訪問。</p></li></ol><h2 id="如何使用SSH"><a href="#如何使用SSH" class="headerlink" title="如何使用SSH"></a>如何使用SSH</h2><p>這邊主要是使用Git Bash 進行操作，首先需要進入到Git Bash 進行操作，這邊會有兩種方式進行操作。</p><h3 id="一、ssh-keygen指令"><a href="#一、ssh-keygen指令" class="headerlink" title="一、ssh-keygen指令"></a>一、ssh-keygen指令</h3><p>ssh-keygen 是一個用於生成 SSH 密鑰對的工具，它允許用戶生成用於身份驗證的公鑰和私鑰</p><h4 id="參數"><a href="#參數" class="headerlink" title="參數"></a>參數</h4><ol><li><code>-t &lt;keytype&gt;</code>：指定要生成的密鑰類型。常用的類型包括 rsa（默認）、dsa、ecdsa 和 ed25519。</li><li><code>-b &lt;bits&gt;</code>：指定 RSA 密鑰的位數。默認值是 2048。</li><li><code>-C &lt;comment&gt;</code>：添加一個註釋，通常用於識別該密鑰的用途。</li><li><code>-f &lt;filename&gt;</code>：指定要保存生成的密鑰文件的路徑和文件名。</li><li><code>-N &lt;passphrase&gt;</code>：為私鑰加上密碼短語，增加安全性。</li><li><code>-q</code>：靜默模式，生成過程中不顯示進度。</li><li><code>-E &lt;hash&gt;</code> OpenSSH 7.2 及更高版本）。</li><li><code>-F &lt;hostname&gt;</code>：檢查特定主機的 known_hosts 文件，用於查找指定主機的密鑰。</li><li><code>-l</code>：列出指定密鑰文件的指紋（fingerprint）。</li><li><code>-B</code>：顯示指定密鑰文件的 bubblebabble 格式。</li></ol><p><img src="/image/20230801_23-21-38.png"></p><h3 id="二、使用Git-Bash-進行操作"><a href="#二、使用Git-Bash-進行操作" class="headerlink" title="二、使用Git Bash 進行操作"></a>二、使用Git Bash 進行操作</h3><ol><li>首先進入到Git Bash 進行操作，輸入以下指令。<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen</span><br></pre></td></tr></table></figure></li><li>如果沒特別指定路徑預設(C:\Users\使用者名稱&#x2F;.ssh&#x2F;id_rsa)，沒有特定指定密碼可以直接按下Enter。</li></ol><p><img src="/image/20230801_23-20-46.png"><br><img src="/image/20230801_23-23-11.png"></p><h3 id="三、使用Git-SSH-Key"><a href="#三、使用Git-SSH-Key" class="headerlink" title="三、使用Git SSH Key"></a>三、使用Git SSH Key</h3><p>使用 SSH KEY 使用 id_rsa.pub 檔案內容即可。</p><h3 id="Gitlab"><a href="#Gitlab" class="headerlink" title="Gitlab"></a>Gitlab</h3><ol><li>首先進入到Gitlab，點選右上角的頭像，點選Settings。<br><img src="/image/20230801_23-31-26.png"></li><li>點選左邊的SSH Keys，將剛剛產生的SSH Key 貼上，並且輸入Title，點選Add key。<br><img src="/image/20230801_23-32-43.png"></li></ol><h3 id="Github"><a href="#Github" class="headerlink" title="Github"></a>Github</h3><ol><li><p>首先進入到Github，點選右上角的頭像，點選Settings。<br><img src="/image/20230801_23-34-17.png"></p></li><li><p>點選左邊的SSH and GPG keys，點選New SSH key。<br><img src="/image/20230801_23-34-03.png"></p></li><li><p>將剛剛產生的SSH Key 貼上，並且輸入Title，點選Add SSH key。</p></li><li><p>加入後會看到如下畫面。<br><img src="/image/20230801_23-36-23.png"></p></li></ol><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><ol><li><a href="https://ithelp.ithome.com.tw/articles/10305020">Day 23 — 實驗室前置作業：GitLab 開發前置設定 (SSH 通道)</a></li><li><a href="https://noob.tw/ssh-key/">SSH 金鑰：免密碼登入遠端主機、傳遞檔案</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> DevOps </category>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Git】- 使用 git reset 復原及還原專案資料</title>
      <link href="/2023/03/02/DevOps/Git/Git_05_%E4%BD%BF%E7%94%A8%20git%20reset%20%E5%BE%A9%E5%8E%9F%E5%8F%8A%E9%82%84%E5%8E%9F%E5%B0%88%E6%A1%88%E8%B3%87%E6%96%99/"/>
      <url>/2023/03/02/DevOps/Git/Git_05_%E4%BD%BF%E7%94%A8%20git%20reset%20%E5%BE%A9%E5%8E%9F%E5%8F%8A%E9%82%84%E5%8E%9F%E5%B0%88%E6%A1%88%E8%B3%87%E6%96%99/</url>
      
        <content type="html"><![CDATA[<p>專案有時因功能需求或是其他原因，會需要回復到之前的版本。通常會有兩種狀況不是專案壞掉、設定檔跑掉，初起可以先用以下做法來驗證。</p><h2 id="還原方式"><a href="#還原方式" class="headerlink" title="還原方式"></a>還原方式</h2><h2 id="一、還原最新的commit"><a href="#一、還原最新的commit" class="headerlink" title="一、還原最新的commit"></a>一、還原最新的commit</h2><p>通常使用時機會是因為專案壞掉，或是設定檔跑掉，可以先還原最新的commit。</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset --hard HEAD</span><br></pre></td></tr></table></figure><h2 id="二、還原其他commit指令"><a href="#二、還原其他commit指令" class="headerlink" title="二、還原其他commit指令"></a>二、還原其他commit指令</h2><p>若發現還原最新的commit後，還是有問題，可以使用以下指令還原其他commit。</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset --hard &lt;commit id&gt;</span><br></pre></td></tr></table></figure><hr><h2 id="補充"><a href="#補充" class="headerlink" title="補充"></a>補充</h2><p>.git 是git的版本控制資料夾，裡面存放了git的版本控制資料，如果刪除了這個資料夾，就無法使用git來控制版本了，但是這並不會影響到你的專案資料，只是無法使用git來控制版本。</p><p>相對，如果你只有取得一個.git是可以利用 <code>git reset</code>把資料還原回來，可以不必要打包太大資料給對方。</p>]]></content>
      
      
      <categories>
          
          <category> DevOps </category>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C# Scaffold</title>
      <link href="/2023/02/26/%E5%BE%8C%E7%AB%AF%E6%8A%80%E8%A1%93/CS/%E7%AD%86%E8%A8%98/CS_NOTE_02_core-scaffold/"/>
      <url>/2023/02/26/%E5%BE%8C%E7%AB%AF%E6%8A%80%E8%A1%93/CS/%E7%AD%86%E8%A8%98/CS_NOTE_02_core-scaffold/</url>
      
        <content type="html"><![CDATA[<h1 id="Scaffold"><a href="#Scaffold" class="headerlink" title="Scaffold"></a>Scaffold</h1><p>又可稱”鷹架”、”支架”。Scaffold 是可以解釋為程式碼產生器，可以透由指令產生出想要的檔案、專案，使用部分通常是透由指令方式呼叫、產生指令。dotnet.exe內也有提供scaffold概念。</p><h2 id="專案"><a href="#專案" class="headerlink" title="專案"></a>專案</h2><p>Net Core SDK安裝時候會提供預先定義的 scaffold 範本(example: dotnet.exe)。 以下指令參考 : </p><ul><li>展開 dotnet.exe 清單 : <code>dotnet new --lists </code></li><li>求救指令 : <code> dotnet new -h</code></li></ul><h2 id="Entity-Framework-Core"><a href="#Entity-Framework-Core" class="headerlink" title="Entity Framework Core"></a>Entity Framework Core</h2><p>EF Core 使用方式與 EF 不同，EF Core 基於 Scaffolding 實體類型類別和 DbCoNtext 類別的程式。可以透由套件管理員主控台 (PMC):<code>Scaffold-DbContext</code>或是 NET 命令列介面 (CLI): <code>dotnet ef dbcontext scaffold</code> 產生出檔案。</p><h3 id="注意事項"><a href="#注意事項" class="headerlink" title="注意事項"></a>注意事項</h3><ul><li>必須使用<code>Microsoft.EntityFrameworkCore.Design</code> NuGet 套件</li><li>需要安裝相關工具 : <ol><li><a href="https://docs.microsoft.com/zh-tw/ef/core/cli/powershell">套件管理員主控台 (PMC)</a></li><li><a href="https://docs.microsoft.com/zh-tw/ef/core/cli/dotnet">NET 命令列介面 (CLI)</a></li></ol></li></ul><h3 id="使用方式-NET-命令列介面-CLI"><a href="#使用方式-NET-命令列介面-CLI" class="headerlink" title="使用方式 - NET 命令列介面 (CLI)"></a>使用方式 - NET 命令列介面 (CLI)</h3><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dotnet ef dbcontext scaffold &quot;Data Source=(localdb)\MSSQLLocalDB;Initial Catalog=Chinook&quot; Microsoft.EntityFrameworkCore.SqlServer</span><br></pre></td></tr></table></figure><h3 id="使用方式-套件管理員主控台-PMC"><a href="#使用方式-套件管理員主控台-PMC" class="headerlink" title="使用方式 - 套件管理員主控台 (PMC)"></a>使用方式 - 套件管理員主控台 (PMC)</h3><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Scaffold-DbContext &#x27;Data Source=(localdb)\MSSQLLocalDB;Initial Catalog=Chinook&#x27; Microsoft.EntityFrameworkCore.SqlServer</span><br></pre></td></tr></table></figure><h2 id="參考文件"><a href="#參考文件" class="headerlink" title="參考文件"></a>參考文件</h2><ol><li><a href="https://docs.microsoft.com/zh-tw/ef/core/managing-schemas/scaffolding?tabs=dotnet-core-cli">反向工程</a></li><li><a href="https://dotblogs.com.tw/stanley14/2016/07/02/193832">[Web API]基本CRUD 程式碼產生器(Scaffold)</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 後端技術 </category>
          
          <category> C# </category>
          
          <category> 筆記 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C# - DI / IOC 差異</title>
      <link href="/2023/02/26/%E5%BE%8C%E7%AB%AF%E6%8A%80%E8%A1%93/CS/%E7%AD%86%E8%A8%98/CS_NOTE_03_DI%E4%BB%A5%E5%8F%8AIOC/"/>
      <url>/2023/02/26/%E5%BE%8C%E7%AB%AF%E6%8A%80%E8%A1%93/CS/%E7%AD%86%E8%A8%98/CS_NOTE_03_DI%E4%BB%A5%E5%8F%8AIOC/</url>
      
        <content type="html"><![CDATA[<h2 id="DI-依賴注入-Dependency-Injection"><a href="#DI-依賴注入-Dependency-Injection" class="headerlink" title="DI 依賴注入 (Dependency Injection)"></a>DI 依賴注入 (Dependency Injection)</h2><p>是 DI 的一種實現方式，它將對象的創建和生命週期管理交給 IoC 容器來處理。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">定義 : A物件程式內部需要使用B物件 , 則 B 物件中有依賴的成份。</span><br></pre></td></tr></table></figure><p><img src="/image/20221209_17-15-42.png"></p><h2 id="IOC-控制反轉-Inversion-of-Control"><a href="#IOC-控制反轉-Inversion-of-Control" class="headerlink" title="IOC 控制反轉 (Inversion of Control)"></a>IOC 控制反轉 (Inversion of Control)</h2><p>是一種軟體設計模式，指的是將對象創建和生命週期管理的責任轉移到 IoC 容器中，容器負責解析依賴關係，並將需要的對象注入到其它對象中。這樣做的好處是降低代碼的耦合性，增加代碼的靈活性和可測試性。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">定義 : A 物件與 B 物件控制權由第三方容器控制。</span><br></pre></td></tr></table></figure><p><img src="/image/20221209_17-15-51.png"></p><h2 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h2><p>IoC 是一種設計模式，而 DI 則是 IoC 的一種具體實現方式。使用 DI 的好處是可以使代碼更加靈活和可測試，因為對象的依賴關係被轉移到了容器中，可以方便地模擬和測試各個對象。同時，使用 DI 還可以提高代碼的可讀性和可維護性，因為代碼中不再包含創建和管理依賴關係的代碼。</p>]]></content>
      
      
      <categories>
          
          <category> 後端技術 </category>
          
          <category> C# </category>
          
          <category> 筆記 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C# ORM 物件關係映像</title>
      <link href="/2023/02/26/%E5%BE%8C%E7%AB%AF%E6%8A%80%E8%A1%93/CS/%E7%AD%86%E8%A8%98/CS_NOTE_04_ORM%E7%89%A9%E4%BB%B6%E9%97%9C%E4%BF%82%E6%98%A0%E5%83%8F/"/>
      <url>/2023/02/26/%E5%BE%8C%E7%AB%AF%E6%8A%80%E8%A1%93/CS/%E7%AD%86%E8%A8%98/CS_NOTE_04_ORM%E7%89%A9%E4%BB%B6%E9%97%9C%E4%BF%82%E6%98%A0%E5%83%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="物件關係映像-Object-Relational-Mapping"><a href="#物件關係映像-Object-Relational-Mapping" class="headerlink" title="物件關係映像 Object Relational Mapping"></a>物件關係映像 Object Relational Mapping</h2><p>是一種軟體開發技術，它將關聯式資料庫中的資料表映射到物件導向程式語言中的物件，從而實現程式語言與資料庫之間的無縫集成。</p><p>ORM 框架通常提供以下功能：</p><ol><li>對象映射：ORM 框架會自動將資料庫表格映射到物件，開發人員可以像使用任何物件一樣使用這些物件。</li><li>關聯性映射：ORM 框架可以處理表格之間的關係，使開發人員可以輕鬆地編寫與關聯性相關的程式碼。</li><li>資料庫操作：ORM 框架提供了一套 API，使開發人員可以方便地對資料庫進行 CRUD 操作。</li><li>查詢語言支持：ORM 框架通常提供了一套自己的查詢語言，開發人員可以使用這些查詢語言方便地查詢資料庫。</li></ol><p>ORM 框架的好處是可以減少對於 SQL 的依賴，減少了對於資料庫的複雜性，讓開發人員可以更專注於物件導向程式設計，並且可以提高開發效率。但是使用 ORM 框架也存在一些缺點，比如在效能上可能會有些影響，需要仔細選擇適合的 ORM 框架並進行優化。</p><h3 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h3><p>物件關係映像是 “物件”與”資料庫”之間對應的一種技術，例如 : “Entity Framework”。特色是資料透過【物件方式】 呈現，也可以使用 CRUD 方式。</p><p>ORM 與 資料庫由抽象關係，程式與資料庫沒有直接相依性，資料庫具有可抽換性，即使變更資料庫平台，ORM 資料存取可以正常運作。</p><p><img src="https://2.bp.blogspot.com/-4ABOoATNbag/V0vUgXqBAEI/AAAAAAAADHY/o61wN5yv2cMDX0lwGghkvzACQcU1YOOaQCLcB/s1600/object_relational_mapping.JPG"></p>]]></content>
      
      
      <categories>
          
          <category> 後端技術 </category>
          
          <category> C# </category>
          
          <category> 筆記 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C# 命名原則 PascalCase、camelCase、Hungarian notation</title>
      <link href="/2023/02/26/%E5%BE%8C%E7%AB%AF%E6%8A%80%E8%A1%93/CS/%E7%AD%86%E8%A8%98/CS_NOTE_%E5%91%BD%E5%90%8D%E5%8E%9F%E5%89%87/"/>
      <url>/2023/02/26/%E5%BE%8C%E7%AB%AF%E6%8A%80%E8%A1%93/CS/%E7%AD%86%E8%A8%98/CS_NOTE_%E5%91%BD%E5%90%8D%E5%8E%9F%E5%89%87/</url>
      
        <content type="html"><![CDATA[<h1 id="命名原則"><a href="#命名原則" class="headerlink" title="命名原則"></a>命名原則</h1><h2 id="一、小駝峰式命名法-lower-camel-case"><a href="#一、小駝峰式命名法-lower-camel-case" class="headerlink" title="一、小駝峰式命名法 (lower camel case)"></a>一、小駝峰式命名法 (lower camel case)</h2><p>又稱「camel Case 」。把字首字母改為小寫其他改為大寫，例如 : <code>dataTable</code>、<code>fileName</code>、<code>userDetail</code>。</p><p><img src="/image/20230226_19-44-08.png"></p><h2 id="二、大駝峰式命名法-upper-camel-case"><a href="#二、大駝峰式命名法-upper-camel-case" class="headerlink" title="二、大駝峰式命名法 (upper camel case)"></a>二、大駝峰式命名法 (upper camel case)</h2><p>又稱「Pascal Case 」。把每一個前面第一個字首字母改為大寫，例如 : <code>DataTable</code>、<code>FileName</code>、<code>UserDetail</code>。</p><p><img src="/image/20230226_19-44-17.png"></p><h2 id="三、匈牙利命名法（Hungarian-notation）"><a href="#三、匈牙利命名法（Hungarian-notation）" class="headerlink" title="三、匈牙利命名法（Hungarian notation）"></a>三、匈牙利命名法（Hungarian notation）</h2><p>匈牙利命名法的基本思想是在變數名稱前面添加一個或多個簡稱，這個簡稱表示該變數的數據類型或其他屬性。例如，字串變數可以使用 “str” 的前綴，整數變數可以使用 “i” 的前綴等等。這些前綴使代碼更易於閱讀，因為它們提供了有關變數類型和用途的重要信息。</p><p>匈牙利命名法前綴：</p><ul><li>str：字串類型</li><li>i：整數類型</li><li>b：布林類型</li><li>f：浮點數類型</li><li>o：物件類型</li></ul><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">string</span> strName;</span><br><span class="line"><span class="built_in">int</span> iAge;</span><br><span class="line"><span class="built_in">bool</span> bIsEnabled;</span><br></pre></td></tr></table></figure><p>軟體開發中已經不再廣泛使用匈牙利命名法，因為它可能會導致變數名稱變得冗長且容易混淆。取而代之的是，一些開發者選擇使用更加清晰和簡潔的命名慣例，例如 camelCase 或 PascalCase。最重要的是，開發者應該在代碼中使用一致的命名慣例，以提高代碼的可讀性和可維護性。</p><h2 id="四、使用時機"><a href="#四、使用時機" class="headerlink" title="四、使用時機"></a>四、使用時機</h2><p>它們的使用時機主要取決於個人偏好和代碼風格指南，但也可以根據識別符所表示的內容進行適當的選擇。以下是幾個使用 camelCase 和 PascalCase 的建議時機：</p><ul><li>Camel Case：通常用於識別符的命名，如變量、方法、參數等。在這些情況下，識別符的首字母小寫，後面的單詞首字母大寫，並且不使用下劃線或其他分隔符。</li><li>Pascal Case：通常用於命名類、結構體、接口和委派等。在這些情況下，識別符的每個單詞的首字母都大寫，並且不使用下劃線或其他分隔符。在一些代碼風格中，也可以用於命名方法和屬性等識別符。</li></ul><p>以下是一些使用 camelCase 和 PascalCase 的示例：</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用 camelCase 命名變量和方法</span></span><br><span class="line"><span class="built_in">int</span> myVariable;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">myMethod</span>()</span> &#123; ... &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 PascalCase 命名類和接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MyClass</span> &#123; ... &#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IMyInterface</span> &#123; ... &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 混合使用 camelCase 和 PascalCase</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">doSomething</span>(<span class="params"><span class="built_in">int</span> myParameter</span>)</span> &#123; ... &#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MyCustomClass</span> &#123; ... &#125;</span><br></pre></td></tr></table></figure><p>總體而言，選擇使用 camelCase 或 PascalCase 取決於識別符的類型和用途。開發者應該遵循一致的命名慣例，以提高代碼的可讀性和可維護性。</p><h2 id="五、參考文件"><a href="#五、參考文件" class="headerlink" title="五、參考文件"></a>五、參考文件</h2><ul><li><a href="https://www.cnblogs.com/CodingPerfectWorld/archive/2010/06/10/1755628.html">变量的命名方法【Hungarian】【camelCase】【PascalCase】</a></li><li><a href="https://ithelp.ithome.com.tw/articles/10233726">邁向專業軟體工程師必修的英文課系列 第 2 篇</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 後端技術 </category>
          
          <category> C# </category>
          
          <category> 筆記 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
            <tag> 命名原則 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【筆記】ChatGPT API 串接API 心得</title>
      <link href="/2023/02/19/%E7%AD%86%E8%A8%98%E8%88%87%E7%94%9F%E6%B4%BB%E9%9B%9C%E8%A8%98/%E6%8A%80%E8%A1%93/%E3%80%90%E7%AD%86%E8%A8%98%E3%80%91ChatGPT_%E4%B8%B2%E6%8E%A5API%E5%BF%83%E5%BE%97/"/>
      <url>/2023/02/19/%E7%AD%86%E8%A8%98%E8%88%87%E7%94%9F%E6%B4%BB%E9%9B%9C%E8%A8%98/%E6%8A%80%E8%A1%93/%E3%80%90%E7%AD%86%E8%A8%98%E3%80%91ChatGPT_%E4%B8%B2%E6%8E%A5API%E5%BF%83%E5%BE%97/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>近期有使用 Line Bot 完成一個小小專案，但是又想告一些花樣就把ChatGPT 加入Line 中，唯一區點就是要注意Token 使用量。</p><h2 id="Token-使用量"><a href="#Token-使用量" class="headerlink" title="Token 使用量"></a>Token 使用量</h2><p>GPT 有很多版本 (<del>光GPT 也不知道他已經多少版本</del>)，串接過程其實有聽過 Token 次數，依據每個版本不同 Token 數就會不同。例如 : GPT-3 每一個 Token 為 4 個char 或是 0.75 個字。目前 GPT-3 只有提供最大  4,096 tokens，如果超過就會無法正常使用。</p><h2 id="首次使用"><a href="#首次使用" class="headerlink" title="首次使用"></a>首次使用</h2><p>chatGPT 提供免費 18 美元的費用，這三天玩下去還沒花到 1美元，若直接把他當簡易的搜尋工具他是相當翻遍許多。<br><img src="/image/20230308_17-55-21.png"></p><h2 id="GPT-API-申請"><a href="#GPT-API-申請" class="headerlink" title="GPT API 申請"></a>GPT API 申請</h2><p>Open API : <a href="https://platform.openai.com/">https://platform.openai.com/</a></p><p>申請方式只需要按下 “Create new secret key” 即可。<br><img src="/image/20230308_17-47-49.png"><br><img src="/image/20230308_17-51-28.png"></p><h2 id="Library"><a href="#Library" class="headerlink" title="Library"></a>Library</h2><p>這邊是已經有提供 Library 可以馬上實現，Line 部分我使用 <a href="https://github.com/betalgo/openai">Betalgo.OpenAI.GPT3</a>製作，製作方式很簡單這邊就不介紹操作。</p><p>入口 : <a href="https://platform.openai.com/docs/libraries/community-libraries">https://platform.openai.com/docs/libraries/community-libraries</a></p><h2 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h2><ol><li><a href="https://www.version1.com/an-analysis-of-chatgpt-and-openai-gpt3-how-to-use-it-for-your-business/">VERSOPN</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 筆記 </category>
          
          <category> 生活雜記 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>【筆記】DI依賴注入生命週期</title>
      <link href="/2023/02/19/%E7%AD%86%E8%A8%98%E8%88%87%E7%94%9F%E6%B4%BB%E9%9B%9C%E8%A8%98/%E6%8A%80%E8%A1%93/%E3%80%90%E7%AD%86%E8%A8%98%E3%80%91DI%E4%BE%9D%E8%B3%B4%E6%B3%A8%E5%85%A5%E7%94%9F%E5%91%BD%E9%80%B1%E6%9C%9F/"/>
      <url>/2023/02/19/%E7%AD%86%E8%A8%98%E8%88%87%E7%94%9F%E6%B4%BB%E9%9B%9C%E8%A8%98/%E6%8A%80%E8%A1%93/%E3%80%90%E7%AD%86%E8%A8%98%E3%80%91DI%E4%BE%9D%E8%B3%B4%E6%B3%A8%E5%85%A5%E7%94%9F%E5%91%BD%E9%80%B1%E6%9C%9F/</url>
      
        <content type="html"><![CDATA[<h2 id="DI-依賴注入（Dependency-Injection）"><a href="#DI-依賴注入（Dependency-Injection）" class="headerlink" title="DI 依賴注入（Dependency Injection）"></a>DI 依賴注入（Dependency Injection）</h2><p>DI（Dependency Injection）是一種設計模式，它的主要目的是降低軟體元件之間的耦合度，讓程式更容易測試和維護。DI 透過將類別所需的相依物件，由外部傳入，讓類別不需要知道相依物件的實作細節，只需要知道相依物件所提供的介面（interface），就可以正常運作。</p><h2 id="生命週期"><a href="#生命週期" class="headerlink" title="生命週期"></a>生命週期</h2><p>在 DI 中，相依物件的生命週期通常由 DI 容器來管理。一般來說，每個類別在 DI 容器中都會有一個對應的生命週期。常見的生命週期有以下幾種：</p><ul><li>Transient：每次注入都會創建一個新的實例。</li><li>Singleton：整個應用程序只會創建一個實例。</li><li>Scoped：在同一個作用域中只會創建一個實例。</li></ul><h2 id="使用規則"><a href="#使用規則" class="headerlink" title="使用規則"></a>使用規則</h2><p>使用 DI 時，有幾個重要的使用規則：</p><ul><li>盡量避免在程式碼中直接 new 物件，應該使用 DI 容器來管理物件的生命週期。</li><li>相依物件的注入應該使用介面（interface）而不是具體類別（concrete class）。</li><li>相依物件的注入應該在建構子（constructor）中完成，而不是在類別的方法中完成。</li><li>相依物件的注入應該由 DI 容器負責，而不是由使用者負責。</li></ul><p>以下是一個簡單的使用 DI 的範例：</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IService</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">DoSomething</span>()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Service</span> : <span class="title">IService</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">DoSomething</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;Do something&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Consumer</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> IService _service;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Consumer</span>(<span class="params">IService service</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        _service = service;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">DoWork</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        _service.DoSomething();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 DI 容器來註冊並解析相依物件</span></span><br><span class="line"><span class="keyword">var</span> services = <span class="keyword">new</span> ServiceCollection();</span><br><span class="line">services.AddTransient&lt;IService, Service&gt;();</span><br><span class="line">services.AddTransient&lt;Consumer&gt;();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> serviceProvider = services.BuildServiceProvider();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解析 Consumer 並呼叫 DoWork 方法</span></span><br><span class="line"><span class="keyword">var</span> consumer = serviceProvider.GetService&lt;Consumer&gt;();</span><br><span class="line">consumer.DoWork();</span><br></pre></td></tr></table></figure><p>在上面的範例中，IService 是一個介面，Service 是一個實現該介面的類別。Consumer 類別有一個建構子，該建構子需要一個 IService 的實例。在使用 DI 容器時，我們使用 ServiceCollection 類別來註冊 IService 和 Consumer 類別，然後使用 BuildServiceProvider 方法</p>]]></content>
      
      
      <categories>
          
          <category> 筆記 </category>
          
          <category> 生活雜記 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>【筆記】編程模式Programming Patterns</title>
      <link href="/2023/02/19/%E7%AD%86%E8%A8%98%E8%88%87%E7%94%9F%E6%B4%BB%E9%9B%9C%E8%A8%98/%E6%8A%80%E8%A1%93/%E3%80%90%E7%AD%86%E8%A8%98%E3%80%91%E7%B7%A8%E7%A8%8B%E6%A8%A1%E5%BC%8FProgramming%20Patterns/"/>
      <url>/2023/02/19/%E7%AD%86%E8%A8%98%E8%88%87%E7%94%9F%E6%B4%BB%E9%9B%9C%E8%A8%98/%E6%8A%80%E8%A1%93/%E3%80%90%E7%AD%86%E8%A8%98%E3%80%91%E7%B7%A8%E7%A8%8B%E6%A8%A1%E5%BC%8FProgramming%20Patterns/</url>
      
        <content type="html"><![CDATA[<h2 id="編程模式（Programming-patterns）"><a href="#編程模式（Programming-patterns）" class="headerlink" title="編程模式（Programming patterns）"></a>編程模式（Programming patterns）</h2><p>是一種在軟體工程中使用的解決方案，它可以解決特定的問題，並經過反覆證實可行。這些模式是由軟體工程師在長時間開發軟體中所經驗到的最佳實踐，並且被廣泛使用。使用這些模式可以使代碼更加可讀、可維護和可擴展。</p><p>編程模式可以分為三類</p><ol><li>創建型模式（Creational patterns）</li><li>結構型模式（Structural patterns）</li><li>行為型模式（Behavioral patterns）</li></ol><h3 id="創建型模式"><a href="#創建型模式" class="headerlink" title="創建型模式"></a>創建型模式</h3><p>這些模式主要用於將對象的創建與使用分離開來。其中比較常見的模式有工廠模式（Factory pattern）、抽象工廠模式（Abstract Factory pattern）、單例模式（Singleton pattern）、建造者模式（Builder pattern）和原型模式（Prototype pattern）。</p><h3 id="結構型模式"><a href="#結構型模式" class="headerlink" title="結構型模式"></a>結構型模式</h3><p>這些模式主要用於將對象和類結構化，以更好地進行組織和管理。其中比較常見的模式有適配器模式（Adapter pattern）、橋接模式（Bridge pattern）、裝飾模式（Decorator pattern）、外觀模式（Facade pattern）、享元模式（Flyweight pattern）和代理模式（Proxy pattern）。</p><h2 id="行為型模式"><a href="#行為型模式" class="headerlink" title="行為型模式"></a>行為型模式</h2><p>這些模式主要用於管理對象之間的通信。其中比較常見的模式有職責鏈模式（Chain of Responsibility pattern）、命令模式（Command pattern）、解釋器模式（Interpreter pattern）、迭代器模式（Iterator pattern）、中介者模式（Mediator pattern）、觀察者模式（Observer pattern）、狀態模式（State pattern）、策略模式（Strategy pattern）、模板方法模式（Template Method pattern）和訪問者模式（Visitor pattern）等。</p>]]></content>
      
      
      <categories>
          
          <category> 筆記 </category>
          
          <category> 生活雜記 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>C# 實體化與抽象化</title>
      <link href="/2023/02/19/%E5%BE%8C%E7%AB%AF%E6%8A%80%E8%A1%93/CS/%E7%AD%86%E8%A8%98/CS_NOTE_01_%E5%AF%A6%E9%AB%94%E5%8C%96%E8%88%87%E6%8A%BD%E8%B1%A1%E5%8C%96/"/>
      <url>/2023/02/19/%E5%BE%8C%E7%AB%AF%E6%8A%80%E8%A1%93/CS/%E7%AD%86%E8%A8%98/CS_NOTE_01_%E5%AF%A6%E9%AB%94%E5%8C%96%E8%88%87%E6%8A%BD%E8%B1%A1%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h2 id="實體類別"><a href="#實體類別" class="headerlink" title="實體類別"></a>實體類別</h2><p>實體類別是具體的類別，可以直接實例化為物件，並對其進行操作。實體類別可以包含屬性、方法、事件等成員，並且可以被其他類別繼承。以下是一個示例：</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Person</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Name &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> Age &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SayHello</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;Hello, my name is &quot;</span> + Name + <span class="string">&quot; and I am &quot;</span> + Age + <span class="string">&quot; years old.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 實例化一個Person物件</span></span><br><span class="line">Person p = <span class="keyword">new</span> Person();</span><br><span class="line">p.Name = <span class="string">&quot;John&quot;</span>;</span><br><span class="line">p.Age = <span class="number">30</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 呼叫方法</span></span><br><span class="line">p.SayHello();</span><br></pre></td></tr></table></figure><h2 id="抽象類別"><a href="#抽象類別" class="headerlink" title="抽象類別"></a>抽象類別</h2><p>抽象類別是一種特殊的類別，它不能直接實例化為物件，而是必須被其他類別繼承。抽象類別可以包含抽象方法、虛方法、屬性等成員，並且必須被子類實現。以下是一個示例：</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">Shape</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="built_in">double</span> <span class="title">GetArea</span>()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Draw</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;Drawing shape...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Circle</span> : <span class="title">Shape</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">double</span> radius;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Circle</span>(<span class="params"><span class="built_in">double</span> radius</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>.radius = radius;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">double</span> <span class="title">GetArea</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> Math.PI * radius * radius;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 實例化一個Circle物件</span></span><br><span class="line">Circle c = <span class="keyword">new</span> Circle(<span class="number">5.0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 呼叫方法</span></span><br><span class="line"><span class="built_in">double</span> area = c.GetArea();</span><br><span class="line">Console.WriteLine(<span class="string">&quot;The area of the circle is: &quot;</span> + area);</span><br></pre></td></tr></table></figure><p>在上面的例子中，Shape 是一個抽象類別，它包含一個抽象方法 GetArea() 和一個虛方法 Draw()，而 Circle 是一個實體類別，它繼承自 Shape 並實現了 GetArea() 方法。</p>]]></content>
      
      
      <categories>
          
          <category> 後端技術 </category>
          
          <category> C# </category>
          
          <category> 筆記 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C# In 泛型修飾詞</title>
      <link href="/2023/02/19/%E5%BE%8C%E7%AB%AF%E6%8A%80%E8%A1%93/CS/%E7%AD%86%E8%A8%98/CS_NOTE_In%E6%B3%9B%E5%9E%8B%E4%BF%AE%E9%A3%BE%E8%A9%9E/"/>
      <url>/2023/02/19/%E5%BE%8C%E7%AB%AF%E6%8A%80%E8%A1%93/CS/%E7%AD%86%E8%A8%98/CS_NOTE_In%E6%B3%9B%E5%9E%8B%E4%BF%AE%E9%A3%BE%E8%A9%9E/</url>
      
        <content type="html"><![CDATA[<h2 id="泛型修飾詞"><a href="#泛型修飾詞" class="headerlink" title="泛型修飾詞"></a>泛型修飾詞</h2><p>泛型修飾詞用於指定泛型類型參數，以便在編譯時使用具體的類型。泛型修飾詞使用尖括號”&lt; &gt;”表示，放置在類型名稱的後面。可以定義一個泛型類型List，其中T是一個類型參數：</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">List</span>&lt;<span class="title">T</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> T[] items;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">List</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        items = <span class="keyword">new</span> T[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Add</span>(<span class="params">T item</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// Add item to the list</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Other methods here</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在上面的示例中，T是一個泛型類型參數，可以代表任何類型。當創建List物件時，必須指定T的具體類型，例如：</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">List&lt;<span class="built_in">int</span>&gt; intList = <span class="keyword">new</span> List&lt;<span class="built_in">int</span>&gt;();</span><br><span class="line">List&lt;<span class="built_in">string</span>&gt; stringList = <span class="keyword">new</span> List&lt;<span class="built_in">string</span>&gt;();</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在上面的代碼中，intList是一個List物件，其T類型參數為int。stringList是一個List物件，其T類型參數為string。在編譯時，T將被替換為具體的類型，使得編譯器能夠在編譯時檢查類型相容性，進而提高代碼的可靠性和效率。</p><h2 id="使用泛型的時機"><a href="#使用泛型的時機" class="headerlink" title="使用泛型的時機"></a>使用泛型的時機</h2><ol><li>創建通用類型：當需要創建能夠適用於多種類型的類型時，可以使用泛型來實現。例如 List<T>、Dictionary&lt;TKey, TValue&gt; 等都是通用類型。</li><li>創建可重用的方法：當需要寫一個方法，且方法參數或返回值的類型不確定時，可以使用泛型方法。這樣可以實現方法的通用性，讓方法可以適用於不同的類型。</li><li>創建泛型接口：當需要創建可用於多種不同類型的類的接口時，可以使用泛型接口。例如，IEnumerable<T> 接口用於表示任何可列舉的序列，而不關心序列包含的實際類型。</li></ol><p>由於泛型在編譯時需要產生額外的程式碼來支援不同的類型，因此在執行時可能會比使用非泛型的方法稍慢。此外，在使用泛型時，還需要注意以下幾點：</p><ol><li>泛型類型的實例化可能需要額外的記憶體和執行時間，這可能會導致效能下降。</li><li>過度使用泛型可能會導致代碼複雜性增加，進而降低代碼的可讀性和可維護性。</li><li>當需要在多個執行緒中使用泛型時，需要注意同步的問題，以避免可能的資料競爭和併發問題。</li></ol><p>使用泛型可以幫助開發人員撰寫更具有彈性和可重用性的程式碼。但是，在使用泛型時，還需要根據具體情況來權衡效能和可維護性等因素。</p><h2 id="泛型-非泛型範例"><a href="#泛型-非泛型範例" class="headerlink" title="泛型 &#x2F; 非泛型範例"></a>泛型 &#x2F; 非泛型範例</h2><h3 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h3><p>以下是一個使用泛型的例子，該例子創建一個通用的 Stack<T> 類型，用於存儲任何類型的物件：</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Stack</span>&lt;<span class="title">T</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;T&gt; items;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Stack</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        items = <span class="keyword">new</span> List&lt;T&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Push</span>(<span class="params">T item</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        items.Add(item);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">Pop</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (items.Count == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> InvalidOperationException(<span class="string">&quot;Stack is empty&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        T item = items[items.Count - <span class="number">1</span>];</span><br><span class="line">        items.RemoveAt(items.Count - <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> item;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在這個例子中，泛型類型 T 可以代表任何類型，因此這個 Stack<T> 類型可以存儲任何類型的物件，包括整數、字符串、自定義類型等。以下是一個使用這個 Stack<T> 類型的例子：</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Stack&lt;<span class="built_in">int</span>&gt; intStack = <span class="keyword">new</span> Stack&lt;<span class="built_in">int</span>&gt;();</span><br><span class="line">intStack.Push(<span class="number">1</span>);</span><br><span class="line">intStack.Push(<span class="number">2</span>);</span><br><span class="line">intStack.Push(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">int</span> x = intStack.Pop(); <span class="comment">// x = 3</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>###0 非泛型</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">IntStack</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;<span class="built_in">int</span>&gt; items;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">IntStack</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        items = <span class="keyword">new</span> List&lt;<span class="built_in">int</span>&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Push</span>(<span class="params"><span class="built_in">int</span> item</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        items.Add(item);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">int</span> <span class="title">Pop</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (items.Count == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> InvalidOperationException(<span class="string">&quot;Stack is empty&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">int</span> item = items[items.Count - <span class="number">1</span>];</span><br><span class="line">        items.RemoveAt(items.Count - <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> item;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在這個例子中，Stack 類型只能存儲整數，無法存儲其他類型的物件。以下是一個使用這個 IntStack 類型的例子：</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">IntStack intStack = <span class="keyword">new</span> IntStack();</span><br><span class="line">intStack.Push(<span class="number">1</span>);</span><br><span class="line">intStack.Push(<span class="number">2</span>);</span><br><span class="line">intStack.Push(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">int</span> x = intStack.Pop(); <span class="comment">// x = 3</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>這兩個例子展示了泛型和非泛型類型的不同之處。使用泛型可以創建更通用、可重用的類型，而非泛型類型則具有更具體的限制。</p>]]></content>
      
      
      <categories>
          
          <category> 後端技術 </category>
          
          <category> C# </category>
          
          <category> 筆記 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C# out、ref關鍵字差異</title>
      <link href="/2023/02/19/%E5%BE%8C%E7%AB%AF%E6%8A%80%E8%A1%93/CS/%E7%AD%86%E8%A8%98/CS_NOTE_out%E4%BB%A5%E5%8F%8ARef%E5%B7%AE%E7%95%B0/"/>
      <url>/2023/02/19/%E5%BE%8C%E7%AB%AF%E6%8A%80%E8%A1%93/CS/%E7%AD%86%E8%A8%98/CS_NOTE_out%E4%BB%A5%E5%8F%8ARef%E5%B7%AE%E7%95%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="out-關鍵字"><a href="#out-關鍵字" class="headerlink" title="out 關鍵字"></a>out 關鍵字</h2><p>out 關鍵字表示該參數是一個輸出參數，方法將為其賦值。使用 out 關鍵字的參數在方法調用之前不需要賦值。在方法內部，out 參數必須賦值，否則編譯器會報錯。以下是使用 out 關鍵字的範例：</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Calculate</span>(<span class="params"><span class="built_in">int</span> input, <span class="keyword">out</span> <span class="built_in">int</span> output</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    output = input * <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">int</span> input = <span class="number">5</span>;</span><br><span class="line"><span class="built_in">int</span> result;</span><br><span class="line">Calculate(input, <span class="keyword">out</span> result);</span><br></pre></td></tr></table></figure><p>上面範例中，Calculate 方法帶有一個 input 參數和一個 out output 參數。Calculate 方法內部賦值了 output 參數，因此可以在方法調用後使用 result 變數來獲取方法的計算結果。</p><h2 id="ref-關鍵字"><a href="#ref-關鍵字" class="headerlink" title="ref 關鍵字"></a>ref 關鍵字</h2><p>ref 關鍵字則表示該參數是一個引用參數，方法可以修改其值並且這些修改也會影響到參數的原始值。使用 ref 關鍵字的參數必須在方法調用之前賦值。以下是使用 ref 關鍵字的範例：</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Increment</span>(<span class="params"><span class="keyword">ref</span> <span class="built_in">int</span> <span class="keyword">value</span></span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">value</span>++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">int</span> number = <span class="number">5</span>;</span><br><span class="line">Increment(<span class="keyword">ref</span> number);</span><br></pre></td></tr></table></figure><p>在這個範例中，Increment 方法帶有一個 ref value 參數。Increment 方法內部修改了 value 參數的值，因此在方法調用後，number 變數的值也會被修改。</p><h2 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h2><p>out 和 ref 都用於方法參數的傳遞，但是它們有不同的用途和規範。out 關鍵字用於表示一個輸出參數，而 ref 關鍵字則用於表示一個引用參數。</p><p>重點整理 : </p><ul><li>傳遞至 ref 參數的引數，在傳遞之前必須先初始化。 out 參數的引數不需要在傳遞之前先明確初始化。 </li><li>ref 參數必須做初始化 ， Out則不需要</li><li>out 必須修改傳入的參數， ref 則不用</li></ul><table><thead><tr><th align="center"></th><th align="center">參數初始化</th><th align="center">修改參數</th><th align="center">執行前初始</th><th align="center">結束前初始</th></tr></thead><tbody><tr><td align="center">out</td><td align="center"></td><td align="center">V</td><td align="center"></td><td align="center">V</td></tr><tr><td align="center">ref</td><td align="center">V</td><td align="center"></td><td align="center">V</td><td align="center"></td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 後端技術 </category>
          
          <category> C# </category>
          
          <category> 筆記 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C# Where 泛型類別條件約束</title>
      <link href="/2023/02/19/%E5%BE%8C%E7%AB%AF%E6%8A%80%E8%A1%93/CS/%E7%AD%86%E8%A8%98/CS_NOTE_%E6%B3%9B%E5%9E%8B%E9%A1%9E%E5%88%A5%E6%A2%9D%E4%BB%B6%E7%B4%84%E6%9D%9F/"/>
      <url>/2023/02/19/%E5%BE%8C%E7%AB%AF%E6%8A%80%E8%A1%93/CS/%E7%AD%86%E8%A8%98/CS_NOTE_%E6%B3%9B%E5%9E%8B%E9%A1%9E%E5%88%A5%E6%A2%9D%E4%BB%B6%E7%B4%84%E6%9D%9F/</url>
      
        <content type="html"><![CDATA[<h2 id="泛型類別條件約束（generic-class-constraint）"><a href="#泛型類別條件約束（generic-class-constraint）" class="headerlink" title="泛型類別條件約束（generic class constraint）"></a>泛型類別條件約束（generic class constraint）</h2><p>用來指定泛型型別參數的約束條件，限制它必須是特定的型別或符合某些條件。</p><ol><li><p>指定泛型型別參數必須繼承自特定的基底類別或介面</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MyClass</span>&lt;<span class="title">T</span>&gt; <span class="keyword">where</span> <span class="title">T</span> : <span class="title">MyBaseClass</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// MyClass&lt;T&gt; 的程式碼</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>MyClass<T> 泛型類別指定了泛型型別參數 T 必須繼承自 MyBaseClass 基底類別。這樣一來，在定義 MyClass<T> 物件時，T 的型別必須符合這個條件，否則就會編譯錯誤。</p></li><li><p>指定泛型型別參數必須是值型別或可為空的值型別</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MyClass</span>&lt;<span class="title">T</span>&gt; <span class="keyword">where</span> <span class="title">T</span> : <span class="title">struct</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// MyClass&lt;T&gt; 的程式碼</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>MyClass<T> 泛型類別指定了泛型型別參數 T 必須是值型別或可為空的值型別。這樣一來，在定義 MyClass<T> 物件時，T 的型別必須符合這個條件，否則就會編譯錯誤。</p></li><li><p>指定泛型型別參數必須有預設的建構函式</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MyClass</span>&lt;<span class="title">T</span>&gt; <span class="keyword">where</span> <span class="title">T</span> : <span class="title">new</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// MyClass&lt;T&gt; 的程式碼</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>MyClass<T> 泛型類別指定了泛型型別參數 T 必須有預設的建構函式。這樣一來，在定義 MyClass<T> 物件時，T 的型別必須符合這個條件，否則就會編譯錯誤。</p></li></ol><hr><h2 id="實際例子"><a href="#實際例子" class="headerlink" title="實際例子"></a>實際例子</h2><ol><li><p>LINQ 擴充方法<br>在 LINQ 擴展方法中，常常需要使用 IEnumerable<T> 接口的功能。但是有些類型並沒有實現 IEnumerable<T> 接口，這時就可以使用泛型類約束來保證傳入的類型必須實現該接口：</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">MyExtension</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">int</span> <span class="title">Count</span>&lt;<span class="title">T</span>&gt;(<span class="params"><span class="keyword">this</span> T[] arr</span>) <span class="keyword">where</span> T : IEnumerable</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="keyword">var</span> item <span class="keyword">in</span> arr)</span><br><span class="line">        &#123;</span><br><span class="line">            count += item.Count();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上方範例要統計數組中所有元素的數量，因為無法確定傳入的數組類型是否實現 IEnumerable 接口，所以使用泛型類約束來限制傳入類型必須實現該接口。</p></li><li><p>資料庫操作</p></li></ol><p>在資料庫操作中，有時需要使用泛型類來表示數據表，這時就需要使用泛型類約束來保證傳入的泛型類型必須是類類型：</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">DBManager</span>&lt;<span class="title">T</span>&gt; <span class="keyword">where</span> <span class="title">T</span> : <span class="keyword">class</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;T&gt; <span class="title">GetAllData</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 获取数据的代码</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">UpdateData</span>(<span class="params">T data</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 更新数据的代码</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">DeleteData</span>(<span class="params">T data</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 删除数据的代码</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用泛型類 DBManager<T> 來表示Data Table，T 必須是 class 類型。這樣一來，在使用 DBManager<T> 類的時候，就可以保證傳入的泛型類型必須是類類型，否則就會編譯錯誤。</p><ol start="3"><li>重載<br>有時需要使用泛型類來表示某種類型，這時就需要使用泛型類約束來保證傳入的泛型類型必須實現某種接口或者是某個基類：</li></ol><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Vector</span>&lt;<span class="title">T</span>&gt; <span class="keyword">where</span> <span class="title">T</span> : <span class="title">struct</span>, <span class="title">IComparable</span>&lt;<span class="title">T</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> T X &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> T Y &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Vector</span>(<span class="params">T x, T y</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        X = x;</span><br><span class="line">        Y = y;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="title">Vector</span>&lt;<span class="title">T</span>&gt; <span class="keyword">operator</span> +(<span class="params">Vector&lt;T&gt; a, Vector&lt;T&gt; b</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Vector&lt;T&gt;(a.X + b.X, a.Y + b.Y);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">bool</span> <span class="keyword">operator</span> &gt;(Vector&lt;T&gt; a, Vector&lt;T&gt; b)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> a.X.CompareTo(b.X) &gt; <span class="number">0</span> &amp;&amp; a.Y.CompareTo(b.Y) &gt; <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">bool</span> <span class="keyword">operator</span> &lt;(Vector&lt;T&gt; a, Vector&lt;T&gt; b)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> a.X.CompareTo(b.X) &lt; <span class="number">0</span> &amp;&amp; a.Y.CompareTo(b.Y) &lt; <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上面的例子中，我們定義了一個泛型類 Vector<T>，它包含了兩個泛型類型的成員變量 X 和 Y，同時定義了加法運算符和比較運算符。在定義加法運算符時，我們使用了泛型類約束 where T : struct, IComparable<T>，表示傳入的泛型類型必須是值類型，並且實現了 IComparable<T> 接口。這樣一來，就可以保證在進行加法運算時，泛型類型可以進行數值相加的操作。在定義比較運算符時，我們使用了泛型類約束 where T : struct, IComparable<T>，表示傳入的泛型類型必須是值類型，並且實現了 IComparable<T> 接口，這樣一來，就可以保證泛型類型可以進行大小比較的操作。</p>]]></content>
      
      
      <categories>
          
          <category> 後端技術 </category>
          
          <category> C# </category>
          
          <category> 筆記 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【旅遊】日本入境 Visit Japan Web (無需使用)</title>
      <link href="/2023/02/19/%E7%AD%86%E8%A8%98%E8%88%87%E7%94%9F%E6%B4%BB%E9%9B%9C%E8%A8%98/%E7%94%9F%E6%B4%BB/%E3%80%90%E6%97%85%E9%81%8A%E3%80%91%E6%97%A5%E6%9C%AC%E5%85%A5%E5%A2%83%20Visit%20Japan%20Web%20(%E7%84%A1%E9%9C%80%E4%BD%BF%E7%94%A8)/"/>
      <url>/2023/02/19/%E7%AD%86%E8%A8%98%E8%88%87%E7%94%9F%E6%B4%BB%E9%9B%9C%E8%A8%98/%E7%94%9F%E6%B4%BB/%E3%80%90%E6%97%85%E9%81%8A%E3%80%91%E6%97%A5%E6%9C%AC%E5%85%A5%E5%A2%83%20Visit%20Japan%20Web%20(%E7%84%A1%E9%9C%80%E4%BD%BF%E7%94%A8)/</url>
      
        <content type="html"><![CDATA[<h1 id="Visit-Japan-Web"><a href="#Visit-Japan-Web" class="headerlink" title="Visit Japan Web"></a>Visit Japan Web</h1><p>Visit Japan Web 是由日本政府推出，可以從上面填寫檢疫、入境、申報等手續。目前有成田國際機場、羽田機場、關西國際機場、中部國際機場、福岡機場、新千歲機場、那霸機場可以使用 Visit Japan Web 檢疫。</p><p>網址 : <a href="https://vjw-lp.digital.go.jp/en/">https://vjw-lp.digital.go.jp/en/</a></p><h2 id="一、同行家人"><a href="#一、同行家人" class="headerlink" title="一、同行家人"></a>一、同行家人</h2><p>Visit Japan Web 功能只能給 嬰兒、無法自行辦理的人使用，若一般使用者還是建議一人為原則申請。<br><img src="/image/20230219_22-33-53.png"></p><h2 id="二、三大重點"><a href="#二、三大重點" class="headerlink" title="二、三大重點"></a>二、三大重點</h2><p>入境前必須要完成以下三大重點才能快速入境，原則上疫苗必須要使用數位疫苗申請。</p><ol><li>檢疫手續 (疫苗證明)</li><li>入境紀錄 </li><li>海關申報<br><img src="/image/20230219_21-17-38.png"></li></ol><h2 id="三、申請"><a href="#三、申請" class="headerlink" title="三、申請"></a>三、申請</h2><h3 id="新增入境"><a href="#新增入境" class="headerlink" title="新增入境"></a>新增入境</h3><p><img src="/image/20230219_22-10-28.png"><br><img src="/image/20230219_22-11-47.png"><br><img src="/image/20230219_22-13-53.png"></p><h3 id="檢疫手續"><a href="#檢疫手續" class="headerlink" title="檢疫手續"></a>檢疫手續</h3><p>申請數位新冠病毒健康證明申請 : <a href="https://dvc.mohw.gov.tw/vapa/apply/SelectLoginWay.init.ctr;jsessionid=5EE5960A8186972FE4BD8193CBBA19DE">點選我</a></p><p><img src="/image/20230219_21-31-01.png"><br><img src="/image/20230219_21-32-09.png"></p><h3 id="入境紀錄"><a href="#入境紀錄" class="headerlink" title="入境紀錄"></a>入境紀錄</h3><p><img src="/image/20230219_22-19-23.png"><br><img src="/image/20230219_22-20-06.png"><br><img src="/image/20230219_22-35-42.png"><br><img src="/image/20230219_22-21-31.png"></p><h3 id="海關申報"><a href="#海關申報" class="headerlink" title="海關申報"></a>海關申報</h3><p>海關申報部分較為簡單，依據選擇做填寫即可。<br><img src="/image/20230219_22-37-47.png"></p><h2 id="使用心得"><a href="#使用心得" class="headerlink" title="使用心得"></a>使用心得</h2><p>到達日本並非只需要看 “檢疫手續(快速通關)” 手續，順序會是 “檢疫手續” &gt; “外國人入境紀錄” &gt; “攜帶品、後送物品申報” 三個項目會按照順序使用，所以到現場使用 “截圖” 還不夠出境。</p><p>以下請準備項目、動作</p><ul><li>Wifi 請在下飛機打開，並將截圖好得 “檢疫手續” 給工作人員查看</li><li>拿好行李後，先確認 Wifi 讀取狀況再進行 “外國人入境紀錄” 、”攜帶品、後送物品申報”動作。</li></ul><p>額外分享，若要攜帶”長雨傘” 回國可以先跟航空公司問問看，實測下來是可以攜帶雨具登機 (華航)。</p><h2 id="參考文章"><a href="#參考文章" class="headerlink" title="參考文章"></a>參考文章</h2><ol><li>2023日本入境必看新規定 「Visit Japan Web教學」1分鐘學會 同行家人 (2月入境實況):<a href="https://safood.tw/visit-japan">https://safood.tw/visit-japan</a></li><li>日本入境 「Visit Japan Web」教學，快速通關、檢疫與海關申報方式: <a href="https://waynesan.com/visit-japan-web/">https://waynesan.com/visit-japan-web/</a></li><li>Visit Japan Web ｜ Setup Instruction<br>:<a href="https://www.youtube.com/watch?v=7es8wDztsjs&t=44s">https://www.youtube.com/watch?v=7es8wDztsjs&t=44s</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 筆記 </category>
          
          <category> 生活雜記 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>【前端】三大前端框架 - 安裝/環境設定</title>
      <link href="/2023/02/10/%E5%89%8D%E7%AB%AF%E6%8A%80%E8%A1%93/%E3%80%90%E5%89%8D%E7%AB%AF%E3%80%91%E4%B8%89%E5%A4%A7%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6%E5%AE%89%E8%A3%9D%E7%92%B0%E5%A2%83/"/>
      <url>/2023/02/10/%E5%89%8D%E7%AB%AF%E6%8A%80%E8%A1%93/%E3%80%90%E5%89%8D%E7%AB%AF%E3%80%91%E4%B8%89%E5%A4%A7%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6%E5%AE%89%E8%A3%9D%E7%92%B0%E5%A2%83/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>近期安排特殊的行程，我會把 React、Vue 、Angular 三大架框玩過一輪，在分析各式的架框使用的方式。我們就直接先從React先下手。<br>本篇教學如何安裝 三大架框環境，後續再針對架構探討。</p><hr><h2 id="基本安裝"><a href="#基本安裝" class="headerlink" title="基本安裝"></a>基本安裝</h2><p>以下我會使用的工具，依據讀者的習慣分配自己的工具。</p><ol><li><a href="https://nodejs.org/en/">Node.js</a> (必)</li><li><a href="https://git-scm.com/">Git</a></li><li><a href="https://code.visualstudio.com/">VS Code</a></li></ol><p>安裝環境時，請確認 node 版本在進行下方作業。 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm -v</span><br></pre></td></tr></table></figure><h1 id="一、React"><a href="#一、React" class="headerlink" title="一、React"></a>一、React</h1><p>官方網連結：[ <a href="https://zh-hant.reactjs.org/">https://zh-hant.reactjs.org/</a> ]</p><h2 id="1-安裝-創建-React"><a href="#1-安裝-創建-React" class="headerlink" title="1 安裝&#x2F;創建 React"></a>1 安裝&#x2F;創建 React</h2><p>安裝 React 請輸入<code>npx create-react-app [名稱]</code> ，如果有遇到下方錯誤訊息，請參考下方處理方式。<br><img src="/image/20230210_18-18-30.png"></p><ul><li><a href="https://blog.csdn.net/weixin_38610651/article/details/107021204">解决npm安装时出现run <code>npm audit fix</code> to fix them, or <code>npm audit</code> for details</a></li></ul><p>安裝完畢後，請移動到指定PATH，指令 :<code>cd [名稱]</code>，再來進行<code>npm start</code>開啟網站。<br><img src="/image/20230210_18-18-53.png"></p><h2 id="2-結果畫面"><a href="#2-結果畫面" class="headerlink" title="2 結果畫面"></a>2 結果畫面</h2><h2 id=""><a href="#" class="headerlink" title=""></a><img src="/image/20230210_18-19-09.png"></h2><h1 id="二、Angular"><a href="#二、Angular" class="headerlink" title="二、Angular"></a>二、Angular</h1><p>官方網連結：[ <a href="https://angular.io/">https://angular.io/</a> ]</p><h2 id="1-安裝-創建-Angular"><a href="#1-安裝-創建-Angular" class="headerlink" title="1 安裝&#x2F;創建 Angular"></a>1 安裝&#x2F;創建 Angular</h2><p>安裝方式需要注意。 Angular需要安裝 Angular-cli套件，尚未安裝會影響創建問題。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -g @angular/cli</span><br></pre></td></tr></table></figure><p>接下來，再用創建專案如同React一樣，如果未輸入名稱會系統會自動帶入名稱。<br>安裝需要一些時間，請各位耐心等候。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ng new [Angular-name]</span><br></pre></td></tr></table></figure><p><img src="/image/20230210_18-21-39.png"><br><img src="/image/20230210_18-22-01.png"></p><h2 id="2-執行-Angular"><a href="#2-執行-Angular" class="headerlink" title="2 執行 Angular"></a>2 執行 Angular</h2><p>完成後，移動創好的專案並執行他。官方網有提到 –open 可以改為 -o 。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd [Angular-name]</span><br><span class="line">ng serve --open </span><br></pre></td></tr></table></figure><p><img src="/image/20230210_18-22-17.png"></p><h2 id="3-結果畫面"><a href="#3-結果畫面" class="headerlink" title="3 結果畫面"></a>3 結果畫面</h2><p><img src="/image/20230210_18-22-30.png"></p><h1 id="三、VueJs"><a href="#三、VueJs" class="headerlink" title="三、VueJs"></a>三、VueJs</h1><p>官方網連結： [ <a href="https://vuejs.org/">https://vuejs.org/</a> ]</p><h2 id="1-安裝-VueJs"><a href="#1-安裝-VueJs" class="headerlink" title="1 安裝 VueJs"></a>1 安裝 VueJs</h2><p>vueJs 需要安裝 Vue-Cli 套件，如同Angular一樣。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -g @vue/cli</span><br></pre></td></tr></table></figure><p>安裝完畢後，創建 vue 專案並進入vue專案內中，並直接執行即可。 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vue create [vue-name]</span><br><span class="line">cd [vue-name]</span><br><span class="line">npm run serve</span><br></pre></td></tr></table></figure><p><img src="/image/20230210_18-23-11.png"><br><img src="/image/20230210_18-23-22.png"><br><img src="/image/20230210_18-23-36.png"></p><h2 id="2-結果畫面-1"><a href="#2-結果畫面-1" class="headerlink" title="2 結果畫面"></a>2 結果畫面</h2><h2 id="-1"><a href="#-1" class="headerlink" title=""></a><img src="/image/20230210_18-23-58.png"></h2><h1 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h1><p>操作下來，安裝部分常常遇到版本需要更新才能進行使用或是創建專案，<br>近年來 angular 、 react 、vue 開始很多人使用，文件參考也慢慢變多<br>，也歡迎大家來嘗試這幾些架框。</p><p>後續會先介紹 Electron + MVC 環境安裝，才正式慢慢進入[三大架框]使用方式。</p>]]></content>
      
      
      <categories>
          
          <category> 前端技術 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ReactJs </tag>
            
            <tag> Angular </tag>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C# 表單驗證 - FormsAuthentication 驗證自動登入</title>
      <link href="/2023/02/07/%E5%BE%8C%E7%AB%AF%E6%8A%80%E8%A1%93/CS/NetFramework/NF_01_FormsAuthentication%E5%AF%A6%E6%88%B0/"/>
      <url>/2023/02/07/%E5%BE%8C%E7%AB%AF%E6%8A%80%E8%A1%93/CS/NetFramework/NF_01_FormsAuthentication%E5%AF%A6%E6%88%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近需要開始撰寫 ASP.Net MVC，目前遇到Form驗證實例會有自動驗證登入，藉由這次機會來展現身手。</p><h1 id="FormsAuthenticationTicket"><a href="#FormsAuthenticationTicket" class="headerlink" title="FormsAuthenticationTicket"></a>FormsAuthenticationTicket</h1><p>功能主要紀錄使用者資訊，他會有一組Cookies暫存，內部值會經過加密編碼、解密。<br>如果第一次使用這個功能，千萬記住不要嘗試把密碼填入當中。</p><p>使用方式從 Client 點入登入網頁，這時Controllers可以進行驗證判斷，若有取得ticket成功會轉到首頁或是會員頁面;若驗證失敗則重新登入。</p><h2 id="Authorize-身分驗證"><a href="#Authorize-身分驗證" class="headerlink" title="Authorize 身分驗證"></a>Authorize 身分驗證</h2><p>確保不讓外界隨意登入，需要再 Controllers上方輸入 Authorize，如果沒有登入成功會有訊息提示。</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">namespace</span> <span class="title">ExampleForm.Controllers</span></span><br><span class="line">&#123;</span><br><span class="line">    [<span class="meta">Authorize()</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MainController</span> : <span class="title">Controller</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> View();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="WebConfig-設定"><a href="#WebConfig-設定" class="headerlink" title="WebConfig 設定"></a>WebConfig 設定</h2><p>這邊需要加入錯誤導向頁面設定。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;system.web&gt;</span><br><span class="line">    &lt;authentication mode=&quot;Forms&quot;&gt;</span><br><span class="line">        &lt;forms name=&quot;Demo_Site&quot; loginUrl=&quot;Login/Index&quot; cookieless=&quot;UseCookies&quot; timeout=&quot;2880&quot;/&gt;</span><br><span class="line">    &lt;/authentication&gt;</span><br><span class="line">&lt;/system.web&gt;</span><br></pre></td></tr></table></figure><h2 id="FormsAuthenticationTicket-1"><a href="#FormsAuthenticationTicket-1" class="headerlink" title="FormsAuthenticationTicket"></a>FormsAuthenticationTicket</h2><p>假設Login進去的時候，我會用下方方式存取一遍。UserData 則為存取相關資訊，例如 : email、電話等，通常存放不太重要的資料。</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Set_FormAuthenticationUser</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//登入成功 轉頁</span></span><br><span class="line">    FormsAuthenticationTicket  ticket = <span class="keyword">new</span> FormsAuthenticationTicket(</span><br><span class="line">    version: <span class="number">1</span>,</span><br><span class="line">    name: pUsrCode.ToString(), <span class="comment">//可以放使用者Id</span></span><br><span class="line">    issueDate: DateTime.UtcNow,<span class="comment">//現在UTC時間</span></span><br><span class="line">    expiration: DateTime.UtcNow.AddMinutes(<span class="number">30</span>),<span class="comment">//Cookie有效時間=現在時間往後+30分鐘</span></span><br><span class="line">    isPersistent: <span class="literal">true</span>,<span class="comment">// 是否要記住我 true or false</span></span><br><span class="line">    userData: <span class="string">&quot;&quot;</span>, <span class="comment">//存放資訊</span></span><br><span class="line">    cookiePath: FormsAuthentication.FormsCookiePath);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> encryptedTicket = FormsAuthentication.Encrypt(ticket); <span class="comment">//把驗證的表單加密</span></span><br><span class="line">    <span class="keyword">var</span> cookie = <span class="keyword">new</span> HttpCookie(FormsAuthentication.FormsCookieName, encryptedTicket);</span><br><span class="line">    Response.Cookies.Add(cookie);</span><br><span class="line">    Response.Cookies.Add(<span class="keyword">new</span> HttpCookie(<span class="string">&quot;usr_code&quot;</span>, pUsrCode));</span><br><span class="line"></span><br><span class="line">    <span class="comment">//會直接影響 userData 值</span></span><br><span class="line">    <span class="comment">//FormsAuthentication.RedirectFromLoginPage(pUsrCode, false);</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="驗證-Reload-Page"><a href="#驗證-Reload-Page" class="headerlink" title="驗證 (Reload Page)"></a>驗證 (Reload Page)</h2><p>減少登入次數，大多都會有記憶天數(7天、14天)，下方直接展示使用方式。<br>[Demo_Site] 是指Config設定，form標示的名稱。</p><p>這function使用概念，驗證是否有這角色，如果各位 FormsAuthenticationTicket 的 Name 用 UID 處理可以不用轉Json方式取得資料。</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="built_in">bool</span> <span class="title">IsFormAuthrizeUser</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">bool</span> isFormAuthrizeUser = <span class="literal">false</span>;</span><br><span class="line">    <span class="comment">//搜尋是否有 Demo_Site</span></span><br><span class="line">    <span class="keyword">if</span> (Request.Cookies.AllKeys.Where(x =&gt; x == <span class="string">&quot;Demo_Site&quot;</span>).Any())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//解碼(方便確認資料、資訊)</span></span><br><span class="line">        <span class="keyword">var</span> decr = FormsAuthentication.Decrypt(Request.Cookies[<span class="string">&quot;Demo_Site&quot;</span>].Value);</span><br><span class="line">        <span class="comment">//轉成 json 依據需求</span></span><br><span class="line">        <span class="built_in">string</span> json = decr.UserData;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">string</span>.IsNullOrEmpty(json))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//轉成DataTable</span></span><br><span class="line">            DataTable resultData = JsonConvert.DeserializeObject&lt;DataTable&gt;(<span class="string">$&quot;[<span class="subst">&#123;json&#125;</span>]&quot;</span>);</span><br><span class="line">            Set_UserBasic();</span><br><span class="line">            isFormAuthrizeUser = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> isFormAuthrizeUser;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="登出-Log-Out"><a href="#登出-Log-Out" class="headerlink" title="登出 (Log Out)"></a>登出 (Log Out)</h2><p>登出相對簡單，只需要使用<code> FormsAuthentication.SignOut()</code> 。提醒 : 記得要回到Login頁面喔~!</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ActionResult <span class="title">Index</span>()</span>&#123;</span><br><span class="line">    FormsAuthentication.SignOut();</span><br><span class="line">    <span class="keyword">return</span> Redirect(<span class="string">&quot;/Login&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="參考文件"><a href="#參考文件" class="headerlink" title="參考文件"></a>參考文件</h1><ol><li><a href="http://yu0410aries.blogspot.com/2018/03/formsauthenticationticket.html">ASP.NET MVC FormsAuthenticationTicket 驗證</a></li><li><a href="https://stackoverflow.com/questions/16594905/userdata-property-of-formsauthenticationticket-is-empty-despite-being-set">UserData property of FormsAuthenticationTicket is empty despite being set</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 後端技術 </category>
          
          <category> C# </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
            <tag> Form </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Angular (一) -練習Router使用方式</title>
      <link href="/2023/01/25/%E5%89%8D%E7%AB%AF%E6%8A%80%E8%A1%93/Angular/Angular-01-%E7%B7%B4%E7%BF%92%20Router%20%E4%BD%BF%E7%94%A8%E6%96%B9%E5%BC%8F/"/>
      <url>/2023/01/25/%E5%89%8D%E7%AB%AF%E6%8A%80%E8%A1%93/Angular/Angular-01-%E7%B7%B4%E7%BF%92%20Router%20%E4%BD%BF%E7%94%A8%E6%96%B9%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>Angular 近期蠻多公司願意使用的一項框架，他使用Type-Script 來開發是一個好的選擇，後期其他前台框架陸續更近所以差異就不會太大。PS: 目前不介紹TS使用方式。</p><h1 id="Angular"><a href="#Angular" class="headerlink" title="Angular"></a>Angular</h1><p>Angular 是基於 TypeScript 的開發平台。通常是指 “Angular 2+” 或 “Angular v2 及更高版本，框架由 Google 的 Angular 團隊以及社群共同領導。</p><p><img src="/img/Web/angular/Architecture_of_an_Angular_2_application.png"></p><p>上圖。Angular 應用的架構。其主要的構造塊是模組、組件、模板、元資料、資料繫結、指令、服務和依賴注入。</p><h2 id="前置作業"><a href="#前置作業" class="headerlink" title="前置作業"></a>前置作業</h2><ul><li><a href="https://nodejs.org/en/">NodeJs</a></li><li><a href="https://code.visualstudio.com/">VSC</a></li><li><a href="https://marketplace.visualstudio.com/items?itemName=doggy8088.angular-extension-pack">VSC Marketplace</a></li><li>安裝指令:<br>必須要先安裝NodeJs才能執行。<code>npm install @angular/cli</code></li></ul><h2 id="創建專案"><a href="#創建專案" class="headerlink" title="創建專案"></a>創建專案</h2><p>創建專案也是相對簡單，本篇範例是用 version 14 如果不知道自己版本可以使用<code>ng v</code>。</p><p>指令為 <code> ng new [source name]</code> 即可，14版本會詢問是否要routing 以及css，記得要把routing 允許以及選擇自己比較熟悉的css。 </p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ng new useAngular</span><br></pre></td></tr></table></figure><p><img src="/img/Web/angular/Snipaste_2022-06-12_09-50-37.png"></p><h2 id="創建Pages"><a href="#創建Pages" class="headerlink" title="創建Pages"></a>創建Pages</h2><p>第一次使用會不知道如何開始使用Angular，進入專案只有用到App資料夾。這邊範例使用VSC套件用<a href="https://marketplace.visualstudio.com/items?itemName=doggy8088.angular-extension-pack">Angular Extension Pack</a>。</p><p><img src="/img/Web/angular/Snipaste_2022-06-12_09-51-47.png"></p><p>下圖可以使用右鍵點選就可以快速道終端機，並幫你下好<code>ng g c </code>指令。這邊我們創建一個Pages 為About。</p><p><img src="/img/Web/angular/Snipaste_2022-06-12_10-00-48.png"><br><img src="/img/Web/angular/Snipaste_2022-06-12_10-01-03.png"><br><img src="/img/Web/angular/Snipaste_2022-06-12_10-03-25.png"></p><h2 id="設定router"><a href="#設定router" class="headerlink" title="設定router"></a>設定router</h2><p>router 在Angular為app-Routing.module.ts，如果有使用dotnet MVC 會比較熟悉一點。<br><img src="/img/Web/angular/Snipaste_2022-06-12_10-05-06.png"></p><p>Angular routing 是設定頁面位置。這邊我們用app-routing.module 加入我們剛才的pages，如下方寫法。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">AboutComponent</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./about/about.component&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">NgModule</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">RouterModule</span>, <span class="title class_">Routes</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/router&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//本篇重點</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">routes</span>: <span class="title class_">Routes</span> = [</span><br><span class="line">  &#123; <span class="attr">path</span>:<span class="string">&#x27;about&#x27;</span> ,<span class="attr">component</span>: <span class="title class_">AboutComponent</span> &#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="meta">@NgModule</span>(&#123;</span><br><span class="line">  <span class="attr">imports</span>: [<span class="title class_">RouterModule</span>.<span class="title function_">forRoot</span>(routes)],</span><br><span class="line">  <span class="attr">exports</span>: [<span class="title class_">RouterModule</span>]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">AppRoutingModule</span> &#123; &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>需要留意上router是不可以遺漏掉，如果忘記寫上router 會無法連上pages 。path是指頁面路徑，可以指定那些component存放路徑。</p><h2 id="首頁選單"><a href="#首頁選單" class="headerlink" title="首頁選單"></a>首頁選單</h2><p>上方完成後，可以到app.component.html中加上選單，撰寫方式很簡單只需要加入<code>&lt;a routerLink=&quot;/about&quot;&gt;about&lt;/a&gt;</code>即可完成。但是別忘了需要加入<code>&lt;router-outlet&gt;&lt;/router-outlet&gt;</code>，這個東西會呈現component畫面，就會有畫面轉換的效果。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span>&gt;</span>&#123;&#123;title&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">routerLink</span>=<span class="string">&quot;/about&quot;</span>&gt;</span>about<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">router-outlet</span>&gt;</span><span class="tag">&lt;/<span class="name">router-outlet</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h1 id="疑難排解"><a href="#疑難排解" class="headerlink" title="疑難排解"></a>疑難排解</h1><h2 id="Q1-npm-WARN-config-global-global-–local-are-deprecated-Use-–location-global-instead"><a href="#Q1-npm-WARN-config-global-global-–local-are-deprecated-Use-–location-global-instead" class="headerlink" title="Q1. npm WARN config global --global, –local are deprecated. Use –location&#x3D;global instead"></a>Q1. npm WARN config global <code>--global</code>, –local are deprecated. Use –location&#x3D;global instead</h2><p>處理方式 :  </p><ol><li>需要到\nodejs 資料夾底下打開下方兩個檔案<ul><li>npm.cmd</li><li>npm</li></ul></li><li>將 <code>prefix -g</code>換成 <code>prefix --location=global</code>即可。</li></ol><h2 id="Q2-updating-angular-cli-1-0-0-beta-28-3-to-angular-cli-latest-failed"><a href="#Q2-updating-angular-cli-1-0-0-beta-28-3-to-angular-cli-latest-failed" class="headerlink" title="Q2. updating angular-cli 1.0.0-beta 28.3 to @angular&#x2F;cli@latest failed"></a>Q2. updating angular-cli 1.0.0-beta 28.3 to @angular&#x2F;cli@latest failed</h2><p>原則上處理完下方command 會完成。</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm uninstall angular-cli -g</span><br><span class="line">npm cache clear</span><br><span class="line">npm install @angular/cli -g</span><br></pre></td></tr></table></figure><p>如果無法正常 clear cache </p><ol><li><code>npm cache clean --force </code></li></ol><p>(可能會出現 npm WARN using –force Recommended protections disabled.)<br>2. <code>npm cache verify</code></p><p>排除完畢後，記得把node_modules 刪除。如果不再prject 裡面可以無需處理。<br><code>rd /s /q node_modules</code></p><p>最後一步重新載入 npm package 就輸入 <code>npm install</code></p><h2 id="Q3-初始angular專案，如何download-node-module"><a href="#Q3-初始angular專案，如何download-node-module" class="headerlink" title="Q3. 初始angular專案，如何download node_module"></a>Q3. 初始angular專案，如何download node_module</h2><p>只要輸入 <code>npm install</code> 就會幫你把所有相關檔案 download下載。</p><h2 id="Q4-PowerShell-無法使用-ng-ps1"><a href="#Q4-PowerShell-無法使用-ng-ps1" class="headerlink" title="Q4. PowerShell 無法使用 ng.ps1"></a>Q4. PowerShell 無法使用 ng.ps1</h2><p>設定方式為</p><ol><li>打開powershell</li><li>輸入 <code>set-ExecutionPolicy RemoteSigned -Scope CurrentUser </code></li><li>確認是否改變 ，請輸入 <code>Get-ExecutionPolicy</code>如果要看清單加入 <code>--list</code>即可。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 前端技術 </category>
          
          <category> Angular </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Angular </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VTuber 零成本製作(一) - 建立角色</title>
      <link href="/2023/01/24/%E7%AD%86%E8%A8%98%E8%88%87%E7%94%9F%E6%B4%BB%E9%9B%9C%E8%A8%98/%E6%8A%80%E8%A1%93/VTuber/VTuber%20%E9%9B%B6%E6%88%90%E6%9C%AC%E8%A3%BD%E4%BD%9C(%E4%B8%80)/"/>
      <url>/2023/01/24/%E7%AD%86%E8%A8%98%E8%88%87%E7%94%9F%E6%B4%BB%E9%9B%9C%E8%A8%98/%E6%8A%80%E8%A1%93/VTuber/VTuber%20%E9%9B%B6%E6%88%90%E6%9C%AC%E8%A3%BD%E4%BD%9C(%E4%B8%80)/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>去年製作 <code>製作 Scanner</code> 章節，想到 VTuber 製作部分可以直接使用這些工具嘗試製作。本作者不是專業VTuber 製作師不適合直接使用 Live2D 製作，因此用快速建檔方式完成建模。</p><p>(如果使用需要使用工具就需要自備)</p><h3 id="相關章節"><a href="#相關章節" class="headerlink" title="相關章節"></a>相關章節</h3><ul><li><a href="../../%E5%89%8D%E7%AB%AF%E6%8A%80%E8%A1%93/HTML/Html-05-ScannerQR.md">製作 Scanner (一) - 把手機轉換電腦攝影機</a></li><li><a href="../../%E5%89%8D%E7%AB%AF%E6%8A%80%E8%A1%93/HTML/Html-06-ScannerQR.md">製作 Scanner (二) - 快速使用讀取器&#x2F;掃描器 (使用 html5-qrcode )</a></li></ul><h2 id="需要使用工具"><a href="#需要使用工具" class="headerlink" title="需要使用工具"></a>需要使用工具</h2><ol><li>Dev47Apps、手機</li><li>VRoid Studio、VRoid Hub</li></ol><h2 id="VRoid"><a href="#VRoid" class="headerlink" title="VRoid"></a>VRoid</h2><p>VRoid 是一套免費軟體的VTuber 製作軟體，初期需要從這邊建立簡單人物。下圖為初起介面。<br><img src="/image/20230124_21-44-10.png"></p><h2 id="一、創建角色"><a href="#一、創建角色" class="headerlink" title="一、創建角色"></a>一、創建角色</h2><p>(角色配置不詳細介紹自行挖掘、製作)<br><img src="/image/20230124_21-45-13.png"><br><img src="/image/20230124_21-45-38.png"></p><h2 id="二、匯出角色"><a href="#二、匯出角色" class="headerlink" title="二、匯出角色"></a>二、匯出角色</h2><p>這邊會需要創建 VRM 副檔名，需要確認匯出是否是VRM 。如果要使用 VRoid Hub 也是一樣，至指定角色頁面按下下載即可。<br><img src="/image/20230124_21-58-47.png"><br><img src="/image/20230124_21-59-18.png"><br><img src="/image/20230124_22-00-12.png"><br><img src="/image/20230124_22-01-04.png"></p>]]></content>
      
      
      <categories>
          
          <category> 筆記 </category>
          
          <category> VTuber </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>VTuber 零成本製作(二) - 直播設定</title>
      <link href="/2023/01/24/%E7%AD%86%E8%A8%98%E8%88%87%E7%94%9F%E6%B4%BB%E9%9B%9C%E8%A8%98/%E6%8A%80%E8%A1%93/VTuber/VTuber%20%E9%9B%B6%E6%88%90%E6%9C%AC%E8%A3%BD%E4%BD%9C(%E4%BA%8C)/"/>
      <url>/2023/01/24/%E7%AD%86%E8%A8%98%E8%88%87%E7%94%9F%E6%B4%BB%E9%9B%9C%E8%A8%98/%E6%8A%80%E8%A1%93/VTuber/VTuber%20%E9%9B%B6%E6%88%90%E6%9C%AC%E8%A3%BD%E4%BD%9C(%E4%BA%8C)/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>繼續上一篇未完成部分安裝 VMagicMirror ，這軟體主要是補助角色在直播中使用你創建的角色直播，需要配合 OBS 來完成直播功能。</p><h3 id="安裝-VMagicMirror"><a href="#安裝-VMagicMirror" class="headerlink" title="安裝 VMagicMirror"></a>安裝 VMagicMirror</h3><p>下載點 : <a href="https://malaybaku.github.io/VMagicMirror/en/">請點擊</a></p><h2 id="一、VMagicMirror"><a href="#一、VMagicMirror" class="headerlink" title="一、VMagicMirror"></a>一、VMagicMirror</h2><p>初始會有兩個畫面存在，左邊會是創建角色的呈現位置，右邊則是設定檔。現在我們將剛才的VRM檔案開啟。<br><img src="/image/20230124_22-17-25.png"><br><img src="/image/20230124_22-22-42.png"></p><p>讀取完後，立即可以呈現目前角色模樣。(目前先不使用 Dev47App )<br><img src="/image/20230124_22-23-04.png"></p><h2 id="二、使用-OBS"><a href="#二、使用-OBS" class="headerlink" title="二、使用 OBS"></a>二、使用 OBS</h2><p>現在使用 【視窗攝取】方式設定 VMagicMirror 視窗，就會完成以上動作。<br><img src="/image/20230124_22-27-08.png"><br><img src="/image/20230124_22-28-15.png"></p><p>如果需要移除後面的綠色背景請將透明背景打給即可。<br><img src="/image/20230124_22-50-03.png"></p>]]></content>
      
      
      <categories>
          
          <category> 筆記 </category>
          
          <category> VTuber </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>SourceTree (一) - 創建多層次 branch</title>
      <link href="/2023/01/01/DevOps/Git/sourcetree(%E4%B8%80)-%E5%89%B5%E5%BB%BA%E5%A4%9A%E5%B1%A4%E6%AC%A1%20branch/"/>
      <url>/2023/01/01/DevOps/Git/sourcetree(%E4%B8%80)-%E5%89%B5%E5%BB%BA%E5%A4%9A%E5%B1%A4%E6%AC%A1%20branch/</url>
      
        <content type="html"><![CDATA[<p>近期因工作需要換 Git 工具，從 Github Desktop 轉換到 SourceTree 工具，目前最吸引的部分是圖形(Graph)部分非常好分析 branch marge 狀況以及 branch 使用狀況。這篇簡單操作 “創建多層次 branch”。</p><h2 id="SourceTree"><a href="#SourceTree" class="headerlink" title="SourceTree"></a>SourceTree</h2><p> 是以 Git 為基礎設計的 GUI 圖形化工具。與 Github Desktop 比較上 Github Desktop 缺少圖形化介面缺乏管理、維護。</p><h3 id="官方網址"><a href="#官方網址" class="headerlink" title="官方網址"></a>官方網址</h3><p>SourceTree : <a href="https://www.sourcetreeapp.com/">https://www.sourcetreeapp.com/</a></p><h2 id="安裝方式"><a href="#安裝方式" class="headerlink" title="安裝方式"></a>安裝方式</h2><h3 id="step-1-註冊"><a href="#step-1-註冊" class="headerlink" title="step.1 註冊"></a>step.1 註冊</h3><p>bitbucket 與 github 是同類型的工具，採用 Mercurial 和Git 作為版控部分。這邊就請自行註冊。<br><img src="/image/20230101_23-51-58.png"></p><h3 id="step-2-安裝工具"><a href="#step-2-安裝工具" class="headerlink" title="step.2 安裝工具"></a>step.2 安裝工具</h3><p><img src="/image/20230101_23-57-20.png"></p><blockquote><h3 id="進階選項-備註"><a href="#進階選項-備註" class="headerlink" title="進階選項-備註"></a>進階選項-備註</h3><p><em>來自 <a href="https://ithelp.ithome.com.tw/articles/10206852">Sourcetree - git 的 GUI 管理軟體</a></em></p><ul><li>第一項如果勾選的話會在 checkout ( 切換 commit ) 的時候，自動將斷行符號由 LF ( linux ) 轉成 CRLF ( windows )，如果是在 linux 的系統上安裝則相反，選擇這個的好處是在進行協同開發的時候如果使用的系統不相同，就比較不會因為斷行符號的不同而發生錯誤。</li><li>第二項則是預先設置一個通用的 ignore，這兩項可以依照自己的需求選擇。</li></ul></blockquote><h3 id="step-3-設定帳號"><a href="#step-3-設定帳號" class="headerlink" title="step.3 設定帳號"></a>step.3 設定帳號</h3><p><img src="/image/20230102_00-01-45.png"></p><h3 id="step-4-設置-SSH-Key"><a href="#step-4-設置-SSH-Key" class="headerlink" title="step 4 : 設置 SSH Key"></a>step 4 : 設置 SSH Key</h3><p><img src="/image/20230102_00-02-50.png"></p><h2 id="創建分支-Branch"><a href="#創建分支-Branch" class="headerlink" title="創建分支(Branch)"></a>創建分支(Branch)</h2><p>首先我們先確認分支是否是只有一個，接下來我們再進行創建分支。<br><img src="/image/20230102_00-05-36.png"></p><h3 id="第一層分支"><a href="#第一層分支" class="headerlink" title="第一層分支"></a>第一層分支</h3><p>第一層 Banch 可以直接創建 <code>folder</code>等下來識別接下來畫面。<br><img src="/image/20230102_00-08-23.png"></p><h3 id="第二層分支"><a href="#第二層分支" class="headerlink" title="第二層分支"></a>第二層分支</h3><p>接下來我們會用 <code>folder/001</code>來表示下一層，這邊會發現怎麼創建都是錯誤，原因是因為已經創建的folder是無發創建子層分支。<br><img src="/image/20230102_00-11-08.png"><br><img src="/image/20230102_00-11-17.png"></p><p>作法如下，這樣下來就完成二層分支</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">folder_copy/#A002</span><br></pre></td></tr></table></figure><p><img src="/image/20230102_00-14-51.png"></p><h2 id="多層分支"><a href="#多層分支" class="headerlink" title="多層分支"></a>多層分支</h2><p>雖然這介面可以使用多層方式創建分支，目前為止很少遇到需要三層以上的案例，使用方式如同上方一樣。<br><img src="/image/20230102_00-16-47.png"></p><h2 id="從上方案例可以知道幾點事項-不是-folder-關係是無法創建下一層-一個folder-可以允許-folder-、branch"><a href="#從上方案例可以知道幾點事項-不是-folder-關係是無法創建下一層-一個folder-可以允許-folder-、branch" class="headerlink" title="從上方案例可以知道幾點事項- 不是 folder 關係是無法創建下一層- 一個folder 可以允許 folder 、branch"></a>從上方案例可以知道幾點事項<br>- 不是 folder 關係是無法創建下一層<br>- 一個folder 可以允許 folder 、branch</h2><p>若要存放檔案可以參考這招或是複雜概念才建議開道三層以上。</p>]]></content>
      
      
      <categories>
          
          <category> DevOps </category>
          
          <category> sourcetree </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sourcetree </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sourcetree(二)-目前分支解衝突</title>
      <link href="/2023/01/01/DevOps/Git/sourcetree(%E4%BA%8C)-%E7%9B%AE%E5%89%8D%E5%88%86%E6%94%AF%E8%A7%A3%E8%A1%9D%E7%AA%81/"/>
      <url>/2023/01/01/DevOps/Git/sourcetree(%E4%BA%8C)-%E7%9B%AE%E5%89%8D%E5%88%86%E6%94%AF%E8%A7%A3%E8%A1%9D%E7%AA%81/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>SourceTree 目前是眾多企業使用的一套Git GUI 介面軟體，初期因為努力摸索有幾些問題不知道怎樣排除，會配合Github Desktop 解決目前問題。遇到問題是當需要 Push 時候與Pull產生衝突，要如何解決。</p><h2 id="驗證方式"><a href="#驗證方式" class="headerlink" title="驗證方式"></a>驗證方式</h2><p>使用 Commit 中， “Amend latest commit” 選項達成當前情境。<br><img src="/image/20230308_11-05-06.png"></p><h3 id="步驟"><a href="#步驟" class="headerlink" title="步驟"></a>步驟</h3><ol><li><p>創建新的分支，建議不要跟develop或是 master 有任何關聯。<br><img src="/image/20230308_11-14-38.png"></p></li><li><p>新增 .Txt 就可<br><img src="/image/20230308_11-15-45.png"></p></li><li><p>第一次Commit 不要勾選任何選項。但切記要<strong>隨便寫任何字</strong>。<br><img src="/image/20230308_11-16-35.png"></p></li><li><p>第二次設定 Commit 需要把 “Amend latest commit”  勾起來，就可以達到這樣效果。<br><img src="/image/20230308_11-25-04.png"><br><img src="/image/20230308_11-26-03.png"></p></li></ol><h2 id="解決步驟"><a href="#解決步驟" class="headerlink" title="解決步驟"></a>解決步驟</h2><p>選擇要Commit 項目 (通常是第一個)，再選擇 “Reset current branch to this commit”，選擇要保留方式即可完成。<br><img src="/image/20230308_11-29-48.png"><br><img src="/image/20230308_11-30-03.png"><br><img src="/image/20230308_11-38-08.png"></p><p>目前為止還沒發現，Push 前可以使用 Undo 的方式 (Github 有這項功能)，那只能暫時使用這招解決現行問題。</p>]]></content>
      
      
      <categories>
          
          <category> DevOps </category>
          
          <category> sourcetree </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sourcetree </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【VS Code】Live Server 解決 Https、SSL 問題</title>
      <link href="/2023/01/01/%E7%AD%86%E8%A8%98%E8%88%87%E7%94%9F%E6%B4%BB%E9%9B%9C%E8%A8%98/%E6%8A%80%E8%A1%93/%E3%80%90%E7%AD%86%E8%A8%98%E3%80%91Live%20Server%E8%A7%A3%E6%B1%BAHttps%E5%95%8F%E9%A1%8C/"/>
      <url>/2023/01/01/%E7%AD%86%E8%A8%98%E8%88%87%E7%94%9F%E6%B4%BB%E9%9B%9C%E8%A8%98/%E6%8A%80%E8%A1%93/%E3%80%90%E7%AD%86%E8%A8%98%E3%80%91Live%20Server%E8%A7%A3%E6%B1%BAHttps%E5%95%8F%E9%A1%8C/</url>
      
        <content type="html"><![CDATA[<h2 id="前置作業"><a href="#前置作業" class="headerlink" title="前置作業"></a>前置作業</h2><h3 id="準備工具、網址"><a href="#準備工具、網址" class="headerlink" title="準備工具、網址"></a>準備工具、網址</h3><ol><li>Chocolatey : <a href="https://chocolatey.org/">https://chocolatey.org/</a></li><li>Live Server : <a href="https://marketplace.visualstudio.com/items?itemName=ritwickdey.LiveServer">https://marketplace.visualstudio.com/items?itemName=ritwickdey.LiveServer</a></li></ol><h3 id="安裝方式"><a href="#安裝方式" class="headerlink" title="安裝方式"></a>安裝方式</h3><ol><li>開啟系統管理員 Powershell 安裝 Chocolatey<figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Set</span>-ExecutionPolicy Bypass -Scope Process -Force; [System.<span class="built_in">Net</span>.ServicePointManager]::SecurityProtocol = [System.<span class="built_in">Net</span>.ServicePointManager]::SecurityProtocol -bor <span class="number">3072</span>; iex ((New-Object System.<span class="built_in">Net</span>.WebClient).DownloadString(&#x27;https://community.chocolatey.org/install.ps1&#x27;))</span><br></pre></td></tr></table></figure></li><li>安裝 mkcert<figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">choco install mkcert</span><br></pre></td></tr></table></figure></li></ol><h2 id="Mkcert使用步驟"><a href="#Mkcert使用步驟" class="headerlink" title="Mkcert使用步驟"></a>Mkcert使用步驟</h2><h3 id="一、創建專案"><a href="#一、創建專案" class="headerlink" title="一、創建專案"></a>一、創建專案</h3><p><img src="/image/20230101_19-15-11.png"></p><h3 id="二、創建本機CA"><a href="#二、創建本機CA" class="headerlink" title="二、創建本機CA"></a>二、創建本機CA</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkcert localhost</span><br></pre></td></tr></table></figure><h3 id="三、設定-setting-參數"><a href="#三、設定-setting-參數" class="headerlink" title="三、設定 setting 參數"></a>三、設定 setting 參數</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;liveServer.settings.host&quot;</span><span class="punctuation">:</span> <span class="string">&quot;localhost&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;liveServer.settings.https&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;enable&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> <span class="comment">//set it true to enable the feature.</span></span><br><span class="line">        <span class="attr">&quot;cert&quot;</span><span class="punctuation">:</span> <span class="string">&quot;E:\\LiveServer\\CA\\localhost.pem&quot;</span><span class="punctuation">,</span> <span class="comment">//full path</span></span><br><span class="line">        <span class="attr">&quot;key&quot;</span><span class="punctuation">:</span> <span class="string">&quot;E:\\LiveServer\\CA\\localhost-key.pem&quot;</span><span class="punctuation">,</span> <span class="comment">//full path</span></span><br><span class="line">        <span class="attr">&quot;passphrase&quot;</span><span class="punctuation">:</span> <span class="string">&quot;12345&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="執行"><a href="#執行" class="headerlink" title="執行"></a>執行</h3><p>打開後，上方就可以看到是否有沒有 SSL。<br><img src="/image/20230101_19-17-46.png"></p>]]></content>
      
      
      <categories>
          
          <category> 筆記 </category>
          
          <category> 生活雜記 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vsc </tag>
            
            <tag> Chocolatey </tag>
            
            <tag> mkcert </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【心得】 回顧2022年心路歷程</title>
      <link href="/2022/12/31/%E7%AD%86%E8%A8%98%E8%88%87%E7%94%9F%E6%B4%BB%E9%9B%9C%E8%A8%98/%E7%94%9F%E6%B4%BB/%E3%80%90%E5%BF%83%E5%BE%97%E3%80%91%20%E5%9B%9E%E9%A1%A72022%E5%B9%B4%E5%BF%83%E8%B7%AF%E6%AD%B7%E7%A8%8B/"/>
      <url>/2022/12/31/%E7%AD%86%E8%A8%98%E8%88%87%E7%94%9F%E6%B4%BB%E9%9B%9C%E8%A8%98/%E7%94%9F%E6%B4%BB/%E3%80%90%E5%BF%83%E5%BE%97%E3%80%91%20%E5%9B%9E%E9%A1%A72022%E5%B9%B4%E5%BF%83%E8%B7%AF%E6%AD%B7%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<p>2022 即將結束，我也要開始統計自己今年為自己提升、改變什麼吧!</p><h2 id="2022-心路歷程"><a href="#2022-心路歷程" class="headerlink" title="2022 心路歷程"></a>2022 心路歷程</h2><p>過去以前不斷學習、盲目的直衝直撞找到軟體工程師的職業， 2020年當初因疫情提早為自己找一份工作，當中不斷需要與客戶、主管之間取得兩方溝通才能進行程式修改、變更以及自己非常不熟悉的系統受到極大的挫折感，面對前後的調適也讓我開啟撰寫Blog之路。</p><p>今年不斷位置自己突破技能，過程開發技術上還是沒辦法到達心目中的等級。今年算是我這一生有最大突破，也是動盪最大的一年。</p><p>過去公司文化不斷卡在落後技術，不斷的試著突破、創新讓公司文化可以為開發有一點點認同。團隊部分也下很大功夫，造就 Line bot 有五個人協助開發，API、 Net 6 、EF Core等技術也慢慢傳授給團隊，增強團隊獨立能力。 </p><p>從團隊、指導、完善團隊開發流程到團隊解散算是結束最光輝的一年，曾為公司、團隊努力突破，同時為自己得到一些啟發。相信接下來的一年從下一份工作可以為我的能力有大幅進步，不管接下來有沒有比今年更有價值，期望接下來會用不同方式呈現給所有人看自己的能力。</p><h2 id="2022-達成成就"><a href="#2022-達成成就" class="headerlink" title="2022 達成成就"></a>2022 達成成就</h2><h3 id="技術成就"><a href="#技術成就" class="headerlink" title="技術成就"></a>技術成就</h3><ol><li>使用 Electron 完成印表機列印 (TSC 標籤機專案)</li><li>提倡 單元測試加入專案</li><li>提倡 新型專案使用 Net 6 版本</li><li>提倡 Review Code</li><li>提倡 團隊技術分享</li><li>加入 CI&#x2F;CD 至團隊專案</li><li>加入 簡易版本更新流程</li><li>加入系統語言國際化語言</li><li>加入 部落格收益、Google SEO 調整</li><li>與 第三方串接 API (AGV 、 Line bot 、 Line notify)</li><li>獨立開發 CMS 系統 (雲端管理系統)</li><li>獨立開發小型 WMS 系統 </li><li>獨立開發 看板系統</li><li>協助 Line Bots 開發製作</li></ol><h2 id="里程碑成就-、特殊經歷"><a href="#里程碑成就-、特殊經歷" class="headerlink" title="里程碑成就 、特殊經歷"></a>里程碑成就 、特殊經歷</h2><ol><li>機車、汽車駕照同年一起考</li><li>Blog 達成 100 篇以上</li><li>人生第一張升降桌 </li><li>2021~2022 結束我的第二間公司</li></ol><h2 id="學習"><a href="#學習" class="headerlink" title="學習"></a>學習</h2><ol><li>Angular 、 Reast 、Vue 基礎架構</li><li>正規表示法 (Reqgular Expression)</li><li>Electron</li><li>AspNet Global 使用方式</li><li>SignalR</li><li>Ngrok 、Docker 、WSDL</li><li>Line Bot、Line Notify 、Discord Bot</li><li>Github Actions 、CI&#x2F;CD</li><li>API 、WSDL 串接方式</li></ol><h2 id="內心心得"><a href="#內心心得" class="headerlink" title="內心心得"></a>內心心得</h2><p>寫一年的 Blog 始終沒有進步，過程中還是要謝謝支持我的前輩們才能活出精采的我，不管從軟體工程師轉換成全端工程師或是DevOps工程師，都要為自己的行為不後悔。</p><p>祝所有大家渡過不安盪的一年，迎接新的一年新氣象。</p>]]></content>
      
      
      <categories>
          
          <category> 筆記 </category>
          
          <category> 生活雜記 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>【HTML】製作 Scanner (二) - 快速使用讀取器/掃描器 (使用 html5-qrcode )</title>
      <link href="/2022/12/28/%E5%89%8D%E7%AB%AF%E6%8A%80%E8%A1%93/HTML/Html-06-ScannerQR/"/>
      <url>/2022/12/28/%E5%89%8D%E7%AB%AF%E6%8A%80%E8%A1%93/HTML/Html-06-ScannerQR/</url>
      
        <content type="html"><![CDATA[<p>本次使用 html-qrcode 快速完成掃描工具，此套件已經把版面建立完成，所以只需要測試鏡頭有沒有進去在選項中即可。</p><h2 id="html5-qrcode"><a href="#html5-qrcode" class="headerlink" title="html5-qrcode"></a>html5-qrcode</h2><p>Github : <a href="https://github.com/mebjas/html5-qrcode">https://github.com/mebjas/html5-qrcode</a></p><h3 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h3><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i html5-qrcode</span><br></pre></td></tr></table></figure><h3 id="程式碼"><a href="#程式碼" class="headerlink" title="程式碼"></a>程式碼</h3><p>以下範例有新增聲音，使用後就會達到抓取的感覺。<br>聲音檔 : <a href="/files/scanner-Demo-01.mp3">點擊我</a></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=6+359999, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;/node_modules/jquery/dist/jquery.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;/node_modules/html5-qrcode/html5-qrcode.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;reader&quot;</span> <span class="attr">width</span>=<span class="string">&quot;600px&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Scanner Log<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;log&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">onScanSuccess</span>(<span class="params">decodedText, decodedResult</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">       <span class="comment">// 加入聲音</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> audios = <span class="keyword">new</span> <span class="title class_">Audio</span>(<span class="string">&#x27;scanner-Demo-01.mp3&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        audios.<span class="title function_">play</span>();</span></span><br><span class="line"><span class="language-javascript">        audios.<span class="title function_">stop</span>();</span></span><br><span class="line"><span class="language-javascript">        $(<span class="string">&#x27;.log&#x27;</span>).<span class="title function_">append</span>(</span></span><br><span class="line"><span class="language-javascript">            <span class="string">`&lt;div&gt;<span class="subst">$&#123;decodedText&#125;</span>&lt;/div&gt;`</span></span></span><br><span class="line"><span class="language-javascript">        );</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">onScanFailure</span>(<span class="params">error</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// handle scan failure, usually better to ignore and keep scanning.</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// for example:</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">`Code scan error = <span class="subst">$&#123;error&#125;</span>`</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> html5QrcodeScanner = <span class="keyword">new</span> <span class="title class_">Html5QrcodeScanner</span>(</span></span><br><span class="line"><span class="language-javascript">    <span class="string">&quot;reader&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">    &#123; <span class="attr">fps</span>: <span class="number">30</span>, <span class="attr">qrbox</span>: &#123;<span class="attr">width</span>: <span class="number">500</span>, <span class="attr">height</span>: <span class="number">500</span>&#125; &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">/* verbose= */</span> <span class="literal">false</span>);</span></span><br><span class="line"><span class="language-javascript">    html5QrcodeScanner.<span class="title function_">render</span>(onScanSuccess, onScanFailure);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="無法抓取畫面"><a href="#無法抓取畫面" class="headerlink" title="無法抓取畫面"></a>無法抓取畫面</h3><p>通常預設攝影機選項是關閉的，請將這功能開啟即可。<br><img src="/image/20221228_22-51-17.png"><br><img src="/image/20221228_22-51-50.png"></p>]]></content>
      
      
      <categories>
          
          <category> 前端技術 </category>
          
          <category> html </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> front-end </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【HTML】製作 Scanner (一) - 把手機轉換電腦攝影機</title>
      <link href="/2022/12/28/%E5%89%8D%E7%AB%AF%E6%8A%80%E8%A1%93/HTML/Html-05-ScannerQR/"/>
      <url>/2022/12/28/%E5%89%8D%E7%AB%AF%E6%8A%80%E8%A1%93/HTML/Html-05-ScannerQR/</url>
      
        <content type="html"><![CDATA[<p>近期 “電腦攝影機” 可是說需要與人視訊時候最重要的設備，對於我來說這東西可能是不常使用的消耗品，本次案例使用手機轉到電腦設備把它當作我們本次作品。<br>本次工具 “Dev47Apps” 作為 手機與電腦溝通App，也可以套用 OBS 相當方便。</p><h2 id="前置作業"><a href="#前置作業" class="headerlink" title="前置作業"></a>前置作業</h2><ol><li>Dev47Apps</li><li>準備QR Code</li></ol><h2 id="安裝方式-Dev47Apps"><a href="#安裝方式-Dev47Apps" class="headerlink" title="安裝方式 Dev47Apps"></a>安裝方式 Dev47Apps</h2><h3 id="Dev47Apps"><a href="#Dev47Apps" class="headerlink" title="Dev47Apps"></a>Dev47Apps</h3><p>下載網址 : <a href="https://www.dev47apps.com/">https://www.dev47apps.com/</a><br>下載方式必須要 App與pc都需要安裝才能完成下一個步驟，安裝步驟請自行處理不另外操作。</p><h3 id="連線方式"><a href="#連線方式" class="headerlink" title="連線方式"></a>連線方式</h3><p>使用步驟如下</p><ol><li>打開Android “DroidCamApp”</li><li>打開 PC “DroidCamApp.exe” </li><li>Pc “DroidCamApp”裡面輸入 Android 顯示的 “Wifi ip” 或是 “drive ip” 即可完成<br><img src="/image/20221225_11-00-59.png"><br><img src="/image/20221225_11-02-47.png"></li></ol><h3 id="完成"><a href="#完成" class="headerlink" title="完成"></a>完成</h3><p>完成後，會變成如下面圖片一樣，如果想要變成直播工作也是不成問題，使用下來非常省成本。<br><img src="/image/20221225_11-25-40.png"><br><img src="/image/20221225_11-29-27.png"></p><h2 id="jquery-qrcode"><a href="#jquery-qrcode" class="headerlink" title="jquery-qrcode"></a>jquery-qrcode</h2><p>既然完成後，緊接著製作 “QR Code” 玩玩看，若覺得麻煩可以跳過這篇 (本文目的模擬與各家收營刷讀條碼機)。</p><ul><li>jquery-qrcode 參考文件 : <a href="https://ithelp.ithome.com.tw/articles/10185571">https://ithelp.ithome.com.tw/articles/10185571</a></li><li>Github : <a href="https://github.com/jeromeetienne/jquery-qrcode">https://github.com/jeromeetienne/jquery-qrcode</a></li></ul><h3 id="安裝方式"><a href="#安裝方式" class="headerlink" title="安裝方式"></a>安裝方式</h3><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm i jquery</span><br><span class="line">npm i jquery.qrcode</span><br></pre></td></tr></table></figure><h2 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h2><h3 id="一-、-加入-div標籤"><a href="#一-、-加入-div標籤" class="headerlink" title="一 、 加入 div標籤"></a>一 、 加入 div標籤</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;qrcode&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="二、加入-Js"><a href="#二、加入-Js" class="headerlink" title="二、加入 Js"></a>二、加入 Js</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&#x27;.qrcode&#x27;</span>).<span class="title function_">qrcode</span>(&#123;</span><br><span class="line">    text: <span class="string">&quot;jqury qrcode&quot;</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>備註 : </p><ol><li>如果是單文字 可以使用 <code>$(&#39;.qrcode&#39;).qrcode(&#39;123&#39;);</code></li><li>舊版瀏覽器需求可以使用 <code> render: table</code> 參數</li><li>大小設定可以使用 <code>width</code>、<code>height</code>修飾</li><li>以下參數<table><thead><tr><th>名稱</th><th>說明</th></tr></thead><tbody><tr><td>render</td><td>html 標籤轉換，預設 “canvas”</td></tr><tr><td>width</td><td>寬度</td></tr><tr><td>height</td><td>高度</td></tr><tr><td>background</td><td>背景顏色</td></tr><tr><td>foreground</td><td>Qrocode 顏色</td></tr><tr><td>correctLevel</td><td>尺寸 ，預設 “QRErrorCorrectLevel.H,”</td></tr></tbody></table></li></ol><h3 id="三、Source-Code"><a href="#三、Source-Code" class="headerlink" title="三、Source Code"></a>三、Source Code</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;/node_modules/jquery/dist/jquery.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;/node_modules/jquery.qrcode/src/jquery.qrcode.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;/node_modules/jquery.qrcode/src/qrcode.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>QrCode - for jquery qrcode<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;qrcode&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        $(<span class="string">&#x27;.qrcode&#x27;</span>).<span class="title function_">qrcode</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">            text: <span class="string">&quot;jqury qrcode&quot;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;);</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端技術 </category>
          
          <category> html </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> front-end </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Entity Framework 6 如何更新結構、資料型態</title>
      <link href="/2022/12/19/%E5%BE%8C%E7%AB%AF%E6%8A%80%E8%A1%93/CS/NetCore/Core_03_EF%E6%9B%B4%E6%96%B0%E7%B5%90%E6%A7%8B/"/>
      <url>/2022/12/19/%E5%BE%8C%E7%AB%AF%E6%8A%80%E8%A1%93/CS/NetCore/Core_03_EF%E6%9B%B4%E6%96%B0%E7%B5%90%E6%A7%8B/</url>
      
        <content type="html"><![CDATA[<p>這章節主要使用、更新資料結構，EF6只要碰到更新動作是一件很可怕的事情，以下提供各位解決方案。</p><h2 id="何謂-Edmx-檔案"><a href="#何謂-Edmx-檔案" class="headerlink" title="何謂 Edmx 檔案"></a>何謂 Edmx 檔案</h2><p>edmx是EF產生的檔案，透過創建方式產生 SSDL、CSDL 、MSL 。<br>SSDL：定義實體資料庫。<br>CSDL：定義模型類別。<br>MSL(C-S Mapping)：對應資料庫Table與Entity物件</p><p><img src="/image/20221220_10-48-52.png"></p><h2 id="更新方式"><a href="#更新方式" class="headerlink" title="更新方式"></a>更新方式</h2><ol><li>修改 edmx 檔案(用xml開啟)以及 模型類別</li><li>透過 edmx 圖形化方式修改。</li><li>若要更新model先刪掉裡面內容，才能確保保持一樣的內容。</li></ol><p><img src="/image/20221220_11-20-08.png"></p><h2 id="更新結構-新增結構"><a href="#更新結構-新增結構" class="headerlink" title="更新結構&#x2F;新增結構"></a>更新結構&#x2F;新增結構</h2><p>這邊我們用兩種做法，開始前我們先新增 <code>text4</code> 當作範例，請參閱更新方式。</p><p><img src="/image/20221220_11-31-42.png"></p><h3 id="圖形化方式修改"><a href="#圖形化方式修改" class="headerlink" title="圖形化方式修改"></a>圖形化方式修改</h3><p>一、 首先雙點擊edmx再來按下完成。<br>備註 : 更新部分已經存在的table 只需要按下完成即可。<br><img src="/image/20221220_11-41-38.png"><br><img src="/image/20221220_11-42-02.png"></p><p>二、 確認模型類型<br>這邊建議存檔完畢edmx在檢查<strong>類型</strong>會比較好，原因是當他完成更新結構需要loading一段時間，才會更新到類別，雖然它會自動更新類別極大優點也造成有缺陷問題。<br><img src="/image/20221220_11-44-51.png"></p><p>備註 : 通常初期使用圖形化方式更新會比較好上手，EF6載入問題實在是無法排除這致命問題，建議少用圖形化方式更新結構。</p><h3 id="XML修改、更新模型類別"><a href="#XML修改、更新模型類別" class="headerlink" title="XML修改、更新模型類別"></a>XML修改、更新模型類別</h3><p>一、先把模型類別內容修改<br><img src="/image/20221220_11-36-41.png"><br>二、修改edmx檔案 (需要修三個地方)<br><img src="/image/20221220_11-37-10.png"></p><h2 id="變更型態"><a href="#變更型態" class="headerlink" title="變更型態"></a>變更型態</h2><p>前公司部分常常遇到資料庫設計問題更改型態，來先看看圖形化處理方式。<br>備註 :開始前記得更新結構 ，將text4改為int資料型態。</p><h3 id="圖形化方式缺點"><a href="#圖形化方式缺點" class="headerlink" title="圖形化方式缺點"></a>圖形化方式缺點</h3><p>如果我們按照原本操作可以看到，如果直接更新edmx只會更新DB結構並不會更新<strong>類別</strong>檔案型態。<br><img src="/image/20221220_11-56-13.gif"></p><h3 id="圖形化方式-解決方式"><a href="#圖形化方式-解決方式" class="headerlink" title="圖形化方式(解決方式)"></a>圖形化方式(解決方式)</h3><p>動作如下</p><ol><li>打開 “模型瀏覽器” (必須要focus在edmx才能使用)</li><li>刪除 table參考 、以及模型參考</li><li>重新新增table即可<br><img src="/image/20221220_12-26-28.gif"></li></ol><h3 id="XML修改、更新模型類別-1"><a href="#XML修改、更新模型類別-1" class="headerlink" title="XML修改、更新模型類別"></a>XML修改、更新模型類別</h3><p>動作如下</p><ol><li>修改模型類別</li><li>修改xml (SSDL、CSDL、CS mapping)<br>以上方式會遠遠比圖形化處理方式來得快很多，缺點是如果當table很大量可能會遇到改錯問題。<br><img src="/image/20221220_12-32-19.png"><br><img src="/image/20221220_12-32-44.png"></li></ol><h2 id="刪除結構"><a href="#刪除結構" class="headerlink" title="刪除結構"></a>刪除結構</h2><h3 id="圖形化方式"><a href="#圖形化方式" class="headerlink" title="圖形化方式"></a>圖形化方式</h3><p>這邊就比較單純許，只需要刪除現有實體模型以及更新資料庫參考即可。<br><img src="/image/20221220_12-55-37.png"></p><h3 id="XML修改、更新模型類別-2"><a href="#XML修改、更新模型類別-2" class="headerlink" title="XML修改、更新模型類別"></a>XML修改、更新模型類別</h3><p>因動作比較簡單這邊就不就操作。</p><ol><li>修改xml (SSDL、CSDL、CS mapping)內容即可</li><li>修改類別模型</li></ol><h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>EF6 部分比較麻煩是更新結構部分，但還是盡量避免使用 圖形化方式修改，主要原因是開啟、存檔耗損資源以及時間特別長，且如果強制關掉會造成很可怕的問題建議與github保持一定的版本才進行操作。</p><p>如果想要深入了解xml結構可以參考下方測試連結。<br>Github : <a href="https://github.com/JontCont/NetFramework_EF6_Demo">https://github.com/JontCont/NetFramework_EF6_Demo</a></p>]]></content>
      
      
      <categories>
          
          <category> 後端技術 </category>
          
          <category> C# </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
            <tag> EF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C# - 讓EF自動創建資料庫</title>
      <link href="/2022/12/19/%E5%BE%8C%E7%AB%AF%E6%8A%80%E8%A1%93/CS/NetCore/Core_07_%E8%AE%93EF%E8%87%AA%E5%8B%95%E5%89%B5%E5%BB%BA%E8%B3%87%E6%96%99%E5%BA%AB/"/>
      <url>/2022/12/19/%E5%BE%8C%E7%AB%AF%E6%8A%80%E8%A1%93/CS/NetCore/Core_07_%E8%AE%93EF%E8%87%AA%E5%8B%95%E5%89%B5%E5%BB%BA%E8%B3%87%E6%96%99%E5%BA%AB/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近需要放送心情，將這個主題延後兩三個月才公布。EF 已經在業界當中不可或缺的一個技術，這次就來介紹如何使用EF自動創建資料庫。</p><hr><h2 id="EF-創建資料庫方法"><a href="#EF-創建資料庫方法" class="headerlink" title="EF 創建資料庫方法"></a>EF 創建資料庫方法</h2><h3 id="一、EnsureCreated"><a href="#一、EnsureCreated" class="headerlink" title="一、EnsureCreated"></a>一、EnsureCreated</h3><p>這個方法是在EF Core 1.0版本中新增的，這個方法會檢查資料庫是否存在，如果不存在就會建立資料庫，但是這個方法只會建立資料庫，不會建立資料表，所以這個方法只適合在開發階段使用。</p><p>EnsureCreated() 創建是空白資料表。因此，需要使用還是要有個地方站存資料，例如 : excel 、access 、json等。</p><p>規則 :</p><ol><li>如果資料庫不存在，就會建立資料庫、資料表。</li><li>如果資料庫存在，就不會做任何事情。</li><li>如果資料庫存在且資料表不存在，就不會建立資料表。</li></ol><p>介於這個方法特性，可以知道他不具有更新資料表的能力，通常會與Migrations使用或是自動測試之類。</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> (<span class="keyword">var</span> context = <span class="keyword">new</span> BloggingContext())</span><br><span class="line">&#123;</span><br><span class="line">    context.Database.EnsureCreated();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二、Migrations"><a href="#二、Migrations" class="headerlink" title="二、Migrations"></a>二、Migrations</h3><p>可以利用Migrations檔案達到版控的效果，裡面還提供版本號讓後續維護更有彈性。<br><img src="/image/20230711_22-31-16.png"></p><h4 id="2-1-前置作業"><a href="#2-1-前置作業" class="headerlink" title="2-1 前置作業"></a>2-1 前置作業</h4><ol><li><p>安裝套件</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dotnet add package Microsoft.EntityFrameworkCore.Design</span><br><span class="line">dotnet add package Microsoft.EntityFrameworkCore.Tools</span><br></pre></td></tr></table></figure></li><li><p>新增資料庫連線字串</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;ConnectionStrings&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;Dev&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Data Source=***;Initial Catalog=***;Persist Security Info=True;User ID=***;Password=***&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li><li><p>建立資料庫連線</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Comm</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">string</span> <span class="title">ConnectionString</span>(<span class="params"><span class="built_in">string</span> Connect</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        IConfiguration config = <span class="keyword">new</span> ConfigurationBuilder()</span><br><span class="line">            .SetBasePath(Directory.GetCurrentDirectory())</span><br><span class="line">            .AddJsonFile(<span class="string">&quot;appsettings.json&quot;</span>, optional: <span class="literal">true</span>, reloadOnChange: <span class="literal">true</span>)</span><br><span class="line">            .Build();</span><br><span class="line">        <span class="keyword">return</span> config.GetConnectionString(Connect);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>建立資料庫連線</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">BloggingContext</span> : <span class="title">DbContext</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> DbSet&lt;Blog&gt; Blogs &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> DbSet&lt;Post&gt; Posts &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">OnConfiguring</span>(<span class="params">DbContextOptionsBuilder optionsBuilder</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        optionsBuilder.UseSqlServer(<span class="keyword">new</span> Comm().ConnectionString(<span class="string">&quot;Dev&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>建立資料表</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Blog</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> BlogId &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Url &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;Post&gt; Posts &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Post</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> PostId &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Title &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Content &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> BlogId &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> Blog Blog &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h4 id="2-2-使用方式"><a href="#2-2-使用方式" class="headerlink" title="2-2 使用方式"></a>2-2 使用方式</h4><ol><li>建立 Migrations<br>利用 <code>dotnet ef migrations add InitialCreate</code> 指令，會在專案中建立一個 Migrations 資料夾，裡面會有一個檔案，檔案名稱是我們指定的名稱，這個檔案就是我們的 Migrations 檔案，裡面會有一些我們的資料表建立的指令。</li></ol><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dotnet ef migrations add InitialCreate</span><br></pre></td></tr></table></figure><p>如果資料表有異動可以利用 <code>dotnet ef migrations add InitialCreate</code> 指令，他會將異動的資料表建立的指令，寫入到 Migrations 檔案中。</p><p>注意 : 如果 Create 多張表而產生的 migrations ，當異動想還原必須要把之前的 table 異動修至上一個版本。 </p><ol start="2"><li>更新資料庫<br>假設我們有多個 Migrations 檔案，我們可以使用 <code>dotnet ef database update</code> 指令，會依照我們的 Migrations 檔案順序，依序執行資料表建立的指令。</li></ol><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dotnet ef database update</span><br></pre></td></tr></table></figure><h3 id="2-3-程式碼使用方式"><a href="#2-3-程式碼使用方式" class="headerlink" title="2-3 程式碼使用方式"></a>2-3 程式碼使用方式</h3><p>這個作法如同上面的使用方式  <code>dotnet ef database update</code> ，只是將指令改成程式碼而已。需要事先加入 migrations 檔案。</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> (<span class="keyword">var</span> context = <span class="keyword">new</span> BloggingContext())</span><br><span class="line">&#123;</span><br><span class="line">    context.Database.Migrate();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 後端技術 </category>
          
          <category> C# </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
            <tag> Core </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用 Entity Framework 6 CRUD</title>
      <link href="/2022/12/19/%E5%BE%8C%E7%AB%AF%E6%8A%80%E8%A1%93/CS/NetFramework/NF_07_Net472%E4%BD%BF%E7%94%A8EF/"/>
      <url>/2022/12/19/%E5%BE%8C%E7%AB%AF%E6%8A%80%E8%A1%93/CS/NetFramework/NF_07_Net472%E4%BD%BF%E7%94%A8EF/</url>
      
        <content type="html"><![CDATA[<p>使用前必須要先知道 Entity Framework 有兩個版本。</p><ul><li>Entity Framework Core : 適用於 .NET 的新式物件資料庫對應程式。 其支援 LINQ 查詢、變更追蹤、更新以及結構描述移轉。</li><li>Entity Framework 6 : 透過資料庫提供者外掛程式模型搭配使用 SQL Server&#x2F;Azure SQL Database、SQLite、Azure Cosmos DB、MySQL、PostgreSQL 及更多資料庫。</li></ul><p>因此，使用EF6表現上會與 EF core 功能會也所不同。EF6是基於ADO.NET發展出來的物件關聯對應 (O&#x2F;R Mapping)，利用了抽象化資料結構的方式，將每個資料庫物件都轉換成應用程式物件 (entity)，而資料欄位都轉換為屬性 (property)，關聯則轉換為結合屬性 (association)，讓資料庫的 E&#x2F;R 模型完全的轉成物件模型。<br><img src="/image/20221220_09-11-30.png"></p><p>參考文件 </p><ol><li>microsoft : <a href="https://learn.microsoft.com/zh-tw/ef/efcore-and-ef6/">microsoft Entity Framewor</a></li><li>Wiki : <a href="https://zh.wikipedia.org/wiki/Entity_Framework">Entity Framework</a></li><li>Wiki : <a href="https://zh.wikipedia.org/wiki/Entity_Framework_Core">Entity Framework Core</a></li><li>Wiki : <a href="https://zh.wikipedia.org/wiki/ADO.NET">ADO.NET</a></li><li>The Will Will Web: <a href="https://blog.miniasp.com/post/2022/04/23/EF-Core-has-no-ValidateOnSaveEnabled-anymore">EF Core 已經不會在 SaveChanges() 的時候對實體模型進行額外驗證</a></li><li><a href="https://learn.microsoft.com/zh-tw/ef/ef6/modeling/designer/data-types/complex-types">複雜類型 - EF 設計工具</a></li><li><a href="https://learn.microsoft.com/en-us/ef/ef6/">Entity Framework 6</a></li></ol><h2 id="創建方式"><a href="#創建方式" class="headerlink" title="創建方式"></a>創建方式</h2><p>這邊操作建議獨立 folder 存放”實體資料模型”。如以下步驟操作步驟</p><ol><li>選擇 ADO.NET 實體資料模型</li><li>選擇 “來自資料庫的EF Designer” (本文使用 DB First) </li><li>選擇連線方式 (連線資訊會直接寫如Web.config當中)</li><li>選擇版本 (建議選擇6.x穩定版本)</li><li>選擇指定結構</li></ol><p><img src="/image/20221219_21-32-03.png"><br><img src="/image/20221219_21-32-27.png"><br><img src="/image/20221219_21-32-58.png"><br><img src="/image/20221219_21-33-18.png"><br><img src="/image/20221219_21-33-49.png"></p><h3 id="起手前介紹"><a href="#起手前介紹" class="headerlink" title="起手前介紹"></a>起手前介紹</h3><p>如果是初次使用EF的讀者，看看以下說明。<br>EF 創建後會產生 “DbContext”  可以從 xxx.context.cs 查看、修改、複寫。基於ADO.Net來說 EF 很貼心把 Connection Open()&#x2F;Close() 寫好，使用上會比較友善許多、簡單。</p><p><img src="/image/20221219_22-46-00.png"><br><img src="/image/20221219_21-59-01.png"></p><p>xxx.edmx 下一篇會介紹如何此用，原則上他是資料庫、實體資料模型比較的參考文件後面再細談。</p><h2 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h2><p>這邊我們看看如何使用 CRUD 方式測試，這邊會使用非常簡單處理方式執行。如果想要本章節DB結構可以參考最下方。<br>EF 使用規則 :</p><ol><li>需要先初始化 dbcontext</li><li>每當執行變更DB動作需要使用SaveChanges()動作</li></ol><h3 id="新增"><a href="#新增" class="headerlink" title="新增"></a>新增</h3><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">CRUD</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> EF_Demo db = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CRUD</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        db = <span class="keyword">new</span> EF_Demo(); <span class="comment">// 初始化 dbcontext</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Add</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="comment">//存入</span></span><br><span class="line">      db.DEMO_1.Add(<span class="keyword">new</span> DEMO_1</span><br><span class="line">      &#123;</span><br><span class="line">          text1 = <span class="string">&quot;111&quot;</span>,</span><br><span class="line">          text2 = <span class="string">&quot;222&quot;</span>,</span><br><span class="line">          text3 = <span class="string">&quot;333&quot;</span>,</span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">      <span class="comment">//驗證、存檔</span></span><br><span class="line">      db.SaveChanges();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h2><p>這邊稍微留意 EFCore 中是使用 <code>Update</code>方式更新，EF則是直接修改當前”資料”使用上需要小心使用。</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">CRUD</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> EF_Demo db = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CRUD</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        db = <span class="keyword">new</span> EF_Demo(); <span class="comment">// 初始化 dbcontext</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Update</span>(<span class="params"><span class="built_in">string</span> key</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> data = db.DEMO_1.Find(key);</span><br><span class="line">        data.text2 = <span class="string">&quot;222&quot;</span>;</span><br><span class="line">        data.text3 = <span class="string">&quot;333&quot;</span>;</span><br><span class="line">        db.SaveChanges();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="刪除"><a href="#刪除" class="headerlink" title="刪除"></a>刪除</h2><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">CRUD</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> EF_Demo db = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CRUD</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        db = <span class="keyword">new</span> EF_Demo(); <span class="comment">// 初始化 dbcontext</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Delete</span>(<span class="params"><span class="built_in">string</span> key</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> data = db.DEMO_1.Find(key);</span><br><span class="line">        db.DEMO_1.Remove(data);</span><br><span class="line">        db.SaveChanges();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="查詢"><a href="#查詢" class="headerlink" title="查詢"></a>查詢</h2><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">CRUD</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> EF_Demo db = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CRUD</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        db = <span class="keyword">new</span> EF_Demo(); <span class="comment">// 初始化 dbcontext</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Query</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> datas =db.DEMO_1.ToList(); <span class="comment">//取得資料</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">foreach</span> (<span class="keyword">var</span> item <span class="keyword">in</span> datas)</span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(item);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="本章使用DB結構"><a href="#本章使用DB結構" class="headerlink" title="本章使用DB結構"></a>本章使用DB結構</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/****** Object:  Table [dbo].[DEMO_1]    Script Date: 2022/12/20 上午 09:59:51 ******/</span></span><br><span class="line"><span class="keyword">SET</span> ANSI_NULLS <span class="keyword">ON</span></span><br><span class="line">GO</span><br><span class="line"></span><br><span class="line"><span class="keyword">SET</span> QUOTED_IDENTIFIER <span class="keyword">ON</span></span><br><span class="line">GO</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> [dbo].[DEMO_1](</span><br><span class="line">[text1] [<span class="type">nchar</span>](<span class="number">10</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">[text2] [<span class="type">nchar</span>](<span class="number">10</span>) <span class="keyword">NULL</span>,</span><br><span class="line">[text3] [<span class="type">nchar</span>](<span class="number">10</span>) <span class="keyword">NULL</span>,</span><br><span class="line"> <span class="keyword">CONSTRAINT</span> [PK_DEMO_1] <span class="keyword">PRIMARY</span> KEY CLUSTERED </span><br><span class="line">(</span><br><span class="line">[text1] <span class="keyword">ASC</span></span><br><span class="line">)<span class="keyword">WITH</span> (PAD_INDEX <span class="operator">=</span> OFF, STATISTICS_NORECOMPUTE <span class="operator">=</span> OFF, IGNORE_DUP_KEY <span class="operator">=</span> OFF, ALLOW_ROW_LOCKS <span class="operator">=</span> <span class="keyword">ON</span>, ALLOW_PAGE_LOCKS <span class="operator">=</span> <span class="keyword">ON</span>, OPTIMIZE_FOR_SEQUENTIAL_KEY <span class="operator">=</span> OFF) <span class="keyword">ON</span> [<span class="keyword">PRIMARY</span>]</span><br><span class="line">) <span class="keyword">ON</span> [<span class="keyword">PRIMARY</span>]</span><br><span class="line">GO</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 後端技術 </category>
          
          <category> C# </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
            <tag> EF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【心得】Funter開箱心得</title>
      <link href="/2022/12/16/%E7%AD%86%E8%A8%98%E8%88%87%E7%94%9F%E6%B4%BB%E9%9B%9C%E8%A8%98/%E7%94%9F%E6%B4%BB/%E3%80%90%E5%BF%83%E5%BE%97%E3%80%91Funter%E9%96%8B%E7%AE%B1%E5%BF%83%E5%BE%97/"/>
      <url>/2022/12/16/%E7%AD%86%E8%A8%98%E8%88%87%E7%94%9F%E6%B4%BB%E9%9B%9C%E8%A8%98/%E7%94%9F%E6%B4%BB/%E3%80%90%E5%BF%83%E5%BE%97%E3%80%91Funter%E9%96%8B%E7%AE%B1%E5%BF%83%E5%BE%97/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>供給各位放鬆心情閱讀，請慢用貓貓圖φ(゜▽゜*)♪。<br><img src="/image/20221216_22-46-46.png"></p><h3 id="購買契機"><a href="#購買契機" class="headerlink" title="購買契機"></a>購買契機</h3><p>由於本人主要工作是”撰寫程式”(軟體工程師)長期坐在位子上使用電腦，如果長期一直坐著使用電腦不斷影響我的腰部能力，因此選擇升降桌。而市面上很多升降桌品牌，最多人提出品牌為 “funte”、”standway”最多，思考方向會想 雙11或雙12入手比較價格。”standway”部分沒有降下來趨勢，再來就是價格比funte貴才放下standway。</p><p>funte 因雙12優惠 寬120cm*深60cm 智慧型電動三節式升降桌 只需要 <code>13,860</code>相當划算。<br><img src="/image/20221216_23-11-26.png"></p><h3 id="最初桌子"><a href="#最初桌子" class="headerlink" title="最初桌子"></a>最初桌子</h3><p>一開始使用的桌面為ikea SVARTA 現代北歐桌板 ，桌面長度很廣、也有弧形的桌邊，可以強化高架床的搖晃度相當實用。<br><img src="/image/20221216_22-55-50.png"></p><p>這幾年使用下來分享一下缺點，如下。</p><ul><li>桌面高度、椅子舒適度</li><li>弧形桌面使用上的不適感</li><li>夾桌面設備比較不友善，如掛壁式螢幕</li></ul><p>之後選擇了，升降桌方式排除問題點。</p><h2 id="Funte-開箱"><a href="#Funte-開箱" class="headerlink" title="Funte 開箱"></a>Funte 開箱</h2><p>首次撰寫開箱文，新手發文請多多包涵。</p><h3 id="Funte-重量、搬運"><a href="#Funte-重量、搬運" class="headerlink" title="Funte 重量、搬運"></a>Funte 重量、搬運</h3><p>Funte整體重量來說，鐵架那包是最重包裹，如果家裡是公寓沒有電梯建議還是兩個人去搬運(自行DIY)。<br><img src="/image/20221216_23-24-02.png"></p><h3 id="Funte-製作心得"><a href="#Funte-製作心得" class="headerlink" title="Funte 製作心得"></a>Funte 製作心得</h3><p>骨架部分如果有其他人幫忙請記得要請人支援，初次實作勞作差點摔爛地板。購買前有偷偷購買輪胎預防移動時需要第二個人手支援，總結來說，只有桌面部分有電動起子可以鎖，其餘都是人工鎖緊相當費工，花費時間40~50分鐘上下。從ikea 到 funte 使用桌面部分 funte桌面相當厚實非常喜歡這類桌面，輪胎部分使用上安靜、好滾加購部分也很滿意。</p><div class="gallery">    <div class="fj-gallery  data" data-rowHeight="220" data-limit="10">    <span class="gallery-data">[{"url":"/image/20221216_23-30-35.png","alt":""},{"url":"/image/20221216_23-31-10.png","alt":""},{"url":"/image/20221216_23-34-20.png","alt":""},{"url":"/image/20221216_23-31-49.png","alt":""},{"url":"/image/20221216_23-32-10.png","alt":""}]</span>    </div>    <button class="gallery-load-more"><span>載入更多</span><i class="fa-solid fa-arrow-down"></i></button>    </div><h3 id="Funte-成品"><a href="#Funte-成品" class="headerlink" title="Funte 成品"></a>Funte 成品</h3><p>桌面部分擺放、switch 其餘能架桌面就架桌面保持桌面整齊感，使用上麥克風部分會卡到床邊，限制在 100cm(還輪胎)還在容忍範圍，funte 板面3.0可以上升到 130區間 ，身高如果很高可以不妨選擇這台。<br><img src="/image/20221216_23-46-01.png"></p>]]></content>
      
      
      <categories>
          
          <category> 筆記 </category>
          
          <category> 生活雜記 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Docker (五) - httpd 修改 index 內容</title>
      <link href="/2022/12/13/DevOps/Docker/dc_05_httpd%20%E4%BF%AE%E6%94%B9%20index%20%E5%85%A7%E5%AE%B9/"/>
      <url>/2022/12/13/DevOps/Docker/dc_05_httpd%20%E4%BF%AE%E6%94%B9%20index%20%E5%85%A7%E5%AE%B9/</url>
      
        <content type="html"><![CDATA[<h2 id="前置作業"><a href="#前置作業" class="headerlink" title="前置作業"></a>前置作業</h2><p>完成下方指令已可繼續本章節。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker pull httpd</span><br><span class="line">docker create -p 8080:80 --name web -i httpd</span><br><span class="line">docker start web</span><br></pre></td></tr></table></figure><h2 id="進入-Container-內-Cli"><a href="#進入-Container-內-Cli" class="headerlink" title="進入 Container 內 Cli"></a>進入 Container 內 Cli</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker ps -a #看狀態 </span><br><span class="line">docker exec -it web bash</span><br></pre></td></tr></table></figure><h2 id="修改-index-html-內容"><a href="#修改-index-html-內容" class="headerlink" title="修改 index.html 內容"></a>修改 index.html 內容</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#找到 htdocs內的index.html</span><br><span class="line">cat htdocs/index.html</span><br><span class="line"></span><br><span class="line">## 修改index.html內容</span><br><span class="line">echo Hello world - Docker &gt; htdocs/index.html &amp;&amp; exit</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>離開後直接開啟 <a href="http://localhost:8080/">http://localhost:8080/</a> 即可看到效果，如果看不到效果請再重新整理container。</p>]]></content>
      
      
      <categories>
          
          <category> DevOps </category>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker (四)- port設定篇(httpd)</title>
      <link href="/2022/12/13/DevOps/Docker/dc_04_port%E8%A8%AD%E5%AE%9A%E7%AF%87(httpd)/"/>
      <url>/2022/12/13/DevOps/Docker/dc_04_port%E8%A8%AD%E5%AE%9A%E7%AF%87(httpd)/</url>
      
        <content type="html"><![CDATA[<h2 id="使用-httpd"><a href="#使用-httpd" class="headerlink" title="使用 httpd"></a>使用 httpd</h2><p>這邊使用上篇使用方式設定port。步驟如下</p><h3 id="創建-images"><a href="#創建-images" class="headerlink" title="創建 images"></a>創建 images</h3><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull httpd</span><br></pre></td></tr></table></figure><h3 id="創建-Container-環境"><a href="#創建-Container-環境" class="headerlink" title="創建 Container 環境"></a>創建 Container 環境</h3><p>這裡需要留意 <code>-p</code> 、<code>--publish</code>兩個參數可以使用，都是設定port forwarding。</p><figure class="highlight plaintext"><figcaption><span>host 8080連線後，會直接轉到Container 中的 80 port。</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">```cmd</span><br><span class="line">docker create -p 8080:80 --name web -i httpd</span><br></pre></td></tr></table></figure><p>稍微補充資訊，像是沒有特別指定 port 參數是不會有預設port ，如下圖顯示。<br><img src="/image/20221213_19-53-46.png"></p><h3 id="執行畫面"><a href="#執行畫面" class="headerlink" title="執行畫面"></a>執行畫面</h3><p>start沒有設定port參數，所以需要從 Container 設定 ，啟動後就可以使用 httpd畫面</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">start</span> web</span><br></pre></td></tr></table></figure><p><img src="/image/20221213_19-57-32.png"></p><h2 id="刪除背景程式"><a href="#刪除背景程式" class="headerlink" title="刪除背景程式"></a>刪除背景程式</h2><p>httpd 執行後會以背景程式方式執行，如果想要直接結束作業必須要使用 <code>-f</code>參數，如下指令。</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rm -f web</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> DevOps </category>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用 LinQ (一) - 介紹 LinQ</title>
      <link href="/2022/12/12/%E5%BE%8C%E7%AB%AF%E6%8A%80%E8%A1%93/LINQ/%E4%BD%BF%E7%94%A8%20LinQ%20(%E4%B8%80)%20-%20%E4%BB%8B%E7%B4%B9%20LinQ/"/>
      <url>/2022/12/12/%E5%BE%8C%E7%AB%AF%E6%8A%80%E8%A1%93/LINQ/%E4%BD%BF%E7%94%A8%20LinQ%20(%E4%B8%80)%20-%20%E4%BB%8B%E7%B4%B9%20LinQ/</url>
      
        <content type="html"><![CDATA[<h1 id="語言整合查詢-Linq-簡介"><a href="#語言整合查詢-Linq-簡介" class="headerlink" title="語言整合查詢 - Linq 簡介"></a>語言整合查詢 - Linq 簡介</h1><h2 id="何謂Linq"><a href="#何謂Linq" class="headerlink" title="何謂Linq ?"></a>何謂Linq ?</h2><p>語言整合查詢（英語：Language Integrated Query，縮寫：LINQ）， 顧名思義就是此程式語言擁有查詢資料的能力，LINQ的出現使得C#(基本上 .Net 都可以使用)可以在程式中查找資料。<br>利用標準查詢運算子(Standard Query Operators)，工程師可以用原生的C#語言對資料做處理，選擇資料來源、進行篩選到組合、分組都可以利用標準查詢運算子完成，而且在撰寫的過程中還可以享受到型別檢查及自動完成帶來的便捷。</p><h2 id="LINQ的組成"><a href="#LINQ的組成" class="headerlink" title="LINQ的組成"></a>LINQ的組成</h2><p>LINQ是一種能力，微軟開發出了很多不同的技術讓C#擁有這樣的能力。</p><h2 id="1-標準查詢運算子-Standard-Query-Operators"><a href="#1-標準查詢運算子-Standard-Query-Operators" class="headerlink" title="1. 標準查詢運算子 - Standard Query Operators"></a>1. 標準查詢運算子 - Standard Query Operators</h2><p>標準查詢運算子是應用於集合類別的運算子，它對集合實作了篩選、組合、排序..等等的運算功能，像是Select、Where、OrderBy…等方法，而這些方法就是運作於IEnumerable<T>、IQueryable<T>。</p><h2 id="2-語言擴展-Language-Extensions"><a href="#2-語言擴展-Language-Extensions" class="headerlink" title="2. 語言擴展 - Language Extensions"></a>2. 語言擴展 - Language Extensions</h2><p>為了使LINQ可以更加便捷的使用而將C#擴充了以下的功能:</p><h3 id="a-查詢運算式-Query-Expression-Query-Syntax"><a href="#a-查詢運算式-Query-Expression-Query-Syntax" class="headerlink" title="a. 查詢運算式 - Query Expression(Query Syntax)"></a>a. 查詢運算式 - Query Expression(Query Syntax)</h3><p>查詢運算式(Query Expression)是一種跟SQL搜尋語法相似的運算式，透過查詢運算式，我們可以對資料做相關的處理，下面是一個最基本的查詢運算式:</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> x <span class="keyword">in</span> Products</span><br><span class="line"><span class="keyword">select</span> x.ProductName</span><br></pre></td></tr></table></figure><p>此段語法會被Compiler轉譯為標準查詢運算子:</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Products.Select (x =&gt; x.ProductName)</span><br></pre></td></tr></table></figure><p> 而最後進資料庫的會是下面這樣的SQL語法:</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT [t0].[ProductName]</span><br><span class="line">FROM [Products] AS [t0]</span><br></pre></td></tr></table></figure><h3 id="b-隱含型別變數-Implicitly-typed-variables"><a href="#b-隱含型別變數-Implicitly-typed-variables" class="headerlink" title="b. 隱含型別變數 - Implicitly typed variables"></a>b. 隱含型別變數 - Implicitly typed variables</h3><p>隱含型別變數就是我們在JavaScript上又愛又恨的var，但C#中的var變數還是強型別的變數，它會透過賦予變數的型別來推斷此變數為何種型別(type inference)。</p><h3 id="c-匿名類型-Anonymous-types"><a href="#c-匿名類型-Anonymous-types" class="headerlink" title="c. 匿名類型 - Anonymous types"></a>c. 匿名類型 - Anonymous types</h3><p>匿名型別可以只宣告資料欄位而不需要明確定義類別，這樣的技術在Select或是Join的時候非常好用，因為這些查詢有很大的機會不會是原來的物件。</p><h3 id="d-初始化物件-Object-Initializer"><a href="#d-初始化物件-Object-Initializer" class="headerlink" title="d. 初始化物件 - Object Initializer"></a>d. 初始化物件 - Object Initializer</h3><h2 id="可以直接在new的時候訂定類別的參數初始值，例如說像是下面這樣-3-Lambda表達式-Lambda-Expression是一種匿名方法，LINQ在Query-Expression轉為Standard-Query-Operators時會使用它來做轉換，另外我們以方法使用LINQ時也會使用Lambda。"><a href="#可以直接在new的時候訂定類別的參數初始值，例如說像是下面這樣-3-Lambda表達式-Lambda-Expression是一種匿名方法，LINQ在Query-Expression轉為Standard-Query-Operators時會使用它來做轉換，另外我們以方法使用LINQ時也會使用Lambda。" class="headerlink" title="可以直接在new的時候訂定類別的參數初始值，例如說像是下面這樣:## 3. Lambda表達式 - Lambda Expression是一種匿名方法，LINQ在Query Expression轉為Standard Query Operators時會使用它來做轉換，另外我們以方法使用LINQ時也會使用Lambda。"></a>可以直接在new的時候訂定類別的參數初始值，例如說像是下面這樣:<br><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Person person = <span class="keyword">new</span> Person &#123;</span><br><span class="line">    Name = <span class="string">&quot;John Doe&quot;</span>,</span><br><span class="line">    Age = <span class="number">39</span></span><br><span class="line">&#125;;  <span class="comment">// Object Initializer</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Equal to</span></span><br><span class="line">Person person = <span class="keyword">new</span> Person();</span><br><span class="line">person.Name = <span class="string">&quot;John Doe&quot;</span>;</span><br><span class="line">person.Age = <span class="number">39</span>;</span><br></pre></td></tr></table></figure><br>## 3. Lambda表達式 - Lambda Expression<br>是一種匿名方法，LINQ在Query Expression轉為Standard Query Operators時會使用它來做轉換，另外我們以方法使用LINQ時也會使用Lambda。</h2><p>LinQ 主要有三種元件組成:</p><h2 id="1-LINQ-to-Objects"><a href="#1-LINQ-to-Objects" class="headerlink" title="1. LINQ to Objects"></a>1. LINQ to Objects</h2><p>Provider就是利用這個介面去對任何要查詢的物件做處理，只要你的物件有實作IEnumerable這個物件，你就可以使用LINQ。</p><h2 id="2-LINQ-to-ADO-Net"><a href="#2-LINQ-to-ADO-Net" class="headerlink" title="2. LINQ to ADO.Net"></a>2. LINQ to ADO.Net</h2><p>ADO.Net 可以查詢使用取用外部資料，主要這三種:</p><h3 id="a-LINQ-to-SQL"><a href="#a-LINQ-to-SQL" class="headerlink" title="a. LINQ to SQL"></a>a. LINQ to SQL</h3><p>Database有自己的查詢引擎，所以無法直接透過LINQ的語法做處理，Provider處理了LINQ與SQL查詢語法間的轉換還有應用程式與資料庫間的溝通。</p><h3 id="b-LINQ-to-Entities"><a href="#b-LINQ-to-Entities" class="headerlink" title="b. LINQ to Entities"></a>b. LINQ to Entities</h3><p>類似於 Linq to Sql 方式，但是需要對應實際的資料表。</p><h3 id="c-LinQ-to-DataSet"><a href="#c-LinQ-to-DataSet" class="headerlink" title="c. LinQ to DataSet"></a>c. LinQ to DataSet</h3><h2 id="3-LINQ-to-XML"><a href="#3-LINQ-to-XML" class="headerlink" title="3. LINQ to XML"></a>3. LINQ to XML</h2><p>這裡可以提供不同語法、運算子處理 xml 資料，可將XQuery 、XPath 整合到.net 提供 XML 查詢功能。</p>]]></content>
      
      
      <categories>
          
          <category> 後端技術 </category>
          
          <category> C# </category>
          
          <category> LinQ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
            <tag> Net FrameWork </tag>
            
            <tag> LinQ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用 LinQ (三) - LinqPad 工具</title>
      <link href="/2022/12/12/%E5%BE%8C%E7%AB%AF%E6%8A%80%E8%A1%93/LINQ/%E4%BD%BF%E7%94%A8%20LinQ%20(%E4%B8%89)%20-%20LinqPad%20%E5%B7%A5%E5%85%B7/"/>
      <url>/2022/12/12/%E5%BE%8C%E7%AB%AF%E6%8A%80%E8%A1%93/LINQ/%E4%BD%BF%E7%94%A8%20LinQ%20(%E4%B8%89)%20-%20LinqPad%20%E5%B7%A5%E5%85%B7/</url>
      
        <content type="html"><![CDATA[<p>如果要繼續深入使用 LinQ ，那一定要說一下最近使用的工具 LinqPad。</p><h2 id="LinQpad"><a href="#LinQpad" class="headerlink" title="LinQpad"></a><a href="http://www.linqpad.net/">LinQpad</a></h2><p>這工具是一套免費軟體，注意一下環境必須要安裝 .NET Framework 3.5或是4.0以上，免費版功能已經夠用測試LinQ使用。</p><p>如果需要code snippets,autocompletion, smart tags, code outlining, .NET Reflector integration 功能就前往升級版本。</p><p>詳細說明請至 IT邦幫忙(Peter Chen) : <a href="https://ithelp.ithome.com.tw/articles/10193063">https://ithelp.ithome.com.tw/articles/10193063</a></p><hr><h1 id="創造資料庫"><a href="#創造資料庫" class="headerlink" title="創造資料庫"></a>創造資料庫</h1><p>這邊為了快速建檔，可以使用下方語法創建資料庫。<br>我們需要創建個人資料以及成績，之後會用 LINQ 串出來。</p><h2 id="資料庫"><a href="#資料庫" class="headerlink" title="資料庫"></a>資料庫</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/****** Object:  Database [TestDB]    Script Date: 2021/12/3 下午 10:40:32 ******/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> DATABASE [TestDB]</span><br><span class="line"> CONTAINMENT <span class="operator">=</span> <span class="keyword">NONE</span></span><br><span class="line"> <span class="keyword">ON</span>  <span class="keyword">PRIMARY</span> </span><br><span class="line">( NAME <span class="operator">=</span> N<span class="string">&#x27;TestDB&#x27;</span>, FILENAME <span class="operator">=</span> N<span class="string">&#x27;d:\SQL\TestDB.mdf&#x27;</span> , SIZE <span class="operator">=</span> <span class="number">8192</span>KB , MAXSIZE <span class="operator">=</span> UNLIMITED, FILEGROWTH <span class="operator">=</span> <span class="number">65536</span>KB )</span><br><span class="line"> LOG <span class="keyword">ON</span> </span><br><span class="line">( NAME <span class="operator">=</span> N<span class="string">&#x27;TestDB_log&#x27;</span>, FILENAME <span class="operator">=</span> N<span class="string">&#x27;d:d:\SQL\TestDB_log.ldf&#x27;</span> , SIZE <span class="operator">=</span> <span class="number">8192</span>KB , MAXSIZE <span class="operator">=</span> <span class="number">2048</span>GB , FILEGROWTH <span class="operator">=</span> <span class="number">65536</span>KB )</span><br><span class="line"> <span class="keyword">WITH</span> CATALOG_COLLATION <span class="operator">=</span> DATABASE_DEFAULT</span><br><span class="line">GO</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="資料表結構"><a href="#資料表結構" class="headerlink" title="資料表結構"></a>資料表結構</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> [dbo].[person](</span><br><span class="line">[name] [<span class="type">nchar</span>](<span class="number">10</span>) <span class="keyword">NULL</span>,</span><br><span class="line">[age] [<span class="type">nchar</span>](<span class="number">10</span>) <span class="keyword">NULL</span>,</span><br><span class="line">[sex] [<span class="type">nchar</span>](<span class="number">10</span>) <span class="keyword">NULL</span></span><br><span class="line">) <span class="keyword">ON</span> [<span class="keyword">PRIMARY</span>]</span><br><span class="line">GO</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> [dbo].[score](</span><br><span class="line">[id] [<span class="type">int</span>] <span class="keyword">IDENTITY</span>(<span class="number">1</span>,<span class="number">1</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">[Name] [<span class="type">nchar</span>](<span class="number">10</span>) <span class="keyword">NULL</span>,</span><br><span class="line">[score] [<span class="type">nchar</span>](<span class="number">10</span>) <span class="keyword">NULL</span></span><br><span class="line">) <span class="keyword">ON</span> [<span class="keyword">PRIMARY</span>]</span><br><span class="line">GO</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="連接LinQ"><a href="#連接LinQ" class="headerlink" title="連接LinQ"></a>連接LinQ</h2><p>畫面左邊可以看到有 [add connection] 字眼，點選後選擇 Sql Server 選項，如果不是Sql Server可以選擇下方選項。<br><img src="/img/linq_use_day02/01.jpg"><br><img src="/img/linq_use_day02/02.jpg"><br>這裡會需要自己得登入Sql Server 後，按下完成即可。<br><img src="/img/linq_use_day02/03.jpg"><br><img src="/img/linq_use_day02/04.jpg"></p><hr><h2 id="使用-LinQPad"><a href="#使用-LinQPad" class="headerlink" title="使用 LinQPad"></a>使用 LinQPad</h2><p>使用前到LinQPad記得要切換資料庫，再來請自行在資料庫key資料。<br><img src="/img/linq_use_day02/05.jpg"></p><h2 id="Select-字句"><a href="#Select-字句" class="headerlink" title="Select 字句"></a>Select 字句</h2><p>linQ 有兩種寫法，LINQ Query Expression、Lambda Expression。</p><ol><li>LINQ Query Expression<br>寫法會比較偏向 SQL 語法比較容易學起來，需要注意是每一個結尾都要加上 <code>SELECT</code> 字眼。<figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> row <span class="keyword">in</span> Persons <span class="keyword">select</span> row</span><br></pre></td></tr></table></figure></li><li>Lambda Expression<br>LINQ方法配上Lambda運算式，句子會比較好識別。<figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Persons.Select(x=&gt;x)</span><br></pre></td></tr></table></figure></li></ol><h2 id="Where-字句"><a href="#Where-字句" class="headerlink" title="Where 字句"></a>Where 字句</h2><ol><li>LINQ Query Expression<br>以下範例是簡易判斷，如果要增加判斷自行使用(&amp;&amp; 、 ||)。<br>Example : <code>row.Age != &quot;13&quot; &amp;&amp; row.Name == &quot;Eric&quot; </code></li></ol><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> row <span class="keyword">in</span> Persons </span><br><span class="line"><span class="keyword">where</span> row.Age != <span class="string">&quot;13&quot;</span> </span><br><span class="line"><span class="keyword">select</span> row</span><br></pre></td></tr></table></figure><ol start="2"><li>Lambda Expression</li></ol><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Persons.Where(row=&gt; row.Age!= <span class="string">&quot;13&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="Contains"><a href="#Contains" class="headerlink" title="Contains"></a>Contains</h3><p>Linq遇到沒有Like語法怎麼辦? 這裡使用 “ Contains “ 類似於Link效果。</p><ol><li>LINQ Query Expression</li></ol><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> row <span class="keyword">in</span> Persons </span><br><span class="line"><span class="keyword">where</span> !row.Age.Contains(<span class="string">&quot;3&quot;</span>)</span><br><span class="line"><span class="keyword">select</span> row</span><br></pre></td></tr></table></figure><ol start="2"><li>Lambda Expression</li></ol><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Persons.Where(row=&gt; !row.Age.Contains(<span class="string">&quot;3&quot;</span>))</span><br></pre></td></tr></table></figure><h2 id="OrderBy-排序"><a href="#OrderBy-排序" class="headerlink" title="OrderBy 排序"></a>OrderBy 排序</h2><p>排序在Sql中是扮演很重要角色，所以要先使用看看LinQ如何呈現。</p><h3 id="Asc"><a href="#Asc" class="headerlink" title="Asc"></a>Asc</h3><p>用過Sql 都知道Asc代表結果會以由小往大的順序列出，以下使用為例。</p><ol><li>LINQ Query Expression</li></ol><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> row <span class="keyword">in</span> Persons </span><br><span class="line"><span class="keyword">where</span> !row.Age.Contains(<span class="string">&quot;3&quot;</span>)</span><br><span class="line"><span class="keyword">orderby</span> row.Age </span><br><span class="line"><span class="keyword">select</span> row</span><br></pre></td></tr></table></figure><ol start="2"><li>Lambda Expression</li></ol><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Persons</span><br><span class="line">.Where(row=&gt; !row.Age.Contains(<span class="string">&quot;3&quot;</span>))</span><br><span class="line">.OrderBy(row=&gt; row.Age)</span><br></pre></td></tr></table></figure><h3 id="Desc"><a href="#Desc" class="headerlink" title="Desc"></a>Desc</h3><p>如果有使用過LinQ Desc排序需要打很長的英文字是很正常的，LINQ Query Expression 會需要在結尾加上 “ descending “ 請各位多多留意千萬不要打成Desc。</p><p>定義 : DESC 代表結果會以由大往小的順序列出。</p><ol><li>LINQ Query Expression</li></ol><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> row <span class="keyword">in</span> Persons </span><br><span class="line"><span class="keyword">where</span> !row.Age.Contains(<span class="string">&quot;3&quot;</span>)</span><br><span class="line"><span class="keyword">orderby</span> row.Age <span class="keyword">descending</span></span><br><span class="line"><span class="keyword">select</span> row</span><br></pre></td></tr></table></figure><ol start="2"><li>Lambda Expression</li></ol><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Persons</span><br><span class="line">.Where(row=&gt; !row.Age.Contains(<span class="string">&quot;3&quot;</span>))</span><br><span class="line">.OrderByDescending(row=&gt; row.Age)</span><br></pre></td></tr></table></figure><h2 id="GroupBy-群組"><a href="#GroupBy-群組" class="headerlink" title="GroupBy 群組"></a>GroupBy 群組</h2><p>GroupBy群組會直接影顯顯示內容，如果需要顯示多筆請加入<code>new&#123;&#125;</code>字句。</p><ol><li>LINQ Query Expression</li></ol><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> row <span class="keyword">in</span> Persons </span><br><span class="line"><span class="keyword">where</span> !row.Age.Contains(<span class="string">&quot;3&quot;</span>)</span><br><span class="line"><span class="keyword">group</span> row <span class="keyword">by</span> row.Age <span class="keyword">into</span> groups </span><br><span class="line"><span class="keyword">select</span> groups</span><br></pre></td></tr></table></figure><ol start="2"><li>Lambda Expression</li></ol><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Persons</span><br><span class="line">.Where(row=&gt; !row.Age.Contains(<span class="string">&quot;3&quot;</span>))</span><br><span class="line">.GroupBy(row=&gt;row.Age)</span><br></pre></td></tr></table></figure><hr><h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>LinQ 使用上如果遇到多種、多個資料行，需要加入 <code>new&#123;&#125;</code>方式。<br>以上的介紹的寫法比較常使用的方式，下次章節會介紹 join使用方式。</p>]]></content>
      
      
      <categories>
          
          <category> 後端技術 </category>
          
          <category> C# </category>
          
          <category> LinQ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
            <tag> Net FrameWork </tag>
            
            <tag> LinQ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用 LinQ (二) - C# 常見使用方式</title>
      <link href="/2022/12/12/%E5%BE%8C%E7%AB%AF%E6%8A%80%E8%A1%93/LINQ/%E4%BD%BF%E7%94%A8%20LinQ%20(%E4%BA%8C)%20-%20C#%20%E5%B8%B8%E8%A6%8B%E4%BD%BF%E7%94%A8%E6%96%B9%E5%BC%8F/"/>
      <url>/2022/12/12/%E5%BE%8C%E7%AB%AF%E6%8A%80%E8%A1%93/LINQ/%E4%BD%BF%E7%94%A8%20LinQ%20(%E4%BA%8C)%20-%20C#%20%E5%B8%B8%E8%A6%8B%E4%BD%BF%E7%94%A8%E6%96%B9%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="VSC-所需的套件"><a href="#VSC-所需的套件" class="headerlink" title="VSC - 所需的套件"></a>VSC - 所需的套件</h1><h2 id="Mindbox-Data-Linq"><a href="#Mindbox-Data-Linq" class="headerlink" title="[Mindbox.Data.Linq]"></a>[Mindbox.Data.Linq]</h2><ul><li><a href="https://www.nuget.org/packages/Mindbox.Data.Linq/">https://www.nuget.org/packages/Mindbox.Data.Linq/</a></li></ul><h2 id="System-Linq"><a href="#System-Linq" class="headerlink" title="[System.Linq]"></a>[System.Linq]</h2><ul><li><a href="https://www.nuget.org/packages/System.Linq/">https://www.nuget.org/packages/System.Linq/</a></li></ul><h2 id="System-Data-SqlClient"><a href="#System-Data-SqlClient" class="headerlink" title="[System.Data.SqlClient]"></a>[System.Data.SqlClient]</h2><ul><li><a href="https://www.nuget.org/packages/System.Data.SqlClient/">https://www.nuget.org/packages/System.Data.SqlClient/</a></li></ul><h1 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h1><h2 id="1-Array"><a href="#1-Array" class="headerlink" title="1. Array"></a>1. Array</h2><p>linQ可以將陣列重新排序或是重新查詢，以下使用讀取方式：</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">linqArrayExmple</span>()</span>&#123;</span><br><span class="line">    <span class="built_in">string</span>[] sName = &#123;<span class="string">&quot;周杰輪&quot;</span>,<span class="string">&quot;周潤發&quot;</span>,<span class="string">&quot;劉得華&quot;</span>,<span class="string">&quot;周深&quot;</span>&#125;;</span><br><span class="line">    <span class="keyword">var</span> vSearch = <span class="keyword">from</span> s <span class="keyword">in</span> sName  <span class="keyword">select</span> s ;</span><br><span class="line">    <span class="comment">//或  var vSearch = sName; 為全部搜尋</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">foreach</span>(<span class="keyword">var</span> i <span class="keyword">in</span> vSearch)&#123;</span><br><span class="line">        Console.WriteLine(i + <span class="string">&quot;\t&quot;</span> );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>linQ有很多種寫法，也可以使用下方兩種寫法設定變數。<br><code>var vSearch = from s in sName where s.Contains(&quot;周&quot;) select s ;</code><br><code>var vSearch = sName.Where(sName =&gt; sName.Contains(&quot;周&quot;));</code></p><p>linQ也提供很多Function可以使用，如下方式用取得第一個、最後一個資料 First()、Last():</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Console.WriteLine(<span class="string">&quot;ElementAt -&gt; 2 = &#123;0&#125;&quot;</span>, sName.ElementAt(<span class="number">2</span>));</span><br><span class="line">Console.WriteLine(<span class="string">&quot;First no.1 = &#123;0&#125; no.2 = &#123;1&#125;&quot;</span> </span><br><span class="line">    ,sName.First(), sName.First(name =&gt; name.Length == <span class="number">3</span>));</span><br><span class="line">Console.WriteLine(<span class="string">&quot;Last  no.1 = &#123;0&#125; no.2 = &#123;1&#125;&quot;</span> </span><br><span class="line">    ,sName.Last() , sName.Last(name =&gt; name.Length == <span class="number">3</span>));</span><br></pre></td></tr></table></figure><h2 id="2-SQL"><a href="#2-SQL" class="headerlink" title="2. SQL"></a>2. SQL</h2><p>如果使用SQL不用DataTable使用方式，先創建Student的Class。<br>當資料庫抓取會依據Student內容抓取。</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Data.Linq.Mapping;</span><br><span class="line"></span><br><span class="line">[<span class="meta">Table(Name=<span class="string">&quot;學生備份&quot;</span>)</span>] <span class="comment">//對應資料表</span></span><br><span class="line"><span class="keyword">class</span> <span class="title">Student</span>&#123;</span><br><span class="line">    [<span class="meta">Column(Name=<span class="string">&quot;學號&quot;</span>)</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Std_ID &#123;<span class="keyword">get</span>;<span class="keyword">set</span>;&#125;</span><br><span class="line">    [<span class="meta">Column(Name=<span class="string">&quot;姓名&quot;</span>)</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Name &#123;<span class="keyword">get</span>;<span class="keyword">set</span>;&#125;</span><br><span class="line">    [<span class="meta">Column(Name=<span class="string">&quot;性別&quot;</span>)</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Sex &#123;<span class="keyword">get</span>;<span class="keyword">set</span>;&#125;</span><br><span class="line">    [<span class="meta">Column(Name=<span class="string">&quot;電話&quot;</span>)</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Tel &#123;<span class="keyword">get</span>;<span class="keyword">set</span>;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>這邊我使用的方式是Function來呈現，取得資料庫中叫做 Student的table讀到 Class Student 三個內容。<br>讓他打印出 學號、姓名、電話。</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">LinqEaxmple</span>()</span>&#123;</span><br><span class="line">    <span class="comment">//conn sql string</span></span><br><span class="line">    <span class="built_in">string</span> strConn = <span class="string">&quot;Data Source=DESKTOP-2HU7NL0\\CONT;Initial Catalog=Linq_Example;User ID=sa;Password=root;Pooling=True&quot;</span>;</span><br><span class="line">    DataContext dc = <span class="keyword">new</span> DataContext(strConn);</span><br><span class="line">    <span class="comment">//GET TABLE</span></span><br><span class="line">    Table&lt;Student&gt; students = dc.GetTable&lt;Student&gt;();</span><br><span class="line">    <span class="comment">//select data</span></span><br><span class="line">    <span class="keyword">var</span> data= <span class="keyword">from</span> s <span class="keyword">in</span> students <span class="keyword">select</span> s;</span><br><span class="line">    Console.WriteLine(<span class="string">&quot;學號\t姓名\t電話&quot;</span>);</span><br><span class="line">    <span class="keyword">foreach</span>(<span class="keyword">var</span> i <span class="keyword">in</span> data)&#123;</span><br><span class="line">        Console.WriteLine(i.Std_ID+<span class="string">&quot;\t&quot;</span>+i.Name+<span class="string">&quot;\t&quot;</span>+ i.Tel);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="DataTable"><a href="#DataTable" class="headerlink" title="DataTable"></a>DataTable</h2><p>資料表比較多種情況，這範例講解簡單的使用方式，後續詳細說明使用linQ方式。<br>DataTable必須要先使用 AsEnumerable() 才能用linQ查詢，如果你要Where() 就需要配合 Field&lt;&gt;，比較麻煩是資料需要轉換資料型態，轉型失敗就會有錯誤問題。</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> CS;</span><br><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Data.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Data;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title">CS</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            comm comm = <span class="keyword">new</span> comm();</span><br><span class="line">            <span class="comment">//將資料轉成dataTable</span></span><br><span class="line">            <span class="built_in">string</span> sSql = <span class="string">&quot;SELECT * FROM Student&quot;</span>; </span><br><span class="line">            DataTable dt = comm.Get_DataTable(sSql);</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">var</span> test = <span class="keyword">from</span> row <span class="keyword">in</span> dt.AsEnumerable() <span class="keyword">select</span> row ;</span><br><span class="line">            <span class="keyword">foreach</span>(<span class="keyword">var</span> i <span class="keyword">in</span> test)&#123;</span><br><span class="line">                Console.WriteLine(i.Field&lt;<span class="built_in">string</span>&gt;(<span class="string">&quot;pro_name&quot;</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="List"><a href="#List" class="headerlink" title="List"></a>List</h2><p>List跟DataTable是差不多的問題，都要使用AsEnumerable()，過程中可能需要拿捏好取值得方式。<br>這邊範例可以參考DataTable寫法。</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> CS;</span><br><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Data.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Data;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title">CS</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            comm comm = <span class="keyword">new</span> comm();</span><br><span class="line">            <span class="built_in">string</span> sSql = <span class="string">&quot;SELECT * FROM MEB20_0000&quot;</span>; </span><br><span class="line">            DataTable dt = comm.Get_DataTable(sSql);</span><br><span class="line">            List&lt;MEB20_0000&gt; result = dt.AsEnumerable()</span><br><span class="line">                .Select( row =&gt; <span class="keyword">new</span> MEB20_0000&#123;</span><br><span class="line">                    pro_name = row.Field&lt;<span class="built_in">string</span>&gt;(<span class="string">&quot;pro_name&quot;</span>)</span><br><span class="line">                &#125;).ToList();</span><br><span class="line">            <span class="keyword">foreach</span>(<span class="keyword">var</span> i <span class="keyword">in</span> result)&#123;</span><br><span class="line">                Console.WriteLine(i.pro_name);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 後端技術 </category>
          
          <category> C# </category>
          
          <category> LinQ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
            <tag> Net FrameWork </tag>
            
            <tag> LinQ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用 LinQ (四) - Join 使用方式</title>
      <link href="/2022/12/12/%E5%BE%8C%E7%AB%AF%E6%8A%80%E8%A1%93/LINQ/%E4%BD%BF%E7%94%A8%20LinQ%20(%E5%9B%9B)%20-%20Join%20%E4%BD%BF%E7%94%A8%E6%96%B9%E5%BC%8F/"/>
      <url>/2022/12/12/%E5%BE%8C%E7%AB%AF%E6%8A%80%E8%A1%93/LINQ/%E4%BD%BF%E7%94%A8%20LinQ%20(%E5%9B%9B)%20-%20Join%20%E4%BD%BF%E7%94%A8%E6%96%B9%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>LinQ 使用join 需要知道Outer及Inner兩個資料型別物件。</p><h2 id="JOIN-定義"><a href="#JOIN-定義" class="headerlink" title="JOIN 定義"></a>JOIN 定義</h2><p>Join方法如下:</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="title">IEnumerable</span>&lt;<span class="title">TResult</span>&gt; <span class="title">Join</span>&lt;<span class="title">TOuter</span>, <span class="title">TInner</span>, <span class="title">TKey</span>, <span class="title">TResult</span>&gt;(<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="keyword">this</span> IEnumerable&lt;TOuter&gt; outer,</span></span></span><br><span class="line"><span class="params"><span class="function">    IEnumerable&lt;TInner&gt; inner,</span></span></span><br><span class="line"><span class="params"><span class="function">    Func&lt;TOuter, TKey&gt; outerKeySelector,</span></span></span><br><span class="line"><span class="params"><span class="function">    Func&lt;TInner, TKey&gt; innerKeySelector,</span></span></span><br><span class="line"><span class="params"><span class="function">    Func&lt;TOuter, TInner, TResult&gt; resultSelector</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="title">IEnumerable</span>&lt;<span class="title">TResult</span>&gt; <span class="title">Join</span>&lt;<span class="title">TOuter</span>, <span class="title">TInner</span>, <span class="title">TKey</span>, <span class="title">TResult</span>&gt;(<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="keyword">this</span> IEnumerable&lt;TOuter&gt; outer,</span></span></span><br><span class="line"><span class="params"><span class="function">    IEnumerable&lt;TInner&gt; inner,</span></span></span><br><span class="line"><span class="params"><span class="function">    Func&lt;TOuter, TKey&gt; outerKeySelector,</span></span></span><br><span class="line"><span class="params"><span class="function">    Func&lt;TInner, TKey&gt; innerKeySelector,</span></span></span><br><span class="line"><span class="params"><span class="function">    Func&lt;TOuter, TInner, TResult&gt; resultSelector,</span></span></span><br><span class="line"><span class="params"><span class="function">    IEqualityComparer&lt;TKey&gt; comparer</span>)</span>;</span><br></pre></td></tr></table></figure><p>方法參數說明:<br>    - outer : 第一個序列項目的類型。<br>    - inner : 與 Outer 類型比對項目 (第二個序列項目類型)。<br>    - outerKeySelector : 跟 Inner 有關的屬性<br>    - innerKeySelector : 跟 Outer 有關的屬性<br>    - resultSelector   : 查詢結果內容<br>    - comparer : Inner 、 Outer 屬性的等值比較器<br>LINQ的Join方法是Inner Join，所以尋找的內容不存在資料不會出現</p><h2 id="查詢運算式"><a href="#查詢運算式" class="headerlink" title="查詢運算式"></a>查詢運算式</h2><p>使用 Join 簡易方式，以下方式有包含著多個Select 內容。</p><ol><li><p>LINQ Query Expression</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> row <span class="keyword">in</span> Persons   </span><br><span class="line"><span class="keyword">join</span> part1 <span class="keyword">in</span> Scores <span class="keyword">on</span> row.Name <span class="keyword">equals</span> part1.Name</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">new</span> &#123; row.Name, Score = <span class="built_in">decimal</span>.Parse(part1.Content)&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>Lambda Expression</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Persons</span><br><span class="line">.Join(</span><br><span class="line">Scores, <span class="comment">//抓取table</span></span><br><span class="line">x =&gt; x.Name , <span class="comment">//抓取 table Persons</span></span><br><span class="line">y =&gt; y.Name , <span class="comment">//抓取 table Scores</span></span><br><span class="line">(x,y)=&gt;<span class="keyword">new</span>&#123; x.Name , Score = <span class="built_in">decimal</span>.Parse(y.Content) &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure></li></ol><h2 id="Join-比對多筆"><a href="#Join-比對多筆" class="headerlink" title="Join - 比對多筆"></a>Join - 比對多筆</h2><p>LinQ會比對同一行的資料，如果有多個不同資料內容就會需要對好資料內容。</p><ol><li><p>LINQ Query Expression</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> row <span class="keyword">in</span> Persons </span><br><span class="line"><span class="keyword">join</span> a <span class="keyword">in</span> Scores <span class="keyword">on</span> </span><br><span class="line">    <span class="keyword">new</span> &#123; row.Name &#125; <span class="keyword">equals</span> </span><br><span class="line">    <span class="keyword">new</span> &#123;   a.Name &#125;</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">new</span> &#123; a.Name,row.Sex , a.Content &#125;</span><br></pre></td></tr></table></figure></li><li><p>Lambda Expression<br>Lambda 則是比對x,y同樣也必須要同一個位置、同個名稱如果遇到名稱不一樣，可以使用 <code>new&#123;name = x.ClassName&#125;</code>方式。</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Persons.Join(</span><br><span class="line">Scores,</span><br><span class="line">x=&gt;  <span class="keyword">new</span>&#123; x.Name &#125; , <span class="comment">//比對1 </span></span><br><span class="line">y =&gt; <span class="keyword">new</span>&#123; y.Name &#125; , <span class="comment">//比對2</span></span><br><span class="line">(x,y)=&gt;<span class="keyword">new</span> &#123;</span><br><span class="line">Name    = x.Name,</span><br><span class="line">Sex     = x.Sex,</span><br><span class="line">Content = y.Content</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ol><h2 id="Left-Join"><a href="#Left-Join" class="headerlink" title="Left Join"></a>Left Join</h2><p>LinQ 有 Join()是交集的概念，若要有Left join 可以使用 DefaultIfEmpty()，使用方式如下。</p><ol><li>LINQ Query Expression<figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> row <span class="keyword">in</span> Persons </span><br><span class="line"><span class="keyword">join</span> a <span class="keyword">in</span> Scores <span class="keyword">on</span> row.Name <span class="keyword">equals</span> a.Name </span><br><span class="line"><span class="keyword">into</span> ps <span class="keyword">from</span> a <span class="keyword">in</span> ps.DefaultIfEmpty() <span class="comment">//需加入這行</span></span><br><span class="line"><span class="keyword">select</span> a</span><br></pre></td></tr></table></figure>使用會與SQL LEFT Join 觀念不太同，所以使用方式需要自行判斷。</li></ol><h2 id="參考文件"><a href="#參考文件" class="headerlink" title="參考文件"></a>參考文件</h2><ol><li><p>[Will - 分享幾個 LINQ to SQL 執行各種 Join 查詢的技巧] : <a href="https://blog.miniasp.com/post/2010/10/14/LINQ-to-SQL-Query-Tips-INNER-JOIN-and-LEFT-JOIN">https://blog.miniasp.com/post/2010/10/14/LINQ-to-SQL-Query-Tips-INNER-JOIN-and-LEFT-JOIN</a></p></li><li><p>[ 艾瑞克 - C# Linq Join &amp; Lambda Join] : <a href="https://dotblogs.com.tw/erictsaiblog/2015/05/17/151321">https://dotblogs.com.tw/erictsaiblog/2015/05/17/151321</a></p></li></ol><h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>使用LinQ Join部分會比較難使用，需要多多測試練習才能上手。<br>如果是多Join (兩個以上)，建議能把它拆開就把它拆開，有可能遇到Join太多會導致搜尋效能會變差。</p>]]></content>
      
      
      <categories>
          
          <category> 後端技術 </category>
          
          <category> C# </category>
          
          <category> LinQ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
            <tag> Net FrameWork </tag>
            
            <tag> LinQ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【筆記】何謂微服務</title>
      <link href="/2022/12/12/%E7%AD%86%E8%A8%98%E8%88%87%E7%94%9F%E6%B4%BB%E9%9B%9C%E8%A8%98/%E6%8A%80%E8%A1%93/%E3%80%90%E7%AD%86%E8%A8%98%E3%80%91%E5%BE%AE%E6%9C%8D%E5%8B%99micro%20service/"/>
      <url>/2022/12/12/%E7%AD%86%E8%A8%98%E8%88%87%E7%94%9F%E6%B4%BB%E9%9B%9C%E8%A8%98/%E6%8A%80%E8%A1%93/%E3%80%90%E7%AD%86%E8%A8%98%E3%80%91%E5%BE%AE%E6%9C%8D%E5%8B%99micro%20service/</url>
      
        <content type="html"><![CDATA[<h2 id="微服務-micro-service"><a href="#微服務-micro-service" class="headerlink" title="微服務 - micro service"></a>微服務 - micro service</h2><p>微服務架構是解決巨型專案，設計方向由龐大專案拆解成小群獨立的服務軟體系統。<br><img src="/image/20221212_14-22-46.png"></p><p>微服務架構特性，可以讓開發複雜性降低、開發速度，透過 RPC (Remote Procedure Call)方式呼叫。因此，<br> 微服務 成為目前最常見的架構，若從舊系統來看是無法將舊系統拆解，可能使用傳統架構 “單體式系統架構”。</p><h3 id="優點"><a href="#優點" class="headerlink" title="優點"></a>優點</h3><ol><li>降低開發認知複雜性</li><li>提升開發速度、規模</li><li>性能與可擴展性</li><li>可以獨立部署</li></ol><h3 id="缺點"><a href="#缺點" class="headerlink" title="缺點"></a>缺點</h3><ol><li>RPC 調用、呼叫方式大量增加</li><li>系統安全性管理更加有挑戰性</li><li>引入分佈式系統的複雜度</li></ol><hr><h2 id="資安問題"><a href="#資安問題" class="headerlink" title="資安問題"></a>資安問題</h2><ol><li>分散式身份驗證與授權：微服務架構通常會將系統拆分成多個服務，這意味著需要對每個服務進行獨立的身份驗證和授權，並且確保這些服務之間的通信是安全的。</li><li>數據保護：在微服務架構中，不同的服務可能會存儲數據庫的不同部分，因此需要確保數據在存儲、傳輸和處理過程中得到充分的保護，以防止數據泄露或被竊取。</li><li>API 安全性：由於微服務架構通常是通過 API 進行通信的，因此需要確保 API 是安全的，防止未經授權的訪問和其他安全威脅。</li><li>容器安全：微服務通常運行在容器中，需要確保容器本身的安全，防止容器內的應用程序被攻擊或滲透。</li><li>監控和日誌記錄：在微服務架構中，可能需要收集和分析多個服務的監控和日誌記錄，以檢測和防止安全威脅。因此，需要確保這些記錄的完整性和安全性。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 筆記 </category>
          
          <category> 生活雜記 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[學習] Golang 基本使用(一) - 建立 Golang 環境</title>
      <link href="/2022/12/07/%E5%BE%8C%E7%AB%AF%E6%8A%80%E8%A1%93/GOLANG/Golang_01/"/>
      <url>/2022/12/07/%E5%BE%8C%E7%AB%AF%E6%8A%80%E8%A1%93/GOLANG/Golang_01/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>這邊主要說明Go創建、使用，如果已經有環境，請直接到下一章節。</p><h1 id="設定環境"><a href="#設定環境" class="headerlink" title="設定環境"></a>設定環境</h1><h2 id="使用軟體"><a href="#使用軟體" class="headerlink" title="使用軟體"></a>使用軟體</h2><h3 id="1-Notepad"><a href="#1-Notepad" class="headerlink" title="1. Notepad++"></a>1. Notepad++</h3><p><img src="/image/20221207_21-19-26.png"><br>目前業界最常看到的一套軟體，不但是免費功能也很強大，是一支必備軟體，它的特性也可以隨意跟改語言。<br>按此下載 &#x3D;&gt;  <a href="https://notepad-plus-plus.org/downloads/">https://notepad-plus-plus.org/downloads/</a></p><h3 id="2-VS-CODE"><a href="#2-VS-CODE" class="headerlink" title="2. VS CODE"></a>2. VS CODE</h3><p><img src="/image/20221207_21-19-57.png"><br>(又稱VSC)目前是網頁前端最常用的軟體，非常的實用可以使用其他的語言、BUG，非常多的外掛可以提供使用者下載。<br>下載點 &#x3D;&gt; <a href="https://code.visualstudio.com/download">https://code.visualstudio.com/download</a></p><hr><h2 id="安裝Go語言"><a href="#安裝Go語言" class="headerlink" title="安裝Go語言"></a>安裝Go語言</h2><p>Go官網下載頁網址: <a href="https://golang.org/dl/">https://golang.org/dl/</a><br>安裝時候，選擇安裝msi的副檔名下載，也是可以透過軟體包管理工具進行安裝，像是用windows的chocolatey, mac的homebrew, linux的apt-get或yum，只是用軟體包工具安裝的可能不會是目前的最新版本，必須要等待軟體包伺服器更新。<br><img src="/image/20221207_21-20-10.png"></p><hr><h2 id="環境設定"><a href="#環境設定" class="headerlink" title="環境設定"></a>環境設定</h2><ol><li><p>設定方面需要到 控制台\所有控制台項目\系統 旁有進階系統設定<br><img src="/image/20221207_21-20-22.png"></p></li><li><p>選擇標籤列上方有進階再按下環境設定。<br><img src="/image/20221207_21-20-31.png"></p></li><li><p>選擇後，按照下方圖示順序去做設定。<br><img src="/image/20221207_21-20-41.png"></p></li><li><p>以及新增一個GOROOT 路徑為 C:\ 即可<br><img src="/image/20221207_21-20-52.png"></p></li><li><p>完成後，請重開電腦後到cmd(command 命令指令字元)裡面輸入 go 按下enter 確認是否正常使用。<br><img src="/image/20221207_21-21-01.png"></p></li></ol><hr><h1 id="第一個程式"><a href="#第一個程式" class="headerlink" title="第一個程式"></a>第一個程式</h1><h2 id="Marketplace"><a href="#Marketplace" class="headerlink" title="Marketplace"></a><a href="https://marketplace.visualstudio.com/vscode">Marketplace</a></h2><p>VSC 提供多項外掛可以給使用者多樣的選擇。需要安裝如下:</p><ol><li><h3 id="Go"><a href="#Go" class="headerlink" title="Go"></a>Go</h3></li></ol><p><a href="https://marketplace.visualstudio.com/items?itemName=golang.Go">https://marketplace.visualstudio.com/items?itemName=golang.Go</a></p><p>使用前，須設定Debug 環境，先切換至 Debug 模式：<br><img src="/image/20221207_21-21-23.png"></p><p>按下左上方的 Play 按鈕，並選擇 Go 做為 Debug 環境，會出現一個launch檔案，參考下方內容：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0.2.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;configurations&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Launch file&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;go&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;request&quot;</span><span class="punctuation">:</span> <span class="string">&quot;launch&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;mode&quot;</span><span class="punctuation">:</span> <span class="string">&quot;debug&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;program&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$&#123;file&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;env&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;args&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>接著就可以開始使用內建 Console 或中斷點來 Debug 囉！<br><img src="/image/20221207_21-21-36.png"></p><h2 id="手動安裝GO-TOOL"><a href="#手動安裝GO-TOOL" class="headerlink" title="手動安裝GO TOOL"></a>手動安裝GO TOOL</h2><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ go get -u -v [URL]</span><br></pre></td></tr></table></figure><p>以下工具給予參考</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">go get -u -v github.com/ramya-rao-a/go-outline</span><br><span class="line">go get -u -v github.com/acroca/go-symbols</span><br><span class="line">go get -u -v github.com/mdempsky/gocode</span><br><span class="line">go get -u -v github.com/rogpeppe/godef</span><br><span class="line">go get -u -v golang.org/x/tools/<span class="built_in">cmd</span>/godoc</span><br><span class="line">go get -u -v github.com/zmb3/gogetdoc</span><br><span class="line">go get -u -v golang.org/x/lint/golint</span><br><span class="line">go get -u -v github.com/fatih/gomodifytags</span><br><span class="line">go get -u -v golang.org/x/tools/<span class="built_in">cmd</span>/gorename</span><br><span class="line">go get -u -v sourcegraph.com/sqs/goreturns</span><br><span class="line">go get -u -v golang.org/x/tools/<span class="built_in">cmd</span>/goimports</span><br><span class="line">go get -u -v github.com/cweill/gotests/...</span><br><span class="line">go get -u -v golang.org/x/tools/<span class="built_in">cmd</span>/guru</span><br><span class="line">go get -u -v github.com/josharian/impl</span><br><span class="line">go get -u -v github.com/haya14busa/goplay/<span class="built_in">cmd</span>/goplay</span><br><span class="line">go get -u -v github.com/uudashr/gopkgs/<span class="built_in">cmd</span>/gopkgs</span><br><span class="line">go get -u -v github.com/davidrjenni/reftools/<span class="built_in">cmd</span>/fillstruct</span><br></pre></td></tr></table></figure><h2 id="第一個程式-1"><a href="#第一個程式-1" class="headerlink" title="第一個程式"></a>第一個程式</h2><ol><li><p>範例 1 : 創建簡易的輸出功能</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">fmt.Print(<span class="string">&quot;Hello Go. !!&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>範例 2 : Go 可以支援 Emoji</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> varByte <span class="type">byte</span> = <span class="string">&#x27;a&#x27;</span></span><br><span class="line"><span class="keyword">var</span> varRun <span class="type">rune</span> = <span class="string">&#x27;🧨&#x27;</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;%c = %d and %c =%U\n&quot;</span>, varByte, varByte, varRun, varRun)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><hr><h1 id="補充"><a href="#補充" class="headerlink" title="補充"></a>補充</h1><h2 id="1-golang在go-get時錯誤提示-xx-cannot-download-xxx-is-a-GOROOT-not-a-GOPATH-For-more-details-see-…"><a href="#1-golang在go-get時錯誤提示-xx-cannot-download-xxx-is-a-GOROOT-not-a-GOPATH-For-more-details-see-…" class="headerlink" title="1. golang在go get時錯誤提示 : xx cannot download,xxx is a GOROOT, not a GOPATH. For more details see:…"></a>1. golang在go get時錯誤提示 : xx cannot download,xxx is a GOROOT, not a GOPATH. For more details see:…</h2><ul><li>刪除GOPATH中src目錄中的cmd目錄,再執行go get -v xxxxx</li></ul><h2 id="2-VSC預設變量"><a href="#2-VSC預設變量" class="headerlink" title="2.VSC預設變量"></a>2.VSC預設變量</h2><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$&#123;workspaceFolder&#125; - VS Code 中打开的文件夹目录 （通常是项目的位置）</span><br><span class="line">$&#123;workspaceFolderBasename&#125; - 没有任何斜杠 (/)的 VS Code 中打开的文件夹目录</span><br><span class="line">$&#123;file&#125; - 目前打开文件的绝对位置</span><br><span class="line">$&#123;relativeFile&#125; - 目前打开文件相对于 workspaceFolder 的相对位置</span><br><span class="line">$&#123;fileBasename&#125; -  目前打开文件的文件名（有拓展名，如： main.cpp）</span><br><span class="line">$&#123;fileBasenameNoExtension&#125; - 目前打开文件的出去拓展名的文件名（无拓展名， 如： main.cpp）</span><br><span class="line">$&#123;cwd&#125; - task runner的工作目录</span><br><span class="line">$&#123;fileDirname&#125; - 目前打开文件的目录位置</span><br><span class="line">$&#123;fileExtname&#125; - 目前打开文件的拓展名</span><br><span class="line">$&#123;lineNumber&#125; - 文件中目前被选择的行数</span><br><span class="line">$&#123;selectedText&#125; - 文件中目前被选择的内容</span><br></pre></td></tr></table></figure><h2 id="3-CMD執行"><a href="#3-CMD執行" class="headerlink" title="3. CMD執行"></a>3. CMD執行</h2><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ go run xx.go</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 後端技術 </category>
          
          <category> GO </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[學習] Golang 基本使用(二) - 資料型態、運算式</title>
      <link href="/2022/12/07/%E5%BE%8C%E7%AB%AF%E6%8A%80%E8%A1%93/GOLANG/Golang_02/"/>
      <url>/2022/12/07/%E5%BE%8C%E7%AB%AF%E6%8A%80%E8%A1%93/GOLANG/Golang_02/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>接續 Go 安裝後，介紹 資料型態、運算式 功能、內容吧!!<br>內容會比較多，請慢慢觀看!!</p><h1 id="Golang特性"><a href="#Golang特性" class="headerlink" title="Golang特性"></a>Golang特性</h1><ul><li>開放原始碼 (open source)</li><li>靜態型別的編譯語言；但語法類似於腳本語言 (scripting language)</li><li>跨平台 (cross-platform)</li><li>內建垃圾回收 (garbage collection)，可手動調整觸發時機</li><li>內建平行處理 (concurrency) 的語法</li><li>內建函式程式設計 (functional programming)</li><li>輕量級物件 (lightweight object) 系統</li><li>程式風格強制統一</li><li>快速編譯</li><li>內建開發相關工具</li><li>豐富的標準函式庫</li><li>成長中的社群資源</li></ul><h2 id="型態"><a href="#型態" class="headerlink" title="型態"></a>型態</h2><h2 id="Go-預先定義型態（Pre-declared-Type），內建資料型態有布林-Boolean-、數字-Number-與字串-String-型態。"><a href="#Go-預先定義型態（Pre-declared-Type），內建資料型態有布林-Boolean-、數字-Number-與字串-String-型態。" class="headerlink" title="Go 預先定義型態（Pre-declared Type），內建資料型態有布林(Boolean)、數字(Number)與字串(String)型態。"></a>Go 預先定義型態（Pre-declared Type），內建資料型態有布林(Boolean)、數字(Number)與字串(String)型態。<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//宣告方式</span></span><br><span class="line"><span class="keyword">var</span> &lt;name&gt; &lt;<span class="keyword">type</span>&gt; <span class="comment">//var &lt;變數名稱&gt; &lt;資料型態&gt;</span></span><br><span class="line"><span class="keyword">var</span> &lt;name&gt; &lt;<span class="keyword">type</span>&gt; = expreesion<span class="comment">//var &lt;變數名稱&gt; &lt;資料型態&gt; = 值</span></span><br></pre></td></tr></table></figure></h2><h1 id="型態種類"><a href="#型態種類" class="headerlink" title="型態種類"></a>型態種類</h1><h2 id="布林-Boolean"><a href="#布林-Boolean" class="headerlink" title="布林(Boolean)"></a>布林(Boolean)</h2><p>預定義型態也是具有名稱的型態（Named Type），布林型態名稱為 bool，只有兩個預先定義的常數 true 與 false，由於只有兩個值，因此在 Go 的規格書 中，並沒有明確提及 bool 的大小，雖然在 Go 官方網站的 The Go Playground 執行以下程式碼，會告訴你 bool 大小是 1：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;unsafe&quot;</span></span><br><span class="line">)</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">//宣告方式</span></span><br><span class="line"><span class="keyword">var</span> bo_T <span class="type">bool</span> = <span class="literal">true</span></span><br><span class="line"><span class="keyword">var</span> bo_F = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="string">&quot;Boolean DataType Size &gt;&gt; &quot;</span>)</span><br><span class="line">fmt.Printf(<span class="string">&quot;True Size : %d , False Size : %d&quot;</span>, </span><br><span class="line">unsafe.Sizeof(bo_T), unsafe.Sizeof(bo_F))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="數字-Number"><a href="#數字-Number" class="headerlink" title="數字(Number)"></a>數字(Number)</h2><p>數字型態為整數與浮點數的集合，整數部份支援無號與有號整數，名稱分別為 uint 與 int，int 長度會與 uint 相同，而 uint 長度視平台實作而異，可能是 32 位元或是 64 位元。<br> 有號整數的型態名稱為 int8、int16、int32、int64，顧名思義，使用的長度分別為 8 位元、16 位元、32 位元與 64 位元，舉例來說，int32 可儲存的整數範圍為 -2147483648 到 2147483647，而 rune 為 int32 的別名，可用來儲存 Unicode 碼點（code point）。<br><img src="/image/20221207_21-24-41.png"></p><p> 如果想要長度固定，無號整數的型態名稱為 uint8、uint16、uint32、uint64，顧名思義，使用的長度分別為 8 位元、16 位元、32 位元與 64 位元，舉例來說，uint8 可儲存的整數範圍為 0 到 255，這也是開發者熟悉的位元組型態，而在 Go 中，byte 正是　uint8 的別名。<br><img src="/image/20221207_21-24-49.png"></p><h3 id="範例-數字型態大小"><a href="#範例-數字型態大小" class="headerlink" title="範例 - 數字型態大小"></a>範例 - 數字型態大小</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">   fmt.Printf(<span class="string">&quot;uint8  : 0 ~ %d\n&quot;</span>, math.MaxUint8)</span><br><span class="line">fmt.Printf(<span class="string">&quot;uint16 : 0 ~ %d\n&quot;</span>, math.MaxUint16)</span><br><span class="line">fmt.Printf(<span class="string">&quot;uint32 : 0 ~ %d\n&quot;</span>, math.MaxUint32)</span><br><span class="line">fmt.Printf(<span class="string">&quot;uint64 : 0 ~ %d\n&quot;</span>, <span class="type">uint64</span>(math.MaxUint64))</span><br><span class="line">fmt.Printf(<span class="string">&quot;int8   : %d ~ %d\n&quot;</span>, math.MinInt8, math.MaxInt8)</span><br><span class="line">fmt.Printf(<span class="string">&quot;int16  : %d ~ %d\n&quot;</span>, math.MinInt16, math.MaxInt16)</span><br><span class="line">fmt.Printf(<span class="string">&quot;int32  : %d ~ %d\n&quot;</span>, math.MinInt32, math.MaxInt32)</span><br><span class="line">fmt.Printf(<span class="string">&quot;int64  : %d ~ %d\n&quot;</span>, math.MinInt64, math.MaxInt64)</span><br><span class="line">fmt.Printf(<span class="string">&quot;整數預設型態: %s\n&quot;</span>, reflect.TypeOf(<span class="number">1</span>))</span><br></pre></td></tr></table></figure><h2 id="字串-String"><a href="#字串-String" class="headerlink" title="字串(String)"></a>字串(String)</h2><p>Go 的字串在實作上使用 UTF-8，就目前必須先知道的是，當使用雙引號包裹一系列文字，會產生字串型態，預設型態為 string，例如，”Justin” 會建立一個字串。<br>如果對字串使用 len 函式，傳回的會是位元組數量，而不是 Unicode 碼點的數量；如果使用 [] 搭配索引，取得特定索引位置的值，那麼傳回的會是 byte（uint8）型態。</p><h2 id="其他型態"><a href="#其他型態" class="headerlink" title="其他型態"></a>其他型態</h2><p><img src="/image/20221207_21-25-01.png"></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> varByte <span class="type">byte</span> = <span class="string">&#x27;a&#x27;</span></span><br><span class="line"><span class="keyword">var</span> varRun <span class="type">rune</span> = <span class="string">&#x27;🧨&#x27;</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;%c = %d and %c =%U\n&quot;</span>, varByte, varByte, varRun, varRun)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="運算子Operators"><a href="#運算子Operators" class="headerlink" title="運算子Operators"></a>運算子Operators</h1><h2 id="代數運算子-Arithmetic-Operators"><a href="#代數運算子-Arithmetic-Operators" class="headerlink" title="代數運算子 (Arithmetic Operators)"></a>代數運算子 (Arithmetic Operators)</h2><p>代數運算子用來進行基本的四則運算。以下是代數運算子：</p><ul><li>+：相加 </li><li>-：相減</li><li>*：相乘</li><li>&#x2F;：相除</li><li>%：取餘數<br><img src="/image/20221207_21-25-12.png"></li></ul><p>由於四則運算的原理相當簡單，讀者可試著自行閱讀程式碼。要注意在進行除法運算時，整數 (integer) 和浮點數 (floating point number) 會有不同的行為。<br>由於浮點數內部儲存數字的方式和整數相異，浮點數運算可能會產生誤差，故我們在比較浮點數的運算結果時，不會直接用相等 &#x3D;&#x3D; 來比較，而會確認運算結果的誤差在許可範圍內。我們使用 math 套件的 <a href="https://pkg.go.dev/math#Abs">Abs</a> 函式取得誤差的絕對值 (absolute value)，以消除正負號所帶來的誤判。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;math&quot;</span></span><br><span class="line"><span class="string">&quot;os&quot;</span></span><br><span class="line"><span class="string">&quot;runtime&quot;</span></span><br><span class="line">)</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">assert(<span class="number">4</span>+<span class="number">3</span> == <span class="number">7</span>, <span class="string">&quot;4 + 3 should be 7&quot;</span>)</span><br><span class="line">assert(<span class="number">4</span><span class="number">-3</span> == <span class="number">1</span>, <span class="string">&quot;4 - 3 should be 1&quot;</span>)</span><br><span class="line">assert(<span class="number">4</span>*<span class="number">3</span> == <span class="number">12</span>, <span class="string">&quot;4 * 3 should be 12&quot;</span>)</span><br><span class="line">assert(<span class="number">4</span>/<span class="number">3</span> == <span class="number">1</span>, <span class="string">&quot;4 / 3 should be 1&quot;</span>)</span><br><span class="line">assert(math.Abs(<span class="number">4.0</span>/<span class="number">3.0</span><span class="number">-1.333333</span>) &lt; <span class="number">0.00001</span>, <span class="string">&quot;4.0 / 3.0 should be 1.333333&quot;</span>)</span><br><span class="line">assert(<span class="number">4</span>%<span class="number">3</span> == <span class="number">1</span>, <span class="string">&quot;4 % 3 should be 1&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">assert</span><span class="params">(cond <span class="type">bool</span>, msg <span class="type">string</span>)</span></span> &#123;</span><br><span class="line">_, f, l, _ := runtime.Caller(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">if</span> !cond &#123;</span><br><span class="line">fmt.Fprintf(os.Stderr, <span class="string">&quot;Failed on (%s:%d): %s&quot;</span>, f, l, msg)</span><br><span class="line">os.Exit(<span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二元運算子-Bitwise-Operators"><a href="#二元運算子-Bitwise-Operators" class="headerlink" title="二元運算子 (Bitwise Operators)"></a>二元運算子 (Bitwise Operators)</h2><p>二元運算子也是代數運算子。但二元運算的概念和一般的代數運算有一些差異，故我們將其分開。以下是二元運算子：</p><ul><li>&amp;：bitwise AND</li><li>|：bitwise OR</li><li>^：bitwise XOR</li><li>&amp;^：bit clear</li><li>&lt;&lt;：左移 (left shift)</li><li>(&gt;&gt;)：右移 (right shift)<br><img src="/image/20221207_21-25-22.png"></li></ul><p>由於二元運算在日常生活中不會接觸到，我們把運算過程寫在註解中，供讀者參考。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;os&quot;</span></span><br><span class="line"><span class="string">&quot;runtime&quot;</span></span><br><span class="line">)</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">/* 3 is 0011</span></span><br><span class="line"><span class="comment">   5 is 0101 */</span></span><br><span class="line"><span class="comment">/*    0011</span></span><br><span class="line"><span class="comment">   &amp;) 0101</span></span><br><span class="line"><span class="comment">  ---------</span></span><br><span class="line"><span class="comment">      0001  */</span></span><br><span class="line">assert((<span class="number">3</span> &amp; <span class="number">5</span>) == <span class="number">1</span>, <span class="string">&quot;3 &amp; 5 should be 1&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*    0011</span></span><br><span class="line"><span class="comment">   |) 0101</span></span><br><span class="line"><span class="comment">  ---------</span></span><br><span class="line"><span class="comment">      0111  */</span></span><br><span class="line">    assert((<span class="number">3</span> | <span class="number">5</span>) == <span class="number">7</span>, <span class="string">&quot;3 | 5 should be 7&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*    0011</span></span><br><span class="line"><span class="comment">   ^) 0101</span></span><br><span class="line"><span class="comment">  ---------</span></span><br><span class="line"><span class="comment">      0110  */</span></span><br><span class="line">    assert((<span class="number">3</span> ^ <span class="number">5</span>) == <span class="number">6</span>, <span class="string">&quot;3 ^ 5 should be 6&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* &lt;&lt;) 0000 0101</span></span><br><span class="line"><span class="comment">  ---------------</span></span><br><span class="line"><span class="comment">       0000 1010  */</span></span><br><span class="line">    assert((<span class="number">5</span> &lt;&lt; <span class="number">1</span>) == <span class="number">10</span>, <span class="string">&quot;5 &lt;&lt; 1 should be 10&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* &gt;&gt;) 0000 0101</span></span><br><span class="line"><span class="comment">  ---------------</span></span><br><span class="line"><span class="comment">       0000 0010  */</span></span><br><span class="line">    assert((<span class="number">5</span> &gt;&gt; <span class="number">1</span>) == <span class="number">2</span>, <span class="string">&quot;5 &gt;&gt; 1 should be 2&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">assert</span><span class="params">(cond <span class="type">bool</span>, msg <span class="type">string</span>)</span></span> &#123;</span><br><span class="line">    _, f, l, _ := runtime.Caller(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">if</span> !cond &#123;</span><br><span class="line">        fmt.Fprintf(os.Stderr, <span class="string">&quot;Failed on (%s:%d): %s&quot;</span>, f, l, msg)</span><br><span class="line">        os.Exit(<span class="number">1</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="比較運算子-Comparison-Relational-Operators"><a href="#比較運算子-Comparison-Relational-Operators" class="headerlink" title="比較運算子 (Comparison(Relational) Operators)"></a>比較運算子 (Comparison(Relational) Operators)</h2><p>比較運算子用來比較兩項資料的大小，比較後會回傳布林值。以下是比較運算子：</p><ul><li>&#x3D;&#x3D;：相等</li><li>!&#x3D;：不相等</li><li>&lt;：小於</li><li>&lt;&#x3D;：小於等於</li><li>(&gt;)：大於</li><li>(&gt;&#x3D;)：大於等於<br> <img src="/image/20221207_21-25-33.png"></li></ul><p>以下是簡短的實例：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;os&quot;</span></span><br><span class="line"><span class="string">&quot;runtime&quot;</span></span><br><span class="line">)</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">assert(<span class="number">4</span> == <span class="number">4</span>, <span class="string">&quot;4 should be equal to 4&quot;</span>)</span><br><span class="line">assert(<span class="number">4</span> != <span class="number">3</span>, <span class="string">&quot;4 should not be equal to 3&quot;</span>)</span><br><span class="line">assert(<span class="number">4</span> &gt; <span class="number">3</span>, <span class="string">&quot;4 should be greater than 3&quot;</span>)</span><br><span class="line">assert(<span class="number">4</span> &gt;= <span class="number">3</span>, <span class="string">&quot;4 should be greater than or equal to 3&quot;</span>)</span><br><span class="line">assert(<span class="number">4</span> &lt; <span class="number">5</span>, <span class="string">&quot;4 should be less than 5&quot;</span>)</span><br><span class="line">assert(<span class="number">4</span> &lt;= <span class="number">5</span>, <span class="string">&quot;4 should be less than or equal to 5&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">assert</span><span class="params">(cond <span class="type">bool</span>, msg <span class="type">string</span>)</span></span> &#123;</span><br><span class="line">_, f, l, _ := runtime.Caller(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">if</span> !cond &#123;</span><br><span class="line">fmt.Fprintf(os.Stderr, <span class="string">&quot;Failed on (%s:%d): %s&quot;</span>, f, l, msg)</span><br><span class="line">os.Exit(<span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="邏輯運算子-Logical-Operators"><a href="#邏輯運算子-Logical-Operators" class="headerlink" title="邏輯運算子 (Logical Operators)"></a>邏輯運算子 (Logical Operators)</h2><p>邏輯運算子用於布林運算，包括以下三種運算子：</p><ul><li>&amp;&amp;：且 (and)</li><li>||：或 (or)</li><li>!：非 (not)<br><img src="/image/20221207_21-25-46.png"></li></ul><p>以下是簡短的實例：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;os&quot;</span></span><br><span class="line"><span class="string">&quot;runtime&quot;</span></span><br><span class="line">)</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">assert((<span class="literal">true</span> &amp;&amp; <span class="literal">true</span>) == <span class="literal">true</span>, <span class="string">&quot;Wrong logic&quot;</span>)</span><br><span class="line">assert((<span class="literal">true</span> &amp;&amp; <span class="literal">false</span>) == <span class="literal">false</span>, <span class="string">&quot;Wrong logic&quot;</span>)</span><br><span class="line">assert((<span class="literal">false</span> &amp;&amp; <span class="literal">true</span>) == <span class="literal">false</span>, <span class="string">&quot;Wrong logic&quot;</span>)</span><br><span class="line">assert((<span class="literal">false</span> &amp;&amp; <span class="literal">false</span>) == <span class="literal">false</span>, <span class="string">&quot;Wrong logic&quot;</span>)</span><br><span class="line">assert((<span class="literal">true</span> || <span class="literal">true</span>) == <span class="literal">true</span>, <span class="string">&quot;Wrong logic&quot;</span>)</span><br><span class="line">assert((<span class="literal">true</span> || <span class="literal">false</span>) == <span class="literal">true</span>, <span class="string">&quot;Wrong logic&quot;</span>)</span><br><span class="line">assert((<span class="literal">false</span> || <span class="literal">true</span>) == <span class="literal">true</span>, <span class="string">&quot;Wrong logic&quot;</span>)</span><br><span class="line">assert((<span class="literal">false</span> || <span class="literal">false</span>) == <span class="literal">false</span>, <span class="string">&quot;Wrong logic&quot;</span>)</span><br><span class="line">assert((!<span class="literal">true</span>) == <span class="literal">false</span>, <span class="string">&quot;Wrong logic&quot;</span>)</span><br><span class="line">assert((!<span class="literal">false</span>) == <span class="literal">true</span>, <span class="string">&quot;Wrong logic&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">assert</span><span class="params">(cond <span class="type">bool</span>, msg <span class="type">string</span>)</span></span> &#123;</span><br><span class="line">_, f, l, _ := runtime.Caller(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">if</span> !cond &#123;</span><br><span class="line">fmt.Fprintf(os.Stderr, <span class="string">&quot;Failed on (%s:%d): %s&quot;</span>, f, l, msg)</span><br><span class="line">os.Exit(<span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="其他運算子"><a href="#其他運算子" class="headerlink" title="其他運算子"></a>其他運算子</h1><h2 id="位址運算子-Address-Operators"><a href="#位址運算子-Address-Operators" class="headerlink" title="位址運算子 (Address Operators"></a>位址運算子 (Address Operators</h2><p>位址運算子有以下兩種：</p><ul><li><ul><li></li></ul></li><li>&amp;<br>在不同情境，位址運算子有不同的意義。基礎的財經運算用不到位址運算子，日後有機會時會在介紹指標時用到位址運算子。</li></ul><h2 id="接收運算子-Receive-Operator"><a href="#接收運算子-Receive-Operator" class="headerlink" title="接收運算子 (Receive Operator)"></a>接收運算子 (Receive Operator)</h2><p>接收運算子有以下符號：</p><ul><li>&lt;-<br>接收運算子用在通道。基礎的財經運算用不到共時性程式，故不會用到接收運算子。<br><img src="/image/20221207_21-25-57.png"></li></ul><h1 id="運算子-補充"><a href="#運算子-補充" class="headerlink" title="運算子-補充"></a>運算子-補充</h1><h2 id="型別轉換"><a href="#型別轉換" class="headerlink" title="型別轉換"></a>型別轉換</h2><p>Go 語言為了避免不經意的錯誤，不能直接把不同型別的資料相結合。例如，在 Go 程式中不能把整數和浮點數直接相加。轉換型別的方式是用 T(x)；像是 float(3) 會把整數 3 轉為浮點數 3.0。</p><h2 id="運算子優先順序"><a href="#運算子優先順序" class="headerlink" title="運算子優先順序"></a>運算子優先順序</h2><h2 id="為了處理在單一敘述中出現多個運算子的情境，程式語言有內建的運算子優先順序。像是-Golang-官方提供了一份運算子優先順序的清單。但程式設計者甚少背誦運算子優先順序。因為：-運算子的優先順序和數學的概念相同-可藉由簡化敘述來簡化運算子的使用-可使用括號來改變運算子優先順序"><a href="#為了處理在單一敘述中出現多個運算子的情境，程式語言有內建的運算子優先順序。像是-Golang-官方提供了一份運算子優先順序的清單。但程式設計者甚少背誦運算子優先順序。因為：-運算子的優先順序和數學的概念相同-可藉由簡化敘述來簡化運算子的使用-可使用括號來改變運算子優先順序" class="headerlink" title="為了處理在單一敘述中出現多個運算子的情境，程式語言有內建的運算子優先順序。像是 Golang 官方提供了一份運算子優先順序的清單。但程式設計者甚少背誦運算子優先順序。因為：- 運算子的優先順序和數學的概念相同- 可藉由簡化敘述來簡化運算子的使用- 可使用括號來改變運算子優先順序"></a>為了處理在單一敘述中出現多個運算子的情境，程式語言有內建的運算子優先順序。像是 Golang 官方提供了一份運算子優先順序的<a href="https://golang.org/ref/spec#Operators">清單</a>。<br>但程式設計者甚少背誦運算子優先順序。因為：<br>- 運算子的優先順序和數學的概念相同<br>- 可藉由簡化敘述來簡化運算子的使用<br>- 可使用括號來改變運算子優先順序</h2><h1 id="常數"><a href="#常數" class="headerlink" title="常數"></a>常數</h1><h2 id="常數特性"><a href="#常數特性" class="headerlink" title="常數特性"></a>常數特性</h2><p>常數試紙不能更便的數值(value)，執行的期間是不能做更改。常數與變數宣告都是相同，但不是使用var關鍵字，則是使用const關鍵字，依據宣告常數名稱記得設為大寫。<br>宣告常數的好處在於常數宣告後即不能修改。若我們試圖修改常數，會在程式編譯時引發錯誤，提醒我們必需改掉錯誤的動作。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//常數使用方式</span></span><br><span class="line"><span class="keyword">const</span> &lt;constant_name&gt; = value</span><br></pre></td></tr></table></figure><h2 id="跳脫序列-Escape-Sequence"><a href="#跳脫序列-Escape-Sequence" class="headerlink" title="跳脫序列 Escape Sequence"></a>跳脫序列 Escape Sequence</h2><p><img src="/image/20221207_21-26-09.png"></p>]]></content>
      
      
      <categories>
          
          <category> 後端技術 </category>
          
          <category> Go </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[學習] Golang 基本使用(三) - 判斷式、迴圈</title>
      <link href="/2022/12/07/%E5%BE%8C%E7%AB%AF%E6%8A%80%E8%A1%93/GOLANG/Golang_03/"/>
      <url>/2022/12/07/%E5%BE%8C%E7%AB%AF%E6%8A%80%E8%A1%93/GOLANG/Golang_03/</url>
      
        <content type="html"><![CDATA[<h1 id="判斷式"><a href="#判斷式" class="headerlink" title="判斷式"></a>判斷式</h1><p>在分支判斷的控制上，Go 提供了 if…else、switch 語法，相較於其他提供類似語法的語言，例如 : c、c# 、java 等。<br>題外話 python 是沒有switch case必須要自己手動創建出來。</p><h2 id="輸入方式"><a href="#輸入方式" class="headerlink" title="輸入方式"></a>輸入方式</h2><p>這章節會需要用到輸入，請各位參考下方輸入方法：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> number <span class="type">int</span></span><br><span class="line">fmt.Scanln(&amp;number)</span><br></pre></td></tr></table></figure><h2 id="IF-敘述"><a href="#IF-敘述" class="headerlink" title="IF 敘述"></a>IF 敘述</h2><p>GO語言當中是無法使用單行可捨棄括號的敘述，優點會知道if範圍在哪。<br>go特性是此判斷式可以<em>不用使用括號</em>。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> x <span class="type">int16</span></span><br><span class="line">fmt.Scanln(&amp;x)</span><br><span class="line">fmt.Print(<span class="string">&quot;if Statement&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> x &gt; <span class="number">10</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;x = %d  is greater than 10\n&quot;</span>, x)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="IF-ELSE敘述"><a href="#IF-ELSE敘述" class="headerlink" title="IF ELSE敘述"></a>IF ELSE敘述</h2><p>Go語言對IF…ELSE敘述中，看出ELSE前面必須要有{} 相對嚴謹。對於IF….ELSE IF …ELSE也是相同意思。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> x <span class="type">int16</span></span><br><span class="line">fmt.Scanln(&amp;x) <span class="comment">//go 的輸入方式</span></span><br><span class="line"><span class="keyword">if</span> x%<span class="number">2</span> == <span class="number">0</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;x = %d  is even\n&quot;</span>, x)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;x = %d is odd&quot;</span>, x)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="switch-語法"><a href="#switch-語法" class="headerlink" title="switch 語法"></a>switch 語法</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> level <span class="type">rune</span></span><br><span class="line"><span class="keyword">var</span> score = <span class="number">88</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span> score / <span class="number">10</span> &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">10</span>, <span class="number">9</span>:</span><br><span class="line">level = <span class="string">&#x27;A&#x27;</span></span><br><span class="line"><span class="keyword">case</span> <span class="number">8</span>:</span><br><span class="line">level = <span class="string">&#x27;B&#x27;</span></span><br><span class="line"><span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">level = <span class="string">&#x27;C&#x27;</span></span><br><span class="line"><span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">level = <span class="string">&#x27;D&#x27;</span></span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">level = <span class="string">&#x27;E&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">fmt.Printf(<span class="string">&quot;得分等級：%c\n&quot;</span>, level)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意，與 C&#x2F;C++ 或 Java 等語言不同的是，Go 的 switch 比對成功後，不會自動往下執行，因而不用撰寫 break，有多個條件想符合時，在同一 case 中使用逗號區隔。如果真的想在比對成功後，往下一個 case 中的陳述執行，可以使用 fallthrough，例如 ：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> level <span class="type">rune</span></span><br><span class="line">    <span class="keyword">switch</span> score := <span class="number">100</span>; score / <span class="number">10</span> &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">10</span>:</span><br><span class="line">        fmt.Println(<span class="string">&quot;滿分喔！&quot;</span>)</span><br><span class="line">        <span class="keyword">fallthrough</span></span><br><span class="line">    <span class="keyword">case</span> <span class="number">9</span>:</span><br><span class="line">        level = <span class="string">&#x27;A&#x27;</span></span><br><span class="line">    <span class="keyword">case</span> <span class="number">8</span>:</span><br><span class="line">        level = <span class="string">&#x27;B&#x27;</span></span><br><span class="line">    <span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">        level = <span class="string">&#x27;C&#x27;</span></span><br><span class="line">    <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">        level = <span class="string">&#x27;D&#x27;</span></span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        level = <span class="string">&#x27;E&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Printf(<span class="string">&quot;得分等級：%c\n&quot;</span>, level)</span><br></pre></td></tr></table></figure><p>在上面的例子中，如果沒有 fallthrough，那麼只會顯示 “滿分喔！“，而不會執行 case 9 中的 level &#x3D; ‘A’，因此最後顯示得分等級時，不會有 A 的字眼。在上頭也可以看到，switch 中也可以使用 :&#x3D; 宣告與初始變數。<br>實際上，Go 的 switch 中， case 不用是常數，只要 switch 的值型態與 case 比對的型態符合，也可以是個變數或運算式，甚至還可以接受布林運算式，例如：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> level <span class="type">rune</span></span><br><span class="line">    score := <span class="number">88</span></span><br><span class="line">    <span class="keyword">switch</span> &#123;</span><br><span class="line">    <span class="keyword">case</span> score &gt;= <span class="number">90</span>:</span><br><span class="line">        level = <span class="string">&#x27;A&#x27;</span></span><br><span class="line">    <span class="keyword">case</span> score &gt;= <span class="number">80</span> &amp;&amp; score &lt; <span class="number">90</span>:</span><br><span class="line">        level = <span class="string">&#x27;B&#x27;</span></span><br><span class="line">    <span class="keyword">case</span> score &gt;= <span class="number">70</span> &amp;&amp; score &lt; <span class="number">80</span>:</span><br><span class="line">        level = <span class="string">&#x27;C&#x27;</span></span><br><span class="line">    <span class="keyword">case</span> score &gt;= <span class="number">60</span> &amp;&amp; score &lt; <span class="number">70</span>:</span><br><span class="line">        level = <span class="string">&#x27;D&#x27;</span></span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        level = <span class="string">&#x27;E&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Printf(<span class="string">&quot;得分等級：%c\n&quot;</span>, level)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="迴圈"><a href="#迴圈" class="headerlink" title="迴圈"></a>迴圈</h1><p>使用迭代控制結構 (iteration control structure) 來達成反覆 (repeating) 或循環 (looping) 的行為，省下重覆的程式碼。</p><h2 id="條件句-conditional"><a href="#條件句-conditional" class="headerlink" title="條件句 (conditional)"></a>條件句 (conditional)</h2><p>做為迴圈終止條件。在這個 for 迴圈中，只要 cond 為真，for 區塊內的程式碼就會不間斷地反覆執行。<br>當 cond 不為真時，則 for 區塊會終止。我們會透過改變程式的狀態，讓 for 迴圈執行一定次數後停止。<br>使用方式如同 while 一樣 。</p><h3 id="🧙‍♂️-使用方式"><a href="#🧙‍♂️-使用方式" class="headerlink" title="🧙‍♂️ 使用方式:"></a>🧙‍♂️ 使用方式:</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> conditional &#123;</span><br><span class="line"><span class="comment">// Run code here repeatedly.</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用範例"><a href="#使用範例" class="headerlink" title="使用範例"></a>使用範例</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">rangeNum := <span class="number">10</span></span><br><span class="line">index := <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> index &lt; rangeNum &#123;</span><br><span class="line">index++</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">println</span>(index)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="計數器-counter-loop"><a href="#計數器-counter-loop" class="headerlink" title="計數器 (counter loop)"></a>計數器 (counter loop)</h2><p>for 迴圈使用計數器 (counter) 來做為迴圈的中止條件。當執行迴圈結構開端時，會檢查判斷是否是對的，就會去做執行。</p><h3 id="🧙‍♂️-使用方式-1"><a href="#🧙‍♂️-使用方式-1" class="headerlink" title="🧙‍♂️ 使用方式:"></a>🧙‍♂️ 使用方式:</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> 初始值; 範圍 ; 動作 &#123;</span><br><span class="line"><span class="comment">// Run code here repeatedly.</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用範例-1"><a href="#使用範例-1" class="headerlink" title="使用範例"></a>使用範例</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">sum := <span class="number">0</span></span><br><span class="line">rangeNum := <span class="number">10</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; rangeNum; i++ &#123;</span><br><span class="line">sum++</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">println</span>(sum)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="無限迴圈-Infinite-loop"><a href="#無限迴圈-Infinite-loop" class="headerlink" title="無限迴圈 Infinite loop"></a>無限迴圈 Infinite loop</h2><p>其中範例除外[無限迴圈]，以下範例為infinite loop</p><h3 id="🧙‍♂️-使用方式-2"><a href="#🧙‍♂️-使用方式-2" class="headerlink" title="🧙‍♂️ 使用方式:"></a>🧙‍♂️ 使用方式:</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">    <span class="comment">//無限迴圈 (infinite loop)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例子中，for 迴圈會無限次地執行。這樣的迴圈稱為無限迴圈 (infinite loop)。<br>在 Go 語言使用無限迴圈時，會搭配 break 來終止迴圈。若要繼續執行就會使用 continue。</p><h2 id="For-範圍迴圈-For-range-loop"><a href="#For-範圍迴圈-For-range-loop" class="headerlink" title="For 範圍迴圈 For range loop"></a>For 範圍迴圈 For range loop</h2><p>使用陣列時候，可以使用range 取得陣列的長度。</p><h3 id="🧙‍♂️-使用方式-3"><a href="#🧙‍♂️-使用方式-3" class="headerlink" title="🧙‍♂️ 使用方式:"></a>🧙‍♂️ 使用方式:</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">strings := []<span class="type">string</span>&#123;<span class="string">&quot;hello&quot;</span>, <span class="string">&quot;world&quot;</span>&#125;</span><br><span class="line"><span class="keyword">for</span> i, s := <span class="keyword">range</span> strings &#123;</span><br><span class="line"><span class="built_in">println</span>(i, s)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="Break、Continue、goto"><a href="#Break、Continue、goto" class="headerlink" title="Break、Continue、goto"></a>Break、Continue、goto</h1><p>一般情況是會在違反進入迴圈的限制條件時候，才會結束迴圈運作，若問題是重複執行特定某些的敘述特性外，包刮例外特性必須加上break 或是continue 之敘述，可以方便撰寫程式。</p><h2 id="break-敘述功能使用方式"><a href="#break-敘述功能使用方式" class="headerlink" title="break 敘述功能使用方式"></a>break 敘述功能使用方式</h2><p>break 敘述除了在 switch 的選擇結構外，可以使用在迴圈結構。當執行到break 時候，會跳出程式迴圈結構，並在迴圈外層第一行敘述去做執行。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">sum := <span class="number">0</span></span><br><span class="line">i := <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> i &lt; <span class="number">5</span> &#123;</span><br><span class="line">i++</span><br><span class="line"><span class="keyword">if</span> i%<span class="number">2</span> != <span class="number">0</span> &#123; <span class="comment">// skip odd numbers</span></span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">sum += i</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">println</span>(sum)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="continue-敘述功能使用方式"><a href="#continue-敘述功能使用方式" class="headerlink" title="continue 敘述功能使用方式"></a>continue 敘述功能使用方式</h2><p>continue 是不執行迴圈內部某些敘述。<br>在 for 迴圈結構內使用continue 執行到continue 會跳到該層的for迴圈內的第三部分，做迴圈變數增&#x2F;減量。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">sum := <span class="number">0</span></span><br><span class="line">i := <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> i &lt; <span class="number">5</span> &#123;</span><br><span class="line">i++</span><br><span class="line"><span class="keyword">if</span> i%<span class="number">2</span> != <span class="number">0</span> &#123; <span class="comment">// skip odd numbers</span></span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">&#125;</span><br><span class="line">sum += i</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">println</span>(sum)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="goto-敘述功能使用方式"><a href="#goto-敘述功能使用方式" class="headerlink" title="goto 敘述功能使用方式"></a>goto 敘述功能使用方式</h2><p>可以使用 goto 任意移動到同函式中其他位置。像是以下範例用 goto 模擬 break：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">sum := <span class="number">0</span></span><br><span class="line">i := <span class="number">5</span></span><br><span class="line"><span class="keyword">for</span> i &lt; <span class="number">10</span> &#123;</span><br><span class="line">i++</span><br><span class="line"><span class="keyword">if</span> i%<span class="number">2</span> == <span class="number">0</span> &#123; <span class="comment">// skip odd numbers</span></span><br><span class="line"><span class="keyword">goto</span> END</span><br><span class="line">&#125;</span><br><span class="line">sum += i</span><br><span class="line">&#125;</span><br><span class="line">END:</span><br><span class="line"><span class="built_in">println</span>(sum)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>當 i % 2 餘數為 0 ，會觸發 goto 敘述，跳到 END 標籤所在的位置。goto也可以當continue 如以下範例。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">sum := <span class="number">0</span></span><br><span class="line">i := <span class="number">5</span></span><br><span class="line">LOOP:</span><br><span class="line"><span class="keyword">for</span> i &lt; <span class="number">10</span> &#123;</span><br><span class="line">i++</span><br><span class="line"><span class="keyword">if</span> i%<span class="number">2</span> == <span class="number">0</span> &#123; <span class="comment">// skip odd numbers</span></span><br><span class="line"><span class="keyword">goto</span> LOOP</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">sum += i</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">println</span>(sum)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>有些程式人視 goto 為邪惡的語法特性，甚至有些程式語言直接封印 goto。但適當地使用 goto，會讓程式碼更簡潔。</p>]]></content>
      
      
      <categories>
          
          <category> 後端技術 </category>
          
          <category> Go </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker (三)- 創建 docker 環境 (無 docker run)</title>
      <link href="/2022/11/30/DevOps/Docker/dc_03_%E5%89%B5%E5%BB%BA%20docker%20%E7%92%B0%E5%A2%83%20(%E7%84%A1%20docker%20run)/"/>
      <url>/2022/11/30/DevOps/Docker/dc_03_%E5%89%B5%E5%BB%BA%20docker%20%E7%92%B0%E5%A2%83%20(%E7%84%A1%20docker%20run)/</url>
      
        <content type="html"><![CDATA[<p>上一章節有敘述使用 docker run 與 docker start 差異，一般使用Docker 除非是需要兩種同時生成，不然這東西相當不方便。以下作法會是用 pull、create 、start(stop) 。</p><h2 id="清除-Images-映像檔"><a href="#清除-Images-映像檔" class="headerlink" title="清除 Images 映像檔"></a>清除 Images 映像檔</h2><p>刪除Images如下方指令。如果執行後跟下方圖片一樣有錯誤訊息，可以看到 container 還有在使用中是不可以任意刪除，所以記得需要先刪除 container 才能刪除 Images。</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker rmi [ContainerID]</span><br><span class="line">docker rmi [names] </span><br></pre></td></tr></table></figure><p><img src="/image/20221128_22-19-14.png"></p><h1 id="初次使用-Docker-動作"><a href="#初次使用-Docker-動作" class="headerlink" title="初次使用 Docker 動作"></a>初次使用 Docker 動作</h1><p>這次需要記一下使用順序，之後就會比較順手一些。</p><ol><li>docker pull </li><li>docker create </li><li>docker start</li><li>docker stop</li></ol><h2 id="創建-Images-docker-pull"><a href="#創建-Images-docker-pull" class="headerlink" title="創建 Images (docker pull)"></a>創建 Images (docker pull)</h2><p>使用方式可以透過search 查詢名稱。這邊我們一樣使用<code>hello-world</code>來展示。<br>輸入方式如下:</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull hello-world</span><br></pre></td></tr></table></figure><p><img src="/image/20221128_22-27-04.png"></p><h2 id="創建-Container-docker-create"><a href="#創建-Container-docker-create" class="headerlink" title="創建 Container(docker create)"></a>創建 Container(docker create)</h2><p>輸入方式如下:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker create -i --name [Container Name] [Image Name]</span><br></pre></td></tr></table></figure><h2 id="執行-docker-start"><a href="#執行-docker-start" class="headerlink" title="執行 (docker start)"></a>執行 (docker start)</h2><p>使用方式如下 :</p><figure class="highlight docker"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker start -i [ContainerID]</span><br><span class="line">docker start -i [names] </span><br></pre></td></tr></table></figure><h2 id="暫停-docker-stop"><a href="#暫停-docker-stop" class="headerlink" title="暫停 (docker stop)"></a>暫停 (docker stop)</h2><p>使用方式如下 :</p><figure class="highlight docker"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker stop [ContainerID]</span><br><span class="line">docker stop [names] </span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> DevOps </category>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker (二)- docker run 與 docker start</title>
      <link href="/2022/11/29/DevOps/Docker/dc_02_%20docker%20run%20%E8%88%87%20docker%20start/"/>
      <url>/2022/11/29/DevOps/Docker/dc_02_%20docker%20run%20%E8%88%87%20docker%20start/</url>
      
        <content type="html"><![CDATA[<p>這邊簡單操作一次 docker run 與 docker start 有什麼特別差異。</p><h2 id="準備工具"><a href="#準備工具" class="headerlink" title="準備工具"></a>準備工具</h2><p>開始前，兩套工具可以準備，若不使用Desktop也能操作。</p><ul><li>Docker Desktop  : <a href="https://www.docker.com/products/docker-desktop/">https://www.docker.com/products/docker-desktop/</a></li><li>Cmd &#x2F; terminal</li></ul><h2 id="Images-映像檔"><a href="#Images-映像檔" class="headerlink" title="Images 映像檔"></a>Images 映像檔</h2><p>Images 作為映像檔，基底需要Containers 來執行。使用image 可以透過 <code>docker search</code> 查詢image name。</p><h3 id="Search-搜尋"><a href="#Search-搜尋" class="headerlink" title="Search 搜尋"></a>Search 搜尋</h3><p>搜尋 : <strong>hello-world</strong> 。內容內會有很多相關的hello-world，可以依據需求選擇需要的名稱執行、輸入。<br><img src="/image/20221128_14-36-04.png"></p><h3 id="建立-Image-Hello-World"><a href="#建立-Image-Hello-World" class="headerlink" title="建立 Image - Hello World"></a>建立 Image - Hello World</h3><p>簡單敘述 Docker 創建方式。如果Docker內容已經有存在Hello World 是不會再產生的二個Image (Hello World) ，從下圖可以得到結果。<br>執行方式</p><figure class="highlight docker"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="keyword">run</span><span class="language-bash"> hello-world</span></span><br></pre></td></tr></table></figure><p><img src="/image/20221128_14-47-20.png"></p><h3 id="Docker-Desktop-Image-Containers"><a href="#Docker-Desktop-Image-Containers" class="headerlink" title="Docker Desktop - Image &#x2F; Containers"></a>Docker Desktop - Image &#x2F; Containers</h3><p>從Docker Desktop 可以看得出來，只要執行 <code>docker run hello-world</code> Containers 會不斷的產生出來，當中結論是</p><ul><li>Image初始化會產生 SHA256</li><li>執行 docker run 同時會新增 <strong>Containers</strong></li></ul><p><img src="/image/20221128_14-51-23.png"><br><img src="/image/20221128_14-51-35.png"></p><div class="note info simple"><h3 id="查詢狀態"><a href="#查詢狀態" class="headerlink" title="查詢狀態"></a>查詢狀態</h3><p>指令可以直接看到Container 狀態，可以得知Images 對象。<br><img src="/image/20221128_15-00-00.png"></p></div><h2 id="Containers-容器"><a href="#Containers-容器" class="headerlink" title="Containers 容器"></a>Containers 容器</h2><h3 id="清除多餘的-container"><a href="#清除多餘的-container" class="headerlink" title="清除多餘的 container"></a>清除多餘的 container</h3><p>現在我們先把Docker 裡面的 Container清理。清理方式以下兩行指令</p><figure class="highlight docker"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker rm [ContainerID]</span><br><span class="line">docker rm [names] </span><br></pre></td></tr></table></figure><p><img src="/image/20221128_15-09-23.png"></p><h3 id="只執行Container"><a href="#只執行Container" class="headerlink" title="只執行Container"></a>只執行Container</h3><p>執行方式如下。下方的 <code>-i -t </code> 意思是需要Container互動需要加入的參數。<br>如果執行這個只需要使用暫停 Container。</p><figure class="highlight docker"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker start -i [ContainerID]</span><br><span class="line">docker start -i [names] </span><br></pre></td></tr></table></figure><h3 id="暫停-Container"><a href="#暫停-Container" class="headerlink" title="暫停 Container"></a>暫停 Container</h3><p>執行方式如下。如果執行這個只需要使用暫停 Container</p><figure class="highlight docker"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker stop [ContainerID]</span><br><span class="line">docker stop [names] </span><br></pre></td></tr></table></figure><h2 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h2><p>從執行下來 docker run 很貼心把Image 、Container 加入進去，如果需要個別方式執行需要透過以下順序</p><ul><li>pull (抓下 images)</li><li>create (創建 container)</li><li>start (執行 container)<br>如果直接使用docker run 可能會遇到 contrainer 無法管理的問題，後續會在針對上面三個指令做敘述。</li></ul><p>docker run &#x3D; docker pull + docker create + docker start</p>]]></content>
      
      
      <categories>
          
          <category> DevOps </category>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker (一)- 基本使用方式</title>
      <link href="/2022/11/28/DevOps/Docker/dc_01_%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8%E6%96%B9%E5%BC%8F/"/>
      <url>/2022/11/28/DevOps/Docker/dc_01_%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8%E6%96%B9%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h1><p>是一個快速建立、測試、部署程式的軟體平台。Docker 作為容器的作業系統與虛擬機器虛擬化伺服器硬體的方法相似，容器可虛擬化伺服器的作業系統。Docker 安裝在每部伺服器上，並提供簡單的命令讓您使用以建立、啟動或停止容器。</p><h2 id="系統架構"><a href="#系統架構" class="headerlink" title="系統架構"></a>系統架構</h2><p>Docker 系統架構主要是主從式(client-server)架構。如下方</p><ul><li>Docker Daemon (伺服器) : 用來執行管理 Docker image、啟動 container、停止 container 的 service，它是一個 long time service。</li><li>Docker Client (客戶端) : 使用 Restful API 連到 Docker daemon，並且提供 command line 的方式讓使用者可以操作 docker。</li></ul><h2 id="主要元件"><a href="#主要元件" class="headerlink" title="主要元件"></a>主要元件</h2><ul><li>映像檔（image）: 執行特定環境所需要的資源，特色只允許唯獨。</li><li>容器（container）: 基於 image 可以建立出 Container，特色可讀寫。</li><li>倉庫（repository）: 存放 image 的空間，處理方式類似於git 。預設存取的 registry 為 DockerHub。</li></ul><h2 id="初次使用"><a href="#初次使用" class="headerlink" title="初次使用"></a>初次使用</h2><ul><li><p>安裝網址:<a href="https://www.docker.com/">https://www.docker.com/</a><br>安裝方式不再贅述，原則上主機板如果有支援虛擬化都是可以使用docker ，如果有遇到錯誤問題可以考慮參考上一篇。</p></li><li><p>備註 : 本篇使用 powershell 。</p></li></ul><p>接下來，我們要驗證是否有安裝成功需要輸入下方動作。</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run hello-world</span><br></pre></td></tr></table></figure><p>若環境下出現 <code>Hello from Docker!</code>恭喜各位完成第一步了。</p><h3 id="查看狀態"><a href="#查看狀態" class="headerlink" title="查看狀態"></a>查看狀態</h3><p>這邊我們可以利用下方指令執行，可以顯示當前狀態。從狀態查看可以知道<code>Exited (0)</code>這裡面的狀態，查看方式 0為正常，其餘數值都為異常狀況，</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps</span><br></pre></td></tr></table></figure><h3 id="移除-Container"><a href="#移除-Container" class="headerlink" title="移除 Container"></a>移除 Container</h3><p>docker image 作為映像檔不像 Container 可以不斷生成。若container 數量不斷成長會造成容量、管理相當不便，可以透由移除方式移出。</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 使用 CONTAINER ID</span><br><span class="line">docker rm [CONTAINER ID]</span><br><span class="line"></span><br><span class="line"># 使用 Names</span><br><span class="line">docker rm [Names]</span><br></pre></td></tr></table></figure><p>補充 :<br>若無法移除Container 需要加入 <code>-f</code> 參數。</p><h3 id="移除-images"><a href="#移除-images" class="headerlink" title="移除 images"></a>移除 images</h3><p>若要移除images 可以使用下方指令，這邊稍微留意Container 是否存在，必須要先移除Container 才能移除image。</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rmi [IMAGE]</span><br></pre></td></tr></table></figure><h2 id="參考文件"><a href="#參考文件" class="headerlink" title="參考文件"></a>參考文件</h2><ul><li><a href="https://ithelp.ithome.com.tw/articles/10190728">Day2：認識 Docker 基本概念</a></li><li><a href="https://ithelp.ithome.com.tw/articles/10215989">Day09 - Docker CLI 常用語法</a></li><li><a href="https://ithelp.ithome.com.tw/articles/10237506">30 天與鯨魚先生做好朋友系列</a></li><li><a href="https://betterprogramming.pub/understanding-docker-container-exit-codes-5ee79a1d58f6%E3%84%8F">Understanding Docker Container Exit Codes</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> DevOps </category>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【VB】ASP.Net - 如何在ASPNET使用 Ajax</title>
      <link href="/2022/11/07/%E5%BE%8C%E7%AB%AF%E6%8A%80%E8%A1%93/VB/%E3%80%90VB%E3%80%91ASPNET-AJAX/"/>
      <url>/2022/11/07/%E5%BE%8C%E7%AB%AF%E6%8A%80%E8%A1%93/VB/%E3%80%90VB%E3%80%91ASPNET-AJAX/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>前幾天遇到VB Asp .Net 沒有人寫過 ajax 紀錄，今天單純撰寫如何適用 VB 的 AJAX。<br>寫法如同與C# ajax 相似，就請各位看下去。</p><h1 id="AJAX"><a href="#AJAX" class="headerlink" title="AJAX"></a>AJAX</h1><h2 id="什麼是-AJAX-？"><a href="#什麼是-AJAX-？" class="headerlink" title="什麼是 AJAX ？"></a>什麼是 AJAX ？</h2><p>AJAX 是「Asynchronous JavaScript and XML」（非同步的 JavaScript 與 XML 技術）的縮寫，簡單說就是網頁不用重新整理，就能即時地透過瀏覽器去跟伺服器溝通，撈出資料。</p><ul><li>Asynchronous：非同步</li><li>JavaScript：使用的程式語言</li><li>XML：Client 與 Server 交換資料用的資料與方法，近年由於 JSON 等格式的流行，使用 Ajax 處理的資料並不限於 XML。</li></ul><h2 id="同步請求-v-s-非同步請求"><a href="#同步請求-v-s-非同步請求" class="headerlink" title="同步請求 v.s. 非同步請求"></a>同步請求 v.s. 非同步請求</h2><p>接著讓我們引入客戶端與伺服器端的概念，來看看「同步請求」和「非同步請求」的對比：</p><ul><li><p>同步請求 (Synchronous request)： 客戶端 (client) 對伺服器端 (server) 送出 request ，並且在收到伺服器端的 response 之後才會繼續下一步的動作，等待的期間無法處理其他事情。這個作法並不理想，因為通常伺服器端的運算速度比本地電腦慢上好幾倍。</p></li><li><p>非同步請求 (Asynchronous request)：客戶端 (client) 對伺服器端 (server) 送出 request 之後，不需要等待結果，仍可以持續處理其他事情，甚至繼續送出其他 request。Responese 傳回之後，就被融合進當下頁面或應用中。</p></li></ul><h2 id="參考文件"><a href="#參考文件" class="headerlink" title="參考文件"></a>參考文件</h2><ol><li>jQuery: <a href="https://api.jquery.com/jquery.ajax/">https://api.jquery.com/jquery.ajax/</a></li><li>ithome : <a href="https://ithelp.ithome.com.tw/articles/10226692">https://ithelp.ithome.com.tw/articles/10226692</a></li></ol><hr><h1 id="使用-VB-Ajax"><a href="#使用-VB-Ajax" class="headerlink" title="使用 VB Ajax"></a>使用 VB Ajax</h1><h2 id="Ajax-格式"><a href="#Ajax-格式" class="headerlink" title="Ajax 格式"></a>Ajax 格式</h2><p>我先設定vb ajax格式，前面設定ajax 都比較簡單，確定好後就開始我們的製作接收ajax吧!</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">           <span class="attr">url</span>: <span class="string">&quot;/Ajax/Example.aspx/ExampleAjax&quot;</span>, <span class="comment">//需要抓取的url </span></span><br><span class="line">           <span class="attr">type</span>: <span class="string">&quot;POST&quot;</span>,  <span class="comment">//請求資料的方式(Ex:POST / GET / PUT...等)</span></span><br><span class="line">           <span class="attr">async</span>: <span class="literal">false</span>, <span class="comment">//非同步 。預設為true</span></span><br><span class="line">           <span class="attr">contentType</span>: <span class="string">&quot;application/json; charset=utf-8&quot;</span>, <span class="comment">// 要送到server的資料型態</span></span><br><span class="line">           <span class="attr">data</span>:&#123;&#125;,<span class="comment">// 需要傳送給 Server 的內容</span></span><br><span class="line">           <span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">res</span>) &#123;</span><br><span class="line">               <span class="keyword">let</span> json = $.<span class="title function_">parseJSON</span>(res.<span class="property">d</span>);</span><br><span class="line">               <span class="variable language_">console</span>.<span class="title function_">log</span>(json);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;);</span><br></pre></td></tr></table></figure><h2 id="接收FUNCTION"><a href="#接收FUNCTION" class="headerlink" title="接收FUNCTION"></a>接收FUNCTION</h2><p>我們來介紹我們的主軸 “WebMethod()”，VB設定AJAX需要注意不能漏掉 <code>&lt;System.Web.Services.WebMethod()&gt;</code>，<br>放的位置就會是在FUNCTION上方，要告訴它FUNCTION要被使用AJAX傳輸的概念，如下方所示。</p><figure class="highlight vb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;System.Web.Services.WebMethod()&gt;</span><br><span class="line"><span class="keyword">Public</span> <span class="keyword">Shared</span> <span class="keyword">Function</span> ExampleAjax() <span class="keyword">As</span> <span class="type">String</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">End</span> <span class="keyword">Function</span></span><br></pre></td></tr></table></figure><p>這邊你會好奇說怎麼多了 “Shared”，使用ajax 必須要加上 Shared 關鍵詞，用義會像是 C# 的 static。<br>下方為官方解釋 。</p><div class="note info flat"><h2 id="使用共用的時機"><a href="#使用共用的時機" class="headerlink" title="使用共用的時機"></a>使用共用的時機</h2><p>共用類別或結構的成員可將其提供給每個實例，而 非共用，其中每個實例都會保留它自己的複本。 例如，如果變數的值適用于整個應用程式，共用就很有用。 如果您將該變數宣告為 Shared ，則所有的實例都會存取相同的儲存位置，而如果某個實例變更變數的值，則所有實例都會存取更新的值。</p><h2 id="規則"><a href="#規則" class="headerlink" title="規則"></a>規則</h2><p><strong>宣告內容</strong> : 您只能在模組層級使用 Shared。 這表示元素的宣告內容 Shared 必須是類別或結構，而且不能是原始程式檔、命名空間或程式。<br><strong>結合的修飾詞</strong> : 您無法 Shared 在相同的宣告中，搭配覆寫、可覆寫、 NotOverridable、 MustOverride或靜態來指定。<br><strong>訪問</strong> : 您可以使用類別或結構名稱來限定共用元素，而不是使用其類別或結構的特定實例的變數名稱來存取共用專案。 您甚至不需要建立類別或結構的實例，即可存取其共用成員。</p></div><p>這邊我就使用簡單的方式回傳給我們js，前置作業就這樣完成了。 </p><figure class="highlight vb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;System.Web.Services.WebMethod()&gt;</span><br><span class="line"><span class="keyword">Public</span> <span class="keyword">Shared</span> <span class="keyword">Function</span> ExampleAjax() <span class="keyword">As</span> <span class="type">String</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;is dataType : Json&quot;</span></span><br><span class="line"><span class="keyword">End</span> <span class="keyword">Function</span></span><br></pre></td></tr></table></figure><h2 id="結果"><a href="#結果" class="headerlink" title="結果"></a>結果</h2><p>我們可以從 js ajax中 success 從res可以看到，有 d 的JSON在這裡範例我直接把d裡面的資料取出來就完成我的基本操作。<br>那你們會問如果要回傳值給Server如何使用? 那我們看下方範例。</p><p>範例我用Str包成 json回傳給 server接收值，再用剛才輸入來回傳回去。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">           <span class="attr">url</span>: <span class="string">&quot;/Ajax/Example.aspx/ExampleAjax&quot;</span>, <span class="comment">//需要抓取的url </span></span><br><span class="line">           <span class="attr">type</span>: <span class="string">&quot;POST&quot;</span>,  <span class="comment">//請求資料的方式(Ex:POST / GET / PUT...等)</span></span><br><span class="line">           <span class="attr">async</span>: <span class="literal">false</span>, <span class="comment">//非同步 。預設為true</span></span><br><span class="line">           <span class="attr">contentType</span>: <span class="string">&quot;application/json; charset=utf-8&quot;</span>, <span class="comment">// 要送到server的資料型態</span></span><br><span class="line">           <span class="attr">data</span>:<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(&#123;</span><br><span class="line">               <span class="title class_">Str</span>: <span class="title class_">Str</span>,</span><br><span class="line">           &#125;),<span class="comment">// 需要傳送給 Server 的內容</span></span><br><span class="line">           <span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">res</span>) &#123;</span><br><span class="line">               <span class="keyword">let</span> json = $.<span class="title function_">parseJSON</span>(res.<span class="property">d</span>);</span><br><span class="line">               <span class="variable language_">console</span>.<span class="title function_">log</span>(json);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;);</span><br></pre></td></tr></table></figure><p>你們可以注意到 ajax注意的點，傳值名稱必須要一致，這裡就要注意有沒有Key錯變數名稱。</p><figure class="highlight vb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;System.Web.Services.WebMethod()&gt;</span><br><span class="line"><span class="keyword">Public</span> <span class="keyword">Shared</span> <span class="keyword">Function</span> ExampleAjax(Str <span class="keyword">As</span> <span class="type">String</span>) <span class="keyword">As</span> <span class="type">String</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;is dataType : Json&quot;</span></span><br><span class="line"><span class="keyword">End</span> <span class="keyword">Function</span></span><br></pre></td></tr></table></figure><p>如果要用 Fetch 取得資料，答案是可以使用也歡迎大家也玩玩看ajax。 </p>]]></content>
      
      
      <categories>
          
          <category> 後端技術 </category>
          
          <category> VB </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【筆記】命令提示字元 - netsh 顯示 wifi 資訊</title>
      <link href="/2022/11/06/%E7%AD%86%E8%A8%98%E8%88%87%E7%94%9F%E6%B4%BB%E9%9B%9C%E8%A8%98/%E6%8A%80%E8%A1%93/%E3%80%90%E7%AD%86%E8%A8%98%E3%80%91%E5%91%BD%E4%BB%A4%E6%8F%90%E7%A4%BA%E5%AD%97%E5%85%83%20-%20netsh%20%E9%A1%AF%E7%A4%BA%20wifi%20%E8%B3%87%E8%A8%8A/"/>
      <url>/2022/11/06/%E7%AD%86%E8%A8%98%E8%88%87%E7%94%9F%E6%B4%BB%E9%9B%9C%E8%A8%98/%E6%8A%80%E8%A1%93/%E3%80%90%E7%AD%86%E8%A8%98%E3%80%91%E5%91%BD%E4%BB%A4%E6%8F%90%E7%A4%BA%E5%AD%97%E5%85%83%20-%20netsh%20%E9%A1%AF%E7%A4%BA%20wifi%20%E8%B3%87%E8%A8%8A/</url>
      
        <content type="html"><![CDATA[<h1 id="紀錄目的"><a href="#紀錄目的" class="headerlink" title="紀錄目的"></a>紀錄目的</h1><p>cmd 指令有很多可以使用，通常太久沒使用會忘記如何使用，預防再次忘記會利用空檔紀錄如何使用。</p><p>wifi 部分通常很多人想要往回查wifi密碼或是忘記密碼可以使用netsh 查詢，相對這種查詢方式也要開始思考是否有沒有資安問題。</p><h1 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h1><p>步驟如下 :</p><ol><li>打開 cmd 或是 powershell </li><li>輸入 netsh 可以進入 netsh 輸入對話中。</li><li>進入對話內使用 <code>wlan show profiles</code>;如果沒有進入情況下使用 <code>netsh wlan show profiles</code></li><li>上面結果可以查看已存檔的wifi名稱，選擇需要的wifi 複製。</li><li>輸入方式 : <code>wlan show profiles [wifi name]</code> ，可以得知訊息內容。如果想要查詢密碼請輸入 <code>wlan show profiles [wifi name] key=clear</code> 就會出現wifi密碼。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 筆記 </category>
          
          <category> 生活雜記 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cmd </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【筆記】VSC - Markdown PasteImage</title>
      <link href="/2022/11/05/%E7%AD%86%E8%A8%98%E8%88%87%E7%94%9F%E6%B4%BB%E9%9B%9C%E8%A8%98/%E6%8A%80%E8%A1%93/%E3%80%90%E7%AD%86%E8%A8%98%E3%80%91VSC%20-%20Markdown%20PasteImage/"/>
      <url>/2022/11/05/%E7%AD%86%E8%A8%98%E8%88%87%E7%94%9F%E6%B4%BB%E9%9B%9C%E8%A8%98/%E6%8A%80%E8%A1%93/%E3%80%90%E7%AD%86%E8%A8%98%E3%80%91VSC%20-%20Markdown%20PasteImage/</url>
      
        <content type="html"><![CDATA[<p>VSC MarkDown 有提供截圖工具 Markdown PasteImage，近期需要即時貼上圖片會方便許多，簡單簡述Markdown PasteImage 使用方式。</p><h2 id="Markdown-PasteImage"><a href="#Markdown-PasteImage" class="headerlink" title="Markdown PasteImage"></a><a href="https://marketplace.visualstudio.com/items?itemName=telesoho.vscode-markdown-paste-image">Markdown PasteImage</a></h2><p>Markdown PasteImage 與其他Paste Images 不同可以快速貼上圖片(無提示視窗ex: path 存放位置)。</p><h2 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h2><p>通過按”Ctrl+Alt+V”或是指令方式 <code> markdown paste</code> (備註 Mac: “Cmd+Alt+V”)</p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><h3 id="預定義變量"><a href="#預定義變量" class="headerlink" title="預定義變量"></a>預定義變量</h3><ul><li>${workspaceRoot} : 在 VS Code 中打開的文件夾的路徑</li><li>${fileWorkspaceFolder} : 當前打開文件的工作區文件夾</li><li>${fileBasename} : 當前打開文件的基本名稱</li><li>${fileBasenameNoExtension} : 當前打開的文件的基本名稱，沒有文件擴展名</li><li>${fileExtname} : 當前打開文件的擴展名</li><li>${fileDirname} : 當前打開文件的目錄名</li><li>${datetime} : 當前日期和時間格式化為”yyyyMMDDHHmmss”</li></ul><h3 id="設定清單"><a href="#設定清單" class="headerlink" title="設定清單"></a>設定清單</h3><ul><li>MarkdownPaste.path </li><li>MarkdownPaste.nameBase</li><li>MarkdownPaste.namePrefix</li><li>MarkdownPaste.nameSuffix</li><li>MarkdownPaste.silence</li><li>MarkdownPaste.enableImgTag</li><li>MarkdownPaste.encodePath</li><li>MarkdownPaste.rules</li><li>MarkdownPaste.lang_rules</li></ul><p>詳細內容請參閱 <a href="https://github.com/telesoho/vscode-markdown-paste-image">vscode-markdown-paste-image</a></p><h2 id="使用方式-1"><a href="#使用方式-1" class="headerlink" title="使用方式"></a>使用方式</h2><p>MarkdownPaste.path 是儲存路徑，必須要指向你要指定的位置。pasteImage.insertPattern 則是呈現路徑，意思是可以變更Markdown Image Path 。參考如下</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;pasteImage.defaultName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;YYYYMMDD_HH-mm-ss&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;pasteImage.path&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$&#123;currentFileDir&#125;../../../img/Note/other/&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;pasteImage.insertPattern&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$&#123;imageSyntaxPrefix&#125;/img/Note/other/$&#123;imageFileName&#125;$&#123;imageSyntaxSuffix&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><hr><h3 id="參考文件"><a href="#參考文件" class="headerlink" title="參考文件"></a>參考文件</h3><p>-<a href="https://blog.51cto.com/u_15127700/4163443">VSCode Paste Image 设置</a></p>]]></content>
      
      
      <categories>
          
          <category> 筆記 </category>
          
          <category> 生活雜記 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VSC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【筆記】命令提示字元 - chcp 變更命令提示字元語言環境</title>
      <link href="/2022/11/05/%E7%AD%86%E8%A8%98%E8%88%87%E7%94%9F%E6%B4%BB%E9%9B%9C%E8%A8%98/%E6%8A%80%E8%A1%93/%E3%80%90%E7%AD%86%E8%A8%98%E3%80%91%E5%91%BD%E4%BB%A4%E6%8F%90%E7%A4%BA%E5%AD%97%E5%85%83%20-%20chcp%20%E8%AE%8A%E6%9B%B4%E5%91%BD%E4%BB%A4%E6%8F%90%E7%A4%BA%E5%AD%97%E5%85%83%E8%AA%9E%E8%A8%80%E7%92%B0%E5%A2%83/"/>
      <url>/2022/11/05/%E7%AD%86%E8%A8%98%E8%88%87%E7%94%9F%E6%B4%BB%E9%9B%9C%E8%A8%98/%E6%8A%80%E8%A1%93/%E3%80%90%E7%AD%86%E8%A8%98%E3%80%91%E5%91%BD%E4%BB%A4%E6%8F%90%E7%A4%BA%E5%AD%97%E5%85%83%20-%20chcp%20%E8%AE%8A%E6%9B%B4%E5%91%BD%E4%BB%A4%E6%8F%90%E7%A4%BA%E5%AD%97%E5%85%83%E8%AA%9E%E8%A8%80%E7%92%B0%E5%A2%83/</url>
      
        <content type="html"><![CDATA[<h1 id="紀錄目的"><a href="#紀錄目的" class="headerlink" title="紀錄目的"></a>紀錄目的</h1><p>如果使用命令提示字元有遇到亂碼，需要轉換 cmd Unicode 設定問題，可以考慮嘗試用這個。 </p><h1 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h1><p>chcp 是一個轉換 Unicode 設定，輸入方式很簡單，只需要輸入<code>chcp 65001</code>。</p><h1 id="參考文件"><a href="#參考文件" class="headerlink" title="參考文件"></a>參考文件</h1><ul><li>維基百科 - <a href="https://zh.wikipedia.org/wiki/%E4%BB%A3%E7%A0%81%E9%A1%B5">頁碼</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 筆記 </category>
          
          <category> 生活雜記 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web Api </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Line Notify - 使用 C# 創建 Line Notify</title>
      <link href="/2022/10/08/%E5%BE%8C%E7%AB%AF%E6%8A%80%E8%A1%93/CS/Line/Line_05_Notify/"/>
      <url>/2022/10/08/%E5%BE%8C%E7%AB%AF%E6%8A%80%E8%A1%93/CS/Line/Line_05_Notify/</url>
      
        <content type="html"><![CDATA[<p>之前有已經結束Line Bot 簡易製作、使用方式，這是會使用Nottify 使用方式。目前為止Bot 製作上，Notift 不論是創建、呼叫、API 測試相對的比Bot 友善許多，Notify 可以應用很多方式(Exmpale : 監控、提示訊息、警示資訊等)。若有使用常駐、監聽伺服方式可以不妨加入Notify 功能。</p><h2 id="Line-Notify"><a href="#Line-Notify" class="headerlink" title="Line Notify"></a>Line Notify</h2><p>Notify 是由 Line 官方提供，主要應用通知訊息使用與Bots應用上有所不同。Notify可以免費傳送訊息，若Bots 有意外錯誤訊息可以透過Notify 合併、協助。</p><h3 id="連動的服務"><a href="#連動的服務" class="headerlink" title="連動的服務"></a>連動的服務</h3><p>目前有提供項目有以下三個。</p><ul><li><a href="https://en.mackerel.io/">Mackerel</a></li><li><a href="https://github.com/">Github</a></li><li><a href="https://ifttt.com/line">IFTTT</a></li></ul><h3 id="前置作業、工具"><a href="#前置作業、工具" class="headerlink" title="前置作業、工具"></a>前置作業、工具</h3><ul><li><a href="https://notify-bot.line.me/zh_TW/">Line Notify 官方</a></li><li><a href="https://code.visualstudio.com/">Visual Studio Code</a></li></ul><h2 id="創建Line-Notify-Project"><a href="#創建Line-Notify-Project" class="headerlink" title="創建Line Notify Project"></a>創建Line Notify Project</h2><p>創建順序 : [Line Notify 官方] &gt; [個人頁面]  &gt;按下 [發行權杖(Token)] &gt; 選擇 [透過1對1聊天接收Line Notify 的通知] &gt; 複製 Line Notify Token<br><img src="/img/dotnet/LineNotify/Snipaste_2022-10-08_22-20-10.png"><br><img src="/img/dotnet/LineNotify/Snipaste_2022-10-08_22-21-24.png"><br><img src="/img/dotnet/LineNotify/Snipaste_2022-10-08_22-22-00.png"><br><img src="/img/dotnet/LineNotify/Snipaste_2022-10-08_22-22-48.png"></p><h2 id="使用C-WebApi"><a href="#使用C-WebApi" class="headerlink" title="使用C# WebApi"></a>使用C# WebApi</h2><h3 id="前置作業"><a href="#前置作業" class="headerlink" title="前置作業"></a>前置作業</h3><ol><li>使用 命令字元或是Powershell ，輸入下方網址創建專案。<br>備註 : 這邊範例使用 Net6.0。<figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dotnet new webapi</span><br></pre></td></tr></table></figure></li><li>準備Line Notify Token</li></ol><h3 id="程式碼-Program-cs"><a href="#程式碼-Program-cs" class="headerlink" title="程式碼 - Program.cs"></a>程式碼 - Program.cs</h3><p>加入 Cors 設定</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> builder = WebApplication.CreateBuilder(args);</span><br><span class="line"><span class="comment">//add cors</span></span><br><span class="line">builder.Services.AddCors(options =&gt;</span><br><span class="line">&#123;</span><br><span class="line">    options.AddDefaultPolicy(</span><br><span class="line">        builder =&gt;</span><br><span class="line">        &#123;</span><br><span class="line">            builder.AllowAnyHeader().AllowAnyOrigin().AllowAnyMethod();</span><br><span class="line">        &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> app = builder.Build();</span><br><span class="line">app.UseCors();</span><br></pre></td></tr></table></figure><h3 id="程式碼-NotifyController"><a href="#程式碼-NotifyController" class="headerlink" title="程式碼 - NotifyController"></a>程式碼 - NotifyController</h3><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> Microsoft.AspNetCore.Mvc;</span><br><span class="line"><span class="keyword">using</span> Newtonsoft.Json;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title">dotnetCore_LineNotify.Controllers</span>;</span><br><span class="line"></span><br><span class="line">[<span class="meta">ApiController</span>]</span><br><span class="line">[<span class="meta">Route(<span class="string">&quot;[controller]&quot;</span>)</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">NotifyController</span> : <span class="title">ControllerBase</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> notifyToken &#123; <span class="keyword">get</span>; <span class="keyword">private</span> <span class="keyword">set</span>; &#125; = <span class="string">&quot;輸入 Line Notify Token&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> ILogger&lt;NotifyController&gt; _logger;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">NotifyController</span>(<span class="params">ILogger&lt;NotifyController&gt; logger</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        _logger = logger;</span><br><span class="line">    &#125;</span><br><span class="line">    [<span class="meta">HttpGet</span>]</span><br><span class="line">    <span class="function"><span class="keyword">public</span> IActionResult <span class="title">Get</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">string</span> msg = <span class="string">&quot;測試阿!&quot;</span>;</span><br><span class="line">        isRock.LineNotify.Utility.SendNotify(notifyToken, msg);</span><br><span class="line">        <span class="keyword">return</span> Ok(msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/img/dotnet/LineNotify/Snipaste_2022-10-08_23-03-58.png"></p><p>以上步驟完成後，Notify 就已經可以正常回覆訊息，如果要更詳細使用方式可以參考官方提供的文件。</p><ul><li><a href="https://notify-bot.line.me/doc/en/">LINE Notify API Document</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 後端技術 </category>
          
          <category> C# </category>
          
          <category> Line </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
            <tag> Line </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Line Login 使用方式</title>
      <link href="/2022/10/08/%E5%BE%8C%E7%AB%AF%E6%8A%80%E8%A1%93/CS/Line/Line_06_LineLogin/"/>
      <url>/2022/10/08/%E5%BE%8C%E7%AB%AF%E6%8A%80%E8%A1%93/CS/Line/Line_06_LineLogin/</url>
      
        <content type="html"><![CDATA[<h2 id="使用NUGET"><a href="#使用NUGET" class="headerlink" title="使用NUGET"></a>使用NUGET</h2><ol><li><a href="https://www.nuget.org/packages/StartFMS.Extensions.Line">StartFMS.Extensions.Line</a></li><li><a href="https://www.nuget.org/packages/LineBotSDK">LineBotSDK</a></li><li><a href="https://www.nuget.org/packages/StartFMS.Extensions.Configuration">StartFMS.Extensions.Configuration</a></li></ol><h2 id="StartFMS-Extensions-Line"><a href="#StartFMS-Extensions-Line" class="headerlink" title="StartFMS.Extensions.Line"></a>StartFMS.Extensions.Line</h2><p>本章節使用 v1.1.1 版本，版本已經釋出 Line Login 、Line Notify 正常使用，設定格是可以參考下方json設定檔。下方範例如果有保留值表示官方提供傳值設定，無須更改。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;Line&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;Bots&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;channelToken&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;adminUserID&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span> <span class="comment">//Bots</span></span><br><span class="line">  <span class="attr">&quot;Login&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;channelToken&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;adminUserID&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;openIdConnect&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://access.line.me/oauth2/v2.1/authorize&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;response_type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;code&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;client_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span> <span class="comment">//Channel ID </span></span><br><span class="line">      <span class="attr">&quot;redirect_uri&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;state&quot;</span><span class="punctuation">:</span> <span class="string">&quot;12345abcde&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;scope&quot;</span><span class="punctuation">:</span> <span class="string">&quot;profile openid&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;nonce&quot;</span><span class="punctuation">:</span> <span class="string">&quot;09876xyz&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span> <span class="comment">//openIdConnect</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span> <span class="comment">//Login</span></span><br><span class="line">  <span class="attr">&quot;Notify&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;channelToken&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="Line-Notify"><a href="#Line-Notify" class="headerlink" title="Line Notify"></a>Line Notify</h3><p>Notify 只需要設定一個 Token 無需要取得其他資料</p><h2 id="StartFMS-Extensions-Configuration"><a href="#StartFMS-Extensions-Configuration" class="headerlink" title="StartFMS.Extensions.Configuration"></a>StartFMS.Extensions.Configuration</h2><p>本章節雖然非必要存在，後續章節會介紹到這個使用方式。如果要使用【管理使用者密碼】可以使用下方指令，最新版本為v1.0.1 可以使用，並且還支援 Azure 取得值的功能。</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//限制 net6.0 後的版本</span></span><br><span class="line"><span class="keyword">var</span> config = Config.GetConfiguration&lt;Program&gt;(); <span class="comment">//加入設定檔</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//限制 core 1.0 ~ core 5.0 的版本</span></span><br><span class="line"><span class="keyword">var</span> config = Config.GetConfiguration&lt;Startup&gt;(); <span class="comment">//加入設定檔</span></span><br></pre></td></tr></table></figure><h2 id="正篇-使用Line-Login"><a href="#正篇-使用Line-Login" class="headerlink" title="(正篇) 使用Line Login"></a>(正篇) 使用Line Login</h2><p>進入官方網站後，請創建一個 “Line Login” 頁面，介於設定內容沒有特別要注意，這邊就沒有把創建畫面貼上來。</p><ul><li><a href="https://developers.line.biz/console/">Line Developer</a><br><img src="/image/20230406_09-48-38.png"></li></ul><h3 id="需要保存項目"><a href="#需要保存項目" class="headerlink" title="需要保存項目"></a>需要保存項目</h3><p>進入 【Basic Setting】 頁籤後，必須要記住三個資料，並寫入在設定檔當中。</p><ol><li>Channel secret </li><li>Your user ID </li><li>Channel ID<br><img src="/image/20230406_09-50-56.png"><br><img src="/image/20230406_09-51-19.png"></li></ol><h3 id="LINE-Login-settings"><a href="#LINE-Login-settings" class="headerlink" title="LINE Login settings"></a>LINE Login settings</h3><p>進入 【Line Login Setting】頁籤後，Callback URL 是支援 Localhost URL ，測試前可以將URL填上去務必在更新至正式版本需要改回來。<br><img src="/image/20230406_09-55-45.png"></p><hr><ol><li><p>加入參數<br>目前設定方式會透過這個 <code>LineLogin</code>類別進行登入，若有更好的想法可以在下方或是Github 留言。</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Program.cs</span></span><br><span class="line"><span class="keyword">var</span> lineLogin = <span class="keyword">new</span> LineLogin()</span><br><span class="line">&#123;</span><br><span class="line">    ChannelToken = config.GetValue&lt;<span class="built_in">string</span>&gt;(<span class="string">&quot;Line:Login:channelToken&quot;</span>),</span><br><span class="line">    AdminUserID = config.GetValue&lt;<span class="built_in">string</span>&gt;(<span class="string">&quot;Line:Login:adminUserID&quot;</span>),</span><br><span class="line">    urlRequest = <span class="keyword">new</span> LineLogin.UrlRequest</span><br><span class="line">    &#123;</span><br><span class="line">        url = config.GetValue&lt;<span class="built_in">string</span>&gt;(<span class="string">&quot;Line:Login:openIdConnect:url&quot;</span>),</span><br><span class="line">        response_type = config.GetValue&lt;<span class="built_in">string</span>&gt;(<span class="string">&quot;Line:Login:openIdConnect:response_type&quot;</span>),</span><br><span class="line">        client_id = config.GetValue&lt;<span class="built_in">string</span>&gt;(<span class="string">&quot;Line:Login:openIdConnect:client_id&quot;</span>),</span><br><span class="line">        redirect_uri = config.GetValue&lt;<span class="built_in">string</span>&gt;(<span class="string">&quot;Line:Login:openIdConnect:redirect_uri&quot;</span>),</span><br><span class="line">        scope = config.GetValue&lt;<span class="built_in">string</span>&gt;(<span class="string">&quot;Line:Login:openIdConnect:scope&quot;</span>),</span><br><span class="line">        state = config.GetValue&lt;<span class="built_in">string</span>&gt;(<span class="string">&quot;Line:Login:openIdConnect:state&quot;</span>),</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">builder.Services.AddSingleton&lt;LineLogin&gt;(lineLogin);</span><br></pre></td></tr></table></figure></li><li><p>加入 Controllers</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> LineLogin _LineLogin;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">LineLoginV1Controller</span>(<span class="params">LineLogin LineLogin</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    _LineLogin = LineLogin;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[<span class="meta">HttpGet(Name = <span class="string">&quot;&quot;</span>)</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> IActionResult <span class="title">ReceivedAuthorize</span>(<span class="params">[FromQuery] <span class="built_in">string</span>? code</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">string</span>.IsNullOrEmpty(code))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">string</span> Url = _LineLogin.GetLoginUrl();</span><br><span class="line">        <span class="keyword">return</span> Redirect(Url); <span class="comment">//發送網址</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> token = _LineLogin.GetTokenFromCode(code);</span><br><span class="line">    <span class="keyword">var</span> profile = _LineLogin.GetUserProfile(token.access_token);</span><br><span class="line">    <span class="keyword">return</span> Ok(<span class="keyword">new</span> &#123; sccess = <span class="literal">true</span>, token, profile &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>以上即可完成登入動作，畫面入下圖。後續可以直接在 ReceivedAuthorize() 進行修改即可或是相要知道 <a href="../../../%E5%89%8D%E7%AB%AF%E6%8A%80%E8%A1%93/JS/js-callback.md">Callback Function 回呼函式</a>資訊可以點進來看。<br><img src="/image/20230406_10-01-48.png"><br><img src="/image/20230406_10-02-20.png"></p>]]></content>
      
      
      <categories>
          
          <category> 後端技術 </category>
          
          <category> C# </category>
          
          <category> Line </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
            <tag> Line </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Line Notify 使用方式</title>
      <link href="/2022/10/08/%E5%BE%8C%E7%AB%AF%E6%8A%80%E8%A1%93/CS/Line/Line_07_LineNotify/"/>
      <url>/2022/10/08/%E5%BE%8C%E7%AB%AF%E6%8A%80%E8%A1%93/CS/Line/Line_07_LineNotify/</url>
      
        <content type="html"><![CDATA[<h2 id="使用NUGET"><a href="#使用NUGET" class="headerlink" title="使用NUGET"></a>使用NUGET</h2><ol><li><a href="https://www.nuget.org/packages/StartFMS.Extensions.Line">StartFMS.Extensions.Line</a></li><li><a href="https://www.nuget.org/packages/LineBotSDK">LineBotSDK</a></li><li><a href="https://www.nuget.org/packages/StartFMS.Extensions.Configuration">StartFMS.Extensions.Configuration</a></li></ol><h2 id="StartFMS-Extensions-Line"><a href="#StartFMS-Extensions-Line" class="headerlink" title="StartFMS.Extensions.Line"></a>StartFMS.Extensions.Line</h2><p>本章節使用 v1.1.1 版本，版本已經釋出 Line Login 、Line Notify 正常使用，設定格是可以參考下方json設定檔。下方範例如果有保留值表示官方提供傳值設定，無須更改。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;Line&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;Bots&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;channelToken&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;adminUserID&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span> <span class="comment">//Bots</span></span><br><span class="line">  <span class="attr">&quot;Login&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;channelToken&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;adminUserID&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;openIdConnect&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://access.line.me/oauth2/v2.1/authorize&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;response_type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;code&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;client_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span> <span class="comment">//Channel ID </span></span><br><span class="line">      <span class="attr">&quot;redirect_uri&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;state&quot;</span><span class="punctuation">:</span> <span class="string">&quot;12345abcde&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;scope&quot;</span><span class="punctuation">:</span> <span class="string">&quot;profile openid&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;nonce&quot;</span><span class="punctuation">:</span> <span class="string">&quot;09876xyz&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span> <span class="comment">//openIdConnect</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span> <span class="comment">//Login</span></span><br><span class="line">  <span class="attr">&quot;Notify&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;channelToken&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="Line-Notify"><a href="#Line-Notify" class="headerlink" title="Line Notify"></a>Line Notify</h3><p>Notify 只需要設定一個 Token 無需要取得其他資料</p><h2 id="StartFMS-Extensions-Configuration"><a href="#StartFMS-Extensions-Configuration" class="headerlink" title="StartFMS.Extensions.Configuration"></a>StartFMS.Extensions.Configuration</h2><p>本章節雖然非必要存在，後續章節會介紹到這個使用方式。如果要使用【管理使用者密碼】可以使用下方指令，最新版本為v1.0.1 可以使用，並且還支援 Azure 取得值的功能。</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//限制 net6.0 後的版本</span></span><br><span class="line"><span class="keyword">var</span> config = Config.GetConfiguration&lt;Program&gt;(); <span class="comment">//加入設定檔</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//限制 core 1.0 ~ core 5.0 的版本</span></span><br><span class="line"><span class="keyword">var</span> config = Config.GetConfiguration&lt;Startup&gt;(); <span class="comment">//加入設定檔</span></span><br></pre></td></tr></table></figure><h2 id="正篇-使用Line-Notify"><a href="#正篇-使用Line-Notify" class="headerlink" title="(正篇) 使用Line Notify"></a>(正篇) 使用Line Notify</h2><ul><li><a href="https://notify-bot.line.me/zh_TW/">Line Notify</a><br><img src="/image/20230406_10-14-15.png"></li></ul><ol><li><p>設定參數</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> lineNotify = <span class="keyword">new</span> LineNotify()</span><br><span class="line">&#123;</span><br><span class="line">    ChannelToken = config.GetValue&lt;<span class="built_in">string</span>&gt;(<span class="string">&quot;Line:Notify:channelToken&quot;</span>),</span><br><span class="line">&#125;;</span><br><span class="line">builder.Services.AddSingleton&lt;LineNotify&gt;(lineNotify);</span><br></pre></td></tr></table></figure></li><li><p>加入 Controller </p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> Microsoft.AspNetCore.Mvc;</span><br><span class="line"><span class="keyword">using</span> Newtonsoft.Json;</span><br><span class="line"><span class="keyword">using</span> StartFMS.Extensions.Line;</span><br><span class="line"><span class="keyword">using</span> StartFMS.Models.Backend;</span><br><span class="line"><span class="keyword">using</span> StartFMS.Partner.API.Helper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">StartFMS.Partner.API.Controllers</span>;</span><br><span class="line"></span><br><span class="line">[<span class="meta">ApiController</span>]</span><br><span class="line">[<span class="meta">Route(<span class="string">&quot;/api/Line/Notify/v1.0/&quot;</span>)</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">LineNotifyV1Controller</span> : <span class="title">ControllerBase</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> LineNotify _LineNotify;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LineNotifyV1Controller</span>(<span class="params">LineNotify LineNotify</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        _LineNotify = LineNotify;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    [<span class="meta">HttpGet</span>]</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">string</span> <span class="title">SendMessage</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        _LineNotify.Send(<span class="string">$&quot;發送訊息時間 : <span class="subst">&#123;DateTime.Now&#125;</span>&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> JsonConvert.SerializeObject(<span class="keyword">new</span></span><br><span class="line">        &#123;</span><br><span class="line">            Success = <span class="literal">true</span>,</span><br><span class="line">            Message = <span class="string">&quot;&quot;</span></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> 後端技術 </category>
          
          <category> C# </category>
          
          <category> Line </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
            <tag> Line </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker Desktop - 解決 &quot;Hardware assisted virtualization and data execution protection must be enabled in the BIOS&quot;</title>
      <link href="/2022/10/06/DevOps/Docker/Docker_%E8%A7%A3%E6%B1%BABios%E8%99%9B%E6%93%AC%E5%8C%96/"/>
      <url>/2022/10/06/DevOps/Docker/Docker_%E8%A7%A3%E6%B1%BABios%E8%99%9B%E6%93%AC%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<p>為了再次學習之前學一半的Docker ，重新再次安裝 Docker Desktop 。安狀完成以為可以正常使用，發生 “Hardware assisted virtualization and data execution protection must be enabled in the BIOS” 錯誤訊息，急忙地排除這問題。<br><img src="/img/Docker/Snipaste_2022-10-06_21-40-59.png"></p><h2 id="問題排除一、指令方式排除"><a href="#問題排除一、指令方式排除" class="headerlink" title="問題排除一、指令方式排除"></a>問題排除一、指令方式排除</h2><p>來源 <a href="https://stackoverflow.com/questions/39684974/docker-for-windows-error-hardware-assisted-virtualization-and-data-execution-p">Stock Overflow</a></p><p>第一次使用安裝使用，先馬上看有沒有要開啟項目。從下方指令明顯看到對象是Hyper-V，看來只要針對這個項目開放因該可以成功。</p><p>一、<strong>SOLUTION A</strong> (If Hyper-V is totally disabled or not installed)</p><ol><li>Open PowerShell as administrator and</li><li>Enable Hyper-V with</li></ol><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dism.exe /Online /Enable-Feature:Microsoft-Hyper-V /All</span><br></pre></td></tr></table></figure><p>二、<strong>SOLUTION B</strong> (If Hyper-V feature is already enabled but doesn’t work)</p><ol><li>Enable Hypervisor with<figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bcdedit /<span class="built_in">set</span> hypervisorlaunchtype auto</span><br></pre></td></tr></table></figure><img src="/img/Docker/Snipaste_2022-10-06_21-43-21.png"></li></ol><p>以上方式結果一樣卻沒辦法成功開啟，看似是透過其他方式開啟，因此，嘗試用其他方式解決。</p><h2 id="問題排除二、BIOS-開啟虛擬化-CPU-MOD"><a href="#問題排除二、BIOS-開啟虛擬化-CPU-MOD" class="headerlink" title="問題排除二、BIOS 開啟虛擬化(CPU MOD)"></a>問題排除二、BIOS 開啟虛擬化(CPU MOD)</h2><p>檢查方式 : 開啟工作管理員 &gt; 效能 &gt; 模擬。</p><p>底下會有 “模擬: 關閉”，看似是這個搞的鬼。這時候需要透過BIOS方式打開，進入Advanced Mode &gt; 開啟 (SVM) 即可。<br><img src="/img/Docker/Snipaste_2022-10-06_22-11-35.png"></p><p>備註 : Intel 虛擬化功能名稱會不相同 (Virtualization Technology)。</p><p>重新開機後，從工作管理員可見已經開啟，Docker Desktop 順利開起來<br>結束這怪問題。<br><img src="/img/Docker/Snipaste_2022-10-06_22-40-03.png"><br><img src="/img/Docker/Snipaste_2022-10-06_22-40-10.png"></p><p>這幾周稍微摸摸如何使用Docker，努力推進 DevOps 工具之一。</p>]]></content>
      
      
      <categories>
          
          <category> DevOps </category>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(筆記) Winform - FolderBrowserDialog 轉換成 OpenFileDialog樣式</title>
      <link href="/2022/10/02/%E5%BE%8C%E7%AB%AF%E6%8A%80%E8%A1%93/CS/NetFramework/NF_08_FolderBrowserDialog/"/>
      <url>/2022/10/02/%E5%BE%8C%E7%AB%AF%E6%8A%80%E8%A1%93/CS/NetFramework/NF_08_FolderBrowserDialog/</url>
      
        <content type="html"><![CDATA[<h2 id="Winform-FolderBrowserDialog"><a href="#Winform-FolderBrowserDialog" class="headerlink" title="Winform FolderBrowserDialog"></a>Winform FolderBrowserDialog</h2><p>Winform 開發 FolderBrowserDialog 為預設畫面。FolderBrowserDialog主要是尋找檔案、畫面上不怎麼好用，用IFileOpenDialog接口實現類OpenFileDialog樣式。<br><img src="/img/dotnet/cs/winform/20221002_22-41-27.png"></p><h3 id="程式碼"><a href="#程式碼" class="headerlink" title="程式碼"></a>程式碼</h3><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">region</span> Editor</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> FolderBrowser 的设计器基类</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">FolderNameEditor</span> : <span class="title">UITypeEditor</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> UITypeEditorEditStyle <span class="title">GetEditStyle</span>(<span class="params">ITypeDescriptorContext context</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> UITypeEditorEditStyle.Modal;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">object</span> <span class="title">EditValue</span>(<span class="params">ITypeDescriptorContext context, IServiceProvider provider, <span class="built_in">object</span> <span class="keyword">value</span></span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        FolderBrowserDialog browser = <span class="keyword">new</span> FolderBrowserDialog();</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">value</span> != <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            browser.DirectoryPath = <span class="built_in">string</span>.Format(<span class="string">&quot;&#123;0&#125;&quot;</span>, <span class="keyword">value</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (browser.ShowDialog(<span class="literal">null</span>) == DialogResult.OK)</span><br><span class="line">            <span class="keyword">return</span> browser.DirectoryPath;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">value</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">endregion</span></span></span><br></pre></td></tr></table></figure><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">region</span> FolderBrowserDialog Base</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> Vista 樣式的選擇文件對話框的基類</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    [<span class="meta">Description(<span class="string">&quot;提供一個Vista樣式的選擇文件對話框&quot;</span>)</span>]</span><br><span class="line">    [<span class="meta">Editor(typeof(FolderNameEditor), typeof(UITypeEditor))</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">FolderBrowserDialog</span> : <span class="title">Component</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 初始化 FolderBrowser 的新實例</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">FolderBrowserDialog</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">#<span class="keyword">region</span> Public Property</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 獲取在 FolderBrowser 中選擇的文件夾路徑</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span> DirectoryPath &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 向用戶顯示 FolderBrowser 的對話框</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;owner&quot;&gt;</span>任何實現 System.Windows.Forms.IWin32Window（表示將擁有模式對話框的頂級窗口）的對象。<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> DialogResult <span class="title">ShowDialog</span>(<span class="params">IWin32Window owner</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            IntPtr hwndOwner = owner != <span class="literal">null</span> ? owner.Handle : GetActiveWindow();</span><br><span class="line">            IFileOpenDialog dialog = (IFileOpenDialog)<span class="keyword">new</span> FileOpenDialog();</span><br><span class="line">            <span class="keyword">try</span></span><br><span class="line">            &#123;</span><br><span class="line">                IShellItem item;</span><br><span class="line">                <span class="keyword">if</span> (!<span class="built_in">string</span>.IsNullOrEmpty(DirectoryPath))</span><br><span class="line">                &#123;</span><br><span class="line">                    IntPtr idl;</span><br><span class="line">                    <span class="built_in">uint</span> atts = <span class="number">0</span>;</span><br><span class="line">                    <span class="keyword">if</span> (SHILCreateFromPath(DirectoryPath, <span class="keyword">out</span> idl, <span class="keyword">ref</span> atts) == <span class="number">0</span>)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">if</span> (SHCreateShellItem(IntPtr.Zero, IntPtr.Zero, idl, <span class="keyword">out</span> item) == <span class="number">0</span>)</span><br><span class="line">                        &#123;</span><br><span class="line">                            dialog.SetFolder(item);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                dialog.SetOptions(FOS.FOS_PICKFOLDERS | FOS.FOS_FORCEFILESYSTEM);</span><br><span class="line">                <span class="built_in">uint</span> hr = dialog.Show(hwndOwner);</span><br><span class="line">                <span class="keyword">if</span> (hr == ERROR_CANCELLED)</span><br><span class="line">                    <span class="keyword">return</span> DialogResult.Cancel;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (hr != <span class="number">0</span>)</span><br><span class="line">                    <span class="keyword">return</span> DialogResult.Abort;</span><br><span class="line">                dialog.GetResult(<span class="keyword">out</span> item);</span><br><span class="line">                <span class="built_in">string</span> path;</span><br><span class="line">                item.GetDisplayName(SIGDN.SIGDN_FILESYSPATH, <span class="keyword">out</span> path);</span><br><span class="line">                DirectoryPath = path;</span><br><span class="line">                <span class="keyword">return</span> DialogResult.OK;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">finally</span></span><br><span class="line">            &#123;</span><br><span class="line">                Marshal.ReleaseComObject(dialog);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="meta">#<span class="keyword">endregion</span></span></span><br><span class="line"></span><br><span class="line">        <span class="meta">#<span class="keyword">region</span> BaseType</span></span><br><span class="line">        [<span class="meta">DllImport(<span class="string">&quot;shell32.dll&quot;</span>)</span>]</span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">extern</span> <span class="built_in">int</span> <span class="title">SHILCreateFromPath</span>(<span class="params">[MarshalAs(UnmanagedType.LPWStr</span>)] <span class="built_in">string</span> pszPath, <span class="keyword">out</span> IntPtr ppIdl, <span class="keyword">ref</span> <span class="built_in">uint</span> rgflnOut)</span>;</span><br><span class="line">        [<span class="meta">DllImport(<span class="string">&quot;shell32.dll&quot;</span>)</span>]</span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">extern</span> <span class="built_in">int</span> <span class="title">SHCreateShellItem</span>(<span class="params">IntPtr pidlParent, IntPtr psfParent, IntPtr pidl, <span class="keyword">out</span> IShellItem ppsi</span>)</span>;</span><br><span class="line">        [<span class="meta">DllImport(<span class="string">&quot;user32.dll&quot;</span>)</span>]</span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">extern</span> IntPtr <span class="title">GetActiveWindow</span>()</span>;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">const</span> <span class="built_in">uint</span> ERROR_CANCELLED = <span class="number">0x800704C7</span>;</span><br><span class="line">        [<span class="meta">ComImport</span>]</span><br><span class="line">        [<span class="meta">Guid(<span class="string">&quot;DC1C5A9C-E88A-4dde-A5A1-60F82A20AEF7&quot;</span>)</span>]</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">class</span> <span class="title">FileOpenDialog</span></span><br><span class="line">        &#123;</span><br><span class="line">        &#125;</span><br><span class="line">        [<span class="meta">ComImport</span>]</span><br><span class="line">        [<span class="meta">Guid(<span class="string">&quot;42f85136-db7e-439c-85f1-e4075d135fc8&quot;</span>)</span>]</span><br><span class="line">        [<span class="meta">InterfaceType(ComInterfaceType.InterfaceIsIUnknown)</span>]</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">interface</span> <span class="title">IFileOpenDialog</span></span><br><span class="line">        &#123;</span><br><span class="line">            [<span class="meta">PreserveSig</span>]</span><br><span class="line">            <span class="function"><span class="built_in">uint</span> <span class="title">Show</span>(<span class="params">[In] IntPtr parent</span>)</span>; <span class="comment">// IModalWindow</span></span><br><span class="line">            <span class="function"><span class="keyword">void</span> <span class="title">SetFileTypes</span>()</span>;  <span class="comment">// not fully defined</span></span><br><span class="line">            <span class="function"><span class="keyword">void</span> <span class="title">SetFileTypeIndex</span>(<span class="params">[In] <span class="built_in">uint</span> iFileType</span>)</span>;</span><br><span class="line">            <span class="function"><span class="keyword">void</span> <span class="title">GetFileTypeIndex</span>(<span class="params"><span class="keyword">out</span> <span class="built_in">uint</span> piFileType</span>)</span>;</span><br><span class="line">            <span class="function"><span class="keyword">void</span> <span class="title">Advise</span>()</span>; <span class="comment">// not fully defined</span></span><br><span class="line">            <span class="function"><span class="keyword">void</span> <span class="title">Unadvise</span>()</span>;</span><br><span class="line">            <span class="function"><span class="keyword">void</span> <span class="title">SetOptions</span>(<span class="params">[In] FOS fos</span>)</span>;</span><br><span class="line">            <span class="function"><span class="keyword">void</span> <span class="title">GetOptions</span>(<span class="params"><span class="keyword">out</span> FOS pfos</span>)</span>;</span><br><span class="line">            <span class="function"><span class="keyword">void</span> <span class="title">SetDefaultFolder</span>(<span class="params">IShellItem psi</span>)</span>;</span><br><span class="line">            <span class="function"><span class="keyword">void</span> <span class="title">SetFolder</span>(<span class="params">IShellItem psi</span>)</span>;</span><br><span class="line">            <span class="function"><span class="keyword">void</span> <span class="title">GetFolder</span>(<span class="params"><span class="keyword">out</span> IShellItem ppsi</span>)</span>;</span><br><span class="line">            <span class="function"><span class="keyword">void</span> <span class="title">GetCurrentSelection</span>(<span class="params"><span class="keyword">out</span> IShellItem ppsi</span>)</span>;</span><br><span class="line">            <span class="function"><span class="keyword">void</span> <span class="title">SetFileName</span>(<span class="params">[In, MarshalAs(UnmanagedType.LPWStr</span>)] <span class="built_in">string</span> pszName)</span>;</span><br><span class="line">            <span class="function"><span class="keyword">void</span> <span class="title">GetFileName</span>(<span class="params">[MarshalAs(UnmanagedType.LPWStr</span>)] <span class="keyword">out</span> <span class="built_in">string</span> pszName)</span>;</span><br><span class="line">            <span class="function"><span class="keyword">void</span> <span class="title">SetTitle</span>(<span class="params">[In, MarshalAs(UnmanagedType.LPWStr</span>)] <span class="built_in">string</span> pszTitle)</span>;</span><br><span class="line">            <span class="function"><span class="keyword">void</span> <span class="title">SetOkButtonLabel</span>(<span class="params">[In, MarshalAs(UnmanagedType.LPWStr</span>)] <span class="built_in">string</span> pszText)</span>;</span><br><span class="line">            <span class="function"><span class="keyword">void</span> <span class="title">SetFileNameLabel</span>(<span class="params">[In, MarshalAs(UnmanagedType.LPWStr</span>)] <span class="built_in">string</span> pszLabel)</span>;</span><br><span class="line">            <span class="function"><span class="keyword">void</span> <span class="title">GetResult</span>(<span class="params"><span class="keyword">out</span> IShellItem ppsi</span>)</span>;</span><br><span class="line">            <span class="function"><span class="keyword">void</span> <span class="title">AddPlace</span>(<span class="params">IShellItem psi, <span class="built_in">int</span> alignment</span>)</span>;</span><br><span class="line">            <span class="function"><span class="keyword">void</span> <span class="title">SetDefaultExtension</span>(<span class="params">[In, MarshalAs(UnmanagedType.LPWStr</span>)] <span class="built_in">string</span> pszDefaultExtension)</span>;</span><br><span class="line">            <span class="function"><span class="keyword">void</span> <span class="title">Close</span>(<span class="params"><span class="built_in">int</span> hr</span>)</span>;</span><br><span class="line">            <span class="function"><span class="keyword">void</span> <span class="title">SetClientGuid</span>()</span>;  <span class="comment">// not fully defined</span></span><br><span class="line">            <span class="function"><span class="keyword">void</span> <span class="title">ClearClientData</span>()</span>;</span><br><span class="line">            <span class="function"><span class="keyword">void</span> <span class="title">SetFilter</span>(<span class="params">[MarshalAs(UnmanagedType.Interface</span>)] IntPtr pFilter)</span>;</span><br><span class="line">            <span class="function"><span class="keyword">void</span> <span class="title">GetResults</span>(<span class="params">[MarshalAs(UnmanagedType.Interface</span>)] <span class="keyword">out</span> IntPtr ppenum)</span>; <span class="comment">// not fully defined</span></span><br><span class="line">            <span class="function"><span class="keyword">void</span> <span class="title">GetSelectedItems</span>(<span class="params">[MarshalAs(UnmanagedType.Interface</span>)] <span class="keyword">out</span> IntPtr ppsai)</span>; <span class="comment">// not fully defined</span></span><br><span class="line">        &#125;</span><br><span class="line">        [<span class="meta">ComImport</span>]</span><br><span class="line">        [<span class="meta">Guid(<span class="string">&quot;43826D1E-E718-42EE-BC55-A1E261C37BFE&quot;</span>)</span>]</span><br><span class="line">        [<span class="meta">InterfaceType(ComInterfaceType.InterfaceIsIUnknown)</span>]</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">interface</span> <span class="title">IShellItem</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="function"><span class="keyword">void</span> <span class="title">BindToHandler</span>()</span>; <span class="comment">// not fully defined</span></span><br><span class="line">            <span class="function"><span class="keyword">void</span> <span class="title">GetParent</span>()</span>; <span class="comment">// not fully defined</span></span><br><span class="line">            <span class="function"><span class="keyword">void</span> <span class="title">GetDisplayName</span>(<span class="params">[In] SIGDN sigdnName, [MarshalAs(UnmanagedType.LPWStr</span>)] <span class="keyword">out</span> <span class="built_in">string</span> ppszName)</span>;</span><br><span class="line">            <span class="function"><span class="keyword">void</span> <span class="title">GetAttributes</span>()</span>;  <span class="comment">// not fully defined</span></span><br><span class="line">            <span class="function"><span class="keyword">void</span> <span class="title">Compare</span>()</span>;  <span class="comment">// not fully defined</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">private</span> <span class="built_in">enum</span> SIGDN : <span class="built_in">uint</span></span><br><span class="line">        &#123;</span><br><span class="line">            SIGDN_DESKTOPABSOLUTEEDITING = <span class="number">0x8004c000</span>,</span><br><span class="line">            SIGDN_DESKTOPABSOLUTEPARSING = <span class="number">0x80028000</span>,</span><br><span class="line">            SIGDN_FILESYSPATH = <span class="number">0x80058000</span>,</span><br><span class="line">            SIGDN_NORMALDISPLAY = <span class="number">0</span>,</span><br><span class="line">            SIGDN_PARENTRELATIVE = <span class="number">0x80080001</span>,</span><br><span class="line">            SIGDN_PARENTRELATIVEEDITING = <span class="number">0x80031001</span>,</span><br><span class="line">            SIGDN_PARENTRELATIVEFORADDRESSBAR = <span class="number">0x8007c001</span>,</span><br><span class="line">            SIGDN_PARENTRELATIVEPARSING = <span class="number">0x80018001</span>,</span><br><span class="line">            SIGDN_URL = <span class="number">0x80068000</span></span><br><span class="line">        &#125;</span><br><span class="line">        [<span class="meta">Flags</span>]</span><br><span class="line">        <span class="keyword">private</span> <span class="built_in">enum</span> FOS</span><br><span class="line">        &#123;</span><br><span class="line">            FOS_ALLNONSTORAGEITEMS = <span class="number">0x80</span>,</span><br><span class="line">            FOS_ALLOWMULTISELECT = <span class="number">0x200</span>,</span><br><span class="line">            FOS_CREATEPROMPT = <span class="number">0x2000</span>,</span><br><span class="line">            FOS_DEFAULTNOMINIMODE = <span class="number">0x20000000</span>,</span><br><span class="line">            FOS_DONTADDTORECENT = <span class="number">0x2000000</span>,</span><br><span class="line">            FOS_FILEMUSTEXIST = <span class="number">0x1000</span>,</span><br><span class="line">            FOS_FORCEFILESYSTEM = <span class="number">0x40</span>,</span><br><span class="line">            FOS_FORCESHOWHIDDEN = <span class="number">0x10000000</span>,</span><br><span class="line">            FOS_HIDEMRUPLACES = <span class="number">0x20000</span>,</span><br><span class="line">            FOS_HIDEPINNEDPLACES = <span class="number">0x40000</span>,</span><br><span class="line">            FOS_NOCHANGEDIR = <span class="number">8</span>,</span><br><span class="line">            FOS_NODEREFERENCELINKS = <span class="number">0x100000</span>,</span><br><span class="line">            FOS_NOREADONLYRETURN = <span class="number">0x8000</span>,</span><br><span class="line">            FOS_NOTESTFILECREATE = <span class="number">0x10000</span>,</span><br><span class="line">            FOS_NOVALIDATE = <span class="number">0x100</span>,</span><br><span class="line">            FOS_OVERWRITEPROMPT = <span class="number">2</span>,</span><br><span class="line">            FOS_PATHMUSTEXIST = <span class="number">0x800</span>,</span><br><span class="line">            FOS_PICKFOLDERS = <span class="number">0x20</span>,</span><br><span class="line">            FOS_SHAREAWARE = <span class="number">0x4000</span>,</span><br><span class="line">            FOS_STRICTFILETYPES = <span class="number">4</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="meta">#<span class="keyword">endregion</span></span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">#<span class="keyword">endregion</span></span></span><br></pre></td></tr></table></figure><h2 id="參考文件"><a href="#參考文件" class="headerlink" title="參考文件"></a>參考文件</h2><ul><li><a href="https://www.twblogs.net/a/5b8058462b71772165a716f4">類似OpenFileDialog樣式的FolderBrowserDialog</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 後端技術 </category>
          
          <category> C# </category>
          
          <category> Winform </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
            <tag> Net FrameWork </tag>
            
            <tag> Winform </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Net Framework 升級至 Net 7 、Net 6 (.NET Upgrade Assistant)</title>
      <link href="/2022/10/02/%E5%BE%8C%E7%AB%AF%E6%8A%80%E8%A1%93/CS/NetFramework/NF_09_.Net%E5%8D%87%E7%B4%9A%E5%B0%8F%E5%B9%AB%E6%89%8B/"/>
      <url>/2022/10/02/%E5%BE%8C%E7%AB%AF%E6%8A%80%E8%A1%93/CS/NetFramework/NF_09_.Net%E5%8D%87%E7%B4%9A%E5%B0%8F%E5%B9%AB%E6%89%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Net FrameWork 轉換成  Net Core 主要幾個原因</p><ol><li>跨平台 </li><li>雲平台使用費用</li><li>長期支援</li></ol><p>介於之前公司提倡需要把系統改為Net Core ，這篇用簡單範例使用。</p><h1 id="NET-升級小幫手-NET-Upgrade-Assistant"><a href="#NET-升級小幫手-NET-Upgrade-Assistant" class="headerlink" title=".NET 升級小幫手 (.NET Upgrade Assistant)"></a>.NET 升級小幫手 (.NET Upgrade Assistant)</h1><p>過去開發者會使用 使用Upgrade Assistant CLI工具或是Microsoft Project Migrations進行更新，於之後用簡單指令就可以達成 .Net 6、7 更新。</p><h2 id="安裝"><a href="#安裝" class="headerlink" title="安裝"></a>安裝</h2><h3 id="需要準備"><a href="#需要準備" class="headerlink" title="需要準備"></a>需要準備</h3><ul><li>.NET 6 SDK &#x2F; .NET 7 SDK (擇一)</li><li>Visual Studio 2022 17.0 版之後版本</li></ul><h3 id="安裝-1"><a href="#安裝-1" class="headerlink" title="安裝"></a>安裝</h3><p>(1) 安裝</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">## 命令全域安裝的 .<span class="built_in">NET</span> 工具</span><br><span class="line">dotnet tool install -g upgrade-assistant</span><br></pre></td></tr></table></figure><p>(2) 更新 </p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dotnet tool update -g upgrade-assistant</span><br></pre></td></tr></table></figure><h2 id="3-將這些失敗視為警告，而不是錯誤訊息"><a href="#3-將這些失敗視為警告，而不是錯誤訊息" class="headerlink" title="(3) 將這些失敗視為警告，而不是錯誤訊息"></a>(3) 將這些失敗視為警告，而不是錯誤訊息<br><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dotnet tool install -g --ignore-failed-sources upgrade-assistant</span><br></pre></td></tr></table></figure></h2><h1 id="使用-ASP-NET-MVC5"><a href="#使用-ASP-NET-MVC5" class="headerlink" title="使用 ASP NET MVC5"></a>使用 ASP NET MVC5</h1><h2 id="創建專案"><a href="#創建專案" class="headerlink" title="創建專案"></a>創建專案</h2><p><img src="/image/20230303_13-04-28.png"><br><img src="/image/20230303_13-04-34.png"></p><h2 id="執行-NET-升級小幫手"><a href="#執行-NET-升級小幫手" class="headerlink" title="執行 .NET 升級小幫手"></a>執行 .NET 升級小幫手</h2><p><img src="/image/20230303_13-05-41.png"><br><img src="/image/20230303_13-06-41.png"></p><p>指令內容請參考 【<a href="https://learn.microsoft.com/zh-tw/dotnet/core/porting/upgrade-assistant-aspnetmvc">使用 .NET 升級小幫手將 ASP.NET MVC 應用程式升級至 .NET 6</a>】。</p><p>若直接按下 Enter 自動帶入第一個選項。<br><img src="/image/20230303_13-06-59.png"><br><img src="/image/20230303_13-07-21.png"><br><img src="/image/20230303_13-10-00.png"></p><h2 id="執行-dotnet-core"><a href="#執行-dotnet-core" class="headerlink" title="執行 dotnet core"></a>執行 dotnet core</h2><h3 id="前置作業"><a href="#前置作業" class="headerlink" title="前置作業"></a>前置作業</h3><ol><li>前面需要先刪除 <code>App_Start</code> 、<code>Global.asax</code> 、<code>Global.asax.cs</code><br><img src="/image/20230303_13-11-48.png"> </li><li>創建 wwwroow 資料夾，將 css、js、image等放進 wwwroot 資料夾裡面<br><img src="/image/20230303_13-23-54.png"></li><li>使用 .csproj 或是 .sln 進入專案</li></ol><h3 id="建置"><a href="#建置" class="headerlink" title="建置"></a>建置</h3><p>建置時候會發生錯誤，因為Net Core 是不支援 BundleConfig.cs ，所以把全部改為 <code>&lt;script&gt;</code>、<code>&lt;link&gt;</code> 這邊動作就會比較麻煩。<br><img src="/image/20230303_13-27-05.png"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@Scripts.Render(&quot;~/bundles/jquery&quot;)</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> <span class="attr">src</span>=<span class="string">&quot;~/Scripts/jquery-3.4.1.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@Styles.Render(&quot;~/Content/css&quot;)</span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;~/Content/Site.css&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><h3 id="完成"><a href="#完成" class="headerlink" title="完成"></a>完成</h3><p><img src="/image/20230303_13-49-27.png"></p><hr><h2 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h2><p>Net Framework 如果有一定的規模是很難修繕這段，因為初使Net Framework 相對比較少錯誤訊息。若要整個大型專案拆出會需要考量到工時問題。.NET 升級小幫手最大優點是，可以不用怕專案直接被覆蓋掉找不到還原檔案以及檔案轉換速度。</p><h2 id="文件參考"><a href="#文件參考" class="headerlink" title="文件參考"></a>文件參考</h2><ol><li><a href="https://learn.microsoft.com/zh-tw/dotnet/core/porting/upgrade-assistant-aspnetmvc">使用 .NET 升級小幫手將 ASP.NET MVC 應用程式升級至 .NET 6</a></li><li><a href="https://hackmd.io/@Not/dotnet4to6#%E4%B8%8D%E8%83%BD%E4%BD%BF%E7%94%A8-Styles-%E5%92%8C-Scripts">dotnet framework 4 升級到 6 要改的東西</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 後端技術 </category>
          
          <category> C# </category>
          
          <category> Winform </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
            <tag> Net FrameWork </tag>
            
            <tag> Winform </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Line Bots (三) - 使用C# Reply Message</title>
      <link href="/2022/09/09/%E5%BE%8C%E7%AB%AF%E6%8A%80%E8%A1%93/CS/Line/Line_03_ReplyMessage/"/>
      <url>/2022/09/09/%E5%BE%8C%E7%AB%AF%E6%8A%80%E8%A1%93/CS/Line/Line_03_ReplyMessage/</url>
      
        <content type="html"><![CDATA[<p>上一篇完成簡易版本的Push Message ，這邊要稍微注意一下使用量。Line 提供兩種模式給Message API使用 “Push”、”Reply”兩種模式，其中Push用來推廣方案銷售，所以次數限量上會限縮在500則，超過後需要付費才能使用。</p><p>Reply 目前使用上沒有任何限制，所以使用上可以不必要特別拘謹。</p><h2 id="前置作業、工具"><a href="#前置作業、工具" class="headerlink" title="前置作業、工具"></a>前置作業、工具</h2><p>處理步驟需要修改 <code>launchSetting.json</code> url ，並執行ngrok、<code>dotnet run</code>就可以使用。 </p><ul><li>launchSetting.json</li><li>ngrok </li><li>後端技術 run</li></ul><div class="note info flat"><h3 id="備註"><a href="#備註" class="headerlink" title="備註"></a>備註</h3><p>ngrok 只要不中途離開，即使當下”網頁失效” ngrok 是會繼續執行。</p></div><h3 id="程式碼範例"><a href="#程式碼範例" class="headerlink" title="程式碼範例"></a>程式碼範例</h3><ul><li>Github <a href="https://github.com/JontCont/dotnetCore_LineBot">dotnetCore_LineBot</a></li></ul><h2 id="Reply-Message-1-2"><a href="#Reply-Message-1-2" class="headerlink" title="Reply Message - 1&#x2F;2"></a>Reply Message - 1&#x2F;2</h2><p>Line Reply 需要使用者回覆訊息，Bots 部分會選擇適當回覆內容回覆給對方。當中 Reply 可以判別對方發的訊息是 Message 、Images 、貼圖 ，Json 回覆部分後續再探討。</p><p>完成Line Bots Reply Message 前置作業，需要完成三步驟。</p><h3 id="一、取得-JSON-Body"><a href="#一、取得-JSON-Body" class="headerlink" title="一、取得 JSON Body"></a>一、取得 JSON Body</h3><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">string</span> strBody = <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    <span class="comment">//取得 http Post </span></span><br><span class="line">    <span class="keyword">using</span> (StreamReader reader = <span class="keyword">new</span>(Request.Body, System.Text.Encoding.UTF8))</span><br><span class="line">    &#123;</span><br><span class="line">        strBody = reader.ReadToEndAsync().Result;</span><br><span class="line">        <span class="keyword">if</span> (reader == <span class="literal">null</span> || <span class="built_in">string</span>.IsNullOrEmpty(strBody))</span><br><span class="line">            <span class="keyword">return</span> JsonConvert.SerializeObject(<span class="keyword">new</span> &#123; success = <span class="literal">false</span>, message = <span class="string">&quot;error : message empty &quot;</span> &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">catch</span>(Exception ex)&#123;</span><br><span class="line">    bot.PushMessage(adminUserID, ex.Message);</span><br><span class="line">    <span class="keyword">return</span> JsonConvert.SerializeObject(<span class="keyword">new</span> &#123; success = <span class="literal">false</span>, message = ex.Message &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二、轉-JSON-Data"><a href="#二、轉-JSON-Data" class="headerlink" title="二、轉 JSON Data"></a>二、轉 JSON Data</h3><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//RawData(should be JSON)</span></span><br><span class="line"><span class="keyword">var</span> ReceivedMessage = Utility.Parsing(strBody);</span><br><span class="line"><span class="keyword">if</span> (ReceivedMessage == <span class="literal">null</span>) <span class="keyword">return</span> JsonConvert.SerializeObject(<span class="keyword">new</span> &#123; success = <span class="literal">false</span>, message = <span class="string">&quot;error : message empty &quot;</span> &#125;);</span><br></pre></td></tr></table></figure><h3 id="三、取得Line-Event"><a href="#三、取得Line-Event" class="headerlink" title="三、取得Line Event"></a>三、取得Line Event</h3><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> LineEvent = ReceivedMessage.events.FirstOrDefault();</span><br><span class="line"><span class="keyword">if</span> (LineEvent == <span class="literal">null</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> JsonConvert.SerializeObject(<span class="keyword">new</span> &#123; success = <span class="literal">false</span>, message = <span class="string">&quot;error : not found event ! &quot;</span> &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="Reply-Message-2-2"><a href="#Reply-Message-2-2" class="headerlink" title="Reply Message - 2&#x2F;2"></a>Reply Message - 2&#x2F;2</h2><p>完成以上作業後，我的處理方式是把Event拆開，Line 有提供 Event 可以取得狀態。以下處理方式只有加入Join 以及message。</p><div class="note info flat"><h3 id="備註"><a href="#備註" class="headerlink" title="備註"></a>備註</h3><p>如果使用這使用 images 貼上圖片，會直接執行到 message 。處理Line Event 方式需要留意一下</p></div><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ReplyBotsMessage</span>(<span class="params">Bot bot,Event lineEvent</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    TextMessage textMessage = <span class="keyword">new</span> (<span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">switch</span> (lineEvent.type)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;join&quot;</span>:</span><br><span class="line">            textMessage = <span class="keyword">new</span> TextMessage(<span class="string">$&quot;大家好啊~&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;message&quot;</span>:</span><br><span class="line">            <span class="built_in">string</span> text = lineEvent.message.text;</span><br><span class="line">            <span class="keyword">if</span> (text == <span class="literal">null</span>) <span class="keyword">break</span>;</span><br><span class="line">            textMessage =  <span class="keyword">new</span> TextMessage(<span class="string">$&quot;您回應是 : <span class="subst">&#123;text&#125;</span>&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">string</span>.IsNullOrEmpty(textMessage.text))&#123;</span><br><span class="line">        textMessage = <span class="keyword">new</span> (<span class="string">$&quot;你回覆的訊息無法判讀，請重新輸入!!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    bot.ReplyMessage(lineEvent.replyToken, textMessage);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="完整程式碼"><a href="#完整程式碼" class="headerlink" title="完整程式碼"></a>完整程式碼</h3><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> isRock.LineBot;</span><br><span class="line"><span class="keyword">using</span> Microsoft.AspNetCore.Mvc;</span><br><span class="line"><span class="keyword">using</span> Newtonsoft.Json;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">dotnetCore_LineBot.Controllers</span></span><br><span class="line">&#123;</span><br><span class="line">    [<span class="meta">ApiController</span>]</span><br><span class="line">    [<span class="meta">Route(<span class="string">&quot;[controller]&quot;</span>)</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MessageController</span>: <span class="title">ControllerBase</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span> channelToken&#123;<span class="keyword">get</span>; <span class="keyword">private</span> <span class="keyword">set</span>;&#125;=<span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span> adminUserID&#123;<span class="keyword">get</span>; <span class="keyword">private</span> <span class="keyword">set</span>;&#125;=<span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">        [<span class="meta">HttpPost</span>]</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="built_in">string</span> <span class="title">Post</span>()</span>&#123;</span><br><span class="line">            Bot bot = InitialBots();</span><br><span class="line">            List&lt;MessageBase&gt; repMessage = <span class="keyword">new</span> List&lt;MessageBase&gt;();</span><br><span class="line">            <span class="built_in">string</span> strBody = <span class="string">&quot;&quot;</span>;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">try</span>&#123;</span><br><span class="line">                <span class="comment">//取得 http Post </span></span><br><span class="line">                <span class="keyword">using</span> (StreamReader reader = <span class="keyword">new</span>(Request.Body, System.Text.Encoding.UTF8))</span><br><span class="line">                &#123;</span><br><span class="line">                    strBody = reader.ReadToEndAsync().Result;</span><br><span class="line">                    <span class="keyword">if</span> (reader == <span class="literal">null</span> || <span class="built_in">string</span>.IsNullOrEmpty(strBody))</span><br><span class="line">                        <span class="keyword">return</span> JsonConvert.SerializeObject(<span class="keyword">new</span> &#123; success = <span class="literal">false</span>, message = <span class="string">&quot;error : message empty &quot;</span> &#125;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">catch</span>(Exception ex)&#123;</span><br><span class="line">                bot.PushMessage(adminUserID, ex.Message);</span><br><span class="line">                <span class="keyword">return</span> JsonConvert.SerializeObject(<span class="keyword">new</span> &#123; success = <span class="literal">false</span>, message = ex.Message &#125;);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//RawData(should be JSON)</span></span><br><span class="line">            <span class="keyword">var</span> ReceivedMessage = Utility.Parsing(strBody);</span><br><span class="line">            <span class="keyword">if</span> (ReceivedMessage == <span class="literal">null</span>) <span class="keyword">return</span> JsonConvert.SerializeObject(<span class="keyword">new</span> &#123; success = <span class="literal">false</span>, message = <span class="string">&quot;error : message empty &quot;</span> &#125;);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> LineEvent = ReceivedMessage.events.FirstOrDefault();</span><br><span class="line">            <span class="keyword">if</span> (LineEvent == <span class="literal">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> JsonConvert.SerializeObject(<span class="keyword">new</span> &#123; success = <span class="literal">false</span>, message = <span class="string">&quot;error : not found event ! &quot;</span> &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">            ReplyBotsMessage(bot,LineEvent);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> JsonConvert.SerializeObject(<span class="keyword">new</span> &#123; success = <span class="literal">true</span>, message = <span class="string">&quot;&quot;</span> &#125;);</span><br><span class="line">        &#125;<span class="comment">//public : Post</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//-------------------------//</span></span><br><span class="line">        <span class="function"><span class="keyword">private</span> Bot <span class="title">InitialBots</span>()</span>&#123;</span><br><span class="line">            <span class="built_in">string</span> channelToken = <span class="keyword">this</span>.channelToken;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Bot(channelToken);</span><br><span class="line">        &#125;<span class="comment">//private: InitialBots</span></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ReplyBotsMessage</span>(<span class="params">Bot bot,Event lineEvent</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            TextMessage textMessage = <span class="keyword">new</span> (<span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">switch</span> (lineEvent.type)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;join&quot;</span>:</span><br><span class="line">                    textMessage = <span class="keyword">new</span> TextMessage(<span class="string">$&quot;大家好啊~&quot;</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;message&quot;</span>:</span><br><span class="line">                    <span class="built_in">string</span> text = lineEvent.message.text;</span><br><span class="line">                    <span class="keyword">if</span> (text == <span class="literal">null</span>) <span class="keyword">break</span>;</span><br><span class="line">                    textMessage =  <span class="keyword">new</span> TextMessage(<span class="string">$&quot;您回應是 : <span class="subst">&#123;text&#125;</span>&quot;</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">string</span>.IsNullOrEmpty(textMessage.text))&#123;</span><br><span class="line">                textMessage = <span class="keyword">new</span> (<span class="string">$&quot;你回覆的訊息無法判讀，請重新輸入!!&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            bot.ReplyMessage(lineEvent.replyToken, textMessage);</span><br><span class="line">        &#125;<span class="comment">//private: ReplyBotsMessage</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;<span class="comment">//class : MessageController</span></span><br><span class="line">&#125;<span class="comment">//namespace</span></span><br></pre></td></tr></table></figure><h2 id="參考文件"><a href="#參考文件" class="headerlink" title="參考文件"></a>參考文件</h2><ul><li><a href="https://tw.linebiz.com/e-learning/oa/Messaging-API-application/">活用 Messaging API 打造客製化的官方帳號</a></li><li><a href="https://blog.omnichat.ai/2020/01/line-2-0-official-account-pricing/">LINE@ 收費計算機（2022 最新）LINE2.0 官方帳號費用線上試算</a></li><li><a href="http://studyhost.blogspot.com/2019/07/cline-bot32-net-core-22-webhook.html">使用C#開發LINE Bot(32) – .net core 2.2 WebHook 範例</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 後端技術 </category>
          
          <category> C# </category>
          
          <category> Line </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
            <tag> Line </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Line Bots (二) - 使用C# Core API 加入 MessageAPI (使用 Push Message)</title>
      <link href="/2022/09/09/%E5%BE%8C%E7%AB%AF%E6%8A%80%E8%A1%93/CS/Line/Line_02_%E4%BD%BF%E7%94%A8CsharpMessageAPI/"/>
      <url>/2022/09/09/%E5%BE%8C%E7%AB%AF%E6%8A%80%E8%A1%93/CS/Line/Line_02_%E4%BD%BF%E7%94%A8CsharpMessageAPI/</url>
      
        <content type="html"><![CDATA[<p>Line Bots 使用方式會主要使用 C# 撰寫，如果是使用其他語言只僅供參考。繼上篇紀錄儲存相關資訊後，需要準備一個 <a href="/2022/08/11/Note/ngrok/">ngrok</a> 即可。</p><p>本章節範例 : </p><ul><li>Github <a href="https://github.com/JontCont/dotnetCore_LineBot">dotnetCore_LineBot</a></li></ul><h2 id="一、-創建-C-Web-API-專案"><a href="#一、-創建-C-Web-API-專案" class="headerlink" title="一、 創建 C# Web API 專案"></a>一、 創建 C# Web API 專案</h2><p>使用環境 Net6 WebAPI 來開發，dotnet 指令可以不用特別去設定 <code>-f net6.0</code>。<br>第一步、Cmd 指令下達 <code>dotnet new webapi</code>指令，後續再安裝重要的Nuget。<br>第二步、設定Cors就完成前置任務。</p><h3 id="安裝-Nuget"><a href="#安裝-Nuget" class="headerlink" title="安裝 Nuget"></a>安裝 Nuget</h3><p>專案部分需要安裝部分，如下:</p><ul><li><a href="https://www.nuget.org/packages/LineBotSDK">LineBotSDK</a></li><li><a href="https://www.nuget.org/packages/Newtonsoft.Json/13.0.2-beta2">Newtonsoft.Json</a></li></ul><h3 id="Cors-設定-Program-cs"><a href="#Cors-設定-Program-cs" class="headerlink" title="Cors 設定 (Program.cs)"></a>Cors 設定 (Program.cs)</h3><p>Net6.0 因為只有Program 可以設定，只要是 Mvc 、Blazor 、驗證等透過他設定。這邊我們為了方便測試先加入一小段 Cors ，後續排除問題動作可以減少。</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//add cors</span></span><br><span class="line">builder.Services.AddCors(options =&gt;</span><br><span class="line">&#123;</span><br><span class="line">    options.AddDefaultPolicy(</span><br><span class="line">        builder =&gt;</span><br><span class="line">        &#123;</span><br><span class="line">            builder.AllowAnyHeader().AllowAnyOrigin().AllowAnyMethod();</span><br><span class="line">        &#125;);</span><br><span class="line">&#125;);</span><br><span class="line">app.UseCors();</span><br></pre></td></tr></table></figure><h2 id="二、-Message-API-使用-Push-Message"><a href="#二、-Message-API-使用-Push-Message" class="headerlink" title="二、 Message API - 使用 Push Message"></a>二、 Message API - 使用 Push Message</h2><p>我們用非常簡單的範例。先加入MessageController.cs 並把自己得 Token、ID 加入上去。撰寫程式部分到這邊就結束了。</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">ApiController</span>]</span><br><span class="line">[<span class="meta">Route(<span class="string">&quot;[controller]&quot;</span>)</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MessageController</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> channelToken&#123;<span class="keyword">get</span>; <span class="keyword">private</span> <span class="keyword">set</span>;&#125; =<span class="string">@&quot;你的 Token &quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> adminUserID&#123;<span class="keyword">get</span>; <span class="keyword">private</span> <span class="keyword">set</span>;&#125;  =<span class="string">@&quot;你的 User ID&quot;</span>;</span><br><span class="line"></span><br><span class="line">    [<span class="meta">HttpPost</span>]</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">string</span> <span class="title">Post</span>()</span>&#123;</span><br><span class="line">        Bot bot = InitialBots();</span><br><span class="line">        bot.PushMessage(adminUserID, <span class="string">&quot;Push Message !!&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> JsonConvert.SerializeObject(<span class="keyword">new</span> &#123; success = <span class="literal">true</span>, message = <span class="string">&quot;&quot;</span> &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//-------------------------//</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Bot <span class="title">InitialBots</span>()</span>&#123;</span><br><span class="line">        <span class="built_in">string</span> channelToken = <span class="keyword">this</span>.channelToken;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Bot(channelToken);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="開啟-ngrok"><a href="#開啟-ngrok" class="headerlink" title="開啟 ngrok"></a>開啟 ngrok</h3><p>剩下最後一項工作，必須要加入ngrok。Line Bots Webhook URL 這個選像是待會再把ngrok網址貼在上面，這東西因為不能用<code>localhost</code> 必須要使用ngrok;</p><p>首先，先到launchSetting.json 修改一小段。暫時把原本applicationUrl註解，並往下加入你想要的Port。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;dotnetCore_LineBot&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;commandName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Project&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;dotnetRunMessages&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;launchBrowser&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;launchUrl&quot;</span><span class="punctuation">:</span> <span class="string">&quot;swagger&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="comment">// &quot;applicationUrl&quot;: &quot;https://localhost:7231;http://localhost:5196&quot;,</span></span><br><span class="line">  <span class="attr">&quot;applicationUrl&quot;</span><span class="punctuation">:</span> <span class="string">&quot;http://localhost:5196&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;environmentVariables&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;ASPNETCORE_ENVIRONMENT&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Development&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure><p>目前要長期使用又不想要開IIS ，暫時輸入 <code>dotnet watch</code>、<code>ngrok http 5196</code>即可。兩個指令建議用各自用<strong>指令視窗</strong>。</p><p>如果不會使用 ngrok 可以參考連結 : <a href="/2022/08/11/Note/ngrok/">點選我</a></p><h2 id="三、Line-Message-API-設定"><a href="#三、Line-Message-API-設定" class="headerlink" title="三、Line Message API 設定"></a>三、Line Message API 設定</h2><p>接下來，只要在<a href="https://developers.line.biz/zh-hant/">Line Developer</a> 設定。<br>回到我們的Line Developer ，把 ngrok Url 加入在 webhook setting 當中，務必別忘了加入 <code>Message</code>名稱。<br><img src="/img/dotnet/Line/Snipaste_2022-09-09_17-16-33.png"></p><p>設定完成後，建議點選 Verify 按鈕驗證API是不是有通，按下按鈕後出現 <code>Success </code>訊息代表順利完成了。題外話，官方網POST動作只看能不能傳回來，所以範例其實沒有特別撰寫內容。</p>]]></content>
      
      
      <categories>
          
          <category> 後端技術 </category>
          
          <category> C# </category>
          
          <category> Line </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
            <tag> Line </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Line Bots (四) - Line Message設定</title>
      <link href="/2022/09/09/%E5%BE%8C%E7%AB%AF%E6%8A%80%E8%A1%93/CS/Line/Line_04_Message%E8%A8%AD%E5%AE%9A/"/>
      <url>/2022/09/09/%E5%BE%8C%E7%AB%AF%E6%8A%80%E8%A1%93/CS/Line/Line_04_Message%E8%A8%AD%E5%AE%9A/</url>
      
        <content type="html"><![CDATA[<p>如果有完成上篇，回覆訊息會發現有自動回覆的功能。<br>(P.S. 這邊主要是設定Line Message API )</p><h2 id="Line-Message-API-自動回覆設定"><a href="#Line-Message-API-自動回覆設定" class="headerlink" title="Line Message API 自動回覆設定"></a>Line Message API 自動回覆設定</h2><p>這邊我們需要切換到 <a href="https://developers.line.biz/en/">Line Developers</a>。Line Message API 需要關掉自動回覆訊息需要到 Basic Setting &gt; Line Official Account Manager。</p><h2 id="關閉自動回覆"><a href="#關閉自動回覆" class="headerlink" title="關閉自動回覆"></a>關閉自動回覆</h2><p>到下一個頁面後，位置位於回覆設定 &gt; 進階設定只要把自動回覆訊息關閉即可。</p><p><img src="/img/dotnet/Line/Snipaste_2022-09-11_12-20-34.png"><br><img src="/img/dotnet/Line/Snipaste_2022-09-11_12-20-14.png"><br><img src="/img/dotnet/Line/Snipaste_2022-09-11_12-21-06.png"></p><h3 id="創建自動回覆"><a href="#創建自動回覆" class="headerlink" title="創建自動回覆"></a>創建自動回覆</h3><p>如果不創建 Message API 這個是可以代替方案，可以參考以下操作。因為操作簡單就不向下說明了。<br><img src="/img/dotnet/Line/Snipaste_2022-09-11_14-35-08.png"><br><img src="/img/dotnet/Line/Snipaste_2022-09-11_14-37-49.png"><br><img src="/img/dotnet/Line/Snipaste_2022-09-11_14-38-11.png"><br><img src="/img/dotnet/Line/Snipaste_2022-09-11_14-45-47.png"></p><h2 id="圖文訊息"><a href="#圖文訊息" class="headerlink" title="圖文訊息"></a>圖文訊息</h2><p>圖文訊息是主要廣告、訊息方便使用者點選的動作之一，目前他規範圖片需要1040px*1040px 才能上傳圖片。</p><h3 id="創建圖文訊息"><a href="#創建圖文訊息" class="headerlink" title="創建圖文訊息"></a>創建圖文訊息</h3><p><img src="/img/dotnet/Line/Snipaste_2022-09-11_15-20-19.png"></p><h3 id="建立新訊息-群發訊息"><a href="#建立新訊息-群發訊息" class="headerlink" title="建立新訊息 (群發訊息)"></a>建立新訊息 (群發訊息)</h3><p>群發訊息可以訊息、貼圖之外可貼張貼優惠卷、問卷調查、多頁訊息。設定完成後傳送訊息即可。<br><img src="/img/dotnet/Line/Snipaste_2022-09-11_15-20-53.png"><br><img src="/img/dotnet/Line/Snipaste_2022-09-11_15-21-19.png"><br><img src="/img/dotnet/Line/Snipaste_2022-09-11_15-21-31.png"><br><img src="/img/dotnet/Line/Snipaste_2022-09-11_15-22-02.png"></p><h2 id="問卷調查"><a href="#問卷調查" class="headerlink" title="問卷調查"></a>問卷調查</h2><p>問卷調查部分，有幾些地方可能會不太方便使用。問答限制 “單選”、”選擇”，Line 問答上只有這兩種功能，目前要使用Text 方面就要考慮改用 Google Form 。</p><p>目前需要注意項目</p><ul><li>時間限制 : 明天才能使用問卷。</li><li>問答限制 : “單選”、”選擇”</li></ul><p>問卷發送訊息跟圖文訊息一樣到 “建立新訊息” 即可。<br><img src="/img/dotnet/Line/Snipaste_2022-09-11_15-52-57.png"><br><img src="/img/dotnet/Line/Snipaste_2022-09-11_15-53-23.png"><br><img src="/img/dotnet/Line/Snipaste_2022-09-11_15-53-32.png"></p>]]></content>
      
      
      <categories>
          
          <category> 後端技術 </category>
          
          <category> C# </category>
          
          <category> Line </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
            <tag> Line </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Line Bots (一) - 環境建立、註冊</title>
      <link href="/2022/09/09/%E5%BE%8C%E7%AB%AF%E6%8A%80%E8%A1%93/CS/Line/Line_01_%E7%92%B0%E5%A2%83%E5%BB%BA%E7%AB%8B%E3%80%81%E8%A8%BB%E5%86%8A/"/>
      <url>/2022/09/09/%E5%BE%8C%E7%AB%AF%E6%8A%80%E8%A1%93/CS/Line/Line_01_%E7%92%B0%E5%A2%83%E5%BB%BA%E7%AB%8B%E3%80%81%E8%A8%BB%E5%86%8A/</url>
      
        <content type="html"><![CDATA[<p>Line Bots 是台灣最多的使用之一的APP，如果要向外推廣必須要從 Line 下手是最好的選擇。本次計畫會撰寫Line Message 使用方式，大致上只有簡單如何創建 Message API。</p><h2 id="Line-Developers"><a href="#Line-Developers" class="headerlink" title="Line Developers"></a><a href="https://developers.line.biz/zh-hant/">Line Developers</a></h2><p>Line Developers 是 Line 提供的開發環境。詳細介紹 : <a href="https://engineering.linecorp.com/zh-hant/blog/line-bot-guideline-1/">LINE Bot 開發者指南詳解</a></p><h2 id="註冊、創建環境"><a href="#註冊、創建環境" class="headerlink" title="註冊、創建環境"></a>註冊、創建環境</h2><p>創建方式需要透過 Line Developers : <a href="https://developers.line.biz/zh-hant/">請點選</a> 這個來進行註冊。這邊使用個人帳號即可。接下來，需要創建 “Project” 專案，如下圖。</p><p><img src="/img/dotnet/Line/Snipaste_2022-09-09_10-06-48.png"><br><img src="/img/dotnet/Line/Snipaste_2022-09-09_10-13-48.png"><br><img src="/img/dotnet/Line/Snipaste_2022-09-09_10-16-42.png"></p><p>因為我們下一個主題式 Message API 所以請選擇它。</p><p><img src="/img/dotnet/Line/Snipaste_2022-09-09_10-24-50.png"></p><h2 id="創建-Message-API-Channel"><a href="#創建-Message-API-Channel" class="headerlink" title="創建 Message API Channel"></a>創建 Message API Channel</h2><p>創建部份Url 部分可以先不填入，後續有需要後面章節會在說明。</p><p><img src="/img/dotnet/Line/Snipaste_2022-09-09_10-30-47.png"><br><img src="/img/dotnet/Line/Snipaste_2022-09-09_10-32-03.png"></p><p>創建完畢後，現在有兩個重要資訊，務必要存起來。</p><ol><li>Channel ID </li><li>Channel secret </li><li>Your user ID </li><li>Channel access token</li></ol><p>Channel access token 位置在於 Message API 分頁最下方點選即可。<br><img src="/img/dotnet/Line/Snipaste_2022-09-09_11-54-52.png"></p><p>以上資訊存檔資後，記得把機器人加入在Line 上面。<br><img src="/img/dotnet/Line/Snipaste_2022-09-09_10-36-59.png"></p>]]></content>
      
      
      <categories>
          
          <category> 後端技術 </category>
          
          <category> C# </category>
          
          <category> Line </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
            <tag> Line </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C# resXManager (二) - 操作方式</title>
      <link href="/2022/07/24/%E5%BE%8C%E7%AB%AF%E6%8A%80%E8%A1%93/CS/NetFramework/NF_06_resXManager_%E6%93%8D%E4%BD%9C%E6%96%B9%E5%BC%8F/"/>
      <url>/2022/07/24/%E5%BE%8C%E7%AB%AF%E6%8A%80%E8%A1%93/CS/NetFramework/NF_06_resXManager_%E6%93%8D%E4%BD%9C%E6%96%B9%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>上一章節已經說明完成使用方式，這次說明比較常用的幾的動作，分別為匯入、翻譯。</p><h1 id="匯入"><a href="#匯入" class="headerlink" title="匯入"></a>匯入</h1><p>使用前，不可能會一直使用這介面打資料在上面，這會大大影響執行效率，這時可以。<br>使用方式先到介面上面點選 Export All 將所有資料匯出即可。</p><h2 id="匯出範本"><a href="#匯出範本" class="headerlink" title="匯出範本"></a>匯出範本</h2><p>匯出有兩種模式，一種是指定方式匯出、另一種是全部匯出。<br><img src="/img/dotnet/cs/resXManager/Snipaste_2022-07-24_19-48-25.png"><br><img src="/img/dotnet/cs/resXManager/Snipaste_2022-07-24_10-35-50.png"></p><h2 id="加入項目並匯入"><a href="#加入項目並匯入" class="headerlink" title="加入項目並匯入"></a>加入項目並匯入</h2><p>在範本上面加入項目，目前加入項目為”匯入”。加入完畢後選擇 <code>Import</code>即可得到效果。</p><div class="note info flat"><h3 id="匯入沒效果"><a href="#匯入沒效果" class="headerlink" title="匯入沒效果"></a>匯入沒效果</h3><p>需要確認兩個地方。</p><ol><li>Project : 專案名稱。</li><li>File : Resource 位置，如果folder有數字記得要留意一下。</li></ol></div><p><img src="/img/dotnet/cs/resXManager/Snipaste_2022-07-24_10-37-21.png"><br><img src="/img/dotnet/cs/resXManager/Snipaste_2022-07-24_10-42-09.png"></p><h1 id="翻譯"><a href="#翻譯" class="headerlink" title="翻譯"></a>翻譯</h1><p>翻譯是resXManger 最大特色，使用上可能要自己評估這個字是否是你想要的文字。下方會使用四個項目進行轉換。</p><p><img src="/img/dotnet/cs/resXManager/Snipaste_2022-07-24_10-42-09.png"></p><h2 id="加入語言"><a href="#加入語言" class="headerlink" title="加入語言"></a>加入語言</h2><p>筆者使用日文來測試。<br><img src="/img/dotnet/cs/resXManager/Snipaste_2022-07-24_10-43-40.png"></p><h2 id="翻譯-轉換-文字"><a href="#翻譯-轉換-文字" class="headerlink" title="翻譯(轉換)文字"></a>翻譯(轉換)文字</h2><p>介面下方有介面選擇<code>Translate</code>，Source 使用來之前加入文字，Targets 是加入要翻譯的語言，Targets 內容是可以多選翻譯，翻譯必須要注意覆蓋的危機。</p><p>接下來，翻譯完畢的項目可以進行選擇是否更新，如果都翻得不錯可以直接用力按下<code>apply all </code> 按鈕。</p><p><img src="/img/dotnet/cs/resXManager/Snipaste_2022-07-24_10-44-02.png"><br><img src="/img/dotnet/cs/resXManager/Snipaste_2022-07-24_10-46-33.png"><br><img src="/img/dotnet/cs/resXManager/Snipaste_2022-07-24_10-47-16.png"></p><h2 id="結果"><a href="#結果" class="headerlink" title="結果"></a>結果</h2><p><img src="/img/dotnet/cs/resXManager/Snipaste_2022-07-24_10-49-07.png"></p>]]></content>
      
      
      <categories>
          
          <category> 後端技術 </category>
          
          <category> C# </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
            <tag> VSC </tag>
            
            <tag> resXManager </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C# itextsharp 套件 - 創建PDF 神器</title>
      <link href="/2022/07/24/%E5%BE%8C%E7%AB%AF%E6%8A%80%E8%A1%93/CS/Nuget/PG_03_itextsharp%E5%A5%97%E4%BB%B6_%E5%89%B5%E5%BB%BAPDF%E7%A5%9E%E5%99%A8/"/>
      <url>/2022/07/24/%E5%BE%8C%E7%AB%AF%E6%8A%80%E8%A1%93/CS/Nuget/PG_03_itextsharp%E5%A5%97%E4%BB%B6_%E5%89%B5%E5%BB%BAPDF%E7%A5%9E%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>PDF 不論甚麼場合都需要使用，包含公司都會需要有PDF轉出轉入的工具，這邊使用PDF轉檔進行作業。</p><h1 id="iTextSharp"><a href="#iTextSharp" class="headerlink" title="iTextSharp"></a>iTextSharp</h1><p>本函式庫原名是iText，主要是支援Java程式語言。之後針對Microsoft .NET C # 做了一個版本。</p><ul><li>Github 範例 : <a href="https://github.com/JontCont/dotnetCore_iTextSharp">點擊我</a></li></ul><h2 id="一、-初始設定"><a href="#一、-初始設定" class="headerlink" title="一、 初始設定"></a>一、 初始設定</h2><p>製作方式需要新增 <code>Document </code>內部內容都會以Document 才新增、寫入。<br>以下就是初始化設定。</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//設定PageSize</span></span><br><span class="line"><span class="comment">//Margin: left, right, top, bottom</span></span><br><span class="line">Document doc = <span class="keyword">new</span> Document(PageSize.A4, <span class="number">20</span>, <span class="number">20</span>, <span class="number">50</span>, <span class="number">50</span>); </span><br><span class="line"></span><br><span class="line"><span class="comment">//設定 Stream</span></span><br><span class="line">MemoryStream ms = <span class="keyword">new</span> MemoryStream();</span><br><span class="line">PdfWriter.GetInstance(doc, ms).CloseStream = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">doc.Open();</span><br><span class="line"><span class="comment">//內容</span></span><br><span class="line">doc.Close();</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>如果少掉 <code>CloseStream</code> 會遇到 <code>cannot access a closed Stream</code>問題，所以必須要小心。</p><h2 id="二、-設定文字內容"><a href="#二、-設定文字內容" class="headerlink" title="二、 設定文字內容"></a>二、 設定文字內容</h2><p>一般輸出文字會需要有標題、內容，這便需要使用 Paragraph 儲存文字。以下使用方式。</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//註冊Encode</span></span><br><span class="line">Encoding.RegisterProvider(CodePagesEncodingProvider.Instance);</span><br><span class="line"></span><br><span class="line"><span class="comment">//設定 Font</span></span><br><span class="line">BaseFont bfChinese = BaseFont.CreateFont(_hostEnvironment.WebRootPath + <span class="string">&quot;\\font\\KAIU.TTF&quot;</span>, BaseFont.IDENTITY_H, BaseFont.EMBEDDED);</span><br><span class="line"><span class="comment">//設定 Font (給粗體用)</span></span><br><span class="line">BaseFont chBaseFont = BaseFont.CreateFont(_hostEnvironment.WebRootPath + <span class="string">&quot;\\font\\KAIU.TTF&quot;</span>, BaseFont.IDENTITY_H, BaseFont.NOT_EMBEDDED);</span><br><span class="line">Font ChFont = <span class="keyword">new</span> Font(bfChinese, <span class="number">12</span>);</span><br></pre></td></tr></table></figure><p>iTextSharp 提供兩個類別 <code>  Paragraph</code> 、<code> Chunk</code>，如果要單獨設定Font內容也可以。</p><h3 id="2-1-Font"><a href="#2-1-Font" class="headerlink" title="2-1 Font"></a>2-1 Font</h3><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//粗體</span></span><br><span class="line">Font CbFont = <span class="keyword">new</span> Font(bfChinese, <span class="number">12</span>,<span class="number">1</span>);</span><br><span class="line"><span class="comment">//斜體</span></span><br><span class="line">Font CbFont = <span class="keyword">new</span> Font(bfChinese, <span class="number">12</span>,<span class="number">2</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2-2-Paragraph"><a href="#2-2-Paragraph" class="headerlink" title="2-2 Paragraph"></a>2-2 Paragraph</h3><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Paragraph title = <span class="keyword">new</span> Paragraph(<span class="string">&quot;This Title Area&quot;</span>,ChFont);</span><br><span class="line"></span><br><span class="line"><span class="comment">//字行位置</span></span><br><span class="line">title.Alignment = Element.ALIGN_CENTER;</span><br><span class="line"><span class="comment">//行距</span></span><br><span class="line">title.Leading = <span class="number">10</span>;</span><br><span class="line"><span class="comment">//上下空白</span></span><br><span class="line">title.SpacingAfter =<span class="number">50</span>;</span><br><span class="line">title.SpacingBefore =<span class="number">50</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//左右</span></span><br><span class="line">title.IndentationLeft=<span class="number">50</span>;</span><br><span class="line">title.IndentationRight=<span class="number">50</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//第一個空白</span></span><br><span class="line">title.FirstLineIndent =<span class="number">50</span>;</span><br></pre></td></tr></table></figure><h3 id="2-3-Chunk"><a href="#2-3-Chunk" class="headerlink" title="2-3 Chunk"></a>2-3 Chunk</h3><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Chunk chunk = <span class="keyword">new</span> Chunk(<span class="string">&quot;測試底線文字&quot;</span>, CbFont);</span><br><span class="line">chunk.SetUnderline(<span class="number">0.2f</span>, <span class="number">-2f</span>);</span><br><span class="line">doc.Add(chunk);</span><br></pre></td></tr></table></figure><h3 id="2-4-Error-‘windows-1252’-is-not-a-supported-encoding-name"><a href="#2-4-Error-‘windows-1252’-is-not-a-supported-encoding-name" class="headerlink" title="2-4 Error : ‘windows-1252’ is not a supported encoding name."></a>2-4 Error : ‘windows-1252’ is not a supported encoding name.</h3><p>[System.Text.Encoding.CodePages v5.0.0 ] : <a href="https://www.nuget.org/packages/System.Text.Encoding.CodePages/5.0.0">https://www.nuget.org/packages/System.Text.Encoding.CodePages/5.0.0</a></p><h2 id="三、-設定表格"><a href="#三、-設定表格" class="headerlink" title="三、 設定表格"></a>三、 設定表格</h2><p>創建表格是常常需要再Pdf 去設定，如何去使用這個必須要先知道你要幾個table欄位。</p><h3 id="3-1-一般表格"><a href="#3-1-一般表格" class="headerlink" title="3-1 一般表格"></a>3-1 一般表格</h3><p>下方用很簡單範例執行。</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//創建3行</span></span><br><span class="line">PdfPTable pt = <span class="keyword">new</span> PdfPTable(<span class="number">3</span>);</span><br><span class="line">pt.AddCell(<span class="keyword">new</span> PdfPCell(<span class="keyword">new</span> Phrase(<span class="string">$&quot; 第三欄 &quot;</span>,ChFont))&#123; Colspan=<span class="number">3</span> &#125;);</span><br><span class="line"><span class="comment">//產生 table</span></span><br><span class="line"><span class="keyword">for</span>(<span class="built_in">int</span> i = <span class="number">1</span> ; i &lt;= <span class="number">3</span>;++i)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="built_in">int</span> j = <span class="number">1</span> ; j &lt;= <span class="number">3</span>;++j)&#123;</span><br><span class="line">        Phrase text =  <span class="keyword">new</span> Phrase(<span class="string">$&quot;line<span class="subst">&#123;i&#125;</span>,cell<span class="subst">&#123;j&#125;</span>&quot;</span>);</span><br><span class="line">        PdfPCell cell= <span class="keyword">new</span> PdfPCell(text);</span><br><span class="line">        pt.AddCell(cell);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">doc.Add(<span class="keyword">new</span> Paragraph()&#123;pt&#125;);</span><br></pre></td></tr></table></figure><p>使用概念:</p><ol><li>Phrase : 儲存文字，如果有中文字眼記得要加入剛才的<code>Font</code>。</li><li>PdfPCell : 這邊是儲存cell方式(單欄)。後面可以細項設定，目前不用設定時候就會比較單存一點。</li><li>AddCell : 加入單欄內容。</li></ol><p><img src="/img/dotnet/cs/cs_itext_001.png"></p><h3 id="3-2-客製表格"><a href="#3-2-客製表格" class="headerlink" title="3-2 客製表格"></a>3-2 客製表格</h3><p>如果要自定義方式，可以參考下方。設定table 一定會用到</p><ol><li>Colspan : 行合併 </li><li>Rowspan : 列合併</li></ol><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">PdfPTable pt = <span class="keyword">new</span> PdfPTable(<span class="number">3</span>);</span><br><span class="line">pt.AddCell(<span class="keyword">new</span> PdfPCell(<span class="keyword">new</span> Phrase(<span class="string">$&quot; 所有第三欄合併 &quot;</span>,ChFont))&#123; Colspan=<span class="number">3</span> &#125;);</span><br><span class="line"><span class="keyword">for</span>(<span class="built_in">int</span> i = <span class="number">1</span> ; i &lt;= <span class="number">3</span>;++i)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="built_in">int</span> j = <span class="number">1</span> ; j &lt;= <span class="number">3</span>;++j)&#123;</span><br><span class="line">        Phrase text =  <span class="keyword">new</span> Phrase(<span class="string">$&quot;line<span class="subst">&#123;i&#125;</span>,cell<span class="subst">&#123;j&#125;</span>&quot;</span>);</span><br><span class="line">        PdfPCell cell= <span class="keyword">new</span> PdfPCell(text);</span><br><span class="line">        <span class="comment">//防止有重複設定</span></span><br><span class="line">        <span class="keyword">if</span>(i != <span class="number">1</span> &amp;&amp; j == <span class="number">3</span> ) &#123; <span class="keyword">continue</span>;&#125;</span><br><span class="line">        <span class="comment">//第三欄全部合併</span></span><br><span class="line">        <span class="keyword">if</span>(j == <span class="number">3</span> )&#123;</span><br><span class="line">            pt.AddCell(<span class="keyword">new</span> PdfPCell(<span class="keyword">new</span> Phrase(<span class="string">$&quot;cell<span class="subst">&#123;j&#125;</span>&quot;</span>))&#123; Rowspan=<span class="number">3</span> &#125;);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//font</span></span><br><span class="line">        pt.AddCell(cell);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">doc.Add(<span class="keyword">new</span> Paragraph()&#123;pt&#125;);</span><br></pre></td></tr></table></figure><p><img src="/img/dotnet/cs/cs_itext_002.png"></p><h3 id="3-3-使用建議"><a href="#3-3-使用建議" class="headerlink" title="3-3 使用建議"></a>3-3 使用建議</h3><p>如果第一次使用可以使用下方方式，一行一行創建可以知道使用方式。按照上方範例呈現方式會像下方一樣，概念是合併不能出現下一行，不然就會有多個 Rows畫面。</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">pt.AddCell(<span class="keyword">new</span> PdfPCell(<span class="keyword">new</span> Phrase(<span class="string">$&quot;line 1,cell 1&quot;</span>)));</span><br><span class="line">pt.AddCell(<span class="keyword">new</span> PdfPCell(<span class="keyword">new</span> Phrase(<span class="string">$&quot;line 1,cell 2&quot;</span>)));</span><br><span class="line">pt.AddCell(<span class="keyword">new</span> PdfPCell(<span class="keyword">new</span> Phrase(<span class="string">$&quot;line 1,cell 3&quot;</span>))&#123; Rowspan=<span class="number">3</span> &#125;);</span><br><span class="line"></span><br><span class="line">pt.AddCell(<span class="keyword">new</span> PdfPCell(<span class="keyword">new</span> Phrase(<span class="string">$&quot;line 2,cell 1&quot;</span>)));</span><br><span class="line">pt.AddCell(<span class="keyword">new</span> PdfPCell(<span class="keyword">new</span> Phrase(<span class="string">$&quot;line 2,cell 2&quot;</span>)));</span><br><span class="line"></span><br><span class="line">pt.AddCell(<span class="keyword">new</span> PdfPCell(<span class="keyword">new</span> Phrase(<span class="string">$&quot;line 3,cell 1&quot;</span>)));</span><br><span class="line">pt.AddCell(<span class="keyword">new</span> PdfPCell(<span class="keyword">new</span> Phrase(<span class="string">$&quot;line 3,cell 2&quot;</span>)));</span><br></pre></td></tr></table></figure><h2 id="四、-預覽效果"><a href="#四、-預覽效果" class="headerlink" title="四、 預覽效果"></a>四、 預覽效果</h2><p>下方為預覽效果，僅供參閱。</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> IActionResult <span class="title">Preview</span>()</span>&#123;</span><br><span class="line">  Document doc = <span class="keyword">new</span> Document(PageSize.A4);</span><br><span class="line">  MemoryStream ms = <span class="keyword">new</span> MemoryStream();</span><br><span class="line">  PdfWriter.GetInstance(doc, ms).CloseStream = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">  doc.Open();</span><br><span class="line">  ...</span><br><span class="line">  ...</span><br><span class="line">  doc.Close();</span><br><span class="line">          </span><br><span class="line">  ms.Seek(<span class="number">0</span>, SeekOrigin.Begin);</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> FileStreamResult(ms, <span class="string">&quot;application/pdf&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h1><p>使用 iTextSharp 就到這邊，目前遇到只有這幾些，使用 tables 還沒搞清楚先後順序，可能會卡非常久。</p>]]></content>
      
      
      <categories>
          
          <category> 後端技術 </category>
          
          <category> C# </category>
          
          <category> package </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
            <tag> VSC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C# resXManager (一) - 製作多國語言</title>
      <link href="/2022/07/23/%E5%BE%8C%E7%AB%AF%E6%8A%80%E8%A1%93/CS/NetFramework/NF_05_resXManager_%E8%A3%BD%E4%BD%9C%E5%A4%9A%E5%9C%8B%E8%AA%9E%E8%A8%80/"/>
      <url>/2022/07/23/%E5%BE%8C%E7%AB%AF%E6%8A%80%E8%A1%93/CS/NetFramework/NF_05_resXManager_%E8%A3%BD%E4%BD%9C%E5%A4%9A%E5%9C%8B%E8%AA%9E%E8%A8%80/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>開發時期，許多人會注意開發最後須要有環境去做切換語言的動作。使用多國語言處理方式有很多種，如果使用老派一點可以使用Excel方式讀取指定要讀取的文字，可以參考NPOI、LinqToExcel 兩種套件效果會相當不錯。</p><h1 id="resXManager"><a href="#resXManager" class="headerlink" title="resXManager"></a>resXManager</h1><p>resXManager 是資源文件編輯工具，使用方式相當簡單。內建有包含翻譯(不能太依賴)、Excel匯入出、創建語言時自動產生Resource檔案等，維護上可以套用同一個Resource開發上會相對快速。</p><p>首先第一步需要請各位先自行安裝ResXManager。</p><ul><li>ResXManger : <a href="https://marketplace.visualstudio.com/items?itemName=TomEnglert.ResXManager">請點選</a></li><li>Github : <a href="https://github.com/JontCont/dotnet_resXManager">請點選</a></li></ul><h2 id="創建專案"><a href="#創建專案" class="headerlink" title="創建專案"></a>創建專案</h2><p>此文章是使用 framework 4.7.2 ，目前筆者嘗試過一些版本可以參考Github資訊。創建完畢後在<code>Properties</code> 裡面新增 <code>resources.resx</code> 檔案，方便待會存放文字。</p><div class="note info flat"><h3 id="VB-NET"><a href="#VB-NET" class="headerlink" title="VB.NET"></a>VB.NET</h3><p>目前嘗試WebForm 版本初始預設位置會是在 App_GlobalResources ，會與C#使用方式不太同。</p></div><p><img src="/img/dotnet/cs/resXManager/Snipaste_2022-07-23_20-06-59.png"><br><img src="/img/dotnet/cs/resXManager/Snipaste_2022-07-23_20-09-19.png"></p><h2 id="加入Resource"><a href="#加入Resource" class="headerlink" title="加入Resource"></a>加入Resource</h2><p>為了讓resources有資料，第一個動作可以先把指定的文字去選取、<code>Move to Resource</code> 加入ResXManger當中，後面設定語言會比較方便一些。</p><p>剛才創建的resources會自動加入在裡面當中。<br><img src="/img/dotnet/cs/resXManager/Snipaste_2022-07-23_20-11-09.png"><br><img src="/img/dotnet/cs/resXManager/Snipaste_2022-07-23_20-13-19.png"></p><h2 id="創建類別"><a href="#創建類別" class="headerlink" title="創建類別"></a>創建類別</h2><p>這邊會透由一些管道去取得ResXManger內容，需要建立Function方便取得。我們創建一個 <code>LanguageHelper</code> 之後讓cshtml取的內容。</p><div class="note info flat"><h3 id="ResourceManager-設定"><a href="#ResourceManager-設定" class="headerlink" title="ResourceManager 設定"></a>ResourceManager 設定</h3><ol><li><code>dotnet_resXManager.Properties.ResourceLanguage</code>可以透由創建的resx檔點開取得。</li><li>CurrentUICulture 是Resource文化特性資源，如果要切換語言可以透由這東西去修改。</li></ol></div><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Web;</span><br><span class="line"><span class="keyword">using</span> System.Resources;</span><br><span class="line"><span class="keyword">using</span> dotnet_resXManager.Properties;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">dotnet_resXManager</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">LanguageHelper</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> ResourceManager _res &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">string</span> <span class="title">GetText</span>(<span class="params"><span class="built_in">string</span> name</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">string</span> lanString = <span class="string">&quot;en-US&quot;</span>;<span class="comment">//&quot;zh-TW&quot;;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//取得或設定 CultureInfo 物件，此物件代表 Resource Manager 用於執行階段查詢特定文化特性資源的目前使用者介面文化特性。</span></span><br><span class="line">            <span class="comment">//資源管理員用來在執行階段查詢特定文化特性資源的文化特性。</span></span><br><span class="line">            System.Threading.Thread.CurrentThread.CurrentUICulture =</span><br><span class="line">                <span class="keyword">new</span> System.Globalization.CultureInfo(lanString);</span><br><span class="line">            _res =</span><br><span class="line">                <span class="keyword">new</span> ResourceManager(<span class="string">&quot;dotnet_resXManager.Properties.ResourceLanguage&quot;</span>, <span class="keyword">typeof</span>(ResourceLanguage).Assembly);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> _res.GetString(name) ?? name;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>加入方式可以直接用 <code>GetText</code>取得想要的文字，這邊前置作業就完成了。</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">@&#123;</span><br><span class="line">    ViewBag.Title = <span class="string">&quot;Home Page&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;div <span class="keyword">class</span>=<span class="string">&quot;jumbotron&quot;</span>&gt;</span><br><span class="line">    &lt;h1&gt;ASP.NET&lt;/h1&gt;</span><br><span class="line">    &lt;p <span class="keyword">class</span>=<span class="string">&quot;lead&quot;</span>&gt;ASP.NET <span class="keyword">is</span> a free web framework <span class="keyword">for</span> building great Web sites <span class="keyword">and</span> Web applications <span class="keyword">using</span> HTML, CSS <span class="keyword">and</span> JavaScript.&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;&lt;a href=<span class="string">&quot;https://asp.net&quot;</span> <span class="keyword">class</span>=<span class="string">&quot;btn btn-primary btn-lg&quot;</span>&gt;@LanguageHelper.GetText(<span class="string">&quot;LearnMore&quot;</span>) &amp;raquo;&lt;/a&gt;&lt;/p&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/img/dotnet/cs/resXManager/Snipaste_2022-07-23_20-32-29.png"><br><img src="/img/dotnet/cs/resXManager/Snipaste_2022-07-23_20-33-36.png"></p><h2 id="新增resXManager項目"><a href="#新增resXManager項目" class="headerlink" title="新增resXManager項目"></a>新增resXManager項目</h2><p>我們可以直接用上方 [工具]&gt; [resXManager] 點選。如果要新增語言可以參考介面下方 Language 選項填寫，resXManager 使用方式跟Excel 很類似，如果自身有準備好excel可以嘗試用匯入方式。</p><p><img src="/img/dotnet/cs/resXManager/Snipaste_2022-07-23_20-34-30.png"><br><img src="/img/dotnet/cs/resXManager/Snipaste_2022-07-23_20-35-38.png"><br><img src="/img/dotnet/cs/resXManager/Snipaste_2022-07-23_20-35-52.png"></p><h2 id="結果"><a href="#結果" class="headerlink" title="結果"></a>結果</h2><h3 id="zh-TW"><a href="#zh-TW" class="headerlink" title="zh-TW"></a>zh-TW</h3><p><img src="/img/dotnet/cs/resXManager/Snipaste_2022-07-23_20-42-34.png"></p><h3 id="en-US"><a href="#en-US" class="headerlink" title="en-US"></a>en-US</h3><p><img src="/img/dotnet/cs/resXManager/Snipaste_2022-07-23_20-42-57.png"></p>]]></content>
      
      
      <categories>
          
          <category> 後端技術 </category>
          
          <category> C# </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
            <tag> VSC </tag>
            
            <tag> resXManager </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C# .NET 6 使用 Access DB</title>
      <link href="/2022/07/19/%E5%BE%8C%E7%AB%AF%E6%8A%80%E8%A1%93/CS/cs_18_AccessDB%20%E4%BD%BF%E7%94%A8%E6%96%B9%E5%BC%8F/"/>
      <url>/2022/07/19/%E5%BE%8C%E7%AB%AF%E6%8A%80%E8%A1%93/CS/cs_18_AccessDB%20%E4%BD%BF%E7%94%A8%E6%96%B9%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>使用 Access 主要原因是為了做小型專案減少開發才會使用的一個DB 環境，廣泛性不大但是可以做簡單的系統，可以使用看看。</p><h2 id="創建-AccessContext"><a href="#創建-AccessContext" class="headerlink" title="創建 AccessContext"></a>創建 AccessContext</h2><p>前期可以得之 EF 通常都是用在Ms SQL 、My SQL 等載入，若要達到建議版本可以參考下方做法。</p><h3 id="取得連線字串"><a href="#取得連線字串" class="headerlink" title="取得連線字串"></a>取得連線字串</h3><p>驅動方式可以參考 : <a href="https://learn.microsoft.com/zh-tw/office/troubleshoot/access/cannot-use-odbc-or-oledb">【Microsoft】</a></p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">AccessContextcs</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">string</span> connectionString = <span class="string">&quot;Driver=&#123;Microsoft Access Driver (*.mdb, *.accdb)&#125;; Dbq=D:\\Git\\Github\\00_Source\\ng-homestay\\WebApi\\lanyuanApi\\DbContext\\AccessUsers.accdb; &quot;</span>;</span><br><span class="line">    Connection = <span class="keyword">new</span> OdbcConnection(connectionString);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="製作相關Table"><a href="#製作相關Table" class="headerlink" title="製作相關Table"></a>製作相關Table</h3><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> IEnumerable&lt;Information&gt; <span class="title">InformationData</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> queryText = <span class="string">&quot;SELECT * FROM Information&quot;</span>;</span><br><span class="line">    <span class="keyword">var</span> data = Connection.Query&lt;Information&gt;(queryText);</span><br><span class="line">    <span class="keyword">return</span> data.AsEnumerable();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> IEnumerable&lt;BasicUserAccess&gt; <span class="title">BasicUserAccessonData</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> queryText = <span class="string">&quot;SELECT * FROM BasicUserAccess&quot;</span>;</span><br><span class="line">    <span class="keyword">var</span> data = Connection.Query&lt;BasicUserAccess&gt;(queryText);</span><br><span class="line">    <span class="keyword">return</span> data.AsEnumerable();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> IEnumerable&lt;Introduction&gt; <span class="title">IntroductionData</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> queryText = <span class="string">&quot;SELECT * FROM Introduction&quot;</span>;</span><br><span class="line">    <span class="keyword">var</span> data = Connection.Query&lt;Introduction&gt;(queryText);</span><br><span class="line">    <span class="keyword">return</span> data.AsEnumerable();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="整體程式碼"><a href="#整體程式碼" class="headerlink" title="整體程式碼"></a>整體程式碼</h3><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> Dapper;</span><br><span class="line"><span class="keyword">using</span> lanyuanApi.Models;</span><br><span class="line"><span class="keyword">using</span> System.Data.Odbc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">lanyuanApi.DbContext</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">AccessContextcs</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> OdbcConnection Connection &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125; = <span class="literal">default</span>!;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">AccessContextcs</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">string</span> connectionString = <span class="string">&quot;Driver=&#123;Microsoft Access Driver (*.mdb, *.accdb)&#125;; Dbq=D:\\Git\\Github\\00_Source\\ng-homestay\\WebApi\\lanyuanApi\\DbContext\\AccessUsers.accdb; &quot;</span>;</span><br><span class="line">            Connection = <span class="keyword">new</span> OdbcConnection(connectionString);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> IEnumerable&lt;Information&gt; <span class="title">InformationData</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> queryText = <span class="string">&quot;SELECT * FROM Information&quot;</span>;</span><br><span class="line">            <span class="keyword">var</span> data = Connection.Query&lt;Information&gt;(queryText);</span><br><span class="line">            <span class="keyword">return</span> data.AsEnumerable();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> IEnumerable&lt;BasicUserAccess&gt; <span class="title">BasicUserAccessonData</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> queryText = <span class="string">&quot;SELECT * FROM BasicUserAccess&quot;</span>;</span><br><span class="line">            <span class="keyword">var</span> data = Connection.Query&lt;BasicUserAccess&gt;(queryText);</span><br><span class="line">            <span class="keyword">return</span> data.AsEnumerable();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> IEnumerable&lt;Introduction&gt; <span class="title">IntroductionData</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> queryText = <span class="string">&quot;SELECT * FROM Introduction&quot;</span>;</span><br><span class="line">            <span class="keyword">var</span> data = Connection.Query&lt;Introduction&gt;(queryText);</span><br><span class="line">            <span class="keyword">return</span> data.AsEnumerable();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 後端技術 </category>
          
          <category> C# </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
            <tag> VSC </tag>
            
            <tag> Access </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C# .Net Core SignalR (1)- SignalR 使用方式</title>
      <link href="/2022/07/19/%E5%BE%8C%E7%AB%AF%E6%8A%80%E8%A1%93/CS/NetCore/Core_01_SignalR/"/>
      <url>/2022/07/19/%E5%BE%8C%E7%AB%AF%E6%8A%80%E8%A1%93/CS/NetCore/Core_01_SignalR/</url>
      
        <content type="html"><![CDATA[<h1 id="SignalR"><a href="#SignalR" class="headerlink" title="SignalR"></a>SignalR</h1><p>SignalRASP.NET Core是開放原始碼程式庫，可簡化將即時 Web 功能新增至應用程式。 即時 Web 功能可讓伺服器端程式碼立即將內容推送至用戶端。</p><p>SignalR 提供 API 來建立伺服器對用戶端 遠端程序呼叫， (RPC) 。 RPC 會從伺服器端 .NET Core 程式碼叫用用戶端上的函式。 有數個 支援的平臺，每個平臺都有各自的用戶端 SDK。 因此，RPC 呼叫所叫用的程式設計語言會有所不同。<br>適合的候選項目 SignalR ：</p><ul><li>需要經常從伺服器取得更新的應用程式。 例如遊戲、社交網路、投票、拍賣、地圖和 GPS 應用程式。</li><li>儀表板和監視應用程式。 範例包括公司儀表板、即時銷售更新或旅行警示。</li><li>共同作業應用程式。 共同作業應用程式的範例包括白板應用程式和小組會議軟體。</li><li>需要通知的應用程式。 社交網路、電子郵件、交談、遊戲、旅行警示和其他使用通- 知的應用程式。</li></ul><p>以下是 ASP.NET Core 的 SignalR 一些功能：</p><ul><li>自動處理連線管理。</li><li>同時將訊息傳送給所有連線的用戶端。 例如，聊天室。</li><li>將訊息傳送給特定用戶端或用戶端群組。</li><li>調整以處理增加的流量。</li></ul><h2 id="傳輸"><a href="#傳輸" class="headerlink" title="傳輸"></a>傳輸</h2><p>SignalR 支援下列技術來處理即時通訊 </p><ul><li>WebSocket</li><li>Sever-Sent 事件</li><li>長輪詢<br>SignalR 會自動選擇伺服器和用戶端功能內的最佳傳輸方法。</li></ul><h2 id="中樞"><a href="#中樞" class="headerlink" title="中樞"></a>中樞</h2><p>SignalR 會使用 中樞 在用戶端和伺服器之間進行通訊。中樞會傳送包含用戶端方法名稱和參數的訊息來呼叫用戶端程式代碼。 以方法參數方式傳送的物件會使用已設定的通訊協定還原序列化。 用戶端會嘗試將名稱與用戶端程式代碼中的方法相符。 當用戶端找到相符專案時，它會呼叫 方法，並將其傳遞至還原序列化參數資料</p><h1 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h1><h2 id="使用工具"><a href="#使用工具" class="headerlink" title="使用工具"></a>使用工具</h2><ul><li>Visual Studio Code : <a href="https://code.visualstudio.com/">請點選</a></li></ul><h2 id="創建專案"><a href="#創建專案" class="headerlink" title="創建專案"></a>創建專案</h2><p>創建專案可以使用下方語法，目前創建出來會是 net6.0若不太習慣可以使用 <code>-framework  &quot;net5.0&quot; </code>。</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dotnet new mvc</span><br><span class="line">dotnet run</span><br></pre></td></tr></table></figure><h2 id="創建Hub"><a href="#創建Hub" class="headerlink" title="創建Hub"></a>創建Hub</h2><p>創建Hub位置以及ChatHub.cs，內容請參考下方程式碼。</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> Microsoft.AspNetCore.SignalR;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">SignalR.Hubs</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ChatHub</span> : <span class="title">Hub</span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task <span class="title">SendMessage</span>(<span class="params"><span class="built_in">string</span> user, <span class="built_in">string</span> message</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">await</span> Clients.All.SendAsync(<span class="string">&quot;ReceiveMessage&quot;</span>, user, message);</span><br><span class="line">        &#125; <span class="comment">// SendMessage</span></span><br><span class="line">    &#125;<span class="comment">//class : ChartHub    </span></span><br><span class="line">&#125;<span class="comment">// namespace : SignalRChat</span></span><br></pre></td></tr></table></figure><p><img src="/image/Snipaste_2022-07-19_21-28-02.png"></p><h2 id="註冊SignalR服務"><a href="#註冊SignalR服務" class="headerlink" title="註冊SignalR服務"></a>註冊SignalR服務</h2><p>以下註冊方式提供參考。</p><h3 id="net6-0"><a href="#net6-0" class="headerlink" title="net6.0"></a>net6.0</h3><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">builder.Services.AddSignalR();</span><br><span class="line"></span><br><span class="line">app.MapHub&lt;ChatHub&gt;(<span class="string">&quot;/chathub&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="net5-x"><a href="#net5-x" class="headerlink" title="net5.x"></a>net5.x</h3><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">services.AddSignalR();</span><br><span class="line">app.UseEndpoints(endpoints =&gt;</span><br><span class="line">&#123;</span><br><span class="line">    endpoints.MapControllers();</span><br><span class="line">    endpoints.MapHub&lt;SampleHub&gt;(<span class="string">&quot;/chathub&quot;</span>); <span class="comment">//加入這行 代表連接SignalR的路由與配對的Hub</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><img src="/image/Snipaste_2022-07-19_21-34-47.png"></p><h2 id="創建html-頁面環境"><a href="#創建html-頁面環境" class="headerlink" title="創建html 頁面環境"></a>創建html 頁面環境</h2><p>加入後，就會彈出alert 視窗，後續再試試如何轉變成留言板。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">@&#123;</span><br><span class="line">    ViewData[&quot;Title&quot;] = &quot;Home Page&quot;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/6.0.5/signalr.min.js&quot;</span> <span class="attr">integrity</span>=<span class="string">&quot;sha512-Wj6cUe+56vJ4FtfeF4QqPHy4VGO9gZ2iU8GFlLRjawhx1f4sW3BezJLU1ewaZl3bZV8iya0EJOmRY5SD9XTwvw==&quot;</span> <span class="attr">crossorigin</span>=<span class="string">&quot;anonymous&quot;</span> <span class="attr">referrerpolicy</span>=<span class="string">&quot;no-referrer&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> connection = <span class="keyword">new</span> signalR.<span class="title class_">HubConnectionBuilder</span>().<span class="title function_">withUrl</span>(<span class="string">&quot;/chatHub&quot;</span>).<span class="title function_">build</span>();</span></span><br><span class="line"><span class="language-javascript">    connection.<span class="title function_">on</span>(<span class="string">&quot;ReceiveMessage&quot;</span>,<span class="keyword">function</span>(<span class="params">user,message</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">alert</span>(<span class="string">`Hi <span class="subst">$&#123;user&#125;</span>  , you said : <span class="subst">$&#123;message&#125;</span>`</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    connection.<span class="title function_">start</span>().<span class="title function_">then</span>(<span class="function">()=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript">        connection.<span class="title function_">invoke</span>(<span class="string">&quot;SendMessage&quot;</span>,<span class="string">&quot;Cons&quot;</span>,<span class="string">&quot;Hello World - 1  !!&quot;</span>).<span class="title function_">catch</span>(<span class="function">(<span class="params">err</span>)=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> <span class="variable language_">console</span>.<span class="title function_">error</span>(err.<span class="title function_">toString</span>());</span></span><br><span class="line"><span class="language-javascript">        &#125;);</span></span><br><span class="line"><span class="language-javascript">    &#125;).<span class="title function_">catch</span>(<span class="function">(<span class="params">err</span>)=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> <span class="variable language_">console</span>.<span class="title function_">error</span>(err.<span class="title function_">toString</span>());</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/img/dotnet/cs/signalr/Snipaste_2022-07-19_21-48-59.png"></p>]]></content>
      
      
      <categories>
          
          <category> 後端技術 </category>
          
          <category> C# </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
            <tag> VSC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C# .Net Core SignalR (2) - 留言板</title>
      <link href="/2022/07/19/%E5%BE%8C%E7%AB%AF%E6%8A%80%E8%A1%93/CS/NetCore/Core_02_SignalR/"/>
      <url>/2022/07/19/%E5%BE%8C%E7%AB%AF%E6%8A%80%E8%A1%93/CS/NetCore/Core_02_SignalR/</url>
      
        <content type="html"><![CDATA[<h1 id="Hub-類別"><a href="#Hub-類別" class="headerlink" title="Hub 類別"></a><a href="https://docs.microsoft.com/zh-tw/dotnet/api/microsoft.aspnetcore.signalr.hub?view=aspnetcore-6.0">Hub 類別</a></h1><h2 id="屬性"><a href="#屬性" class="headerlink" title="屬性"></a>屬性</h2><p>種類有以下三個。</p><ol><li>Clients</li></ol><p></p><ul><li>All : 在所有連線的用戶端上呼叫方法</li><li>Caller : 在客戶端上呼叫一個呼叫了hub方法的方法</li><li>Others : 在所有連接的客戶端上呼叫方法，但呼叫該方法的客戶端除外</li></ul><ol start="2"><li>Context</li><li>Groups</li></ol><p></p><p>上面列表中的每個屬性或方法的回傳值都提供呼叫SendAsync方法。SendAsync可以指定要呼叫用戶端的方法名稱，並傳入參數。</p><h1 id="留言板"><a href="#留言板" class="headerlink" title="留言板"></a>留言板</h1><h2 id="html"><a href="#html" class="headerlink" title="html"></a>html</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span><span class="symbol">&amp;nbsp;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-2&quot;</span>&gt;</span>User<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-4&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;userInput&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-2&quot;</span>&gt;</span>Message<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-4&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;messageInput&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span><span class="symbol">&amp;nbsp;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-6&quot;</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">id</span>=<span class="string">&quot;sendButton&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Send Message&quot;</span> /&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-12&quot;</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-6&quot;</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">&quot;messagesList&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/6.0.5/signalr.min.js&quot;</span> integrity=<span class="string">&quot;sha512-Wj6cUe+56vJ4FtfeF4QqPHy4VGO9gZ2iU8GFlLRjawhx1f4sW3BezJLU1ewaZl3bZV8iya0EJOmRY5SD9XTwvw==&quot;</span> crossorigin=<span class="string">&quot;anonymous&quot;</span> referrerpolicy=<span class="string">&quot;no-referrer&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">var</span> connection = <span class="keyword">new</span> signalR.<span class="title class_">HubConnectionBuilder</span>().<span class="title function_">withUrl</span>(<span class="string">&quot;/chatHub&quot;</span>).<span class="title function_">build</span>();</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    connection.<span class="title function_">on</span>(<span class="string">&quot;ReceiveMessage&quot;</span>,<span class="keyword">function</span>(<span class="params">user,message</span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">         <span class="keyword">var</span> li = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;li&quot;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;messagesList&quot;</span>).<span class="title function_">appendChild</span>(li);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// We can assign user-supplied strings to an element&#x27;s textContent because it</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// is not interpreted as markup. If you&#x27;re assigning in any other way, you </span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// should be aware of possible script injection concerns.</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        li.<span class="property">textContent</span> = <span class="string">`<span class="subst">$&#123;user&#125;</span> : <span class="subst">$&#123;message&#125;</span>`</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    connection.<span class="title function_">start</span>().<span class="title function_">then</span>(<span class="function">()=&gt;</span>&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;sendButton&quot;</span>).<span class="property">disabled</span> = <span class="literal">false</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;).<span class="title function_">catch</span>(<span class="function">(<span class="params">err</span>)=&gt;</span>&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">return</span> <span class="variable language_">console</span>.<span class="title function_">error</span>(err.<span class="title function_">toString</span>());</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;sendButton&quot;</span>).<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, <span class="keyword">function</span> (<span class="params">event</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">var</span> user = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;userInput&quot;</span>).<span class="property">value</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">var</span> message = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;messageInput&quot;</span>).<span class="property">value</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        connection</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            .<span class="title function_">invoke</span>(<span class="string">&quot;SendMessage&quot;</span>, user, message)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            .<span class="title function_">catch</span>(<span class="keyword">function</span> (<span class="params">err</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="keyword">return</span> <span class="variable language_">console</span>.<span class="title function_">error</span>(err.<span class="title function_">toString</span>());</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        event.<span class="title function_">preventDefault</span>();</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/img/dotnet/cs/signalr/Snipaste_2022-07-19_22-12-27.png"></p>]]></content>
      
      
      <categories>
          
          <category> 後端技術 </category>
          
          <category> C# </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
            <tag> VSC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C# Core - 設定跨來源資源共用（CORS）</title>
      <link href="/2022/06/11/%E5%BE%8C%E7%AB%AF%E6%8A%80%E8%A1%93/CS/cs_17_%E8%A8%AD%E5%AE%9A%E8%B7%A8%E4%BE%86%E6%BA%90%E8%B3%87%E6%BA%90%E5%85%B1%E7%94%A8/"/>
      <url>/2022/06/11/%E5%BE%8C%E7%AB%AF%E6%8A%80%E8%A1%93/CS/cs_17_%E8%A8%AD%E5%AE%9A%E8%B7%A8%E4%BE%86%E6%BA%90%E8%B3%87%E6%BA%90%E5%85%B1%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="Cors-跨來源資源共用"><a href="#Cors-跨來源資源共用" class="headerlink" title="Cors 跨來源資源共用"></a>Cors 跨來源資源共用</h1><p>相信很多人使用API 時候可能會遇到這問題，例如 : localhost to ip串接不上之類問題，原則上是”跨來源資源共用”在搞鬼。</p><p>Cors 概念中，我們把網站當作(A) 、API為(B)來解釋，A需要透過B取得資訊，傳有一個資料相關內容稱為 “request”，B會確認A的來源是否一樣(same origin)就會讓他執行進去。從中得知(B)是決定(A)是否有權限取得資源。</p><h2 id="使用-Core-API"><a href="#使用-Core-API" class="headerlink" title="使用 Core API"></a>使用 Core API</h2><p>這便我使用 vs 開啟 API，必須要注意有沒有選擇 OpenApi這功能會幫你開啟SwaggerUI相當方便。<br><img src="/../image/Snipaste_2022-06-11_22-42-03.png"><br><img src="/../image/Snipaste_2022-06-11_22-42-58.png"></p><p>這邊使用方式以後再來介紹，下方為產生完畢的function，我們就可以在下方指令區塊輸入 dotnet watch 完成開啟API localhost動作。 </p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">HttpGet</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> IEnumerable&lt;WeatherForecast&gt; <span class="title">Get</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> rng = <span class="keyword">new</span> Random();</span><br><span class="line">    <span class="keyword">return</span> Enumerable.Range(<span class="number">1</span>, <span class="number">5</span>).Select(index =&gt; <span class="keyword">new</span> WeatherForecast</span><br><span class="line">    &#123;</span><br><span class="line">        Date = DateTime.Now.AddDays(index),</span><br><span class="line">        TemperatureC = rng.Next(<span class="number">-20</span>, <span class="number">55</span>),</span><br><span class="line">        Summary = Summaries[rng.Next(Summaries.Length)]</span><br><span class="line">    &#125;)</span><br><span class="line">    .ToArray();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="創建html"><a href="#創建html" class="headerlink" title="創建html"></a>創建html</h2><p>創建 html 用意取得剛才的api，必須要使用<a href="https://marketplace.visualstudio.com/items?itemName=MS-vsliveshare.vsliveshare">Live Share</a>才能看得到錯誤訊息。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdnjs.cloudflare.com/ajax/libs/jquery/3.6.0/jquery.min.js&quot;</span> <span class="attr">integrity</span>=<span class="string">&quot;sha512-894YE6QWD5I59HgZOGReFYm4dnWc1Qt5NtvYSaNcOP+u1T9qYdvdihz0PPSiiqn/+/3e7Jo4EaG7TubfWGUrMQ==&quot;</span> <span class="attr">crossorigin</span>=<span class="string">&quot;anonymous&quot;</span> <span class="attr">referrerpolicy</span>=<span class="string">&quot;no-referrer&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    $.<span class="title function_">ajax</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">method</span>:<span class="string">&#x27;get&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">url</span>:<span class="string">&#x27;https://localhost:5001/WeatherForecast&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">success</span>: <span class="keyword">function</span>(<span class="params">rep</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(rep);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/../image/Snipaste_2022-06-11_23-05-56.png"></p><h2 id="設定-Cors"><a href="#設定-Cors" class="headerlink" title="設定 Cors"></a>設定 Cors</h2><p>現在到 API &gt; Startup.cs 設定。下方範例省略不重要的設定。<br>從錯誤訊息可以知道，origin有問題會跟API也就是後端去確認情況。設定相當簡單只需要<code>AllowAnyOrigin() </code> 就完成了，這邊要注意這是針對全域設定方式，如果要自定義下一章再來介紹。</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// This method gets called by the runtime. Use this method to add  services to the container.</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ConfigureServices</span>(<span class="params">IServiceCollection services</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    ...</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    services.AddCors(options=&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        options.AddDefaultPolicy( builder =&gt;</span><br><span class="line">        &#123;</span><br><span class="line">            builder.AllowAnyOrigin();</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// This method gets called by the runtime. Use this method to configure the HTTP request pipeline.</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Configure</span>(<span class="params">IApplicationBuilder app, IWebHostEnvironment env</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    ....</span><br><span class="line">    ....</span><br><span class="line"></span><br><span class="line">    app.UseCors();</span><br><span class="line">    ....</span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/../image/Snipaste_2022-06-11_23-19-33.png"></p><h2 id="範本"><a href="#範本" class="headerlink" title="範本"></a>範本</h2><p><a href="https://github.com/JontCont/dotnetCore_CorsExample">dotnetCore_CorsExample</a></p>]]></content>
      
      
      <categories>
          
          <category> 後端技術 </category>
          
          <category> C# </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
            <tag> core </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C# 爬蟲使用方式</title>
      <link href="/2022/05/30/%E5%BE%8C%E7%AB%AF%E6%8A%80%E8%A1%93/CS/cs_20_%E7%88%AC%E8%9F%B2%E4%BD%BF%E7%94%A8%E6%96%B9%E5%BC%8F/"/>
      <url>/2022/05/30/%E5%BE%8C%E7%AB%AF%E6%8A%80%E8%A1%93/CS/cs_20_%E7%88%AC%E8%9F%B2%E4%BD%BF%E7%94%A8%E6%96%B9%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><h2 id="主要是最近有個專案忘記紀錄以前寫的-Code-，順便把爬蟲那段拿出來紀錄。爬蟲是透過-Response-回來後的html-並從裡面竊取資料，執行動作必須要確認當前站台是否有開放能拿取資料的設定檔，如-robots-txt-。這邊就以簡單範例為例。"><a href="#主要是最近有個專案忘記紀錄以前寫的-Code-，順便把爬蟲那段拿出來紀錄。爬蟲是透過-Response-回來後的html-並從裡面竊取資料，執行動作必須要確認當前站台是否有開放能拿取資料的設定檔，如-robots-txt-。這邊就以簡單範例為例。" class="headerlink" title="主要是最近有個專案忘記紀錄以前寫的 Code ，順便把爬蟲那段拿出來紀錄。爬蟲是透過 Response 回來後的html 並從裡面竊取資料，執行動作必須要確認當前站台是否有開放能拿取資料的設定檔，如 robots.txt 。這邊就以簡單範例為例。"></a>主要是最近有個專案忘記紀錄以前寫的 Code ，順便把爬蟲那段拿出來紀錄。爬蟲是透過 Response 回來後的html 並從裡面竊取資料，執行動作必須要確認當前站台是否有開放能拿取資料的設定檔，如 robots.txt 。這邊就以簡單範例為例。</h2><h2 id="前置作業"><a href="#前置作業" class="headerlink" title="前置作業"></a>前置作業</h2><ul><li>Html Agility Pack : <a href="https://html-agility-pack.net/">點選我</a></li></ul><h2 id="撰寫爬蟲頁面"><a href="#撰寫爬蟲頁面" class="headerlink" title="撰寫爬蟲頁面"></a>撰寫爬蟲頁面</h2><p>這邊使用 “<a href="https://udn.com/news/cate/2/6644">https://udn.com/news/cate/2/6644</a>“ 聯合報新聞來做示範。</p><h3 id="response當前頁面"><a href="#response當前頁面" class="headerlink" title="response當前頁面"></a>response當前頁面</h3><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> HtmlAgilityPack;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title">networkReptile</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">async</span> Task <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//設定爬的網站</span></span><br><span class="line">            <span class="built_in">string</span> url = <span class="string">&quot;https://udn.com/news/cate/2/6644&quot;</span>;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">//取得當前 html 字串</span></span><br><span class="line">            HttpClient client = <span class="keyword">new</span>();</span><br><span class="line">            HttpResponseMessage response = <span class="keyword">await</span> client.GetAsync(url);</span><br><span class="line">            </span><br><span class="line">            response.EnsureSuccessStatusCode();</span><br><span class="line">            <span class="built_in">string</span> responseBody = <span class="keyword">await</span> response.Content.ReadAsStringAsync();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//設定response Body</span></span><br><span class="line">            HtmlDocument doc = <span class="keyword">new</span> ();</span><br><span class="line">            doc.LoadHtml(responseBody);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="取得想要的資料"><a href="#取得想要的資料" class="headerlink" title="取得想要的資料"></a>取得想要的資料</h2><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//取得想要的內容</span></span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">1</span>; i&lt;<span class="number">10</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">string</span> xpath = @<span class="string">$&quot;/html/body/main/div/section[2]/section[2]/div[1]/div[<span class="subst">&#123;i&#125;</span>]/div[2]/h2/a&quot;</span>;</span><br><span class="line">    HtmlNodeCollection content = doc.DocumentNode.SelectNodes(xpath);</span><br><span class="line">    <span class="keyword">if</span>(content == <span class="literal">null</span>) &#123; <span class="keyword">continue</span>; &#125;</span><br><span class="line">    <span class="keyword">foreach</span> (HtmlNode node <span class="keyword">in</span> content)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">string</span> href = doc.DocumentNode.SelectNodes(xpath+ <span class="string">@&quot;/@href&quot;</span>).FirstOrDefault().Attributes.FirstOrDefault().Value.ToString();</span><br><span class="line">        Console.WriteLine(<span class="string">$&quot;<span class="subst">&#123;i&#125;</span> - <span class="subst">&#123;node.InnerText&#125;</span> (https://udn.com/<span class="subst">&#123;href&#125;</span>)&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;<span class="comment">//foreach (HtmlNode node in content)</span></span><br><span class="line">&#125;<span class="comment">//for()</span></span><br></pre></td></tr></table></figure><h2 id="完整程式碼"><a href="#完整程式碼" class="headerlink" title="完整程式碼"></a>完整程式碼</h2><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> HtmlAgilityPack;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">networkReptile</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">async</span> Task <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//設定爬的網站</span></span><br><span class="line">            <span class="built_in">string</span> url = <span class="string">&quot;https://udn.com/news/cate/2/6644&quot;</span>;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">//取得當前 html 字串</span></span><br><span class="line">            HttpClient client = <span class="keyword">new</span>();</span><br><span class="line">            HttpResponseMessage response = <span class="keyword">await</span> client.GetAsync(url);</span><br><span class="line">            response.EnsureSuccessStatusCode();</span><br><span class="line">            <span class="built_in">string</span> responseBody = <span class="keyword">await</span> response.Content.ReadAsStringAsync();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//設定response Body</span></span><br><span class="line">            HtmlDocument doc = <span class="keyword">new</span> ();</span><br><span class="line">            doc.LoadHtml(responseBody);</span><br><span class="line"></span><br><span class="line">            Console.WriteLine(<span class="string">$&quot;!! ----- 即時新聞 ------ !!&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//取得想要的內容</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">1</span>; i&lt;<span class="number">10</span>; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">string</span> xpath = @<span class="string">$&quot;/html/body/main/div/section[2]/section[2]/div[1]/div[<span class="subst">&#123;i&#125;</span>]/div[2]/h2/a&quot;</span>;</span><br><span class="line">                HtmlNodeCollection content = doc.DocumentNode.SelectNodes(xpath);</span><br><span class="line">                <span class="keyword">if</span>(content == <span class="literal">null</span>) &#123; <span class="keyword">continue</span>; &#125;</span><br><span class="line">                <span class="keyword">foreach</span> (HtmlNode node <span class="keyword">in</span> content)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="built_in">string</span> href = doc.DocumentNode.SelectNodes(xpath+ <span class="string">@&quot;/@href&quot;</span>).FirstOrDefault().Attributes.FirstOrDefault().Value.ToString();</span><br><span class="line">                    Console.WriteLine(<span class="string">$&quot;<span class="subst">&#123;i&#125;</span> - <span class="subst">&#123;node.InnerText&#125;</span> (https://udn.com/<span class="subst">&#123;href&#125;</span>)&quot;</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;<span class="comment">//foreach (HtmlNode node in content)</span></span><br><span class="line">            &#125;<span class="comment">//for()</span></span><br><span class="line"></span><br><span class="line">        &#125;<span class="comment">//main()</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="參考文件"><a href="#參考文件" class="headerlink" title="參考文件"></a>參考文件</h2><ul><li><a href="https://exfast.me/2016/07/c-use-the-htmlagilitypack-to-collect-web-pages/">使用 HtmlAgilityPack 來採集網頁</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 後端技術 </category>
          
          <category> C# </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【筆記】如何確認 TipTop Web Api 對接方式</title>
      <link href="/2022/05/13/%E7%AD%86%E8%A8%98%E8%88%87%E7%94%9F%E6%B4%BB%E9%9B%9C%E8%A8%98/%E6%8A%80%E8%A1%93/%E3%80%90%E7%AD%86%E8%A8%98%E3%80%91%E5%A6%82%E4%BD%95%E7%A2%BA%E8%AA%8D%20TipTop%20Web%20Api%20%E5%B0%8D%E6%8E%A5%E6%96%B9%E5%BC%8F/"/>
      <url>/2022/05/13/%E7%AD%86%E8%A8%98%E8%88%87%E7%94%9F%E6%B4%BB%E9%9B%9C%E8%A8%98/%E6%8A%80%E8%A1%93/%E3%80%90%E7%AD%86%E8%A8%98%E3%80%91%E5%A6%82%E4%BD%95%E7%A2%BA%E8%AA%8D%20TipTop%20Web%20Api%20%E5%B0%8D%E6%8E%A5%E6%96%B9%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="紀錄目的"><a href="#紀錄目的" class="headerlink" title="紀錄目的"></a>紀錄目的</h1><p>近期遇到 Web Api 處理方式是使用 TipTop Web Api，處理方式、撰寫方式也不明確，在此紀錄如何跟別人對接Web Api 方式。</p><h1 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h1><p>TipTop 是一個非常舊版的 Web Api，執行上對新人非常不友善。下方是概念圖。<br><img src="/img/flower/tiptop.png"></p><p>遇到不使用帳號的 API 往往都是使用內網方式串接，目前查詢呼叫方式使用 SoapUI 到目前是顯示XML比較好用的Software。</p><h2 id="注意事項"><a href="#注意事項" class="headerlink" title="注意事項"></a>注意事項</h2><ol><li>Response 通常會在自己本機撰寫好程式碼，會告知對方使用這個Function。</li><li>可以透過得知文件進行確認</li><li>TipTop 有分兩種版本，1. 需使用帳號登入 2. 只需傳入值</li><li>Response 如果失效，通常會有顯示 Status ，[-1] 為無效、失敗; [0]則是成功。</li></ol><h2 id="下載支援"><a href="#下載支援" class="headerlink" title="下載支援"></a>下載支援</h2><ol><li><a href="https://www.soapui.org/downloads/soapui/">SoapUI</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 筆記 </category>
          
          <category> 生活雜記 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web Api </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React (八) - 簡易製作Login 製作【套件 react auth kit】</title>
      <link href="/2022/05/09/%E5%89%8D%E7%AB%AF%E6%8A%80%E8%A1%93/REACT/react-08-%E4%BD%BF%E7%94%A8React%20Auth%20Kit%E8%A3%BD%E4%BD%9C%E7%99%BB%E5%85%A5/"/>
      <url>/2022/05/09/%E5%89%8D%E7%AB%AF%E6%8A%80%E8%A1%93/REACT/react-08-%E4%BD%BF%E7%94%A8React%20Auth%20Kit%E8%A3%BD%E4%BD%9C%E7%99%BB%E5%85%A5/</url>
      
        <content type="html"><![CDATA[<h2 id="一、react-auth-kit"><a href="#一、react-auth-kit" class="headerlink" title="一、react auth kit"></a>一、react auth kit</h2><p>是簡化身份驗證和授權在 React 應用程式中的整合過程。它提供了一種靈活的方式來管理使用者身份驗證狀態、處理登入和註銷，以及控制使用者對特定功能和資源的存取權限。</p><h3 id="特徵"><a href="#特徵" class="headerlink" title="特徵"></a>特徵</h3><ol><li>身份驗證狀態管理</li><li>身份驗證元件</li><li>存取控制</li><li>路由保護</li></ol><p>它提供了一套強大而靈活的工具，讓你能夠輕鬆地構建安全可靠的使用者身份驗證系統。</p><h2 id="二·-使用方式"><a href="#二·-使用方式" class="headerlink" title="二· 使用方式"></a>二· 使用方式</h2><h3 id="1-1-新增login-設定"><a href="#1-1-新增login-設定" class="headerlink" title="1-1 新增login 設定"></a>1-1 新增login 設定</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">privateElement</span> = (<span class="params">element: JSX.Element</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">RequireAuth</span> <span class="attr">loginPath</span>=<span class="string">&#123;</span>&quot;/<span class="attr">login</span>&quot;&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">            &#123;element&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">RequireAuth</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-2-區分Layout-用法"><a href="#1-2-區分Layout-用法" class="headerlink" title="1-2 區分Layout 用法"></a>1-2 區分Layout 用法</h3><h4 id="1-2-1-需登入頁面設定"><a href="#1-2-1-需登入頁面設定" class="headerlink" title="1-2-1 需登入頁面設定"></a>1-2-1 需登入頁面設定</h4><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="comment">/* user authrozie element */</span>&#125;</span><br><span class="line">&lt;<span class="title class_">Route</span> path=<span class="string">&quot;/Login&quot;</span> element=&#123;<span class="language-xml"><span class="tag">&lt;<span class="name">LoginLayout</span> /&gt;</span></span>&#125;&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/Login&quot;</span> <span class="attr">element</span>=<span class="string">&#123;</span>&lt;<span class="attr">Login</span> /&gt;</span>&#125; /&gt;</span></span><br><span class="line">&lt;/<span class="title class_">Route</span>&gt;</span><br></pre></td></tr></table></figure><h4 id="1-2-2-登入後頁面"><a href="#1-2-2-登入後頁面" class="headerlink" title="1-2-2 登入後頁面"></a>1-2-2 登入後頁面</h4><p>使用不同的Layout這邊可以使用下方作法</p><ol><li>LoginLayout : 新增一個 LoginLayout.ts 製作 登入的模板</li><li>&#x2F;Login : 底下為允許使用 LoginLayout 套版的也面。<figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="comment">/* System element */</span>&#125;</span><br><span class="line">&lt;<span class="title class_">Route</span> path=<span class="string">&quot;/&quot;</span> element=&#123;<span class="language-xml"><span class="tag">&lt;<span class="name">MainLayout</span> /&gt;</span></span>&#125;&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/&quot;</span> <span class="attr">element</span>=<span class="string">&#123;privateElement(</span>&lt;<span class="attr">Home</span> /&gt;</span>)&#125; /&gt;</span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/Profile&quot;</span> <span class="attr">element</span>=<span class="string">&#123;privateElement(</span>&lt;<span class="attr">ProfileHome</span> /&gt;</span>)&#125; /&gt;</span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/about&quot;</span> <span class="attr">element</span>=<span class="string">&#123;privateElement(</span>&lt;<span class="attr">About</span> /&gt;</span>)&#125; /&gt;</span></span><br><span class="line">&lt;/<span class="title class_">Route</span>&gt;</span><br></pre></td></tr></table></figure></li></ol><h3 id="1-3-登入頁面處理"><a href="#1-3-登入頁面處理" class="headerlink" title="1-3 登入頁面處理"></a>1-3 登入頁面處理</h3><h4 id="1-3-1-判斷有登入過"><a href="#1-3-1-判斷有登入過" class="headerlink" title="1-3-1 判斷有登入過"></a>1-3-1 判斷有登入過</h4><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useIsAuthenticated, useSignIn &#125; <span class="keyword">from</span> <span class="string">&quot;react-auth-kit&quot;</span>;</span><br><span class="line"><span class="comment">//是否有驗證</span></span><br><span class="line"><span class="keyword">const</span> isAuthenticated = <span class="title function_">useIsAuthenticated</span>();</span><br><span class="line"></span><br><span class="line"><span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="title function_">isAuthenticated</span>()) &#123;</span><br><span class="line">        <span class="title function_">navigate</span>(<span class="string">&quot;/login&quot;</span>, &#123; <span class="attr">replace</span>: <span class="literal">true</span> &#125;);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="title function_">navigate</span>(<span class="string">&quot;/&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;, []);</span><br></pre></td></tr></table></figure><h4 id="1-3-2-登入做法"><a href="#1-3-2-登入做法" class="headerlink" title="1-3-2 登入做法"></a>1-3-2 登入做法</h4><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> signIn = <span class="title function_">useSignIn</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 權限 (透過Ajax 取得token)</span></span><br><span class="line"><span class="keyword">const</span> token = <span class="keyword">await</span> services?.<span class="property">auth</span>.<span class="title function_">login</span>(useremail, password);</span><br><span class="line">    <span class="keyword">if</span> (!token) &#123;</span><br><span class="line">    toast.<span class="title function_">error</span>(<span class="string">&#x27;帳號或密碼輸入錯誤，請重新輸入&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 登入</span></span><br><span class="line"><span class="title function_">signIn</span>(&#123;</span><br><span class="line">    <span class="attr">token</span>: token, <span class="comment">//Just a random token</span></span><br><span class="line">    <span class="attr">tokenType</span>: <span class="string">&quot;Bearer&quot;</span>, <span class="comment">// Token type set as Bearer</span></span><br><span class="line">    <span class="attr">authState</span>: &#123; <span class="attr">name</span>: <span class="string">&quot;React User&quot;</span>, <span class="attr">uid</span>: <span class="number">123456</span> &#125;, <span class="comment">// Dummy auth user state</span></span><br><span class="line">    <span class="attr">expiresIn</span>: <span class="number">120</span> <span class="comment">// Token Expriration time, in minutes</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端技術 </category>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React (七) - 簡易製作Login 製作【內建 react-redix】</title>
      <link href="/2022/05/08/%E5%89%8D%E7%AB%AF%E6%8A%80%E8%A1%93/REACT/react-07-%E7%94%A8react-redix%E7%B0%A1%E5%96%AE%E5%AF%A6%E7%8F%BElogin/"/>
      <url>/2022/05/08/%E5%89%8D%E7%AB%AF%E6%8A%80%E8%A1%93/REACT/react-07-%E7%94%A8react-redix%E7%B0%A1%E5%96%AE%E5%AF%A6%E7%8F%BElogin/</url>
      
        <content type="html"><![CDATA[<h2 id="複習"><a href="#複習" class="headerlink" title="複習"></a>複習</h2><p>React Redux 是一個用於在 React 應用程序中管理狀態的領先狀態管理庫。它與 Redux 库密切配合，提供了一個可預測的狀態容器，並通過使用 React 的 Context API 實現了高效的狀態管理。React Redux 基於 Flux 架構，使用單向數據流模型來處理應用程序的狀態更新。</p><p>React Redux 的主要特點包括：</p><ul><li>提供一個 Provider 組件，使整個應用程序中的組件都能夠訪問 Redux 的狀態。</li><li>通過 useSelector Hook Function和 useDispatch Hook Function，簡化了組件與 Redux 的交互。</li><li>通過使用 connect 函數，可以將組件與 Redux 的狀態和操作相連接，使它們能夠自動更新。</li><li>支持中間件，例如 Redux Thunk 或 Redux Saga，用於處理異步操作和複雜的業務邏輯。</li></ul><h2 id="登入"><a href="#登入" class="headerlink" title="登入"></a>登入</h2><h3 id="1-創建-src-store-stroe-js"><a href="#1-創建-src-store-stroe-js" class="headerlink" title="1. 創建 src&#x2F;store&#x2F;stroe.js"></a>1. 創建 src&#x2F;store&#x2F;stroe.js</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; configureStore &#125; <span class="keyword">from</span> <span class="string">&#x27;@reduxjs/toolkit&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> authReducer <span class="keyword">from</span> <span class="string">&#x27;./auth/authSlice&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = <span class="title function_">configureStore</span>(&#123;</span><br><span class="line">  <span class="attr">reducer</span>: &#123;</span><br><span class="line">    <span class="attr">auth</span>: authReducer</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> store;</span><br></pre></td></tr></table></figure><ol start="2"><li>加入 authSlice.js<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// authSlice.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; createSlice &#125; <span class="keyword">from</span> <span class="string">&#x27;@reduxjs/toolkit&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> authSlice = <span class="title function_">createSlice</span>(&#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;auth&#x27;</span>,</span><br><span class="line">  <span class="attr">initialState</span>: &#123;</span><br><span class="line">    <span class="attr">isAuthenticated</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">user</span>: <span class="literal">null</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">reducers</span>: &#123;</span><br><span class="line">    <span class="comment">//授權動作</span></span><br><span class="line">    <span class="attr">loginSuccess</span>: <span class="function">(<span class="params">state, action</span>) =&gt;</span> &#123;</span><br><span class="line">      state.<span class="property">isAuthenticated</span> = <span class="literal">true</span>;</span><br><span class="line">      state.<span class="property">user</span> = action.<span class="property">payload</span>;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="attr">logoutSuccess</span>: <span class="function">(<span class="params">state</span>) =&gt;</span> &#123;</span><br><span class="line">      state.<span class="property">isAuthenticated</span> = <span class="literal">false</span>;</span><br><span class="line">      state.<span class="property">user</span> = <span class="literal">null</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> &#123; loginSuccess, logoutSuccess &#125; = authSlice.<span class="property">actions</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> authSlice.<span class="property">reducer</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><h3 id="3-index-js-加入狀態"><a href="#3-index-js-加入狀態" class="headerlink" title="3. index.js 加入狀態"></a>3. index.js 加入狀態</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ReactDOM</span> <span class="keyword">from</span> <span class="string">&#x27;react-dom/client&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./index.css&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> reportWebVitals <span class="keyword">from</span> <span class="string">&#x27;./reportWebVitals&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&#x27;./store/store&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Provider</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react-redux&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> root = <span class="title class_">ReactDOM</span>.<span class="title function_">createRoot</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>));</span><br><span class="line"></span><br><span class="line">root.<span class="title function_">render</span>(</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">Provider</span> <span class="attr">store</span>=<span class="string">&#123;store&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">App</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">Provider</span>&gt;</span></span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="title function_">reportWebVitals</span>();</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="4-加入-App-js-登入頁面"><a href="#4-加入-App-js-登入頁面" class="headerlink" title="4. 加入 App.js 登入頁面"></a>4. 加入 App.js 登入頁面</h3><p>在這個例子中，我們使用了 useSelector 函數來從 Redux Store 中獲取登入狀態。然後根據狀態顯示不同的按鈕。當按鈕被點擊時，我們使用 useDispatch 函數分發相應的 action，從而更新登入狀態。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> logo <span class="keyword">from</span> <span class="string">&#x27;./logo.svg&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; useSelector, useDispatch &#125; <span class="keyword">from</span> <span class="string">&#x27;react-redux&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; decrement, increment &#125; <span class="keyword">from</span> <span class="string">&#x27;./store/counter/counterSlice&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useState &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; loginSuccess &#125; <span class="keyword">from</span> <span class="string">&#x27;./store/auth/authSlice&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./App.css&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">//initial value </span></span><br><span class="line">  <span class="keyword">const</span> [username, setUsername] = <span class="title function_">useState</span>(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line">  <span class="keyword">const</span> [password, setPassword] = <span class="title function_">useState</span>(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line">  <span class="keyword">const</span> dispatch = <span class="title function_">useDispatch</span>();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">handleSubmit</span> = (<span class="params">e</span>) =&gt;&#123;</span><br><span class="line">    e.<span class="title function_">preventDefault</span>();</span><br><span class="line">    <span class="keyword">const</span> user = &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">username</span>: <span class="string">&#x27;exampleuser&#x27;</span> &#125;;</span><br><span class="line">    <span class="title function_">dispatch</span>(<span class="title function_">loginSuccess</span>(user));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;d-flex flex-center h-100vh&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#x27;d-inline-block padding-1&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">h3</span> <span class="attr">className</span>=<span class="string">&#x27;text-center&#x27;</span>&gt;</span>登入<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>製作簡易版本登入，比較react redux 與 react auto kit 功能<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>作品參考請至 Github 查詢<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#x27;card d-inline-block&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">form</span> <span class="attr">className</span>=<span class="string">&#x27;&#x27;</span> <span class="attr">onSubmit</span>=<span class="string">&#123;handleSubmit&#125;</span>&gt;</span> </span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">label</span>&gt;</span>User<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&#x27;text&#x27;</span> </span></span></span><br><span class="line"><span class="tag"><span class="language-xml">              <span class="attr">placeholder</span>=<span class="string">&#x27;User&#x27;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">              <span class="attr">value</span>=<span class="string">&#123;username&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">              <span class="attr">onChange</span>=<span class="string">&#123;(e)</span> =&gt;</span> setUsername(e.target.value)&#125;&gt;</span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">input</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">label</span>&gt;</span>pass<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&#x27;password&#x27;</span> </span></span></span><br><span class="line"><span class="tag"><span class="language-xml">              <span class="attr">placeholder</span>=<span class="string">&#x27;password&#x27;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">              <span class="attr">value</span>=<span class="string">&#123;password&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">              <span class="attr">onChange</span>=<span class="string">&#123;(e)</span> =&gt;</span> setPassword(e.target.value)&#125;</span></span><br><span class="line"><span class="language-xml">              &gt;<span class="tag">&lt;/<span class="name">input</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&#x27;submit&#x27;</span>&gt;</span>Sign in<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span>;</span><br></pre></td></tr></table></figure><h2 id="實作範例"><a href="#實作範例" class="headerlink" title="實作範例"></a>實作範例</h2><ol><li><a href="https://github.com/JontCont/react-login-redux">JontCont&#x2F;react-login-redux</a></li><li><a href="https://github.com/JontCont/redux-login-example">JontCont&#x2F;redux-login-example</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 前端技術 </category>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React (六) - 先學 react-redux 後學login</title>
      <link href="/2022/05/07/%E5%89%8D%E7%AB%AF%E6%8A%80%E8%A1%93/REACT/react-06-%E5%85%88%E5%AD%B8react-redux%E5%BE%8C%E5%AD%B8login/"/>
      <url>/2022/05/07/%E5%89%8D%E7%AB%AF%E6%8A%80%E8%A1%93/REACT/react-06-%E5%85%88%E5%AD%B8react-redux%E5%BE%8C%E5%AD%B8login/</url>
      
        <content type="html"><![CDATA[<h1 id="React-Redux"><a href="#React-Redux" class="headerlink" title="React Redux"></a>React Redux</h1><p>React Redux 是一個用於在 React 應用程序中管理狀態的領先狀態管理庫。它與 Redux 库密切配合，提供了一個可預測的狀態容器，並通過使用 React 的 Context API 實現了高效的狀態管理。React Redux 基於 Flux 架構，使用單向數據流模型來處理應用程序的狀態更新。</p><p>React Redux 的主要特點包括：</p><ul><li>提供一個 Provider 組件，使整個應用程序中的組件都能夠訪問 Redux 的狀態。</li><li>通過 useSelector 和 useDispatch，簡化了組件與 Redux 的交互。</li><li>通過使用 connect 函數，可以將組件與 Redux 的狀態和操作相連接，使它們能夠自動更新。</li><li>支持中間件，例如 Redux Thunk 或 Redux Saga，用於處理異步操作和複雜的業務邏輯。</li></ul><h2 id="useDispatch"><a href="#useDispatch" class="headerlink" title="useDispatch"></a>useDispatch</h2><p>useDispatch 是一個用於獲取 Redux store 的 dispatch 函數的鉤子函數。dispatch 函數用於觸發 Redux store 中的 action，從而更新狀態。通過 useDispatch，我們可以在組件中直接調用 dispatch 函數，而無需手動導入和創建 Redux store。</p><h2 id="useSelector"><a href="#useSelector" class="headerlink" title="useSelector"></a>useSelector</h2><p>useSelector 是一個用於從 Redux store 中選擇和提取數據的鉤子函數。它接收一個函數作為參數，該函數可以從 Redux store 的狀態樹中選擇所需的數據，並將其返回給組件。每當 Redux store 中的狀態發生變化時，useSelector 會自動重新運行，並將新的狀態值提供給組件，從而觸發組件的重新渲染。</p><h2 id="前置作業"><a href="#前置作業" class="headerlink" title="前置作業"></a>前置作業</h2><p>npm : <a href="https://www.npmjs.com/">點選我</a><br>使用工具&#x2F;套件：</p><ol><li>@reduxjs&#x2F;toolkit : <a href="https://www.npmjs.com/package/@reduxjs/toolkit">點選我</a></li><li>react-redux : <a href="https://www.npmjs.com/package/react-redux">點選我</a></li></ol><p>使用指令&#x2F;專案:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx create-react-app react-redux-example --template typescript</span><br></pre></td></tr></table></figure><h2 id="製作計數器-counter"><a href="#製作計數器-counter" class="headerlink" title="製作計數器 (counter)"></a>製作計數器 (counter)</h2><p>官方 react-redux : <a href="https://react-redux.js.org/">點選我</a></p><p>動作&#x2F;目標:</p><ol><li>創建 <code>src/store/store.tsx</code></li><li>創建 <code>src/store/counter/counterSlice.tsx</code></li><li>修改 index.tsx 、App.tsx</li></ol><h3 id="創建-store-tsx"><a href="#創建-store-tsx" class="headerlink" title="創建 store.tsx"></a>創建 store.tsx</h3><p>因為初次使用暫時把參數那些放一邊</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; configureStore &#125; <span class="keyword">from</span> <span class="string">&#x27;@reduxjs/toolkit&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> counterReducer <span class="keyword">from</span> <span class="string">&#x27;./counter/counterSlice&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = <span class="title function_">configureStore</span>(&#123;</span><br><span class="line">    <span class="attr">reducer</span>: &#123;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> store;</span><br></pre></td></tr></table></figure><h3 id="創建-counterSlice-tsx"><a href="#創建-counterSlice-tsx" class="headerlink" title="創建 counterSlice.tsx"></a>創建 counterSlice.tsx</h3><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createSlice &#125; <span class="keyword">from</span> <span class="string">&#x27;@reduxjs/toolkit&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> counterSlice = <span class="title function_">createSlice</span>(&#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;counter&#x27;</span>,</span><br><span class="line">    <span class="attr">initialState</span>: &#123;</span><br><span class="line">        <span class="attr">value</span>: <span class="number">0</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">reducers</span>: &#123;</span><br><span class="line">        <span class="comment">//method</span></span><br><span class="line">        <span class="attr">increment</span>: <span class="function">(<span class="params">state</span>) =&gt;</span> &#123;</span><br><span class="line">            state.<span class="property">value</span> += <span class="number">1</span>;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">decrement</span>: <span class="function">(<span class="params">state</span>) =&gt;</span> &#123;</span><br><span class="line">            state.<span class="property">value</span> -= <span class="number">1</span>;</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> &#123; increment, decrement &#125; = counterSlice.<span class="property">actions</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> counterSlice.<span class="property">reducer</span>;</span><br></pre></td></tr></table></figure><p>因為已經取得好參數，可以把 store.tsx 內容補齊</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; configureStore &#125; <span class="keyword">from</span> <span class="string">&#x27;@reduxjs/toolkit&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> counterReducer <span class="keyword">from</span> <span class="string">&#x27;./counter/counterSlice&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = <span class="title function_">configureStore</span>(&#123;</span><br><span class="line">    <span class="attr">reducer</span>: &#123;</span><br><span class="line">        <span class="attr">counter</span>: counterReducer,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> store;</span><br></pre></td></tr></table></figure><h3 id="修改-index-tsx-、App-tsx"><a href="#修改-index-tsx-、App-tsx" class="headerlink" title="修改 index.tsx 、App.tsx"></a>修改 index.tsx 、App.tsx</h3><figure class="highlight tsx"><figcaption><span>index.tsx</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">ReactDOM</span> <span class="keyword">from</span> <span class="string">&#x27;react-dom/client&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./index.css&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> reportWebVitals <span class="keyword">from</span> <span class="string">&#x27;./reportWebVitals&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Provider</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react-redux&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&#x27;./store/store&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> root = <span class="title class_">ReactDOM</span>.<span class="title function_">createRoot</span>(</span><br><span class="line">  <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>) <span class="keyword">as</span> <span class="title class_">HTMLElement</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">root.<span class="title function_">render</span>(</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">Provider</span> <span class="attr">store</span>=<span class="string">&#123;store&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">App</span>&gt;</span><span class="tag">&lt;/<span class="name">App</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">Provider</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="title function_">reportWebVitals</span>();</span><br></pre></td></tr></table></figure><figure class="highlight tsx"><figcaption><span>App.tsx</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> logo <span class="keyword">from</span> <span class="string">&#x27;./logo.svg&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./App.css&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; useDispatch, useSelector &#125; <span class="keyword">from</span> <span class="string">&#x27;react-redux&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; decrement, increment &#125; <span class="keyword">from</span> <span class="string">&#x27;./store/counter/counterSlice&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) </span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">const</span> count = <span class="title function_">useSelector</span>(<span class="function">(<span class="params">state: <span class="built_in">any</span></span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> state.<span class="property">counter</span>.<span class="property">value</span>;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">const</span> dispatch = <span class="title function_">useDispatch</span>()</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h3</span>&gt;</span>React-Redux<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        Result : &#123;count&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">aria-label</span>=<span class="string">&quot;Increment value&quot;</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> dispatch(increment())&#125;&gt;</span></span><br><span class="line"><span class="language-xml">          Increment</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">aria-label</span>=<span class="string">&quot;Decrement value&quot;</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> dispatch(decrement())&#125;&gt;</span></span><br><span class="line"><span class="language-xml">          Decrement</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="畫面完成"><a href="#畫面完成" class="headerlink" title="畫面完成"></a>畫面完成</h2><p><img src="/image/20230604_14-36-16.png"></p>]]></content>
      
      
      <categories>
          
          <category> 前端技術 </category>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React (五) - 把Layout解體吧</title>
      <link href="/2022/05/06/%E5%89%8D%E7%AB%AF%E6%8A%80%E8%A1%93/REACT/react-05-%E6%8A%8ALayout%E8%A7%A3%E9%AB%94%E5%90%A7/"/>
      <url>/2022/05/06/%E5%89%8D%E7%AB%AF%E6%8A%80%E8%A1%93/REACT/react-05-%E6%8A%8ALayout%E8%A7%A3%E9%AB%94%E5%90%A7/</url>
      
        <content type="html"><![CDATA[<p>在上一篇文章中，我們已經討論了如何將 index.js 與其他版面分開，這次我們要延續這個主題，並稍微提到元件的使用方式。</p><h2 id="元件"><a href="#元件" class="headerlink" title="元件"></a>元件</h2><p>元件的概念是將 head、body、footer 等區塊拆分開來，以便後續功能的延伸或擴充。通常我會進一步細分，例如使用者功能清單、目錄、公用樣板 (如 Card 和 Page Title) 等。這樣做可以提升開發的可讀性，減少多行程式碼難以辨識的問題。</p><hr><h2 id="Layout"><a href="#Layout" class="headerlink" title="Layout"></a>Layout</h2><p>本次的範例如下圖所示。我特別使用顏色框出那些功能，以展示它們是如何被拆分為元件的方式進行撰寫。<br><img src="/image/20230603_22-24-02.png"><br><img src="/image/20230603_22-27-37.png"></p><h3 id="簡易引用元件-Header"><a href="#簡易引用元件-Header" class="headerlink" title="簡易引用元件 - Header"></a>簡易引用元件 - Header</h3><p>這邊只顯示一部份，若要看完整請到 <a href="https://github.com/JontCont/StartFMS.Backend.Web/tree/master-react">github(StartFMS.Backend.Web)</a>。</p><p>解釋為什麼要怎樣拆開 Header Title 。</p><ol><li>彈性化 : 利用Ajax方式取得需要的 page</li><li>客製化 : 可能有不同客戶需求樣板可另外擴充</li></ol><p>Header.tsx</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Link</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> users <span class="keyword">from</span> <span class="string">&#x27;admin-lte/dist/img/user1-128x128.jpg&#x27;</span></span><br><span class="line"><span class="keyword">import</span> users_8 <span class="keyword">from</span> <span class="string">&#x27;admin-lte/dist/img/user8-128x128.jpg&#x27;</span></span><br><span class="line"><span class="keyword">import</span> users_3 <span class="keyword">from</span> <span class="string">&#x27;admin-lte/dist/img/user3-128x128.jpg&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">HeaderTitle</span> <span class="keyword">from</span> <span class="string">&#x27;./Header/HeaderTitle&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Header</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">nav</span> <span class="attr">className</span>=<span class="string">&quot;main-header navbar navbar-expand navbar-white navbar-light&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">HeaderTitle</span>&gt;</span><span class="tag">&lt;/<span class="name">HeaderTitle</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      </span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">ul</span> <span class="attr">className</span>=<span class="string">&quot;navbar-nav ml-auto&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">className</span>=<span class="string">&quot;nav-item&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;<span class="name">a</span> <span class="attr">className</span>=<span class="string">&quot;nav-link&quot;</span> <span class="attr">data-widget</span>=<span class="string">&quot;navbar-search&quot;</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">role</span>=<span class="string">&quot;button&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">i</span> <span class="attr">className</span>=<span class="string">&quot;fas fa-search&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;navbar-search-block&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">form</span> <span class="attr">className</span>=<span class="string">&quot;form-inline&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                  <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;input-group input-group-sm&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">className</span>=<span class="string">&quot;form-control form-control-navbar&quot;</span> <span class="attr">type</span>=<span class="string">&quot;search&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;Search&quot;</span> <span class="attr">aria-label</span>=<span class="string">&quot;Search&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;input-group-append&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                      <span class="tag">&lt;<span class="name">button</span> <span class="attr">className</span>=<span class="string">&quot;btn btn-navbar&quot;</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                        <span class="tag">&lt;<span class="name">i</span> <span class="attr">className</span>=<span class="string">&quot;fas fa-search&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                      <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                      <span class="tag">&lt;<span class="name">button</span> <span class="attr">className</span>=<span class="string">&quot;btn btn-navbar&quot;</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">data-widget</span>=<span class="string">&quot;navbar-search&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                        <span class="tag">&lt;<span class="name">i</span> <span class="attr">className</span>=<span class="string">&quot;fas fa-times&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                      <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">            ....</span></span><br><span class="line"><span class="language-xml">            ....</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span></span><br><span class="line">     );</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Header</span>;</span><br></pre></td></tr></table></figure><p>HeaderTitle.tsx</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Link</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">HeaderTitle</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">className</span>=<span class="string">&quot;navbar-nav&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">className</span>=<span class="string">&quot;nav-item&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">className</span>=<span class="string">&quot;nav-link&quot;</span> <span class="attr">data-widget</span>=<span class="string">&quot;pushmenu&quot;</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">role</span>=<span class="string">&quot;button&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">className</span>=<span class="string">&quot;fas fa-bars&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">className</span>=<span class="string">&quot;nav-item d-none d-sm-inline-block&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">&quot;/&quot;</span> <span class="attr">className</span>=<span class="string">&quot;nav-link&quot;</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">className</span>=<span class="string">&quot;nav-item d-none d-sm-inline-block&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">&quot;/about&quot;</span> <span class="attr">className</span>=<span class="string">&quot;nav-link&quot;</span>&gt;</span>About<span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">HeaderTitle</span>;</span><br></pre></td></tr></table></figure><h3 id="進階引入-Content"><a href="#進階引入-Content" class="headerlink" title="進階引入 - Content"></a>進階引入 - Content</h3><p>這邊比較特殊需要使用到 <code>ReactNode</code> 幫我們解決一般呼叫元件不能使用 node 的問題，首先，我們先創建 interface 加入我們的專案。</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> <span class="title class_">ContentPageProps</span> &#123;</span><br><span class="line">    <span class="attr">children</span>: <span class="title class_">ReactNode</span>,</span><br><span class="line">    <span class="attr">titleName</span>: <span class="built_in">string</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>這邊期望效果是可以套用在 container-fluid &gt; row 下方標記，所以我們要把 ReactNode變數加入在裡面即可。</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">ContentPageProps</span> &#125; <span class="keyword">from</span> <span class="string">&quot;../../../interface/layout&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Content</span> = (<span class="params">props: ContentPageProps</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">section</span> <span class="attr">className</span>=<span class="string">&quot;content-header&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;container-fluid&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;row mb-2&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;col-sm-6&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                            <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;props.titleName&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;col-sm-6&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                            <span class="tag">&lt;<span class="name">ol</span> <span class="attr">className</span>=<span class="string">&quot;breadcrumb float-sm-right&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                                <span class="tag">&lt;<span class="name">li</span> <span class="attr">className</span>=<span class="string">&quot;breadcrumb-item active&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                                &#123;props.titleName&#125;</span></span><br><span class="line"><span class="language-xml">                                <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                            <span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;content&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;container-fluid&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                        &#123;props.children&#125;</span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Content</span>;</span><br></pre></td></tr></table></figure><p>接下來只需要加入 Content 就可以顯示我們的內容，若content沒有加入 reactnode 會無法顯示內容。切記: 誤把 routers 作法引用在這或是引用到router ，因為這種做法 router 是無法識別。</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Home.js</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Content</span> <span class="keyword">from</span> <span class="string">&#x27;../../@Shared/@Layout/Content&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">CardFrame</span> <span class="keyword">from</span> <span class="string">&#x27;../../@Shared/@Layout/Frame/CardBodyFrame&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> titleName = <span class="string">&quot;Hoem&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Home</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">Content</span> <span class="attr">titleName</span>=<span class="string">&#x27;Home&#x27;</span> &gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>Welcome to my home page!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>You can use any font library you like with AdminLTE 3.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">strong</span>&gt;</span>Recommendations<span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://fontawesome.com/&quot;</span>&gt;</span>Font Awesome<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://useiconic.com/open/&quot;</span>&gt;</span>Iconic Icons<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://ionicons.com/&quot;</span>&gt;</span>Ion Icons<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">Content</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Home</span>;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端技術 </category>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React (四) - 套不同的Layout</title>
      <link href="/2022/05/05/%E5%89%8D%E7%AB%AF%E6%8A%80%E8%A1%93/REACT/react-04-%E5%A5%97%E4%B8%8D%E5%90%8C%E7%9A%84Layout/"/>
      <url>/2022/05/05/%E5%89%8D%E7%AB%AF%E6%8A%80%E8%A1%93/REACT/react-04-%E5%A5%97%E4%B8%8D%E5%90%8C%E7%9A%84Layout/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>好一段時間沒有發表學習文了，主要是因為我花了兩個禮拜的時間研究這個東西，終於找到了原因和使用方式。雖然有ChatGPT的幫助，但還是沒有解決我現在要特別標記的主題。</p><p>(P.S. 這次的主題是我卡了很久的一個技術問題。)</p><h2 id="React-Router-中-Outlet"><a href="#React-Router-中-Outlet" class="headerlink" title="React Router 中 Outlet"></a>React Router 中 Outlet</h2><p>在父路由元素中，應該使用 <Outlet> 來呈現其子路由元素。這樣，當子路由被渲染時，嵌套的使用者介面就能夠顯示出來。如果父路由完全匹配，它會渲染一個子索引路由，如果沒有索引路由，則不會呈現任何內容。</p><h3 id="1-類型聲明-Type-declaration"><a href="#1-類型聲明-Type-declaration" class="headerlink" title="1. 類型聲明 (Type declaration)"></a>1. 類型聲明 (Type declaration)</h3><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">OutletProps</span> &#123;</span><br><span class="line">  context?: <span class="built_in">unknown</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">declare</span> <span class="keyword">function</span> <span class="title function_">Outlet</span>(<span class="params"></span></span><br><span class="line"><span class="params">  props: OutletProps</span></span><br><span class="line"><span class="params"></span>): <span class="title class_">React</span>.<span class="property">ReactElement</span> | <span class="literal">null</span>;</span><br></pre></td></tr></table></figure><h3 id="2-參考官方作法"><a href="#2-參考官方作法" class="headerlink" title="2. 參考官方作法"></a>2. 參考官方作法</h3><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Dashboard</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;h1&gt;Dashboard&lt;/h1&gt;</span><br><span class="line"></span><br><span class="line">      &#123;/* This element will render either &lt;DashboardMessages&gt; when the URL is</span><br><span class="line">          &quot;/messages&quot;, &lt;DashboardTasks&gt; at &quot;/tasks&quot;, or null if it is &quot;/&quot;</span><br><span class="line">      */&#125;</span><br><span class="line">      &lt;Outlet /&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function App() &#123;</span><br><span class="line">  return (</span><br><span class="line">    &lt;Routes&gt;</span><br><span class="line">      &lt;Route path=&quot;/&quot; element=&#123;&lt;Dashboard /&gt;&#125;&gt;</span><br><span class="line">        &lt;Route</span><br><span class="line">          path=&quot;messages&quot;</span><br><span class="line">          element=&#123;&lt;DashboardMessages /&gt;&#125;</span><br><span class="line">        /&gt;</span><br><span class="line">        &lt;Route path=&quot;tasks&quot; element=&#123;&lt;DashboardTasks /&gt;&#125; /&gt;</span><br><span class="line">      &lt;/Route&gt;</span><br><span class="line">    &lt;/Routes&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="前置作業"><a href="#前置作業" class="headerlink" title="前置作業"></a>前置作業</h2><p>首先，將【index.tsx】放入要執行的Router中，這次的修改將以此為主要依據。<br><img src="/image/20230530_22-04-10.png"></p><h2 id="AppRouter-原始作法"><a href="#AppRouter-原始作法" class="headerlink" title="AppRouter 原始作法"></a>AppRouter 原始作法</h2><p>讓我簡單解釋一下下面的程式碼的作用：</p><ol><li><p>Adminlte 需要加入 Js或是 css 才能使用他們的css</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//append css or js</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;admin-lte/dist/css/adminlte.min.css&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;admin-lte/plugins/fontawesome-free/css/all.css&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;admin-lte/plugins/bootstrap/js/bootstrap&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;admin-lte/plugins/bootstrap/js/bootstrap.bundle&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;admin-lte/dist/js/adminlte&#x27;</span></span><br></pre></td></tr></table></figure></li><li><p>拆開的Layout<br>其實，這部分應該解釋為元件，我將 Header 和 Menu 拆分出來，並將它們作為我的元件使用。實際上，我還是很習慣將它們歸類在MVC模式中的 Shared 資料夾中，所以我將其歸類在 Layout 中使用。</p></li></ol><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//append layout</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Header</span> <span class="keyword">from</span> <span class="string">&#x27;../component/@Shared/@Layout/Header&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">MenuSidebar</span> <span class="keyword">from</span> <span class="string">&#x27;../component/@Shared/@Layout/MenuSidebar&#x27;</span>;</span><br></pre></td></tr></table></figure><ol start="3"><li>Router 路徑<br>你可以看一下下面的程式碼。在使用 Layout 的地方，會有一些棘手的情況不適用於相同的版面，例如登入、註冊、首頁等。它們不符合 Layout 的定義。這就需要對程式碼進行一些修改。<figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; lazy &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">BrowserRouter</span>, <span class="title class_">Routes</span>, <span class="title class_">Route</span>, <span class="title class_">Link</span>, <span class="title class_">Await</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//append css or js</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;admin-lte/dist/css/adminlte.min.css&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;admin-lte/plugins/fontawesome-free/css/all.css&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;admin-lte/plugins/bootstrap/js/bootstrap&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;admin-lte/plugins/bootstrap/js/bootstrap.bundle&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;admin-lte/dist/js/adminlte&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//append layout</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Header</span> <span class="keyword">from</span> <span class="string">&#x27;../component/@Shared/@Layout/Header&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">MenuSidebar</span> <span class="keyword">from</span> <span class="string">&#x27;../component/@Shared/@Layout/MenuSidebar&#x27;</span>;</span><br><span class="line"><span class="comment">// append page (only views)</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Home</span> <span class="keyword">from</span> <span class="string">&#x27;../component/@Views/TopList/Home&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">About</span> <span class="keyword">from</span> <span class="string">&#x27;../component/@Views/TopList/About&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">BDP000A</span> <span class="keyword">from</span> <span class="string">&#x27;../component/@Views/Systems/BDP000A/Index&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">BDP000A</span>_EditorForm <span class="keyword">from</span> <span class="string">&#x27;../component/@Views/Systems/BDP000A/EditorForm&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ProfileHome</span> <span class="keyword">from</span> <span class="string">&#x27;../component/@Views/Profile/ProfileHome&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Alert</span> <span class="keyword">from</span> <span class="string">&#x27;../component/@Views/Template/Alert&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">SampleTable</span> <span class="keyword">from</span> <span class="string">&#x27;../component/@Views/Template/SampleTable&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">SampleReactTable</span> <span class="keyword">from</span> <span class="string">&#x27;../component/@Views/Template/SampleReactTable&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">SystemConfig</span> <span class="keyword">from</span> <span class="string">&#x27;../component/@Views/Systems/SystemConfig/Index&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">AppRouter</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">BrowserRouter</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;wrapper&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">Header</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">MenuSidebar</span>  /&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#x27;content-wrapper&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">Routes</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                        <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/&quot;</span> <span class="attr">element</span>=<span class="string">&#123;</span>&lt;<span class="attr">Home</span> /&gt;</span>&#125; /&gt;</span></span><br><span class="line"><span class="language-xml">                        <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/about&quot;</span> <span class="attr">element</span>=<span class="string">&#123;</span>&lt;<span class="attr">About</span> /&gt;</span>&#125; /&gt;</span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;/<span class="name">Routes</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">Routes</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                        <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/BDP000A&quot;</span> <span class="attr">element</span>=<span class="string">&#123;</span>&lt;<span class="attr">SystemConfig</span> /&gt;</span>&#125; /&gt;</span></span><br><span class="line"><span class="language-xml">                        <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/BDP000A/:key&quot;</span> <span class="attr">element</span>=<span class="string">&#123;</span>&lt;<span class="attr">BDP000A_EditorForm</span> /&gt;</span>&#125; /&gt;</span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">                        <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/Profile&quot;</span> <span class="attr">element</span>=<span class="string">&#123;</span>&lt;<span class="attr">ProfileHome</span> /&gt;</span>&#125; /&gt;</span></span><br><span class="line"><span class="language-xml">                        <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/Menu&quot;</span> <span class="attr">element</span>=<span class="string">&#123;</span>&lt;<span class="attr">SampleReactTable</span> /&gt;</span>&#125; /&gt;</span></span><br><span class="line"><span class="language-xml">                        <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/Temp/Alert&quot;</span> <span class="attr">element</span>=<span class="string">&#123;</span>&lt;<span class="attr">Alert</span> /&gt;</span>&#125; /&gt;</span></span><br><span class="line"><span class="language-xml">                        <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/Temp/Table&quot;</span> <span class="attr">element</span>=<span class="string">&#123;</span>&lt;<span class="attr">SampleTable</span> /&gt;</span>&#125; /&gt;</span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;/<span class="name">Routes</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">BrowserRouter</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">AppRouter</span>;</span><br></pre></td></tr></table></figure></li></ol><h3 id="變更方式"><a href="#變更方式" class="headerlink" title="變更方式"></a>變更方式</h3><h4 id="1-將Layout拆開"><a href="#1-將Layout拆開" class="headerlink" title="1. 將Layout拆開"></a>1. 將Layout拆開</h4><ol><li><p>創建 MainLayout.tsx</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">ReactNode</span> &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Header</span> <span class="keyword">from</span> <span class="string">&quot;./Header&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">MenuSidebar</span> <span class="keyword">from</span> <span class="string">&quot;./MenuSidebar&quot;</span>;</span><br><span class="line"><span class="comment">//append css or js</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;admin-lte/dist/css/adminlte.min.css&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;admin-lte/plugins/fontawesome-free/css/all.css&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;admin-lte/plugins/bootstrap/js/bootstrap&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;admin-lte/plugins/bootstrap/js/bootstrap.bundle&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;admin-lte/dist/js/adminlte&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Outlet</span> &#125; <span class="keyword">from</span> <span class="string">&quot;react-router-dom&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">MainLayout</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;wrapper&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">Header</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">MenuSidebar</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#x27;content-wrapper&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">Outlet</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">MainLayout</span>;</span><br></pre></td></tr></table></figure></li><li><p>創建LoginLayout.tsx</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">ReactNode</span> &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Login</span> <span class="keyword">from</span> <span class="string">&quot;../../@Views/Login/Index&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Outlet</span> &#125; <span class="keyword">from</span> <span class="string">&quot;react-router-dom&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">LoginLayout</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">Outlet</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">LoginLayout</span>;</span><br></pre></td></tr></table></figure></li></ol><h4 id="2-將-AppRouter-加入Layout版本"><a href="#2-將-AppRouter-加入Layout版本" class="headerlink" title="2. 將 AppRouter 加入Layout版本"></a>2. 將 AppRouter 加入Layout版本</h4><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; lazy &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">BrowserRouter</span>, <span class="title class_">Routes</span>, <span class="title class_">Route</span>, <span class="title class_">Link</span>, <span class="title class_">Await</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// append page (only views)</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Home</span> <span class="keyword">from</span> <span class="string">&#x27;../component/@Views/TopList/Home&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">About</span> <span class="keyword">from</span> <span class="string">&#x27;../component/@Views/TopList/About&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">BDP000A</span> <span class="keyword">from</span> <span class="string">&#x27;../component/@Views/Systems/BDP000A/Index&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">BDP000A</span>_EditorForm <span class="keyword">from</span> <span class="string">&#x27;../component/@Views/Systems/BDP000A/EditorForm&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ProfileHome</span> <span class="keyword">from</span> <span class="string">&#x27;../component/@Views/Profile/ProfileHome&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Alert</span> <span class="keyword">from</span> <span class="string">&#x27;../component/@Views/Template/Alert&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">SampleTable</span> <span class="keyword">from</span> <span class="string">&#x27;../component/@Views/Template/SampleTable&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">SampleReactTable</span> <span class="keyword">from</span> <span class="string">&#x27;../component/@Views/Template/SampleReactTable&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">SystemConfig</span> <span class="keyword">from</span> <span class="string">&#x27;../component/@Views/Systems/SystemConfig/Index&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">LoginLayout</span> <span class="keyword">from</span> <span class="string">&#x27;../component/@Shared/@Layout/LoginLayout&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Login</span> <span class="keyword">from</span> <span class="string">&#x27;../component/@Views/Login/Index&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">MainLayout</span> <span class="keyword">from</span> <span class="string">&#x27;../component/@Shared/@Layout/MainLayout&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">AppRouter</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">BrowserRouter</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">Routes</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/Login&quot;</span> <span class="attr">element</span>=<span class="string">&#123;</span>&lt;<span class="attr">LoginLayout</span> /&gt;</span>&#125;&gt; </span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/Login&quot;</span> <span class="attr">element</span>=<span class="string">&#123;</span>&lt;<span class="attr">Login</span> /&gt;</span>&#125; /&gt;</span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;/<span class="name">Route</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/&quot;</span> <span class="attr">element</span>=<span class="string">&#123;</span>&lt;<span class="attr">MainLayout</span> /&gt;</span>&#125;&gt;</span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/&quot;</span> <span class="attr">element</span>=<span class="string">&#123;</span>&lt;<span class="attr">Home</span> /&gt;</span>&#125; /&gt;</span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/about&quot;</span> <span class="attr">element</span>=<span class="string">&#123;</span>&lt;<span class="attr">About</span> /&gt;</span>&#125; /&gt;</span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;/<span class="name">Route</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">Routes</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">BrowserRouter</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">AppRouter</span>;</span><br></pre></td></tr></table></figure><h2 id="參考文件"><a href="#參考文件" class="headerlink" title="參考文件"></a>參考文件</h2><ol><li><a href="https://ithelp.ithome.com.tw/articles/10282773">[Bonus 系列] - 來看看 React Router v6 有什麼新功能?和 v5 有哪些地方不同?</a></li><li><a href="https://reactrouter.com/en/main/components/outlet">React Router</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 前端技術 </category>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React (三) - 套用 AdminLTE3 模板</title>
      <link href="/2022/05/04/%E5%89%8D%E7%AB%AF%E6%8A%80%E8%A1%93/REACT/react-03-adminlte%E6%A8%A1%E6%9D%BF/"/>
      <url>/2022/05/04/%E5%89%8D%E7%AB%AF%E6%8A%80%E8%A1%93/REACT/react-03-adminlte%E6%A8%A1%E6%9D%BF/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在上一篇文章中，我們介紹了如何操作 components 與 router，這篇文章將教你如何在你的專案中加入 AdminLTE3 的 CSS 樣式，讓你的專案能夠擁有漂亮的 UI 設計。</p><hr><h1 id="AdminLTE"><a href="#AdminLTE" class="headerlink" title="AdminLTE"></a>AdminLTE</h1><p>是一個基於 Bootstrap 框架的免費管理儀表板模板，可以快速建立具有相應外觀和功能的後台管理系統。AdminLTE 3 是其最新版本，提供了大量的 UI 元件、各種頁面佈局和功能，例如表格、圖表、表單、地圖、日曆等等，也可以輕鬆自訂主題樣式。</p><h2 id="AdminLTE-3"><a href="#AdminLTE-3" class="headerlink" title="AdminLTE 3"></a>AdminLTE 3</h2><p>AdminLTE 3 支援多種框架和平台，包括 Angular、React、Vue、ASP.NET Core、Laravel 等等，因此非常適合用於各種 Web 開發項目。此外，AdminLTE 3 的文件非常完整，提供了詳細的使用說明和示例，方便開發者快速入門和使用。</p><hr><h2 id="區分定義"><a href="#區分定義" class="headerlink" title="區分定義"></a>區分定義</h2><p>起手前，請依據這個大區塊方式切割。後期時候可以再把裡面內容再次切割，後續工作就不會太複雜。<br><img src="/image/20230508_20-15-39.png"></p><h3 id="需要的動作"><a href="#需要的動作" class="headerlink" title="需要的動作"></a>需要的動作</h3><ol><li>創建 components&#x2F;@Shared 資料夾</li><li>安裝 admin-lte 3   <code>npm i admin-lte</code></li></ol><p>備註 :<br>如果你想要抓取全部的 js 資料，可以參考下方 reactJs<br>booleanhunter&#x2F;ReactJS-AdminLTE : (<a href="https://github.com/booleanhunter/ReactJS-AdminLTE)[https://github.com/booleanhunter/ReactJS-AdminLTE]">https://github.com/booleanhunter/ReactJS-AdminLTE)[https://github.com/booleanhunter/ReactJS-AdminLTE]</a></p><h2 id="結構說明"><a href="#結構說明" class="headerlink" title="結構說明"></a>結構說明</h2><ol><li>body : 請到 public &#x2F; index.html 修改即可</li><li>AppRouter : 加入 class &#x3D;&gt; wrapper  </li><li>AppRouter : 加入 class &#x3D;&gt; content-wrapper</li><li>AppRouter : 加入 adminLTE css、js 檔案<br>從 adminLTE 作者設計的結構來看，建議先把外層先建立起來，完成我們的第一步。</li></ol><h3 id="index-html"><a href="#index-html" class="headerlink" title="index.html"></a>index.html</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;icon&quot;</span> <span class="attr">href</span>=<span class="string">&quot;%PUBLIC_URL%/favicon.ico&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;theme-color&quot;</span> <span class="attr">content</span>=<span class="string">&quot;#000000&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span></span></span><br><span class="line"><span class="tag">      <span class="attr">name</span>=<span class="string">&quot;description&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">content</span>=<span class="string">&quot;Web site created using create-react-app&quot;</span></span></span><br><span class="line"><span class="tag">    /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;apple-touch-icon&quot;</span> <span class="attr">href</span>=<span class="string">&quot;%PUBLIC_URL%/logo192.png&quot;</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">      manifest.json provides metadata used when your web app is installed on a</span></span><br><span class="line"><span class="comment">      user&#x27;s mobile device or desktop. See https://developers.google.com/web/fundamentals/web-app-manifest/</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;manifest&quot;</span> <span class="attr">href</span>=<span class="string">&quot;%PUBLIC_URL%/manifest.json&quot;</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">      Notice the use of %PUBLIC_URL% in the tags above.</span></span><br><span class="line"><span class="comment">      It will be replaced with the URL of the `public` folder during the build.</span></span><br><span class="line"><span class="comment">      Only files inside the `public` folder can be referenced from the HTML.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">      Unlike &quot;/favicon.ico&quot; or &quot;favicon.ico&quot;, &quot;%PUBLIC_URL%/favicon.ico&quot; will</span></span><br><span class="line"><span class="comment">      work correctly both with client-side routing and a non-root public URL.</span></span><br><span class="line"><span class="comment">      Learn how to configure a non-root public URL by running `npm run build`.</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>AdminLTE 3<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span> <span class="attr">class</span>=<span class="string">&quot;hold-transition sidebar-mini layout-fixed&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">noscript</span>&gt;</span>You need to enable JavaScript to run this app.<span class="tag">&lt;/<span class="name">noscript</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">      This HTML file is a template.</span></span><br><span class="line"><span class="comment">      If you open it directly in the browser, you will see an empty page.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">      You can add webfonts, meta tags, or analytics to this file.</span></span><br><span class="line"><span class="comment">      The build step will place the bundled scripts into the &lt;body&gt; tag.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">      To begin the development, run `npm start` or `yarn start`.</span></span><br><span class="line"><span class="comment">      To create a production bundle, use `npm run build` or `yarn build`.</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="AppRouter-tsx"><a href="#AppRouter-tsx" class="headerlink" title="AppRouter.tsx"></a>AppRouter.tsx</h3><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">BrowserRouter</span>, <span class="title class_">Routes</span>, <span class="title class_">Route</span>, <span class="title class_">Link</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span>;</span><br><span class="line"><span class="comment">//append css or js</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;admin-lte/dist/css/adminlte.min.css&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;admin-lte/plugins/fontawesome-free/css/all.css&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;admin-lte/dist/js/adminlte&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//append layout</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Header</span> <span class="keyword">from</span> <span class="string">&#x27;../component/@Shared/Header&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">MenuSidebar</span> <span class="keyword">from</span> <span class="string">&#x27;../component/@Shared/MenuSidebar&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">AppRouter</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">BrowserRouter</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;wrapper&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#x27;content-wrapper&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">Routes</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                        <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/&quot;</span> <span class="attr">element</span>=<span class="string">&#123;</span>&lt;<span class="attr">Home</span> /&gt;</span>&#125; /&gt;</span></span><br><span class="line"><span class="language-xml">                        <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/about&quot;</span> <span class="attr">element</span>=<span class="string">&#123;</span>&lt;<span class="attr">About</span> /&gt;</span>&#125; /&gt;</span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;/<span class="name">Routes</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">BrowserRouter</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">AppRouter</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="加入-Header、Menu"><a href="#加入-Header、Menu" class="headerlink" title="加入 Header、Menu"></a>加入 Header、Menu</h2><p><img src="/image/20230508_20-31-34.png"></p><h3 id="Header-tsx"><a href="#Header-tsx" class="headerlink" title="Header.tsx"></a>Header.tsx</h3><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Link</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> users <span class="keyword">from</span> <span class="string">&#x27;admin-lte/dist/img/user1-128x128.jpg&#x27;</span></span><br><span class="line"><span class="keyword">import</span> users_8 <span class="keyword">from</span> <span class="string">&#x27;admin-lte/dist/img/user8-128x128.jpg&#x27;</span></span><br><span class="line"><span class="keyword">import</span> users_3 <span class="keyword">from</span> <span class="string">&#x27;admin-lte/dist/img/user3-128x128.jpg&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Header</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">nav</span> <span class="attr">className</span>=<span class="string">&quot;main-header navbar navbar-expand navbar-white navbar-light&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">ul</span> <span class="attr">className</span>=<span class="string">&quot;navbar-nav&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">className</span>=<span class="string">&quot;nav-item&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;<span class="name">a</span> <span class="attr">className</span>=<span class="string">&quot;nav-link&quot;</span> <span class="attr">data-widget</span>=<span class="string">&quot;pushmenu&quot;</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">role</span>=<span class="string">&quot;button&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">className</span>=<span class="string">&quot;fas fa-bars&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">className</span>=<span class="string">&quot;nav-item d-none d-sm-inline-block&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">&quot;/&quot;</span> <span class="attr">className</span>=<span class="string">&quot;nav-link&quot;</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">className</span>=<span class="string">&quot;nav-item d-none d-sm-inline-block&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">&quot;/about&quot;</span> <span class="attr">className</span>=<span class="string">&quot;nav-link&quot;</span>&gt;</span>About<span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      </span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">ul</span> <span class="attr">className</span>=<span class="string">&quot;navbar-nav ml-auto&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">className</span>=<span class="string">&quot;nav-item&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;<span class="name">a</span> <span class="attr">className</span>=<span class="string">&quot;nav-link&quot;</span> <span class="attr">data-widget</span>=<span class="string">&quot;navbar-search&quot;</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">role</span>=<span class="string">&quot;button&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">i</span> <span class="attr">className</span>=<span class="string">&quot;fas fa-search&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;navbar-search-block&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">form</span> <span class="attr">className</span>=<span class="string">&quot;form-inline&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                  <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;input-group input-group-sm&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">className</span>=<span class="string">&quot;form-control form-control-navbar&quot;</span> <span class="attr">type</span>=<span class="string">&quot;search&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;Search&quot;</span> <span class="attr">aria-label</span>=<span class="string">&quot;Search&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;input-group-append&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                      <span class="tag">&lt;<span class="name">button</span> <span class="attr">className</span>=<span class="string">&quot;btn btn-navbar&quot;</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                        <span class="tag">&lt;<span class="name">i</span> <span class="attr">className</span>=<span class="string">&quot;fas fa-search&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                      <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                      <span class="tag">&lt;<span class="name">button</span> <span class="attr">className</span>=<span class="string">&quot;btn btn-navbar&quot;</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">data-widget</span>=<span class="string">&quot;navbar-search&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                        <span class="tag">&lt;<span class="name">i</span> <span class="attr">className</span>=<span class="string">&quot;fas fa-times&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                      <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      </span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">className</span>=<span class="string">&quot;nav-item dropdown&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;<span class="name">a</span> <span class="attr">className</span>=<span class="string">&quot;nav-link&quot;</span> <span class="attr">data-toggle</span>=<span class="string">&quot;dropdown&quot;</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">i</span> <span class="attr">className</span>=<span class="string">&quot;far fa-comments&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">span</span> <span class="attr">className</span>=<span class="string">&quot;badge badge-danger navbar-badge&quot;</span>&gt;</span>3<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;dropdown-menu dropdown-menu-lg dropdown-menu-right&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">className</span>=<span class="string">&quot;dropdown-item&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                  <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;media&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&#123;users&#125;</span> <span class="attr">alt</span>=<span class="string">&quot;User Avatar&quot;</span> <span class="attr">className</span>=<span class="string">&quot;img-size-50 mr-3 img-circle&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;media-body&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                      <span class="tag">&lt;<span class="name">h3</span> <span class="attr">className</span>=<span class="string">&quot;dropdown-item-title&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                        Brad Diesel</span></span><br><span class="line"><span class="language-xml">                        <span class="tag">&lt;<span class="name">span</span> <span class="attr">className</span>=<span class="string">&quot;float-right text-sm text-danger&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">className</span>=<span class="string">&quot;fas fa-star&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                      <span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                      <span class="tag">&lt;<span class="name">p</span> <span class="attr">className</span>=<span class="string">&quot;text-sm&quot;</span>&gt;</span>Call me whenever you can...<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                      <span class="tag">&lt;<span class="name">p</span> <span class="attr">className</span>=<span class="string">&quot;text-sm text-muted&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">className</span>=<span class="string">&quot;far fa-clock mr-1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> 4 Hours Ago<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;dropdown-divider&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">className</span>=<span class="string">&quot;dropdown-item&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                  <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;media&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&#123;users_8&#125;</span> <span class="attr">alt</span>=<span class="string">&quot;User Avatar&quot;</span> <span class="attr">className</span>=<span class="string">&quot;img-size-50 img-circle mr-3&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;media-body&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                      <span class="tag">&lt;<span class="name">h3</span> <span class="attr">className</span>=<span class="string">&quot;dropdown-item-title&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                        John Pierce</span></span><br><span class="line"><span class="language-xml">                        <span class="tag">&lt;<span class="name">span</span> <span class="attr">className</span>=<span class="string">&quot;float-right text-sm text-muted&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">className</span>=<span class="string">&quot;fas fa-star&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                      <span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                      <span class="tag">&lt;<span class="name">p</span> <span class="attr">className</span>=<span class="string">&quot;text-sm&quot;</span>&gt;</span>I got your message bro<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                      <span class="tag">&lt;<span class="name">p</span> <span class="attr">className</span>=<span class="string">&quot;text-sm text-muted&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">className</span>=<span class="string">&quot;far fa-clock mr-1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> 4 Hours Ago<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;dropdown-divider&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">className</span>=<span class="string">&quot;dropdown-item&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                  <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;media&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&#123;users_3&#125;alt</span>=<span class="string">&quot;User Avatar&quot;</span> <span class="attr">className</span>=<span class="string">&quot;img-size-50 img-circle mr-3&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;media-body&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                      <span class="tag">&lt;<span class="name">h3</span> <span class="attr">className</span>=<span class="string">&quot;dropdown-item-title&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                        Nora Silvester</span></span><br><span class="line"><span class="language-xml">                        <span class="tag">&lt;<span class="name">span</span> <span class="attr">className</span>=<span class="string">&quot;float-right text-sm text-warning&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">className</span>=<span class="string">&quot;fas fa-star&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                      <span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                      <span class="tag">&lt;<span class="name">p</span> <span class="attr">className</span>=<span class="string">&quot;text-sm&quot;</span>&gt;</span>The subject goes here<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                      <span class="tag">&lt;<span class="name">p</span> <span class="attr">className</span>=<span class="string">&quot;text-sm text-muted&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">className</span>=<span class="string">&quot;far fa-clock mr-1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> 4 Hours Ago<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;dropdown-divider&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">className</span>=<span class="string">&quot;dropdown-item dropdown-footer&quot;</span>&gt;</span>See All Messages<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">className</span>=<span class="string">&quot;nav-item dropdown&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;<span class="name">a</span> <span class="attr">className</span>=<span class="string">&quot;nav-link&quot;</span> <span class="attr">data-toggle</span>=<span class="string">&quot;dropdown&quot;</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">i</span> <span class="attr">className</span>=<span class="string">&quot;far fa-bell&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">span</span> <span class="attr">className</span>=<span class="string">&quot;badge badge-warning navbar-badge&quot;</span>&gt;</span>15<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;dropdown-menu dropdown-menu-lg dropdown-menu-right&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">span</span> <span class="attr">className</span>=<span class="string">&quot;dropdown-item dropdown-header&quot;</span>&gt;</span>15 Notifications<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;dropdown-divider&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">className</span>=<span class="string">&quot;dropdown-item&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                  <span class="tag">&lt;<span class="name">i</span> <span class="attr">className</span>=<span class="string">&quot;fas fa-envelope mr-2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> 4 new messages</span></span><br><span class="line"><span class="language-xml">                  <span class="tag">&lt;<span class="name">span</span> <span class="attr">className</span>=<span class="string">&quot;float-right text-muted text-sm&quot;</span>&gt;</span>3 mins<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;dropdown-divider&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">className</span>=<span class="string">&quot;dropdown-item&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                  <span class="tag">&lt;<span class="name">i</span> <span class="attr">className</span>=<span class="string">&quot;fas fa-users mr-2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> 8 friend requests</span></span><br><span class="line"><span class="language-xml">                  <span class="tag">&lt;<span class="name">span</span> <span class="attr">className</span>=<span class="string">&quot;float-right text-muted text-sm&quot;</span>&gt;</span>12 hours<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;dropdown-divider&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">className</span>=<span class="string">&quot;dropdown-item&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                  <span class="tag">&lt;<span class="name">i</span> <span class="attr">className</span>=<span class="string">&quot;fas fa-file mr-2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> 3 new reports</span></span><br><span class="line"><span class="language-xml">                  <span class="tag">&lt;<span class="name">span</span> <span class="attr">className</span>=<span class="string">&quot;float-right text-muted text-sm&quot;</span>&gt;</span>2 days<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;dropdown-divider&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">className</span>=<span class="string">&quot;dropdown-item dropdown-footer&quot;</span>&gt;</span>See All Notifications<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">className</span>=<span class="string">&quot;nav-item&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;<span class="name">a</span> <span class="attr">className</span>=<span class="string">&quot;nav-link&quot;</span> <span class="attr">data-widget</span>=<span class="string">&quot;fullscreen&quot;</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">role</span>=<span class="string">&quot;button&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">i</span> <span class="attr">className</span>=<span class="string">&quot;fas fa-expand-arrows-alt&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">className</span>=<span class="string">&quot;nav-item&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;<span class="name">a</span> <span class="attr">className</span>=<span class="string">&quot;nav-link&quot;</span> <span class="attr">data-widget</span>=<span class="string">&quot;control-sidebar&quot;</span> <span class="attr">data-slide</span>=<span class="string">&quot;true&quot;</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">role</span>=<span class="string">&quot;button&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">i</span> <span class="attr">className</span>=<span class="string">&quot;fas fa-th-large&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Header</span>;</span><br></pre></td></tr></table></figure><h3 id="MenuSidebar"><a href="#MenuSidebar" class="headerlink" title="MenuSidebar"></a>MenuSidebar</h3><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> logo <span class="keyword">from</span> <span class="string">&#x27;admin-lte/dist/img/AdminLTELogo.png&#x27;</span></span><br><span class="line"><span class="keyword">import</span> users <span class="keyword">from</span> <span class="string">&#x27;admin-lte/dist/img/user1-128x128.jpg&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Link</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">MenuSidebar</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">aside</span> <span class="attr">className</span>=<span class="string">&quot;main-sidebar sidebar-dark-primary elevation-4&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">&quot;/&quot;</span> <span class="attr">className</span>=<span class="string">&quot;brand-link&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&#123;logo&#125;</span> <span class="attr">alt</span>=<span class="string">&quot;AdminLTE Logo&quot;</span> <span class="attr">className</span>=<span class="string">&quot;brand-image img-circle elevation-3&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">span</span> <span class="attr">className</span>=<span class="string">&quot;brand-text font-weight-light&quot;</span>&gt;</span>AdminLTE 3<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;sidebar&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;user-panel mt-3 pb-3 mb-3 d-flex&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;image&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&#123;users&#125;</span> <span class="attr">className</span>=<span class="string">&quot;img-circle elevation-2&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;User Image&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;info&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">className</span>=<span class="string">&quot;d-block&quot;</span>&gt;</span>Alexander Pierce<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;form-inline&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;input-group&quot;</span> <span class="attr">data-widget</span>=<span class="string">&quot;sidebar-search&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                        <span class="tag">&lt;<span class="name">input</span> <span class="attr">className</span>=<span class="string">&quot;form-control form-control-sidebar&quot;</span> <span class="attr">type</span>=<span class="string">&quot;search&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;Search&quot;</span> <span class="attr">aria-label</span>=<span class="string">&quot;Search&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;input-group-append&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                            <span class="tag">&lt;<span class="name">button</span> <span class="attr">className</span>=<span class="string">&quot;btn btn-sidebar&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                                <span class="tag">&lt;<span class="name">i</span> <span class="attr">className</span>=<span class="string">&quot;fas fa-search fa-fw&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                            <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">nav</span> <span class="attr">className</span>=<span class="string">&quot;mt-2&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">className</span>=<span class="string">&quot;nav nav-pills nav-sidebar flex-column&quot;</span> <span class="attr">data-widget</span>=<span class="string">&quot;treeview&quot;</span> <span class="attr">role</span>=<span class="string">&quot;menu&quot;</span> <span class="attr">data-accordion</span>=<span class="string">&quot;false&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                        <span class="tag">&lt;<span class="name">li</span> <span class="attr">className</span>=<span class="string">&quot;nav-item&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">className</span>=<span class="string">&quot;nav-link&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                                <span class="tag">&lt;<span class="name">i</span> <span class="attr">className</span>=<span class="string">&quot;nav-icon fas fa-tachometer-alt&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                                <span class="tag">&lt;<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                                    Dashboard</span></span><br><span class="line"><span class="language-xml">                                    <span class="tag">&lt;<span class="name">i</span> <span class="attr">className</span>=<span class="string">&quot;right fas fa-angle-left&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                                <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                            <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                            <span class="tag">&lt;<span class="name">ul</span> <span class="attr">className</span>=<span class="string">&quot;nav nav-treeview&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                                <span class="tag">&lt;<span class="name">li</span> <span class="attr">className</span>=<span class="string">&quot;nav-item&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;../../index.html&quot;</span> <span class="attr">className</span>=<span class="string">&quot;nav-link&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                                        <span class="tag">&lt;<span class="name">i</span> <span class="attr">className</span>=<span class="string">&quot;far fa-circle nav-icon&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                                        <span class="tag">&lt;<span class="name">p</span>&gt;</span>Dashboard v1<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                                    <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                                <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                                <span class="tag">&lt;<span class="name">li</span> <span class="attr">className</span>=<span class="string">&quot;nav-item&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;../../index2.html&quot;</span> <span class="attr">className</span>=<span class="string">&quot;nav-link&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                                        <span class="tag">&lt;<span class="name">i</span> <span class="attr">className</span>=<span class="string">&quot;far fa-circle nav-icon&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                                        <span class="tag">&lt;<span class="name">p</span>&gt;</span>Dashboard v2<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                                    <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                                <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                                <span class="tag">&lt;<span class="name">li</span> <span class="attr">className</span>=<span class="string">&quot;nav-item&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;../../index3.html&quot;</span> <span class="attr">className</span>=<span class="string">&quot;nav-link&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                                        <span class="tag">&lt;<span class="name">i</span> <span class="attr">className</span>=<span class="string">&quot;far fa-circle nav-icon&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                                        <span class="tag">&lt;<span class="name">p</span>&gt;</span>Dashboard v3<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                                    <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                                <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">aside</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">MenuSidebar</span>;</span><br></pre></td></tr></table></figure><h2 id="完成後"><a href="#完成後" class="headerlink" title="完成後"></a>完成後</h2><p>完成後如同下圖畫面。<br>下篇會著重於如何看 adminLTE 結構以及規劃。<br><img src="/image/20230508_20-40-44.png"></p>]]></content>
      
      
      <categories>
          
          <category> 前端技術 </category>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React (二) - router 簡易應用</title>
      <link href="/2022/05/03/%E5%89%8D%E7%AB%AF%E6%8A%80%E8%A1%93/REACT/react-02-router%E7%B0%A1%E6%98%93%E6%87%89%E7%94%A8/"/>
      <url>/2022/05/03/%E5%89%8D%E7%AB%AF%E6%8A%80%E8%A1%93/REACT/react-02-router%E7%B0%A1%E6%98%93%E6%87%89%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>完成作業初期，你可能會疑惑如何增加多個頁面或佈局，這些問題都需要使用到路由器（router）。前端架構將依賴路由器進行所需頁面和佈局之間的切換。而組件（component）則可以看作是我們的視圖，是可重複使用的程式碼塊，用於呈現單一元件的內容。在上一篇文章中，我們已經實現了組件的基礎並且理解了它的重要性。</p><hr><h1 id="React-Router"><a href="#React-Router" class="headerlink" title="React Router"></a>React Router</h1><h2 id="安裝-Router"><a href="#安裝-Router" class="headerlink" title="安裝 Router"></a>安裝 Router</h2><p>首先，安裝 React Router：在命令行中執行 npm install react-router-dom。</p><h2 id="創建-component"><a href="#創建-component" class="headerlink" title="創建 component"></a>創建 component</h2><p>加入 template-page<br><img src="/image/20230507_19-50-27.png"></p><p>下方可以使用範本來快速建檔，如下 : </p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Home.tsx</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Home</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>Welcome to my home page!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Home</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// About.tsx</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">About</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>About<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>Learn more about me and my skills!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">About</span>;</span><br></pre></td></tr></table></figure><h2 id="創建-AppRouter-tsx"><a href="#創建-AppRouter-tsx" class="headerlink" title="創建 AppRouter.tsx"></a>創建 AppRouter.tsx</h2><p>加入 AppRouter 當作本次的 router並加入以下內容，即可完成顯示功能。介於 router v6 已經不再支援 Switch 務必注意網站上那個 關鍵字。<br><img src="/image/20230507_19-49-02.png"></p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">BrowserRouter</span>, <span class="title class_">Routes</span>, <span class="title class_">Route</span>, <span class="title class_">Link</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Home</span> <span class="keyword">from</span> <span class="string">&#x27;../component/template-page/Home&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">About</span> <span class="keyword">from</span> <span class="string">&#x27;../component/template-page/About&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">AppRouter</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">BrowserRouter</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">nav</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                            <span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">&quot;/&quot;</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                            <span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">&quot;/about&quot;</span>&gt;</span>About<span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">Routes</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/&quot;</span> <span class="attr">element</span>=<span class="string">&#123;</span>&lt;<span class="attr">Home</span> /&gt;</span>&#125; /&gt;</span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/about&quot;</span> <span class="attr">element</span>=<span class="string">&#123;</span>&lt;<span class="attr">About</span> /&gt;</span>&#125; /&gt;</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">Routes</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">BrowserRouter</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">AppRouter</span>;</span><br></pre></td></tr></table></figure><hr><h2 id="補充-Routes"><a href="#補充-Routes" class="headerlink" title="補充 - Routes"></a>補充 - Routes</h2><p>React Router v6 中，<code>&lt;Routes&gt;</code> 元素是用來包裝 <code>&lt;Route&gt; </code>元素的容器，並且必須直接包含在<code>&lt;Router&gt; </code>&lt; 元素中。如果在 <code>&lt;Routes&gt;</code> 元素中放置了其他的元素，例如 <code>&lt;div&gt;</code> 或 <code>&lt;span&gt;</code>，那麼它們就會被視為無效的並且導致錯誤產生。</p><p>這是因為 <code>&lt;Routes&gt;</code> 本身就是一個容器元素，用來定義整個應用程式的路由規則。而且，<code>&lt;Routes&gt;</code> 可以包含多個 <code>&lt;Route&gt; </code>元素，每個 <code>&lt;Route&gt;</code> 元素代表一個路徑和要顯示的元件。因此，如果想要在 <code>&lt;Routes&gt;</code> 元素中添加其他內容，就必須使用有效的 React 元素或組件，例如 <code>&lt;Route&gt;</code> 或自定義元件。</p>]]></content>
      
      
      <categories>
          
          <category> 前端技術 </category>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React (一) - Components</title>
      <link href="/2022/05/02/%E5%89%8D%E7%AB%AF%E6%8A%80%E8%A1%93/REACT/react-01-components%E6%87%89%E7%94%A8/"/>
      <url>/2022/05/02/%E5%89%8D%E7%AB%AF%E6%8A%80%E8%A1%93/REACT/react-01-components%E6%87%89%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>近期會慢慢研究 react 使用方式，今後會使用 TS 來完成專案，並包含其他前端架購。本篇使用以下版本，若無法正常執行請確認版本再進行作業。</p><h2 id="設定檔"><a href="#設定檔" class="headerlink" title="設定檔"></a>設定檔</h2><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//package.json</span></span><br><span class="line">  <span class="attr">&quot;dependencies&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;@testing-library/jest-dom&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^5.16.5&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;@testing-library/react&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^13.4.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;@testing-library/user-event&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^13.5.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;@types/jest&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^27.5.2&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;@types/node&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^16.18.26&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;@types/react&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^18.2.6&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;@types/react-dom&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^18.2.4&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;react&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^18.2.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;react-dom&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^18.2.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;react-router-dom&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^6.11.1&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;react-scripts&quot;</span><span class="punctuation">:</span> <span class="string">&quot;5.0.1&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;typescript&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^4.9.5&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;web-vitals&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^2.1.4&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure><hr><h1 id="React"><a href="#React" class="headerlink" title="React"></a>React</h1><h2 id="前置作業"><a href="#前置作業" class="headerlink" title="前置作業"></a>前置作業</h2><p>必須要安裝 Node.Js 套件才能進行以下作業 。</p><ul><li>Node.Js </li><li>Visual Studio Code</li></ul><h2 id="創建-TypeScript-環境"><a href="#創建-TypeScript-環境" class="headerlink" title="創建 TypeScript 環境"></a>創建 TypeScript 環境</h2><p>首先我們起手可以下以下指令，安裝 react 專案  </p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx create-react-app [專案名稱] --template typescript</span><br></pre></td></tr></table></figure><h3 id="node-moduls"><a href="#node-moduls" class="headerlink" title="node_moduls"></a>node_moduls</h3><p>這個資料夾主要存放 擴充套件、工具、layout 等東西，會依據 package.json 內容設定檔決定下載哪些設定檔。假設沒有出現 node_moduls 請輸入以下內容 : </p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i </span><br></pre></td></tr></table></figure><h2 id="資料夾說明"><a href="#資料夾說明" class="headerlink" title="資料夾說明"></a>資料夾說明</h2><ul><li>src : 專案內容存放的內容</li><li>ppublic : 發行後的存放的資料夾，通常專案build 時候就會打包一個js並使用html 呼叫。</li></ul><h2 id="新增一個-components"><a href="#新增一個-components" class="headerlink" title="新增一個 components"></a>新增一個 components</h2><h3 id="加入HelloWorld-tsx"><a href="#加入HelloWorld-tsx" class="headerlink" title="加入HelloWorld.tsx"></a>加入HelloWorld.tsx</h3><p>請再 src 創建一個 components\template 資料夾並創建 HelloWorld.tsx。內容如下<br> <figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">HelloWorld</span>(<span class="params"></span>)&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, World!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">HelloWorld</span>;</span><br></pre></td></tr></table></figure></p><h3 id="index-ts-修改內容"><a href="#index-ts-修改內容" class="headerlink" title="index.ts 修改內容"></a>index.ts 修改內容</h3><p>我們把 root.render 加入 HelloWorld 即可，可以達到我們想要的畫面。 </p><p>備註 : 這邊是不能殘留未使用的import 會造成錯誤訊息。</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ReactDOM</span> <span class="keyword">from</span> <span class="string">&#x27;react-dom/client&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./index.css&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> reportWebVitals <span class="keyword">from</span> <span class="string">&#x27;./reportWebVitals&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">HelloWorld</span> <span class="keyword">from</span> <span class="string">&#x27;./component/template/HelloWorld&#x27;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> root = <span class="title class_">ReactDOM</span>.<span class="title function_">createRoot</span>(</span><br><span class="line">  <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>) <span class="keyword">as</span> <span class="title class_">HTMLElement</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">root.<span class="title function_">render</span>(</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">React.StrictMode</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">HelloWorld</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">React.StrictMode</span>&gt;</span></span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// If you want to start measuring performance in your app, pass a function</span></span><br><span class="line"><span class="comment">// to log results (for example: reportWebVitals(console.log))</span></span><br><span class="line"><span class="comment">// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals</span></span><br><span class="line"><span class="title function_">reportWebVitals</span>();</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端技術 </category>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React - JSX 使用方式、介紹</title>
      <link href="/2022/05/01/%E5%89%8D%E7%AB%AF%E6%8A%80%E8%A1%93/REACT/react_00_%E4%BB%8B%E7%B4%B9/"/>
      <url>/2022/05/01/%E5%89%8D%E7%AB%AF%E6%8A%80%E8%A1%93/REACT/react_00_%E4%BB%8B%E7%B4%B9/</url>
      
        <content type="html"><![CDATA[<h1 id="React-介紹"><a href="#React-介紹" class="headerlink" title="React 介紹"></a>React 介紹</h1><p>React 可稱 ReactJs ，主要由Facebook、Instagram 和一個由個人開發者和企業組成的社群維護。</p><p>React為程式設計師提供了一種子組件不能直接影響外層組件（”data flows down”）的模型，資料改變時對HTML文件的有效更新，和現代單頁應用中組件之間乾淨的分離。</p><p>手機開發為 React Native : <a href="https://reactnative.dev/">https://reactnative.dev/</a></p><h2 id="JSX-語法"><a href="#JSX-語法" class="headerlink" title="JSX 語法"></a>JSX 語法</h2><p>JSX語法是開發React的核心語法，是一個 JavaScript 的語法擴充，X為Xml之意。<br>使用方式會與js不同，React能使用方式如下。</p><div class="note info flat"><p>🎈 注意 : 以下範例為 index.js 輸入的方式，並非在App.js所使用。</p></div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> el = <span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Hello React !!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="title class_">ReactDom</span>.<span class="title function_">render</span>(</span><br><span class="line">  el,</span><br><span class="line">  <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>)</span><br><span class="line">);</span><br><span class="line"></span><br></pre></td></tr></table></figure><div class="note info flat"><h3 id="StrictMode"><a href="#StrictMode" class="headerlink" title="StrictMode"></a>StrictMode</h3><p> 主要用來檢查component有無錯誤的方式<br> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">React.StrictMode</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">App</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">React.StrictMode</span>&gt;</span></span>,</span><br><span class="line">  <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure></p></div><hr><h2 id="JSX-使用方式"><a href="#JSX-使用方式" class="headerlink" title="JSX 使用方式"></a>JSX 使用方式</h2><p>請創建一個js檔案測試React規則，並使用下方範例。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*index.js*/</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ReactDOM</span> <span class="keyword">from</span> <span class="string">&#x27;react-dom&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Ex01</span> <span class="keyword">from</span> <span class="string">&#x27;./ex_01&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> el = <span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Hello React !!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">React.StrictMode</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">Ex01</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">React.StrictMode</span>&gt;</span></span>,</span><br><span class="line">  <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>)</span><br><span class="line">);</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//ex_01</span></span><br><span class="line"><span class="keyword">const</span> el = <span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>使用這方式也能正常產生文字<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">example_01</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        el</span><br><span class="line">    );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> example_01;</span><br></pre></td></tr></table></figure><p>基本上，React需要注意render() return要加上<code>&lt;div&gt;</code>。</p><p>注意是 jsx 是 function 不能用表達是方式使用，會造成意外的錯誤。若是使用變數方式是可以正常使用。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">example_01</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>使用這方式也能正常產生文字<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> example_01;</span><br></pre></td></tr></table></figure><hr><h2 id="事件使用"><a href="#事件使用" class="headerlink" title="事件使用"></a>事件使用</h2><p>JSX使用方式可以設定onClick方式。這邊我使用<code>&#123;&#125;</code>表示法，內容使用function名稱即可使用。 </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//按下事件</span></span><br><span class="line"><span class="keyword">let</span> <span class="title function_">clickAlert</span> = (<span class="params"></span>)=&gt;&#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&#x27;你已經點下我了&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//設定預設按鈕</span></span><br><span class="line"><span class="keyword">let</span> <span class="title function_">btnFunctionDemo</span> =(<span class="params"></span>)=&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span>( </span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;clickAlert&#125;</span>&gt;</span>請點我<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span> );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> btnFunctionDemo;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>這邊的<code>&#123;&#125;</code>表示法可以使用在css方式。<br>例如 : </p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> style_bg_blue = &#123; <span class="attr">background</span>: <span class="string">&#x27;blue&#x27;</span>, <span class="attr">margin</span>: <span class="string">&#x27;10px&#x27;</span>&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h1><p>花了第一天用 React JSX使用一遍，多少會有點操作上不太習慣。這邊比較像是說明如何使用JSX，後續會再研究看看如何更深入使用React。</p><p>(P.S. 本人JS不太強，講解無法太深入，請見諒&lt;(＿　＿)&gt;。)</p>]]></content>
      
      
      <categories>
          
          <category> 前端技術 </category>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【心得】 一個月訓練機車心得</title>
      <link href="/2022/04/18/%E7%AD%86%E8%A8%98%E8%88%87%E7%94%9F%E6%B4%BB%E9%9B%9C%E8%A8%98/%E7%94%9F%E6%B4%BB/%E3%80%90%E5%BF%83%E5%BE%97%E3%80%91%20%E4%B8%80%E5%80%8B%E6%9C%88%E8%A8%93%E7%B7%B4%E6%A9%9F%E8%BB%8A%E5%BF%83%E5%BE%97/"/>
      <url>/2022/04/18/%E7%AD%86%E8%A8%98%E8%88%87%E7%94%9F%E6%B4%BB%E9%9B%9C%E8%A8%98/%E7%94%9F%E6%B4%BB/%E3%80%90%E5%BF%83%E5%BE%97%E3%80%91%20%E4%B8%80%E5%80%8B%E6%9C%88%E8%A8%93%E7%B7%B4%E6%A9%9F%E8%BB%8A%E5%BF%83%E5%BE%97/</url>
      
        <content type="html"><![CDATA[<h2 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h2><p>今年因為疫情造成很多公司居家上班，因此我想找時間去把握時間去考以下為時間軸。</p><ul><li>2022&#x2F;03&#x2F;27 : 報名考試 2022&#x2F;05&#x2F;09 (稱作為勝利日)</li><li>2022&#x2F;04&#x2F;09 : 開始練習機車，每周六日去練習場練習</li><li>2022&#x2F;05&#x2F;09 : 順利拿到機車駕照</li></ul><h2 id="第一天授課"><a href="#第一天授課" class="headerlink" title="第一天授課"></a>第一天授課</h2><p>這邊先給個觀念，練習機車前必須要留意各項機車動作以及注意事項，主要原因:</p><ol><li>了解目前機車款式、操作</li><li>基本開車箱、油門、開啟電力等</li><li>遠近光燈打開後特徵等。</li></ol><p>有了這些基礎，可以從裡面知道學科一些基礎概念，相當好上手。</p><h2 id="熟悉機車特性"><a href="#熟悉機車特性" class="headerlink" title="熟悉機車特性"></a>熟悉機車特性</h2><p>第二天相對需要抓緊時間去了解手感，騎車與腳踏車不同處會在於轉角時候，機車如果座得太前面有時候會卡到膝蓋，相對要習慣自己能轉到怎樣的程度。</p><h2 id="為自己騎乘方式記錄"><a href="#為自己騎乘方式記錄" class="headerlink" title="為自己騎乘方式記錄"></a>為自己騎乘方式記錄</h2><p>記錄自己騎乘很多方式，因為我有帶朋友去練習場練習，所以可以藉由他來得知自己哪個關卡不足。如果沒有朋友可以考慮用行車紀錄器紀錄，效果會不錯。</p><p>第三天我直接到練習場練習轉彎處、直線七秒，當中兩段式可能需要抓一些範圍才能適應。</p><h2 id="從別人失敗的關卡學習"><a href="#從別人失敗的關卡學習" class="headerlink" title="從別人失敗的關卡學習"></a>從別人失敗的關卡學習</h2><p>第四天我依據影片流程、動作去學習，提早讓自己熟悉步驟，例如停車時必須要用後照鏡左右查看後，再向左右方查看完成動作。當然少不了魔王關卡，魔王關卡之所以沒過的人很多人多少是因為練習、環境問題，轉彎處是需要抓取大概範圍去轉彎。例如: U 型轉彎，最安全方式轉彎是弧度大一點，轉龍頭相對會輕鬆一些。</p><h2 id="魔王關卡-直線七秒"><a href="#魔王關卡-直線七秒" class="headerlink" title="魔王關卡 : 直線七秒"></a>魔王關卡 : 直線七秒</h2><p>相信很多人一定是死在直線七秒很多，練習方式也有很多種。如果要提升駕駛穩定性先具備:</p><ul><li>坐姿</li><li>兩手貼其身體</li><li>穩住把手<br>如果記住這些動作，可以嘗試在練習區停滯 10<del>13 秒，如果到考場通常都是 7</del>8 秒穩穩通關。到考試時候請不要看秒數，如果駕駛時分心最容易偏掉是非常危險的行為。</li></ul><h2 id="自訂時間自習、模擬考"><a href="#自訂時間自習、模擬考" class="headerlink" title="自訂時間自習、模擬考"></a>自訂時間自習、模擬考</h2><p><a href="https://www.mvdis.gov.tw/m3-simulator-drv/">交通部公路總局汽機車線上隨機模擬考系統</a></p><p>自習時間，如果像我一樣不太愛看這些東西，可以找朋友一起考試互相交流是一種選擇，再來是不看情況下，需要付出練習次數來擬補閱讀，建議是考在 95~100 區間為最安全，如果是僥倖通過就要確保當天考試是否跟你考得內容一樣。</p><h2 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h2><p>標題為一個月訓練機車，實際上是不用到一個月，通常是努力的方式來決定。記起以上經驗，可以確定兩人一起學習會學比較快，如果從學習中分享給其他人成功秘訣，會讓自己更熟習騎車需要具備那些動作、操作、坐姿等，以上努力考到機車駕照的工程師心得。</p>]]></content>
      
      
      <categories>
          
          <category> 筆記 </category>
          
          <category> 生活雜記 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>C# net5.0 - WSDL 簡易測試</title>
      <link href="/2022/04/02/%E5%BE%8C%E7%AB%AF%E6%8A%80%E8%A1%93/CS/cs_15_WSDL%E7%B0%A1%E6%98%93%E6%B8%AC%E8%A9%A6/"/>
      <url>/2022/04/02/%E5%BE%8C%E7%AB%AF%E6%8A%80%E8%A1%93/CS/cs_15_WSDL%E7%B0%A1%E6%98%93%E6%B8%AC%E8%A9%A6/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>近期執行專案時候，常常遇到對方使用的是 WSDL。當時剛入行軟體工程師非常震驚這是甚麼東西，WSDL 如何傳遞、如何使用，直到後期有發現不錯用的工具SoapUI 主要給 WSDL這個使用。接下來會直接讓各位參考如何執行簡易版的WSDL。</p><p>最近有製作簡易版本的response 工具，可以提供參考。</p><h2 id="使用工具、指令"><a href="#使用工具、指令" class="headerlink" title="使用工具、指令"></a>使用工具、指令</h2><ul><li>VSC : <a href="https://code.visualstudio.com/">點擊我</a></li><li>使用 Command : <code>dotnet new console -f net5.0</code></li><li>Github 參考 : <a href="https://github.com/JontCont/dotnetCore_WSDL">點擊我</a></li></ul><h2 id="Web服務描述語言，Web-Services-Description-Language"><a href="#Web服務描述語言，Web-Services-Description-Language" class="headerlink" title="Web服務描述語言，Web Services Description Language"></a>Web服務描述語言，Web Services Description Language</h2><p>基於 XML 用於 描述 、通訊(訪問) Web Services 的語言。常見相關名稱</p><ul><li>Web Services</li><li>SOAP (Simple Object Access Protocol)</li><li>UDDI (Universal Description, Discovery, and Integration)</li></ul><h1 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h1><p>這邊只會使用 請求、回覆。若要看WSDL製作本篇不展示。</p><h2 id="連線方式"><a href="#連線方式" class="headerlink" title="連線方式"></a>連線方式</h2><p>筆者案例是使用xml部分，需要使用 text&#x2F;xml 才能啟動功能，如果是postman 必須要把 request 更改 <code>row</code> -&gt; <code>text</code> 才能使用功能。下方要注意幾點。</p><ol><li>需要確認 wsdl 是否有開啟 (可使用 SoapUI 測試)</li><li>需使用 POST　取得資料 (筆者遇到的案子為例)</li></ol><p>下方範例是主要讓 Request 內容可以呈現狀態、訊息。完成後，簡易的版本就完成了。</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">RequestExtension</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//set config</span></span><br><span class="line">    <span class="comment">//example WSDL : http://localhost/jwsdata/services/Data?wsdl</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">string</span> url = <span class="string">&quot;http://localhost/jwsdata/services/Data?wsdl&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">string</span> XmlString = <span class="string">@&quot;&quot;</span>; <span class="comment">// 輸入要request 內容</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// request result</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ResponseResult result &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125; =<span class="keyword">new</span> ResponseResult();</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ResponseResult</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">bool</span> status &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125; = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span> message &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125; = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// request WSDL</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">async</span> Task&lt;ResponseResult&gt; <span class="title">RequestWSDL</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//取得當前 html 字串</span></span><br><span class="line">        HttpClient client = <span class="keyword">new</span>();</span><br><span class="line">        client</span><br><span class="line">            .DefaultRequestHeaders</span><br><span class="line">            .Accept</span><br><span class="line">            .Add(</span><br><span class="line">                <span class="keyword">new</span> MediaTypeWithQualityHeaderValue(<span class="string">&quot;text/xml&quot;</span>)</span><br><span class="line">            );<span class="comment">//ACCEPT header</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            HttpRequestMessage request = <span class="keyword">new</span> HttpRequestMessage(HttpMethod.Post, url);</span><br><span class="line">            request.Content = </span><br><span class="line">                <span class="keyword">new</span> StringContent(XmlString, Encoding.UTF8, <span class="string">&quot;text/xml&quot;</span>);<span class="comment">//CONTENT-TYPE header</span></span><br><span class="line"></span><br><span class="line">            HttpResponseMessage response =  <span class="keyword">await</span> client.SendAsync(request);</span><br><span class="line">            response.EnsureSuccessStatusCode();</span><br><span class="line">            <span class="built_in">string</span> responseBody = <span class="keyword">await</span> response.Content.ReadAsStringAsync();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ResponseResult&#123;</span><br><span class="line">                status = <span class="literal">true</span>,</span><br><span class="line">                message = responseBody,</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception ex)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ResponseResult&#123;</span><br><span class="line">                status = <span class="literal">false</span>,</span><br><span class="line">                message = ex.Message,</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="comment">//RequestWSDL</span></span><br></pre></td></tr></table></figure><h2 id="加入結果"><a href="#加入結果" class="headerlink" title="加入結果"></a>加入結果</h2><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">async</span> Task <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> responseResult = <span class="keyword">await</span> RequestExtension.RequestWSDL();</span><br><span class="line">        Console.WriteLine(<span class="string">$&quot;status : <span class="subst">&#123;responseResult.status&#125;</span> , message : <span class="subst">&#123;responseResult.message&#125;</span>&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="轉換傳輸資料"><a href="#轉換傳輸資料" class="headerlink" title="轉換傳輸資料"></a>轉換傳輸資料</h2><p>這邊使用方式僅供參考並非最佳解。使用目的是處理資料時候，需要輸入xml 指定名稱過度麻煩，這邊加入方式class 定義出來，解析內容轉出要得傳輸資料。</p><p>處理方式也很簡單，可以透由 replace 字串取代即可產出自動輸入值。如果要產出 class 名稱也是用下方類似做法。</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">string</span> <span class="title">Convert</span>&lt;<span class="title">T</span>&gt;(<span class="params">T obj</span>)</span>&#123;</span><br><span class="line">    Type t = <span class="keyword">typeof</span>(T);</span><br><span class="line">    PropertyDescriptorCollection properties = TypeDescriptor.GetProperties(t);</span><br><span class="line">    StringBuilder strBuilder = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">    <span class="keyword">foreach</span> (PropertyDescriptor property <span class="keyword">in</span> properties)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (property.GetValue(obj) <span class="keyword">is</span> <span class="literal">null</span> ||<span class="built_in">string</span>.IsNullOrEmpty(property.GetValue(obj).ToString())) &#123; <span class="keyword">continue</span>; &#125;</span><br><span class="line">        strBuilder.AppendLine(</span><br><span class="line">            @<span class="string">$&quot;&lt;xsd:<span class="subst">&#123;property.Name&#125;</span>&gt;<span class="subst">&#123;property.GetValue(obj)&#125;</span>&lt;/xsd:<span class="subst">&#123;property.Name&#125;</span>&gt;&quot;</span></span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> strBuilder.ToString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h2><p>本文是用快速開發方式建置，可以快速得知功能是否正常。目的是開發方便而已(參考資料)。net5.0 以後有些淘汰型的request、response function用法可能需要參考本文的作法。今天快速建立出 WSDL 環境提供給各位參考， 後續再補充完整 WSDL。</p>]]></content>
      
      
      <categories>
          
          <category> 後端技術 </category>
          
          <category> C# </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
            <tag> VSC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C# API (一)- API種類、特性規範</title>
      <link href="/2022/04/02/%E5%BE%8C%E7%AB%AF%E6%8A%80%E8%A1%93/CS/cs_16_API%E7%A8%AE%E9%A1%9E%E3%80%81%E4%BD%BF%E7%94%A8%E8%A6%8F%E7%AF%84/"/>
      <url>/2022/04/02/%E5%BE%8C%E7%AB%AF%E6%8A%80%E8%A1%93/CS/cs_16_API%E7%A8%AE%E9%A1%9E%E3%80%81%E4%BD%BF%E7%94%A8%E8%A6%8F%E7%AF%84/</url>
      
        <content type="html"><![CDATA[<p>相信很多人開發 API 有使用 RESTful API或是其他定義，很多設計模式可以提升撰寫的速度、閱讀。這章節會著重於介紹請各位參閱以下內容，</p><h2 id="API-application-programming-interface）"><a href="#API-application-programming-interface）" class="headerlink" title="API (application programming interface）"></a>API (application programming interface）</h2><p>API 稱作為 “應用程式介面”，定義上是多個軟體中介互相回應(Response)、請求(Request)。如果要更詳細介紹請到下方連結點選</p><h3 id="詳細介紹"><a href="#詳細介紹" class="headerlink" title="詳細介紹 :"></a>詳細介紹 :</h3><ul><li>API 到底是什麼？ 用白話文帶你認識 by Frankie : <a href="https://medium.com/codingbar/api-%E5%88%B0%E5%BA%95%E6%98%AF%E4%BB%80%E9%BA%BC-%E7%94%A8%E7%99%BD%E8%A9%B1%E6%96%87%E5%B8%B6%E4%BD%A0%E8%AA%8D%E8%AD%98-95f65a9cfc33">請點我</a></li></ul><h2 id="API-請求種類"><a href="#API-請求種類" class="headerlink" title="API 請求種類"></a>API 請求種類</h2><p>API 從歷史到至今其實有很多使用方式，XML、JSON都是在傳輸過程中經常出現。</p><h3 id="REST-Representational-State-Transfer"><a href="#REST-Representational-State-Transfer" class="headerlink" title="REST (Representational State Transfer)"></a>REST (Representational State Transfer)</h3><p>表現層狀態轉移, 英文 Representational State Transfer ，是近年來比較多人使用的一種，最常聽到 <code>RESTful API</code>是同個網路架構風格。REST通常基於HTTP、URI、XML以及HTML這些現有的廣泛流行的協定和標準，他的資源是由URI來指定。</p><p>REST架構的限制條件</p><ul><li>客戶-服務器（Client-Server）</li><li>無狀態（Stateless）</li><li>緩存（Cache）</li><li>統一接口（Uniform Interface）<ol><li>請求中包含資源的 ID（Resource identification in requests）: 以資源為基礎 。每個資源都可以通過URI存取到。</li><li>資源通過標識來操作（Resource manipulation through representations）: 通過重表達的客戶端可以管理原資源</li><li>訊息的自我描述性（Self-descriptive messages）: 返回資訊足夠描述自己</li><li>用超媒體驅動應用狀態（Hypermedia as the engine of application state (HATEOAS)）:超媒體是應用狀態的引擎</li></ol></li><li>分層系統（Layered System）</li><li>按需代碼（Code-On-Demand，可選）</li></ul><p>方法</p><ul><li>POST : 新增</li><li>GET : 讀取</li><li>PUT&#x2F;PATCH : 更新</li><li>DELECT :刪除</li></ul><p>其他方法</p><ul><li>HEAD : 讀取。只回傳 HTTP header，不會回傳請求資源</li><li>CONNECT : HTTP&#x2F;1.1協議中預留給能夠將連接改為管道方式的代理服務器</li><li>OPTIONS : 此方法可使服務器傳回該資源所支持的所有 HTTP 請求方法</li><li>TRACE : 回顯服務器收到的請求，主要用於測試或診斷</li></ul><h3 id="RPC-Remote-Procedure-Call"><a href="#RPC-Remote-Procedure-Call" class="headerlink" title="RPC (Remote Procedure Call)"></a>RPC (Remote Procedure Call)</h3><p>遠端程序呼叫, 英文 Remote Procedure Call。是一種伺服器-客戶端（Client&#x2F;Server）模式，經典實現是一個通過傳送請求-接受回應進行資訊互動的系統。Web服務提供一個分布式函數或方法接口供用戶呼叫，客戶端通常是把方法名和引數傳遞給伺服器，然後伺服器返回JSON或XML。</p><p>RPC 規則中比較少，通常方法是用 <code>Get</code>、<code>POST</code>處理、端點要包含被執行操作的名字。</p><h3 id="GraphQL"><a href="#GraphQL" class="headerlink" title="GraphQL"></a>GraphQL</h3><p>GraphQL 是一種API查詢語言，支援也包含資料讀取、寫入（操作）和資料變更，允許客戶端定義需要得到的資料結構 。</p><p>與REST和RPC不同，GraphQL API只需要一個端點；它也不需要使用不同的HTTP動詞，它只使用POST，你需要在JSON body裡面指定是要執行查詢還是修改。</p><p>引用[程式人生]。GraphQL有下面幾個優勢:</p><ul><li><p>節省了多重的請求往返:GraphQL可以一次把所需的關聯資料全部查詢出來。不會存在例如N+1這樣的問題</p></li><li><p>避免了API版本問題:你可以隨時新增欄位和型別，不會影響現有的查詢。可以標記棄用。通過Log可以追蹤出哪些欄位被誰使用，如果欄位沒人再去使用，就可以移除它了。</p></li><li><p>Payload比較小:REST和RPC的響應都包含客戶端傳送一些不需要的資料。而使用GraphQL的話，客戶端得到的響應就是它所請求的那些東西，不多不少。</p></li><li><p>強型別:GraphQL是強型別的，開發時有型別檢查能保證查詢的正確性和合理性。</p></li><li><p>內省(Introspection):像REST，就需要安裝Swagger等工具來幫助瀏覽API。而GraphQL本身就具備可發現性。它還帶有一個瀏覽器內的IDE用來瀏覽GraphQL API。下圖就是Github的GraphQL API：</p></li></ul><p>缺點就是它為伺服器添加了許多複雜性，伺服器需要額外的工作來處理這些複雜的查詢。根據查詢內容的不同，效能也是一個變數.</p><h2 id="API-狀態規範"><a href="#API-狀態規範" class="headerlink" title="API 狀態規範"></a>API 狀態規範</h2><p>API 狀態碼是回應非常重要的一環。種類主要狀態以下 :</p><ul><li>2xx &#x3D; Success</li><li>3xx &#x3D; Redirect</li><li>4xx &#x3D; User error</li><li>5xx &#x3D; Server error</li></ul><p>參考文件 : <a href="https://restfulapi.net/http-status-codes/">HTTP Status Codes</a></p><h2 id="文件參考"><a href="#文件參考" class="headerlink" title="文件參考"></a>文件參考</h2><ol><li><a href="https://ithelp.ithome.com.tw/articles/10191925">RESTful API與MVC名詞介紹</a></li><li><a href="https://www.796t.com/content/1542560017.html">web API種類 常見形式 Web API 的簡單分類總結</a></li><li><a href="https://zh.wikipedia.org/zh-tw/Web%E6%9C%8D%E5%8A%A1">wiki Web服務</a></li><li><a href="https://medium.com/itsems-frontend/api-%E6%98%AF%E4%BB%80%E9%BA%BC-restful-api-%E5%8F%88%E6%98%AF%E4%BB%80%E9%BA%BC-a001a85ab638">API 是什麼? RESTful API 又是什麼?</a></li><li><a href="https://docs.microsoft.com/zh-tw/azure/architecture/best-practices/api-design">RESTful Web API 設計</a></li><li><a href="https://www.ithome.com.tw/tech/41508">Web Oriented Architecture</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 後端技術 </category>
          
          <category> C# </category>
          
      </categories>
      
      
        <tags>
            
            <tag> API </tag>
            
            <tag> C# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>StartFMS.Extensions.Configuration 使用方式</title>
      <link href="/2022/04/02/%E5%BE%8C%E7%AB%AF%E6%8A%80%E8%A1%93/CS/Nuget/StartFMS.Extensions.Configuration%E6%93%B4%E5%85%85%E5%A5%97%E4%BB%B6/"/>
      <url>/2022/04/02/%E5%BE%8C%E7%AB%AF%E6%8A%80%E8%A1%93/CS/Nuget/StartFMS.Extensions.Configuration%E6%93%B4%E5%85%85%E5%A5%97%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h2 id="安裝方式"><a href="#安裝方式" class="headerlink" title="安裝方式"></a>安裝方式</h2><p>.NET Cli</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dotnet add package StartFMS.Extensions.Configuration --version 1.0.0</span><br></pre></td></tr></table></figure><p>Package Manager</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">NuGet\Install-Package StartFMS.Extensions.Configuration -Version 1.0.0</span><br></pre></td></tr></table></figure><h2 id="使用目的"><a href="#使用目的" class="headerlink" title="使用目的"></a>使用目的</h2><p>利用擴充方式減少呼叫的動作以及方便呼叫 Azure 設定、管理使用者密碼(secrets.json)等檔案。</p><p><img src="/image/20230405_11-36-23.png"></p><h2 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h2><ol><li>使用 <code>Config</code> 呼叫</li><li><code>GetConfiguration()</code> 可抓取 appsetting、secrets</li><li>Azure Confidential 參數使用 <code>GetAzureConfiguration()</code></li></ol><h2 id="範例"><a href="#範例" class="headerlink" title="範例"></a>範例</h2><p>透過 Program.cs 傳入參數 </p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> config = Config.GetConfiguration(); <span class="comment">//加入設定檔</span></span><br><span class="line"><span class="keyword">var</span>  ChannelToken = config.GetValue&lt;<span class="built_in">string</span>&gt;(<span class="string">&quot;Line:Bots:channelToken&quot;</span>);</span><br><span class="line"><span class="keyword">var</span>  AdminUserID = config.GetValue&lt;<span class="built_in">string</span>&gt;(<span class="string">&quot;Line:Bots:adminUserID&quot;</span>);</span><br></pre></td></tr></table></figure><h2 id="Method"><a href="#Method" class="headerlink" title="Method"></a>Method</h2><p>目前有以下Function可以使用</p><ol><li>GetConnectionString(string name)</li><li>GetAzureConfiguration(string connectionString)</li><li>GetConfiguration()</li><li>GetConfiguration(string path)</li><li>GetAzureConfiguration<T>()</li><li>GetAzureConfiguration<T>(string path)</li></ol><p>GetAzureConfiguration(string connectionString) 主要是給 Azure Configuration 使用，記得把連線字串加入上去即可。</p>]]></content>
      
      
      <categories>
          
          <category> 雲端平台 </category>
          
          <category> Nuget </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nuget </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>StartFMS.Extensions.Data 使用方式</title>
      <link href="/2022/04/02/%E5%BE%8C%E7%AB%AF%E6%8A%80%E8%A1%93/CS/Nuget/StartFMS.Extensions.Data%20%E4%BD%BF%E7%94%A8%E6%96%B9%E5%BC%8F/"/>
      <url>/2022/04/02/%E5%BE%8C%E7%AB%AF%E6%8A%80%E8%A1%93/CS/Nuget/StartFMS.Extensions.Data%20%E4%BD%BF%E7%94%A8%E6%96%B9%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="安裝方式"><a href="#安裝方式" class="headerlink" title="安裝方式"></a>安裝方式</h2><p>.NET Cli</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dotnet add package StartFMS.Extensions.Data --version 1.0.5</span><br></pre></td></tr></table></figure><p>Package Manager</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">NuGet\Install-Package StartFMS.Extensions.Data -Version 1.0.5</span><br></pre></td></tr></table></figure><h2 id="字串轉換"><a href="#字串轉換" class="headerlink" title="字串轉換"></a>字串轉換</h2><p>提供 int 、Double、float、datetime等轉換資料型態，範例如下</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span> Number = <span class="string">&quot;100800&quot;</span>.ToInt();</span><br><span class="line">DateTime dt = <span class="string">&quot;2023/3/10&quot;</span>.ToDateTime();</span><br></pre></td></tr></table></figure><h2 id="千分位、小數點字串"><a href="#千分位、小數點字串" class="headerlink" title="千分位、小數點字串"></a>千分位、小數點字串</h2><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//千分位轉換</span></span><br><span class="line"><span class="built_in">string</span> thousandths = <span class="string">&quot;10000&quot;</span>.ToThousandths();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 小數點</span></span><br><span class="line"><span class="built_in">string</span> places = <span class="string">&quot;10000&quot;</span>.ToDecimalPlaces(<span class="number">6</span>);</span><br></pre></td></tr></table></figure><h2 id="自動累加數字"><a href="#自動累加數字" class="headerlink" title="自動累加數字"></a>自動累加數字</h2><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">string</span> num = <span class="string">&quot;0000&quot;</span>.ToAutoNumber();</span><br><span class="line"><span class="built_in">string</span> num1 = <span class="string">&quot;0001&quot;</span>.ToNumber(<span class="number">5</span>); <span class="comment">//output : 00001</span></span><br></pre></td></tr></table></figure><h2 id="Model-預設值"><a href="#Model-預設值" class="headerlink" title="Model 預設值"></a>Model 預設值</h2><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//預設 class 內屬性預設值</span></span><br><span class="line"><span class="keyword">var</span> mods = <span class="keyword">new</span> Class1()&#123;&#125;.InitValue();</span><br><span class="line"></span><br><span class="line"><span class="comment">//傳入 mods 值</span></span><br><span class="line"><span class="keyword">var</span> mods2 = <span class="keyword">new</span> Class1()&#123;&#125;.SetValue(mods);</span><br></pre></td></tr></table></figure><h2 id="更新紀錄"><a href="#更新紀錄" class="headerlink" title="更新紀錄"></a>更新紀錄</h2><p>1.0.5  </p><ul><li>修繕型態無法轉換問題</li></ul><p>1.0.4  </p><ul><li>加入 ToCapitalizeFirstLetter() -&gt;字首大寫</li><li>變更 ToDefaultValue -&gt; InitValue、ToValue -&gt; SetValue 名稱</li></ul>]]></content>
      
      
      <categories>
          
          <category> 雲端平台 </category>
          
          <category> Nuget </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nuget </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>StartFMS.Extensions.Line 使用方式</title>
      <link href="/2022/04/02/%E5%BE%8C%E7%AB%AF%E6%8A%80%E8%A1%93/CS/Nuget/StartFMS.Extensions.Line%20%E4%BD%BF%E7%94%A8%E6%96%B9%E5%BC%8F/"/>
      <url>/2022/04/02/%E5%BE%8C%E7%AB%AF%E6%8A%80%E8%A1%93/CS/Nuget/StartFMS.Extensions.Line%20%E4%BD%BF%E7%94%A8%E6%96%B9%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h2><p>開發過程中，使用 LineBotSDK 相當不順手以及建立方式，後面我另外把LineBotSDK 另外用 NET Core 版本擴充，方便後續引用、覆寫。請參考使用方式。</p><h2 id="所需套件"><a href="#所需套件" class="headerlink" title="所需套件"></a>所需套件</h2><ul><li><a href="https://www.nuget.org/packages/LineBotSDK#usedby-body-tab">StartFMS.Extensions.Line</a></li><li><a href="https://www.nuget.org/packages/LineBotSDK">LineBotSDK</a></li></ul><p>備註: 初版暫時使用兩種套件合併使用，後續看看有沒有空去修正現行狀況。</p><h1 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h1><p>本範例 .NET6.0 展示，若有其他使用操作問題，可以在下方留言。</p><h2 id="一、新創一個類別"><a href="#一、新創一個類別" class="headerlink" title="一、新創一個類別"></a>一、新創一個類別</h2><p>創建一個新的 Class 改寫LineBots 內容，後續會比較好使用。</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Helper/LineBot.cs</span></span><br><span class="line"><span class="keyword">using</span> StartFMS.Extensions.Line;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title">StartFMS.Partner.API.Helper</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">LineBot</span>:<span class="title">LineBots</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">MessageText</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> @event = ReceivedMessage.events.FirstOrDefault();</span><br><span class="line">            <span class="built_in">string</span> message = @event!=<span class="literal">null</span> ? @event.message.text:<span class="string">&quot;&quot;</span>;</span><br><span class="line">            ReplyMessage(message);</span><br><span class="line">            <span class="comment">//base.MessageText();</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二、設定-Program-cs-加入以下設定"><a href="#二、設定-Program-cs-加入以下設定" class="headerlink" title="二、設定 Program.cs 加入以下設定"></a>二、設定 Program.cs 加入以下設定</h2><p>加入 <code>StartFMS.Partner.API.Helper.LineBot</code> 類別。 (並不是 <code>StartFMS.Extensions.Line.LineBots</code>)</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Program.cs </span></span><br><span class="line"><span class="keyword">var</span> lineBots = <span class="keyword">new</span> LineBot() &#123;</span><br><span class="line">    ChannelToken = config.GetValue&lt;<span class="built_in">string</span>&gt;(<span class="string">&quot;Line:Bots:channelToken&quot;</span>),</span><br><span class="line">    AdminUserID = config.GetValue&lt;<span class="built_in">string</span>&gt;(<span class="string">&quot;Line:Bots:adminUserID&quot;</span>)</span><br><span class="line">&#125;;</span><br><span class="line">builder.Services.AddSingleton&lt;LineBot&gt;(lineBots);</span><br></pre></td></tr></table></figure><h2 id="三、加入Controllers"><a href="#三、加入Controllers" class="headerlink" title="三、加入Controllers"></a>三、加入Controllers</h2><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">HttpPost(<span class="string">&quot;&quot;</span>, Name = <span class="string">&quot;Message Reply&quot;</span>)</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task&lt;<span class="built_in">string</span>&gt; <span class="title">Post</span>()</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//載入 Line BOT </span></span><br><span class="line">        <span class="keyword">using</span> (<span class="keyword">var</span> linebot = <span class="keyword">await</span> _lineBots.LoadAsync(Request.Body))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//執行內容</span></span><br><span class="line">            linebot.ExecuteReader(); <span class="comment">//改內容透過 overrid 方式修改</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> JsonConvert.SerializeObject(<span class="keyword">new</span></span><br><span class="line">        &#123;</span><br><span class="line">            Success = <span class="literal">true</span>,</span><br><span class="line">            Message = <span class="string">&quot;&quot;</span>,</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span>(Exception ex) &#123;</span><br><span class="line">        <span class="keyword">return</span> JsonConvert.SerializeObject(<span class="keyword">new</span></span><br><span class="line">        &#123;</span><br><span class="line">            Success = <span class="literal">false</span>,</span><br><span class="line">            Message = ex.Message,</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="注意事項"><a href="#注意事項" class="headerlink" title="注意事項"></a>注意事項</h2><p>設定上面只需要以上動作即可，目前簡化到直接透過 Helper 方式進行修改執行內容。為了達到簡化效果本擴充有提供Function ，只需要針對Function 進行修改即可。</p><h1 id="override-method"><a href="#override-method" class="headerlink" title="override method"></a>override method</h1><h2 id="Behavior-method"><a href="#Behavior-method" class="headerlink" title="Behavior method"></a>Behavior method</h2><p>function 分為兩段 </p><ul><li>Join : 加入機器人</li><li>Message : 留言</li></ul><h3 id="a-Join"><a href="#a-Join" class="headerlink" title="a. Join"></a>a. Join</h3><p>加入機器人之後Bot動作行為。</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Join</span>()</span> &#123; &#125;</span><br></pre></td></tr></table></figure><h3 id="b-Message"><a href="#b-Message" class="headerlink" title="b.Message"></a>b.Message</h3><p>如果是第一次使用以下 Function 不建議直接修改，本擴充有把 Message 回傳類別特別回傳到指定位置。</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Message</span>()</span> &#123; &#125;</span><br></pre></td></tr></table></figure><h2 id="Message-method"><a href="#Message-method" class="headerlink" title="Message method"></a>Message method</h2><p>以下是使用者透過下面 Function 選擇、讀取，也是本擴充工具的精華。overrid 建議由這邊function 進行修改，目前實測下來相當好用。</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//文字</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">MessageText</span>()</span> &#123; &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//圖檔</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">MessageImage</span>()</span> &#123; &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//影片</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">MessageVideo</span>()</span> &#123; &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//聲音</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">MessageAudio</span>()</span> &#123; &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//貼圖</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">MessageSticker</span>()</span> &#123; &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//地圖</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">MessageLocation</span>()</span> &#123; &#125;</span><br></pre></td></tr></table></figure><p>完成畫面如下，希望大家可以順利執行Line Bot 嚕。<br><img src="/image/20230402_18-19-58.png"></p>]]></content>
      
      
      <categories>
          
          <category> 雲端平台 </category>
          
          <category> Nuget </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nuget </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>StartFMS.Extensions.Line V1.0.2版本使用方式</title>
      <link href="/2022/04/02/%E5%BE%8C%E7%AB%AF%E6%8A%80%E8%A1%93/CS/Nuget/StartFMS.Extensions.Line_V1.0.2%E7%89%88%E6%9C%AC%E4%BD%BF%E7%94%A8%E6%96%B9%E5%BC%8F/"/>
      <url>/2022/04/02/%E5%BE%8C%E7%AB%AF%E6%8A%80%E8%A1%93/CS/Nuget/StartFMS.Extensions.Line_V1.0.2%E7%89%88%E6%9C%AC%E4%BD%BF%E7%94%A8%E6%96%B9%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="安裝"><a href="#安裝" class="headerlink" title="安裝"></a>安裝</h2><p>.NET CLI</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dotnet add package StartFMS.Extensions.Line --version 1.0.2</span><br></pre></td></tr></table></figure><p>Package Manager</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">NuGet\Install-Package StartFMS.Extensions.Line -Version 1.0.2</span><br></pre></td></tr></table></figure><h2 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h2><ol><li>DI 確認專案需求調整</li><li>需要透過 新創類別修改，並繼承 StartFMS.Extensions.Line.LineBots 對象</li></ol><h3 id="a-基本做法"><a href="#a-基本做法" class="headerlink" title="a.基本做法"></a>a.基本做法</h3><ol><li><p>新增類別</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Helper/LineBot.cs</span></span><br><span class="line"><span class="keyword">using</span> StartFMS.Extensions.Line;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">StartFMS.Partner.API.Helper</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">LineBot</span>:<span class="title">LineBots</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">MessageText</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> @event = LineReceived.events.FirstOrDefault();</span><br><span class="line">            <span class="built_in">string</span> message = @event!=<span class="literal">null</span> ? @event.message.text:<span class="string">&quot;&quot;</span>;</span><br><span class="line">            ReplyMessage(message);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>加入Controlles</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">HttpPost(<span class="string">&quot;&quot;</span>, Name = <span class="string">&quot;Message Reply&quot;</span>)</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task&lt;<span class="built_in">string</span>&gt; <span class="title">Post</span>()</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">var</span> lineBots = <span class="keyword">new</span> LineBot()</span><br><span class="line">&#123;</span><br><span class="line">ChannelToken =<span class="string">&quot;&quot;</span>,</span><br><span class="line">AdminUserID = <span class="string">&quot;&quot;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> (<span class="keyword">var</span> linebot = <span class="keyword">await</span> lineBots.LoadAsync(Request.Body))</span><br><span class="line">&#123;</span><br><span class="line">linebot.ExecuteReader();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> JsonConvert.SerializeObject(<span class="keyword">new</span></span><br><span class="line">&#123;</span><br><span class="line">Success = <span class="literal">true</span>,</span><br><span class="line">Message = <span class="string">&quot;&quot;</span>,</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span>(Exception ex) &#123;</span><br><span class="line"><span class="keyword">return</span> JsonConvert.SerializeObject(<span class="keyword">new</span></span><br><span class="line">&#123;</span><br><span class="line">Success = <span class="literal">false</span>,</span><br><span class="line">Message = ex.Message,</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="b-DI-作法"><a href="#b-DI-作法" class="headerlink" title="b.DI 作法"></a>b.DI 作法</h3><ol><li><p>新增類別</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Helper/LineBot.cs</span></span><br><span class="line"><span class="keyword">using</span> StartFMS.Extensions.Line;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">StartFMS.Partner.API.Helper</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">LineBot</span>:<span class="title">LineBots</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">MessageText</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> @event = LineReceived.events.FirstOrDefault();</span><br><span class="line">            <span class="built_in">string</span> message = @event!=<span class="literal">null</span> ? @event.message.text:<span class="string">&quot;&quot;</span>;</span><br><span class="line">            ReplyMessage(message);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>設定參數<br>Program.cs 加入以下設定</p></li></ol><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Program.cs </span></span><br><span class="line"><span class="keyword">var</span> lineBots = <span class="keyword">new</span> LineBot() &#123;</span><br><span class="line">    ChannelToken = <span class="string">&quot;加入頻道 Token&quot;</span>,</span><br><span class="line">    AdminUserID = <span class="string">&quot;加入管理者 Token&quot;</span></span><br><span class="line">&#125;;</span><br><span class="line">builder.Services.AddSingleton&lt;LineBot&gt;(lineBots);</span><br></pre></td></tr></table></figure><ol start="3"><li>加入Controllers<figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">ApiController</span>]</span><br><span class="line">[<span class="meta">Route(<span class="string">&quot;/api/Line/Bot/v1.0/&quot;</span>)</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">LineBotsV1Controller</span> : <span class="title">ControllerBase</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> LineBot _lineBots;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LineBotsV1Controller</span>(<span class="params">LineBot lineBots</span>)</span> &#123;</span><br><span class="line">        _lineBots = lineBots;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    [<span class="meta">HttpPost(<span class="string">&quot;&quot;</span>, Name = <span class="string">&quot;Message Reply&quot;</span>)</span>]</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task&lt;<span class="built_in">string</span>&gt; <span class="title">Post</span>()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">using</span> (<span class="keyword">var</span> linebot = <span class="keyword">await</span> _lineBots.LoadAsync(Request.Body))</span><br><span class="line">            &#123;</span><br><span class="line">                linebot.ExecuteReader();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> JsonConvert.SerializeObject(<span class="keyword">new</span></span><br><span class="line">            &#123;</span><br><span class="line">                Success = <span class="literal">true</span>,</span><br><span class="line">                Message = <span class="string">&quot;&quot;</span>,</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span>(Exception ex) &#123;</span><br><span class="line">            <span class="keyword">return</span> JsonConvert.SerializeObject(<span class="keyword">new</span></span><br><span class="line">            &#123;</span><br><span class="line">                Success = <span class="literal">false</span>,</span><br><span class="line">                Message = ex.Message,</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="Behavior-method"><a href="#Behavior-method" class="headerlink" title="Behavior method"></a>Behavior method</h2><p>行為 Function 有 “Join”、”Message”這兩個，使用方式如下。</p><h3 id="a-Join"><a href="#a-Join" class="headerlink" title="a. Join()"></a>a. Join()</h3><p>加入機器人之後Bot動作行為。</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Join</span>()</span> &#123; &#125;</span><br></pre></td></tr></table></figure><h3 id="b-Message"><a href="#b-Message" class="headerlink" title="b.Message()"></a>b.Message()</h3><p>如果是第一次使用以下 Function 不建議直接修改，本擴充有把 Message 回傳類別特別回傳到指定位置。</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Message</span>()</span> &#123; &#125;</span><br></pre></td></tr></table></figure><h3 id="c-Message-method"><a href="#c-Message-method" class="headerlink" title="c.Message method"></a>c.Message method</h3><ul><li><code>public override void MessageText() &#123; &#125;</code> : 留言文字時候執行。</li><li><code>public override void MessageImage() &#123; &#125;</code> : 發送圖檔時候執行。</li><li><code>public override void MessageVideo() &#123; &#125;</code> : 發送影片時候執行。</li><li><code>public override void MessageAudio() &#123; &#125;</code> : 發送音訊時候執行。</li><li><code>public override void MessageSticker() &#123; &#125;</code> : 發貼圖時候執行。</li><li><code>public override void MessageLocation() &#123; &#125;</code> : 發送地圖時候執行。</li></ul><h2 id="四、更新內容"><a href="#四、更新內容" class="headerlink" title="四、更新內容"></a>四、更新內容</h2><p>1.0.2</p><ul><li>修正 上一版無法正常使用</li></ul><p>1.0.1 (建議不使用)</p><ul><li>修正 依賴 LineBotSDK問題</li></ul>]]></content>
      
      
      <categories>
          
          <category> 雲端平台 </category>
          
          <category> Nuget </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nuget </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Github - 使用 Github Deploy keys</title>
      <link href="/2022/03/21/DevOps/Github/Github%20-%20%E4%BD%BF%E7%94%A8%20Github%20Deploy%20keys/"/>
      <url>/2022/03/21/DevOps/Github/Github%20-%20%E4%BD%BF%E7%94%A8%20Github%20Deploy%20keys/</url>
      
        <content type="html"><![CDATA[<h1 id="Deploy-keys"><a href="#Deploy-keys" class="headerlink" title="Deploy keys"></a>Deploy keys</h1><p>透過設定 Deploy keys 可以避免掉每次 push 都要輸入帳密的流程</p><h2 id="創建-SSH"><a href="#創建-SSH" class="headerlink" title="創建 SSH"></a>創建 SSH</h2><p>打開 [命令字元] 輸入以下內容即可。如果沒特別指定路徑預設<code>(C:\Users\使用者名稱/.ssh/id_rsa)</code>，沒有特定指定密碼可以直接按下Enter。</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen</span><br></pre></td></tr></table></figure><p><img src="/img/GitHub/basic/deploy_01.png"></p><p>下方為<code>ssh-keygen</code>參數，請參閱。<br><img src="/img/GitHub/basic/deploy_02.png"></p><h2 id="創建-Deploy-keys"><a href="#創建-Deploy-keys" class="headerlink" title="創建 Deploy keys"></a>創建 Deploy keys</h2><p>打開需要使用Deloy Keys 的 repository，按下Security &gt; Deploy keys。若需要使用Write access權限可以直接勾選 。<br><img src="/img/GitHub/basic/deploy_03.png"><br><img src="/img/GitHub/basic/deploy_04.png"></p><h3 id="輸入-Keys"><a href="#輸入-Keys" class="headerlink" title="輸入 Keys"></a>輸入 Keys</h3><p>Key輸入框請用<em>id_rsa.pub</em>記事本打開，直接貼上去。<br><img src="/img/GitHub/basic/deploy_05.png"><br><img src="/img/GitHub/basic/deploy_06.png"></p><p>完成後，就會出現這個。<br><img src="/img/GitHub/basic/deploy_07.png"></p><h2 id="跳出帳號密碼"><a href="#跳出帳號密碼" class="headerlink" title="跳出帳號密碼"></a>跳出帳號密碼</h2><p>如果經過上面設定 push 過程中，須要輸入帳號密碼可以嘗試更改本地 remote 的來源</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote set-url origin git@github.com:[yourgithubID]/[yourRepo].git</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> DevOps </category>
          
          <category> Github </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Github - 使用 Github Token</title>
      <link href="/2022/03/21/DevOps/Github/Github%20-%20%E4%BD%BF%E7%94%A8%20Github%20Token/"/>
      <url>/2022/03/21/DevOps/Github/Github%20-%20%E4%BD%BF%E7%94%A8%20Github%20Token/</url>
      
        <content type="html"><![CDATA[<h1 id="Personal-access-tokens"><a href="#Personal-access-tokens" class="headerlink" title="Personal access tokens"></a>Personal access tokens</h1><p>可以不用使用SSH即可使用的一種，建立完成後會產生出Token，可用來製作API、自動部屬等、協助創作等。</p><ul><li><a href="https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/creating-a-personal-access-token">官方網文件</a></li></ul><h2 id="創建-Personal-access-tokens"><a href="#創建-Personal-access-tokens" class="headerlink" title="創建 Personal access tokens"></a>創建 Personal access tokens</h2><p>點選設定後，左側最底下 <code> Developer settings</code>選擇 <code> Personal access tokens</code>即可。設定上需要注意看裡面內容進行設定。<br><img src="/img/GitHub/basic/tokens_01.png"><br><img src="/img/GitHub/basic/tokens_02.png"><br><img src="/img/GitHub/basic/tokens_03.png"></p><p>設定內容有包含到組織相關的存取，可以透過這種方式取的組織權限。<br><img src="/img/GitHub/basic/tokens_04.png"></p><p>然後就可以使用Token取得 GitHub repository。<em>這邊必須要注意 Create 出來的Token 只會出現一次，如果不小心沒存檔無法再取得一次。</em><br><img src="/img/GitHub/basic/tokens_05.png"></p>]]></content>
      
      
      <categories>
          
          <category> DevOps </category>
          
          <category> Github </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Github - 解決 PR merge 衝突問題</title>
      <link href="/2022/03/21/DevOps/Github/Github%20-%20%E8%A7%A3%E6%B1%BA%20PR%20merge%20%E8%A1%9D%E7%AA%81%E5%95%8F%E9%A1%8C/"/>
      <url>/2022/03/21/DevOps/Github/Github%20-%20%E8%A7%A3%E6%B1%BA%20PR%20merge%20%E8%A1%9D%E7%AA%81%E5%95%8F%E9%A1%8C/</url>
      
        <content type="html"><![CDATA[<p>Github merge 遇到衝突的問題已經是常有的事情，既然要 merge 需要將新舊的資料比對、修改。Github 有提供網頁版本可以直接將衝突檔案修改後再merge。</p><h2 id="建立-Pull-Request"><a href="#建立-Pull-Request" class="headerlink" title="建立 Pull Request"></a>建立 Pull Request</h2><p>這邊簡單敘述一下　Pull Request。當Create PR 時候，如果有衝突資訊會出現 “Can’t autoatiocally merge” 資訊，其實可以直接創建PR給作者去比對。</p><p>這邊可以把這些動作當成創建<strong>留言區塊</strong>，作者會透過 pull requests 分頁內審閱檢查內容。<br><img src="/image/20221016_15-32-44.png"><br><img src="/image/20221016_15-34-45.png"><br><img src="/image/20221016_15-35-20.png"></p><h2 id="修改衝突內容"><a href="#修改衝突內容" class="headerlink" title="修改衝突內容"></a>修改衝突內容</h2><p>當作者發現對方有發出訊息時候，可以透過 Resolve conflicts 排除衝突問題。<br><img src="/image/20221016_15-41-15.png"><br><img src="/image/20221016_15-41-38.png"></p><h2 id="修正注意事項"><a href="#修正注意事項" class="headerlink" title="修正注意事項"></a>修正注意事項</h2><p>Github 這塊需要留意以下幾點 </p><ol><li>修改完畢後點選 “Mark as resolved”</li><li>必須要將左側衝突檔案全部修改完成</li></ol><p>以上修改完成後，就可以正常merge 內容。<br><img src="/image/20221016_15-42-02.png"><br><img src="/image/20221016_16-03-41.png"><br><img src="/image/20221016_16-04-11.png"></p><h2 id="參考文件"><a href="#參考文件" class="headerlink" title="參考文件"></a>參考文件</h2><ul><li><a href="https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/addressing-merge-conflicts/resolving-a-merge-conflict-on-github">Resolving a merge conflict on GitHub</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> DevOps </category>
          
          <category> Github </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C# 使用EF更新空白資料庫</title>
      <link href="/2022/03/13/%E5%BE%8C%E7%AB%AF%E6%8A%80%E8%A1%93/CS/cs_19_%E4%BD%BF%E7%94%A8EF%E6%9B%B4%E6%96%B0%E7%A9%BA%E7%99%BD%E8%B3%87%E6%96%99%E5%BA%AB/"/>
      <url>/2022/03/13/%E5%BE%8C%E7%AB%AF%E6%8A%80%E8%A1%93/CS/cs_19_%E4%BD%BF%E7%94%A8EF%E6%9B%B4%E6%96%B0%E7%A9%BA%E7%99%BD%E8%B3%87%E6%96%99%E5%BA%AB/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>交接前夕曾經丟了 EF 環境忘記把注意事項列給他們，包含自己不時會忘記這個使用方式。<code>DBContext</code>其實可以本身就可以讓空白DB創建出來，主要問題是如何使用無 .sql 之類檔案來建置、開啟環境。</p><h1 id="Code-First"><a href="#Code-First" class="headerlink" title="Code First"></a>Code First</h1><p>顧名思義是由 Code 決定有甚麼資料、對應寫回DB。如果假設一開始使用 DB First 也沒關係，兩者是不影響本章節。<br><img src="/image/20230313_17-14-44.png"></p><h2 id="前置作業"><a href="#前置作業" class="headerlink" title="前置作業"></a>前置作業</h2><h3 id="建立類別-資料模型"><a href="#建立類別-資料模型" class="headerlink" title="建立類別(資料模型)"></a>建立類別(資料模型)</h3><p>DB First 會自動創建 類別，所以無需加入類別檔案。若是 Code First 可以參考 【ATai】大大如何使用。</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Post</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> Id &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> UserId &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Title &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Content &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> Read &#123; <span class="keyword">get</span>; <span class="keyword">set</span>;&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">virtual</span> User User &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">User</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> Id &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> UserName &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> ICollection&lt;Post&gt; Posts &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="建立DBContext"><a href="#建立DBContext" class="headerlink" title="建立DBContext"></a>建立DBContext</h2><p>需要定義連線字串以及資料模型。</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">BlogContext</span> : <span class="title">DbContext</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">BlogContext</span>()</span> &#123; &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">BlogContext</span>(<span class="params">DbContextOptions&lt;BlogContext&gt; options</span>) : <span class="title">base</span>(<span class="params">options</span>)</span> &#123; &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">OnConfiguring</span>(<span class="params">DbContextOptionsBuilder optionsBuilder</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    optionsBuilder.UseMySql(<span class="string">&quot;server=localhost;port=3306;database=Blog;user=root;password=test1234&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> DbSet&lt;Post&gt; Posts &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"><span class="keyword">public</span> DbSet&lt;User&gt; Users &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="使用-Migration"><a href="#使用-Migration" class="headerlink" title="使用 Migration"></a>使用 Migration</h2><p>Migration 是 Entity Framework 中用於管理資料庫架構變更的機制之一。它允許您透過撰寫 C# 代碼來描述資料庫架構的變更，並將這些變更應用到資料庫中。</p><p>當您執行 Migration 時，EF Core 會生成 SQL 語句，這些語句將變更應用到資料庫。這些 SQL 語句可以應用到任何支援的關聯式資料庫中，包括 Microsoft SQL Server、MySQL、PostgreSQL 等。</p><p>需要取得的套件</p><ul><li><a href="https://www.nuget.org/packages/Microsoft.EntityFrameworkCore/8.0.0-preview.1.23111.4">Microsoft.EntityFrameworkCore</a></li></ul><h3 id="創建-Migration"><a href="#創建-Migration" class="headerlink" title="創建 Migration"></a>創建 Migration</h3><p>DB First 需要執行這段，主要原因是為了抓取當前 DbContext 紀錄，概念如同快照一樣。</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dotnet ef migrations add init --context BlogContext</span><br></pre></td></tr></table></figure><h3 id="更新目標資料庫"><a href="#更新目標資料庫" class="headerlink" title="更新目標資料庫"></a>更新目標資料庫</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dotnet ef database update --context BlogContext</span><br></pre></td></tr></table></figure><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><ol><li>【Entity Framework Core 的 CodeFirst與資料庫版控 - 我與 ASP.NET Core 3 的 30天<br>】: <a href="https://ithelp.ithome.com.tw/articles/10240606">https://ithelp.ithome.com.tw/articles/10240606</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 後端技術 </category>
          
          <category> C# </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
            <tag> EF </tag>
            
            <tag> NET Core </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Youtube (三) - 製作簡易API</title>
      <link href="/2022/03/11/%E5%BE%8C%E7%AB%AF%E6%8A%80%E8%A1%93/CS/Youtube/Youtube%20(%E4%B8%89)_%E8%A3%BD%E4%BD%9C%E7%B0%A1%E6%98%93API/"/>
      <url>/2022/03/11/%E5%BE%8C%E7%AB%AF%E6%8A%80%E8%A1%93/CS/Youtube/Youtube%20(%E4%B8%89)_%E8%A3%BD%E4%BD%9C%E7%B0%A1%E6%98%93API/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>前面使用授權部分完成後，就可以開始 API 抓取動作。Oauth2 最難部分已經完成剩下如何使用 Youtube API，API 可以透過 <a href="https://developers.google.com/youtube/v3/docs/search/list">Youtube Data API</a>測試結果在執行 Code部分。</p><p>備註 : 這篇主要目的做做看，之後依據情況製作下一章介紹。</p><h2 id="Search-搜尋"><a href="#Search-搜尋" class="headerlink" title="Search 搜尋"></a>Search 搜尋</h2><ul><li>API : <code>https://youtube.googleapis.com/youtube/v3/search</code><br>備註 : method 是 Request parameters 使用下方範例需要把他串成string 才能成功執行。<figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">Authorize</span>]</span><br><span class="line">[<span class="meta">HttpGet(<span class="string">&quot;search&quot;</span>)</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task&lt;<span class="built_in">string</span>&gt; <span class="title">SearchAsync</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> users = User.Claims.Select(x =&gt; <span class="keyword">new</span> &#123; type = x.Type, <span class="keyword">value</span> = x.Value &#125;);</span><br><span class="line">    <span class="built_in">string</span> access_token = users.Where(x =&gt; x.type == <span class="string">&quot;access_token&quot;</span>).Select(x =&gt; x.<span class="keyword">value</span>).FirstOrDefault();</span><br><span class="line">    <span class="comment">//取得當前 html 字串</span></span><br><span class="line">    HttpClient client = <span class="keyword">new</span>();</span><br><span class="line">    client.DefaultRequestHeaders.Authorization = <span class="keyword">new</span> AuthenticationHeaderValue(<span class="string">&quot;Bearer&quot;</span>, access_token);</span><br><span class="line">    client</span><br><span class="line">        .DefaultRequestHeaders</span><br><span class="line">        .Accept</span><br><span class="line">        .Add(<span class="keyword">new</span> MediaTypeWithQualityHeaderValue(<span class="string">&quot;text/json&quot;</span>));</span><br><span class="line"></span><br><span class="line">    <span class="built_in">string</span> reqUrl = <span class="string">&quot;https://youtube.googleapis.com/youtube/v3/search&quot;</span>;</span><br><span class="line">    <span class="keyword">var</span> request = <span class="keyword">new</span> HttpRequestMessage(HttpMethod.Get, reqUrl);</span><br><span class="line">    request.Content = <span class="keyword">new</span> StringContent(<span class="string">&quot;&quot;</span>, Encoding.UTF8, <span class="string">&quot;text/json&quot;</span>);</span><br><span class="line">    <span class="keyword">var</span> response = <span class="keyword">await</span> client.SendAsync(request);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (response.StatusCode != HttpStatusCode.OK)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> JsonConvert.SerializeObject(<span class="keyword">new</span></span><br><span class="line">        &#123;</span><br><span class="line">            Success = <span class="literal">false</span>,</span><br><span class="line">            Message = <span class="string">&quot;&quot;</span></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> content = <span class="keyword">await</span> response.Content.ReadAsStringAsync();</span><br><span class="line">    <span class="keyword">var</span> result = JsonConvert.DeserializeObject(content);</span><br><span class="line">    <span class="keyword">return</span> JsonConvert.SerializeObject(<span class="keyword">new</span></span><br><span class="line">    &#123;</span><br><span class="line">        Success = <span class="literal">true</span>,</span><br><span class="line">        Message = result</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h2 id="Subscriptions-訂閱"><a href="#Subscriptions-訂閱" class="headerlink" title="Subscriptions 訂閱"></a>Subscriptions 訂閱</h2><p>訂閱部分需要傳入相關參數與 Search 不同於需要使用JSON Request 才能達到效果。</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">Authorize</span>]</span><br><span class="line">[<span class="meta">HttpGet(<span class="string">&quot;VaildTestInsert&quot;</span>)</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task&lt;<span class="built_in">string</span>&gt; <span class="title">VaildTestInsertAsync</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> users = User.Claims.Select(x =&gt; <span class="keyword">new</span> &#123; type = x.Type, <span class="keyword">value</span> = x.Value &#125;);</span><br><span class="line">    <span class="built_in">string</span> access_token = users.Where(x =&gt; x.type == <span class="string">&quot;access_token&quot;</span>).Select(x =&gt; x.<span class="keyword">value</span>).FirstOrDefault();</span><br><span class="line">    <span class="comment">//取得當前 html 字串</span></span><br><span class="line">    HttpClient client = <span class="keyword">new</span>();</span><br><span class="line">    client.DefaultRequestHeaders.Authorization = <span class="keyword">new</span> AuthenticationHeaderValue(<span class="string">&quot;Bearer&quot;</span>, access_token);</span><br><span class="line">    client</span><br><span class="line">        .DefaultRequestHeaders</span><br><span class="line">        .Accept</span><br><span class="line">        .Add(<span class="keyword">new</span> MediaTypeWithQualityHeaderValue(<span class="string">&quot;application/json&quot;</span>));</span><br><span class="line"></span><br><span class="line">    <span class="built_in">string</span> reqUrl = <span class="string">&quot;https://youtube.googleapis.com/youtube/v3/subscriptions?part=snippet&quot;</span>;</span><br><span class="line">    <span class="keyword">var</span> request = <span class="keyword">new</span> HttpRequestMessage(HttpMethod.Post, reqUrl);</span><br><span class="line">    <span class="keyword">var</span> data = <span class="keyword">new</span></span><br><span class="line">    &#123;</span><br><span class="line">        snippet = <span class="keyword">new</span></span><br><span class="line">        &#123;</span><br><span class="line">            resourceId = <span class="keyword">new</span></span><br><span class="line">            &#123;</span><br><span class="line">                kind = <span class="string">&quot;youtube#channel&quot;</span>,</span><br><span class="line">                channelId = <span class="string">&quot;UC8vYGLZz142UOeopDvOBmAg&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    request.Content = <span class="keyword">new</span> StringContent(JsonConvert.SerializeObject(data), Encoding.UTF8, <span class="string">&quot;text/json&quot;</span>);</span><br><span class="line">    <span class="keyword">var</span> response = <span class="keyword">await</span> client.SendAsync(request);</span><br><span class="line">    <span class="keyword">var</span> content = <span class="keyword">await</span> response.Content.ReadAsStringAsync();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (response.StatusCode != HttpStatusCode.OK)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> JsonConvert.SerializeObject(<span class="keyword">new</span></span><br><span class="line">        &#123;</span><br><span class="line">            Success = <span class="literal">false</span>,</span><br><span class="line">            Message = content.ToString()</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> result = JsonConvert.DeserializeObject(content);</span><br><span class="line">    <span class="keyword">return</span> JsonConvert.SerializeObject(<span class="keyword">new</span></span><br><span class="line">    &#123;</span><br><span class="line">        Success = <span class="literal">true</span>,</span><br><span class="line">        Message = result</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="參考文件"><a href="#參考文件" class="headerlink" title="參考文件"></a>參考文件</h2><ul><li>Youtube Data API: <a href="https://developers.google.com/youtube/v3/docs/search/list">https://developers.google.com/youtube/v3/docs/search/list</a></li><li>Github : <a href="https://github.com/JontCont/Youtube">https://github.com/JontCont/Youtube</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 後端技術 </category>
          
          <category> C# </category>
          
          <category> Youtube </category>
          
      </categories>
      
      
        <tags>
            
            <tag> API </tag>
            
            <tag> C# </tag>
            
            <tag> Youtube </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Youtube (二) - 使用 Net6.0 製作OAuth2授權</title>
      <link href="/2022/03/11/%E5%BE%8C%E7%AB%AF%E6%8A%80%E8%A1%93/CS/Youtube/Youtube%20(%E4%BA%8C)_%E4%BD%BF%E7%94%A8%20Net6.0%20%E8%A3%BD%E4%BD%9C%E6%8E%88%E6%AC%8A/"/>
      <url>/2022/03/11/%E5%BE%8C%E7%AB%AF%E6%8A%80%E8%A1%93/CS/Youtube/Youtube%20(%E4%BA%8C)_%E4%BD%BF%E7%94%A8%20Net6.0%20%E8%A3%BD%E4%BD%9C%E6%8E%88%E6%AC%8A/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>製作 API 前必須先到 Google Cloud API 完成註冊，過程中會比較繁雜內容請參閱即可。</p><h2 id="Google-Cloud-API"><a href="#Google-Cloud-API" class="headerlink" title="Google Cloud API"></a><a href="https://cloud.google.com/apis?hl=zh-tw">Google Cloud API</a></h2><h3 id="創建憑證"><a href="#創建憑證" class="headerlink" title="創建憑證"></a>創建憑證</h3><p>選擇 OAuth 用戶端 ID 。如果不確定授權 URL 可以先跳過。<br><img src="/image/20230211_19-08-47.png"><br><img src="/image/20230211_19-09-31.png"><br><img src="/image/20230211_19-12-36.png"></p><h2 id="創建專案"><a href="#創建專案" class="headerlink" title="創建專案"></a>創建專案</h2><p>架構需要驗證 OAuth2 先確認要設定 “重新導向 URI”，範例使用 <code>https://localhost:999/Api/Google/Home</code> 。</p><h3 id="一、取得URL"><a href="#一、取得URL" class="headerlink" title="一、取得URL"></a>一、取得URL</h3><p>Redirect URL 從 Youtube API 官方網文件可以找得到，原則上直接使用下圖位置的 URL 即可。參數傳值部分官方已經有提供使用方式，因為他有特定傳參數<br><img src="/image/20230211_19-29-11.png"></p><ul><li>文件參考 : <a href="https://developers.google.com/youtube/v3/guides/auth/server-side-web-apps#httprest">https://developers.google.com/youtube/v3/guides/auth/server-side-web-apps#httprest</a></li></ul><h3 id="二、AppSetting-json"><a href="#二、AppSetting-json" class="headerlink" title="二、AppSetting.json"></a>二、AppSetting.json</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;Google&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;Oauth&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://accounts.google.com/o/oauth2/v2/auth&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;scope&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://www.googleapis.com/auth/youtube&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;access_type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;offline&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;include_granted_scopes&quot;</span><span class="punctuation">:</span> <span class="string">&quot;true&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;state&quot;</span><span class="punctuation">:</span> <span class="string">&quot;state_parameter_passthrough_value&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;redirect_uri&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://localhost:999/Api/Google/Home&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;response_type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;code&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;client_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;client_id&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;client_secret&quot;</span><span class="punctuation">:</span> <span class="string">&quot;client_secret&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="製作授權網址"><a href="#製作授權網址" class="headerlink" title="製作授權網址"></a>製作授權網址</h2><p>使用 <code>https://localhost:999/Api/Google/Home</code> 網址，必須要確認使用者是否已經是授權登入。</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">HttpGet(<span class="string">&quot;Home&quot;</span>)</span>]</span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task&lt;IActionResult&gt; <span class="title">Home</span>(<span class="params">[FromQuery] <span class="built_in">string</span> code</span>)</span></span><br><span class="line"> &#123;</span><br><span class="line">     <span class="keyword">if</span> (<span class="built_in">string</span>.IsNullOrEmpty(code)) <span class="keyword">return</span> <span class="keyword">this</span>.StatusCode(<span class="number">400</span>);</span><br><span class="line"></span><br><span class="line">     <span class="built_in">string</span> accessToken = <span class="keyword">await</span> <span class="keyword">this</span>.ExchangeAccessToken(code);</span><br><span class="line">     <span class="keyword">if</span> (<span class="built_in">string</span>.IsNullOrEmpty(accessToken))</span><br><span class="line">     &#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">this</span>.StatusCode(<span class="number">400</span>);</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">var</span> claims = <span class="keyword">new</span> List&lt;Claim&gt;</span><br><span class="line">     &#123;</span><br><span class="line">         <span class="keyword">new</span> Claim(<span class="string">&quot;access_token&quot;</span>,accessToken ),</span><br><span class="line">         <span class="keyword">new</span> Claim(ClaimTypes.Role, <span class="string">&quot;nobody&quot;</span>),</span><br><span class="line">     &#125;;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">var</span> claimsIdentity = <span class="keyword">new</span> ClaimsIdentity(</span><br><span class="line">         claims, CookieAuthenticationDefaults.AuthenticationScheme);</span><br><span class="line"></span><br><span class="line">     HttpContext.SignInAsync(</span><br><span class="line">         CookieAuthenticationDefaults.AuthenticationScheme,</span><br><span class="line">         <span class="keyword">new</span> ClaimsPrincipal(claimsIdentity),</span><br><span class="line">         authProperties);</span><br><span class="line">     <span class="keyword">return</span> <span class="keyword">this</span>.Redirect(<span class="string">&quot;/&quot;</span>);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">private</span> <span class="keyword">async</span> Task&lt;<span class="built_in">string</span>&gt; <span class="title">ExchangeAccessToken</span>(<span class="params"><span class="built_in">string</span> code</span>)</span></span><br><span class="line"> &#123;</span><br><span class="line">     <span class="comment">//取得當前 html 字串</span></span><br><span class="line">     HttpClient client = <span class="keyword">new</span>();</span><br><span class="line">     client</span><br><span class="line">         .DefaultRequestHeaders</span><br><span class="line">         .Accept</span><br><span class="line">         .Add(</span><br><span class="line">             <span class="keyword">new</span> MediaTypeWithQualityHeaderValue(<span class="string">&quot;text/json&quot;</span>)</span><br><span class="line">         );<span class="comment">//ACCEPT header</span></span><br><span class="line">     <span class="keyword">var</span> request = <span class="keyword">new</span> HttpRequestMessage(HttpMethod.Post, <span class="string">&quot;https://oauth2.googleapis.com/token&quot;</span>);</span><br><span class="line"></span><br><span class="line">     request.Content = <span class="keyword">new</span> FormUrlEncodedContent(</span><br><span class="line">         <span class="keyword">new</span> Dictionary&lt;<span class="built_in">string</span>, <span class="built_in">string</span>&gt;</span><br><span class="line">         &#123;</span><br><span class="line">             [<span class="string">&quot;grant_type&quot;</span>] = <span class="string">&quot;authorization_code&quot;</span>,</span><br><span class="line">             [<span class="string">&quot;code&quot;</span>] = code,</span><br><span class="line">             [<span class="string">&quot;redirect_uri&quot;</span>] = Config.GetConfiguration().GetValue&lt;<span class="built_in">string</span>&gt;(<span class="string">&quot;Google:Oauth:redirect_uri&quot;</span>).ToString(),</span><br><span class="line">             [<span class="string">&quot;client_id&quot;</span>] = Config.GetConfiguration().GetValue&lt;<span class="built_in">string</span>&gt;(<span class="string">&quot;Google:Oauth:client_id&quot;</span>).ToString(),</span><br><span class="line">             [<span class="string">&quot;client_secret&quot;</span>] = Config.GetConfiguration().GetValue&lt;<span class="built_in">string</span>&gt;(<span class="string">&quot;Google:Oauth:client_secret&quot;</span>).ToString(),</span><br><span class="line">         &#125;);</span><br><span class="line"></span><br><span class="line">     <span class="keyword">var</span> response = <span class="keyword">await</span> client.SendAsync(request);</span><br><span class="line"></span><br><span class="line">     <span class="keyword">if</span> (response.StatusCode != HttpStatusCode.OK) <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">     <span class="keyword">var</span> content = <span class="keyword">await</span> response.Content.ReadAsStringAsync();</span><br><span class="line">     <span class="keyword">var</span> result = JsonNode.Parse(content);</span><br><span class="line">     <span class="keyword">return</span> result[<span class="string">&quot;access_token&quot;</span>]?.ToString()??<span class="string">&quot;&quot;</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h2 id="加入登入-API"><a href="#加入登入-API" class="headerlink" title="加入登入 API"></a>加入登入 API</h2><p>這邊是使用 AppSetting.json 設定好的參數串出網址，請各位讀者自行評估。</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">HttpGet(<span class="string">&quot;Login&quot;</span>)</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> ActionResult <span class="title">Login</span>()</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">string</span> redirectUrl = Get_Oauth2Url();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> Redirect(redirectUrl);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="built_in">string</span> <span class="title">Get_Oauth2Url</span>()</span></span><br><span class="line">  &#123;</span><br><span class="line">      <span class="built_in">string</span> resultUrl = Config.GetConfiguration().GetValue&lt;<span class="built_in">string</span>&gt;(<span class="string">&quot;Google:Oauth:url&quot;</span>).ToString();</span><br><span class="line">      <span class="keyword">var</span> obj = <span class="keyword">new</span></span><br><span class="line">      &#123;</span><br><span class="line">          scope = Config.GetConfiguration().GetValue&lt;<span class="built_in">string</span>&gt;(<span class="string">&quot;Google:Oauth:scope&quot;</span>).ToString(),</span><br><span class="line">          access_type = Config.GetConfiguration().GetValue&lt;<span class="built_in">string</span>&gt;(<span class="string">&quot;Google:Oauth:access_type&quot;</span>).ToString(),</span><br><span class="line">          include_granted_scopes = Config.GetConfiguration().GetValue&lt;<span class="built_in">string</span>&gt;(<span class="string">&quot;Google:Oauth:include_granted_scopes&quot;</span>).ToString(),</span><br><span class="line">          state = Config.GetConfiguration().GetValue&lt;<span class="built_in">string</span>&gt;(<span class="string">&quot;Google:Oauth:state&quot;</span>).ToString(),</span><br><span class="line">          redirect_uri = Config.GetConfiguration().GetValue&lt;<span class="built_in">string</span>&gt;(<span class="string">&quot;Google:Oauth:redirect_uri&quot;</span>).ToString(),</span><br><span class="line">          response_type = Config.GetConfiguration().GetValue&lt;<span class="built_in">string</span>&gt;(<span class="string">&quot;Google:Oauth:response_type&quot;</span>).ToString(),</span><br><span class="line">          client_id = Config.GetConfiguration().GetValue&lt;<span class="built_in">string</span>&gt;(<span class="string">&quot;Google:Oauth:client_id&quot;</span>).ToString(),</span><br><span class="line">      &#125;;</span><br><span class="line"></span><br><span class="line">      List&lt;<span class="built_in">string</span>&gt; resultData = <span class="keyword">new</span>();</span><br><span class="line">      Type type = obj.GetType();</span><br><span class="line">      <span class="keyword">var</span> props = type.GetProperties();</span><br><span class="line">      <span class="keyword">foreach</span> (<span class="keyword">var</span> prop <span class="keyword">in</span> props)</span><br><span class="line">      &#123;</span><br><span class="line">          <span class="built_in">string</span> paramName = prop.Name;</span><br><span class="line">          <span class="built_in">object</span> paramValue =prop.GetValue(obj, <span class="literal">null</span>)??<span class="string">&quot;&quot;</span>;</span><br><span class="line">          <span class="keyword">if</span> (paramValue == <span class="literal">null</span>) &#123; <span class="keyword">continue</span>; &#125;</span><br><span class="line">          resultData.Add(paramName + <span class="string">&quot;=&quot;</span> + paramValue.ToString());</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> resultUrl + <span class="string">&quot;?&quot;</span> + <span class="built_in">string</span>.Join(<span class="string">&quot;&amp;&quot;</span>, resultData);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h2 id="登入帳號"><a href="#登入帳號" class="headerlink" title="登入帳號"></a>登入帳號</h2><p>把剛才製作的授權網址點開 <code>https://localhost:999/Api/Google/Login</code> 完成授權即可。<br><img src="/image/20230211_22-44-27.png"><br><img src="/image/20230211_22-45-45.png"><br><img src="/image/20230211_22-45-57.png"></p><h2 id="文件參考"><a href="#文件參考" class="headerlink" title="文件參考"></a>文件參考</h2><ul><li><a href="https://reurl.cc/eXvZVW">101 使用 YouTube Data API 抓取有趣的 Youtuber 影片 &amp; MV</a> </li><li>Github : <a href="https://github.com/JontCont/Youtube">https://github.com/JontCont/Youtube</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 後端技術 </category>
          
          <category> C# </category>
          
          <category> Youtube </category>
          
      </categories>
      
      
        <tags>
            
            <tag> API </tag>
            
            <tag> C# </tag>
            
            <tag> Youtube </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nuget 上架類別庫</title>
      <link href="/2022/03/10/%E5%BE%8C%E7%AB%AF%E6%8A%80%E8%A1%93/CS/Nuget/Nuget%20%E4%B8%8A%E6%9E%B6(%E4%B8%80)-%E6%93%8D%E4%BD%9C/"/>
      <url>/2022/03/10/%E5%BE%8C%E7%AB%AF%E6%8A%80%E8%A1%93/CS/Nuget/Nuget%20%E4%B8%8A%E6%9E%B6(%E4%B8%80)-%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近有很多擴充工作被改的很多版本，突然間想要順便把自己的擴充套件加入倒Nugut 之後就可以想要載入就可以去下載。</p><h1 id="NuGet"><a href="#NuGet" class="headerlink" title="NuGet"></a>NuGet</h1><p>NuGet是一個由Microsoft開發和維護的套件管理系統，用於管理和分發.NET程式庫、工具和擴充。它可以讓開發者輕鬆地安裝、升級和卸載.NET套件，也可以讓開發者將自己的.NET套件分享給其他開發者使用。使用NuGet，您可以輕鬆地添加和管理專案中的依賴項目，同時也可以快速地將專案和依賴項目升級到最新版本。</p><p>NuGet庫中包含了大量的.NET套件和擴充，可以滿足開發者在.NET開發中的各種需求。使用NuGet，開發者可以更加輕鬆地管理自己的專案和依賴項目。NuGet提供了一個方便的方式，讓開發者將自己的程式庫或應用程序打包成一個NuGet套件，並將其發佈到NuGet庫上，方便其他開發者使用。同時，NuGet也可以讓開發者從NuGet庫上下載並安裝他人的.NET套件。</p><h2 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h2><p>目前有兩種方式 </p><ol><li>GUI 方式上傳</li><li>指令上傳<br>GUI 需要下載 Microsoft store :【<a href="https://apps.microsoft.com/store/detail/nuget-package-explorer/9WZDNCRDMDM3?hl=zh-tw&gl=tw">NuGet Package Explorer</a>】直接使用即可，相當方便。</li></ol><h2 id="指令上傳"><a href="#指令上傳" class="headerlink" title="指令上傳"></a>指令上傳</h2><ul><li>下載點 : <a href="https://www.nuget.org/downloads">請點我</a><br>下載完畢後，務必將 【解除封鎖】勾起來，不然會無法使用 <code>nuget pack</code>指令。<br><img src="/image/20230310_19-59-20.png"></li></ul><p>安裝部分只需要丟到 <code>C:\Windows\System32</code> 即可，無需要個別丟在project 。</p><h3 id="創建-nuspec"><a href="#創建-nuspec" class="headerlink" title="創建 nuspec"></a>創建 nuspec</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nuget spec [project]</span><br></pre></td></tr></table></figure><p>輸入方式請參考下方圖片<br><img src="/image/20230310_20-05-19.png"></p><h3 id="創建-nupkg"><a href="#創建-nupkg" class="headerlink" title="創建 nupkg"></a>創建 nupkg</h3><p>這動作是為了要把當前版本進行包裝，如果有多個版本可以嘗試 <code>-c Release</code>。注意 : 每當要更新一個版本必須要更換版本號。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nuget pack [project]</span><br></pre></td></tr></table></figure><h3 id="發佈專案"><a href="#發佈專案" class="headerlink" title="發佈專案"></a>發佈專案</h3><p>由於 2022年某天nuget 強制需要登入才能上傳檔案，必須要先取得 api key 或是登入帳號才能使用。</p><ul><li>Nuget API KEY : <a href="https://www.nuget.org/account/apikeys">點選我</a></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nuget push [project] [Api key] -source nuget.org</span><br></pre></td></tr></table></figure><h2 id="GUI-上傳"><a href="#GUI-上傳" class="headerlink" title="GUI 上傳"></a>GUI 上傳</h2><ol><li><p>點選編輯內容<br><img src="/image/20230310_20-17-10.png"></p></li><li><p>創建 Lib 資料夾<br><img src="/image/20230310_20-17-46.png"></p></li><li><p>選擇你要新增的版本號，並丟入 dll 檔<br><img src="/image/20230310_20-18-14.png"></p></li><li><p>按下 【Publish】進行發佈<br><img src="/image/20230310_20-19-39.png"></p></li></ol><p>publish之前需要加入 Api key 的動作，連結請參考上面提供。</p><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><ol><li><a href="https://ithelp.ithome.com.tw/articles/10210818">發布自己的Nuget專案</a></li><li><a href="https://blog.txstudio.tw/2017/10/publish-exist-nuget-package-to-private-nuget-server.html">上傳既有的 Nuget 套件到自行架設的 Nuget Server</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 雲端平台 </category>
          
          <category> Nuget </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nuget </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nuget 上架使用心得</title>
      <link href="/2022/03/10/%E5%BE%8C%E7%AB%AF%E6%8A%80%E8%A1%93/CS/Nuget/Nuget%20%E4%B8%8A%E6%9E%B6(%E4%BA%8C)-%E5%BF%83%E5%BE%97/"/>
      <url>/2022/03/10/%E5%BE%8C%E7%AB%AF%E6%8A%80%E8%A1%93/CS/Nuget/Nuget%20%E4%B8%8A%E6%9E%B6(%E4%BA%8C)-%E5%BF%83%E5%BE%97/</url>
      
        <content type="html"><![CDATA[<h2 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h2><p>不少人跟我說未什麼讓專案發佈到 Nuget ，主要以下原因 :</p><ol><li>如何使用 Nuget 發佈</li><li>初期時建置專案</li><li>讓 Source 可以讓其他人看見，並排除、回饋問題</li></ol><p>畢竟，是對外公開可以展現自己撰寫能力。</p><h2 id="架構"><a href="#架構" class="headerlink" title="架構"></a>架構</h2><p>期初想法透過一個 repository 底下有多個Class Library ，提前是必須要符合 repository 定義之下，目前是用來擴充使用(懶人包)。</p><p>路徑 : <a href="https://github.com/JontCont/StartFMS">https://github.com/JontCont/StartFMS</a></p><h2 id="開發方向"><a href="#開發方向" class="headerlink" title="開發方向"></a>開發方向</h2><p>既然是懶人包會偏向於提升開發為主，例如 轉換型別、LineBot 縮短架構及定義、Config 取得管道。後續會持續以這方向開發。</p><p>若有擴充以外的功能，目前會以條列清單形式記錄。</p>]]></content>
      
      
      <categories>
          
          <category> 雲端平台 </category>
          
          <category> Nuget </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nuget </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【C#】NPOI (一) 如何使用NPOI Excel</title>
      <link href="/2022/03/07/%E5%BE%8C%E7%AB%AF%E6%8A%80%E8%A1%93/CS/Nuget/NPOI%20(%E4%B8%80)%20%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8NPOI%20Excel/"/>
      <url>/2022/03/07/%E5%BE%8C%E7%AB%AF%E6%8A%80%E8%A1%93/CS/Nuget/NPOI%20(%E4%B8%80)%20%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8NPOI%20Excel/</url>
      
        <content type="html"><![CDATA[<h1 id="NPOI"><a href="#NPOI" class="headerlink" title="NPOI"></a>NPOI</h1><p>NPOI中N指代的是.Net，POI是一個完全開源的Java寫成的庫，能夠在沒有安裝微軟Office或者相應環境的情況下讀寫Excel、Word等微軟OLE2元件文件，幾乎支援所有的Office97~Office2007的檔案格式。所以NPOI就是POI專案的.Net版本。目前NPOI的最新版本是今年5月份釋出的V2.2.1，包含了.Net Framework2和.Net Framework4兩個版本。</p><h2 id="特點"><a href="#特點" class="headerlink" title="特點"></a>特點</h2><p>NPOI 是一個能夠快速讀取與產生Excel檔案的第三方套件，幫助程式開發人員在無安裝Microsoft Office的環境下讀寫Office 97-2003的文件，對於需要產生Excel報表非常好用。NPOI支援的檔案格式處理xls、xlsx外，還包括doc、ppt、vsd等，功能強大。</p><hr><h1 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h1><p>NPOI可透過兩種方式匯出Excel，一是使用Template，將Excel格式拉好存檔，透過NPOI讀取格式後，再將資料填入並另存新檔。</p><h2 id="一、EXCEL-分頁"><a href="#一、EXCEL-分頁" class="headerlink" title="一、EXCEL 分頁"></a>一、EXCEL 分頁</h2><p>使用前，請引用以下內容</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> NPOI.SS.UserModel;</span><br><span class="line"><span class="keyword">using</span> NPOI.HSSF.UserModel;</span><br><span class="line"><span class="keyword">using</span> NPOI.XSSF.UserModel;</span><br><span class="line"><span class="keyword">using</span> System.IO;</span><br></pre></td></tr></table></figure><div class="note info flat"><h3 id="1-1-HSSF-vs-XSSF"><a href="#1-1-HSSF-vs-XSSF" class="headerlink" title="1.1 HSSF  vs  XSSF"></a>1.1 HSSF  vs  XSSF</h3><p>HSSF中，是使用於2007之前的xls版本。XSSF中，適用於2007及其之後的xlsx版本。<br>雖然HSSF 只能使用(.xls) ，但可以得知XSSF 是可以使用(.xls)，但可能因為版本問題格式、內容有可能會被損毀。</p></div><p>以下程式新建一個Excel 2003 xls和一個2007 xlsx檔案，跟用Office建立的標準Excel格式一樣，每一個Excel檔案初始包含了3個工作表。<br>以下範例針對顯示分頁內容作排序，當然可以做自訂選擇排序，請讀者自行測試。</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Page</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Name &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> Order &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">NPOIprintf</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//自訂 Excel 工作分頁</span></span><br><span class="line">    List&lt;Page&gt; pages = <span class="keyword">new</span> List&lt;Page&gt; &#123; </span><br><span class="line">        <span class="keyword">new</span> Page &#123; Name = <span class="string">&quot;Sheet1&quot;</span>, Order= <span class="number">1</span> &#125;,</span><br><span class="line">        <span class="keyword">new</span> Page &#123; Name = <span class="string">&quot;Sheet2&quot;</span>, Order= <span class="number">2</span> &#125;,</span><br><span class="line">        <span class="keyword">new</span> Page &#123; Name = <span class="string">&quot;Sheet3&quot;</span>, Order= <span class="number">3</span> &#125;,</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//建立分頁</span></span><br><span class="line">    HSSFWorkbook workbook2003 = HSSFCreateSheet(pages);</span><br><span class="line">    XSSFWorkbook workbook2007 = XSSFCreateSheet(pages);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//寫入檔案</span></span><br><span class="line">    Write(workbook2003, <span class="string">@&quot;F:\NPOI_Excel\Excel2003.xls&quot;</span>);</span><br><span class="line">    Write(workbook2007, <span class="string">@&quot;F:\NPOI_Excel\Excel2007.xls&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以下函示範例請自行取用</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*以下函示*/</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> XSSFWorkbook <span class="title">XSSFCreateSheet</span>(<span class="params">List&lt;Page&gt; datas</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//如果是空值，直接剔除執行</span></span><br><span class="line">    <span class="keyword">if</span> (datas == <span class="literal">null</span>) &#123; <span class="keyword">return</span> <span class="literal">null</span>; &#125;</span><br><span class="line">    <span class="comment">//設定 HSSF</span></span><br><span class="line">    XSSFWorkbook _XSSF = <span class="keyword">new</span>();</span><br><span class="line">    <span class="comment">//LINQ 排序</span></span><br><span class="line">    IEnumerable&lt;Page&gt; pages = datas.OrderBy(row =&gt; row.Order);</span><br><span class="line">    <span class="comment">//設定分頁</span></span><br><span class="line">    <span class="keyword">foreach</span> (Page result <span class="keyword">in</span> pages)</span><br><span class="line">    &#123;</span><br><span class="line">        _XSSF.CreateSheet(result.Name);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//回傳 HSSFWorkbook</span></span><br><span class="line">    <span class="keyword">return</span> _XSSF;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> HSSFWorkbook <span class="title">HSSFCreateSheet</span>(<span class="params">List&lt;Page&gt; datas</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//如果是空值，直接剔除執行</span></span><br><span class="line">    <span class="keyword">if</span> (datas == <span class="literal">null</span> ) &#123; <span class="keyword">return</span> <span class="literal">null</span>; &#125;</span><br><span class="line">    <span class="comment">//設定 HSSF</span></span><br><span class="line">    HSSFWorkbook _HSSF = <span class="keyword">new</span>();</span><br><span class="line">    <span class="comment">//LINQ 排序</span></span><br><span class="line">    IEnumerable&lt;Page&gt; pages = datas.OrderBy(row =&gt; row.Order);</span><br><span class="line">    <span class="comment">//設定分頁</span></span><br><span class="line">    <span class="keyword">foreach</span>(Page result <span class="keyword">in</span> pages)</span><br><span class="line">    &#123;</span><br><span class="line">        _HSSF.CreateSheet(result.Name);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//回傳 HSSFWorkbook</span></span><br><span class="line">    <span class="keyword">return</span> _HSSF;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Write</span>(<span class="params">HSSFWorkbook HSSF,<span class="built_in">string</span> FilePath , <span class="built_in">string</span> Data=<span class="string">&quot;&quot;</span></span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    FileStream file = <span class="keyword">new</span> (FilePath, FileMode.Create);</span><br><span class="line">    HSSF.Write(file);</span><br><span class="line">    file.Close();  <span class="comment">//關閉檔案流</span></span><br><span class="line">    HSSF.Close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Write</span>(<span class="params">XSSFWorkbook XSSF, <span class="built_in">string</span> FilePath, <span class="built_in">string</span> Data = <span class="string">&quot;&quot;</span></span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    FileStream file = <span class="keyword">new</span>(FilePath, FileMode.Create);</span><br><span class="line">    XSSF.Write(file);</span><br><span class="line">    file.Close();  <span class="comment">//關閉檔案流</span></span><br><span class="line">    XSSF.Close();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*以上函示*/</span></span><br></pre></td></tr></table></figure><h2 id="二、讀取-Excel"><a href="#二、讀取-Excel" class="headerlink" title="二、讀取 Excel"></a>二、讀取 Excel</h2><h2 id="2-1、取得Sheet-名稱"><a href="#2-1、取得Sheet-名稱" class="headerlink" title="2.1、取得Sheet 名稱"></a>2.1、取得Sheet 名稱</h2><p>如果要往回抓Sheet 名稱，又不想從 List抓取可以從XSSFWorkbook 、HSSFWorkbook抓取裡面的Sheet Name。</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Get_SheetName</span>(<span class="params">XSSFWorkbook Workbook</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">int</span> index = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (index &lt; Workbook.NumberOfSheets)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">string</span> sheet =  Workbook.GetSheetName(index);</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;Sheet Name : &quot;</span> + sheet.ToString());</span><br><span class="line">        index++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2-讀取-Excel-檔案資料"><a href="#2-2-讀取-Excel-檔案資料" class="headerlink" title="2-2 讀取 Excel 檔案資料"></a>2-2 讀取 Excel 檔案資料</h3><p>寫資料要遵循一定的順序，可以概括為：</p><ol><li>讀取（或新建一個工作簿）</li><li>獲取工作表</li><li>對工作表新增行</li><li>對每一行新增單元格</li><li>對單元格賦值</li></ol><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">NPOIRead</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    ISheet sheet = ReadSheetAt(<span class="string">@&quot;F:\NPOI_Excel\Excel2007.xlsx&quot;</span>, <span class="number">0</span>);  <span class="comment">//獲取第一個工作表</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt;= sheet.LastRowNum; i++)  <span class="comment">//對工作表每一行</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (sheet.GetRow(i) == <span class="literal">null</span>) &#123; <span class="keyword">continue</span>; &#125; <span class="comment">//若有空就跳過以下執行</span></span><br><span class="line">        <span class="keyword">foreach</span> (ICell cell <span class="keyword">in</span> sheet.GetRow(i))<span class="comment">//</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(cell);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>ReadSheetAt 內容主要決定使用哪種版本(xls、xlsx)，再回傳Sheet 內容。方法可以使用(.NumberOfSheets)將所有Sheet 取出。</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*以下函示*/</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> ISheet <span class="title">ReadSheetAt</span>(<span class="params"><span class="built_in">string</span> fileName, <span class="built_in">int</span> index</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    FileStream fileStream = <span class="keyword">new</span>(fileName, FileMode.Open, FileAccess.Read);</span><br><span class="line"></span><br><span class="line">    IWorkbook workbook = fileName.IndexOf(<span class="string">&quot;.xls&quot;</span>) &gt; <span class="number">0</span> </span><br><span class="line">        ? <span class="keyword">new</span> HSSFWorkbook(fileStream)<span class="comment">// 2003版本 xls資料讀入workbook</span></span><br><span class="line">        : <span class="keyword">new</span> XSSFWorkbook(fileStream);<span class="comment">// 2007版本xlsx資料讀入workbook</span></span><br><span class="line"></span><br><span class="line">    fileStream.Close();</span><br><span class="line">    <span class="keyword">return</span> workbook.GetSheetAt(index);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*以上函示*/</span></span><br></pre></td></tr></table></figure><h2 id="三、寫入-Excel"><a href="#三、寫入-Excel" class="headerlink" title="三、寫入 Excel"></a>三、寫入 Excel</h2><h3 id="3-1-設定測試資料"><a href="#3-1-設定測試資料" class="headerlink" title="3-1 設定測試資料"></a>3-1 設定測試資料</h3><p>這邊用一個簡單的測試資料，利用class 方便寫入 excel 欄位。</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Demo</span></span><br><span class="line">&#123;</span><br><span class="line">    [<span class="meta">DisplayName(<span class="string">&quot;名稱&quot;</span>)</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> name &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    [<span class="meta">DisplayName(<span class="string">&quot;日期&quot;</span>)</span>]</span><br><span class="line">    <span class="keyword">public</span> DateTime date &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> data = <span class="keyword">new</span> List&lt;Demo&gt;()&#123;</span><br><span class="line">    <span class="keyword">new</span> Demo&#123; name = <span class="string">&quot;test1&quot;</span>, date = DateTime.Now &#125;,</span><br><span class="line">    <span class="keyword">new</span> Demo&#123; name = <span class="string">&quot;test2&quot;</span>, date = DateTime.Now &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="3-2-寫入-Excel"><a href="#3-2-寫入-Excel" class="headerlink" title="3-2 寫入 Excel"></a>3-2 寫入 Excel</h3><p>處理excel 先建立 Workbook，再建立 Sheet，最後建立 Row，再將資料寫入 Cell。<br>接下來，下載用Steam 方式將資料寫入檔案或下載。</p><p>data 是由上面<code>new List&lt;Demo&gt;()</code>取得的資料。透過data來讓欄位自動生成，而不用一個一個欄位去寫入。</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//建立excel檔案物件</span></span><br><span class="line">IWorkbook workbook = <span class="keyword">new</span> XSSFWorkbook();</span><br><span class="line">ISheet sheet = (XSSFSheet)workbook.CreateSheet(<span class="string">&quot;Default&quot;</span>);</span><br><span class="line">Type header = <span class="keyword">typeof</span>(Demo);</span><br><span class="line"><span class="comment">//建立表頭</span></span><br><span class="line">IRow row = sheet.CreateRow(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; header.GetProperties().Length; i++)</span><br><span class="line">&#123;</span><br><span class="line">    ICell cell = row.CreateCell(i);</span><br><span class="line">    cell.SetCellValue(header.GetProperties()[i].GetCustomAttribute&lt;DisplayNameAttribute&gt;().DisplayName);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//建立資料</span></span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; data.Count; i++)</span><br><span class="line">&#123;</span><br><span class="line">    IRow row = sheet.CreateRow(i + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> j = <span class="number">0</span>; j &lt; header.GetProperties().Length; j++)</span><br><span class="line">    &#123;</span><br><span class="line">        ICell cell = row.CreateCell(j);</span><br><span class="line">        cell.SetCellValue(header.GetProperties()[j].GetValue(data[i]).ToString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//寫入檔案</span></span><br><span class="line">FileStream file = <span class="keyword">new</span> FileStream(<span class="string">@&quot;F:\NPOI_Excel\Excel2007.xlsx&quot;</span>, FileMode.Create);</span><br><span class="line">workbook.Write(file);</span><br><span class="line">file.Close();  <span class="comment">//關閉檔案流</span></span><br><span class="line">workbook.Close();</span><br></pre></td></tr></table></figure><h2 id="四、補充"><a href="#四、補充" class="headerlink" title="四、補充"></a>四、補充</h2><h3 id="4-1-隱藏工作表"><a href="#4-1-隱藏工作表" class="headerlink" title="4-1 隱藏工作表"></a>4-1 隱藏工作表</h3><p>如果要隱藏工作表，需要對XSSFWorkbook抓取哪個是要隱藏的工作表。<br>以下範例只針對最後一比工作表進行隱藏。</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//隱藏最後一個工作表</span></span><br><span class="line">Workbook.SetSheetHidden(Workbook.NumberOfSheets <span class="number">-1</span> , <span class="literal">true</span>);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 後端技術 </category>
          
          <category> C# </category>
          
          <category> Package </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【C#】NPOI (二) 使用NPOI 處理 word 套版</title>
      <link href="/2022/03/07/%E5%BE%8C%E7%AB%AF%E6%8A%80%E8%A1%93/CS/Nuget/NPOI%20(%E4%BA%8C)%20%E4%BD%BF%E7%94%A8NPOI%20%E8%99%95%E7%90%86%20word%20%E5%A5%97%E7%89%88/"/>
      <url>/2022/03/07/%E5%BE%8C%E7%AB%AF%E6%8A%80%E8%A1%93/CS/Nuget/NPOI%20(%E4%BA%8C)%20%E4%BD%BF%E7%94%A8NPOI%20%E8%99%95%E7%90%86%20word%20%E5%A5%97%E7%89%88/</url>
      
        <content type="html"><![CDATA[<h1 id="使用NPOI"><a href="#使用NPOI" class="headerlink" title="使用NPOI"></a>使用NPOI</h1><p>目前使用npoi功能延伸使用方式，套版是最多人需要使用的部分，這邊只有簡述如何使用。<br>如果有需要詳細使用方式，歡迎在下方留言。<br>環境部分 ，我使用 Asp.Net Core Mvc ，這位可以自行使用自己的環境測試。</p><h2 id="Install"><a href="#Install" class="headerlink" title="Install"></a>Install</h2><p>請各位讀者自行取用，這部分可以用NuGet找到NPOI。<br><a href="https://www.nuget.org/packages/NPOI/">https://www.nuget.org/packages/NPOI/</a></p><h2 id="創建Word"><a href="#創建Word" class="headerlink" title="創建Word"></a>創建Word</h2><p><a href="/upload/template/word_npoi_temp.docx">下載點</a></p><p>這邊範例使用table以及一般輸入行數。</p><h2 id="讀取、下載"><a href="#讀取、下載" class="headerlink" title="讀取、下載"></a>讀取、下載</h2><p>功能未齊全狀況下，我們先把讀取文件、下載部分做出來。</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task&lt;IActionResult&gt; <span class="title">Index</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">string</span> docxPath = _env.WebRootPath + <span class="string">&quot;\\upload\\template.docx&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span> (System.IO.File.Exists(docxPath))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">await</span> Download(docxPath); </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> View();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task&lt;IActionResult&gt; <span class="title">DownloadAsync</span>(<span class="params"><span class="built_in">string</span> filePath</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> memoryStream = <span class="keyword">new</span> MemoryStream();</span><br><span class="line">    <span class="keyword">using</span> (<span class="keyword">var</span> stream = <span class="keyword">new</span> FileStream(filePath, FileMode.Open))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">await</span> stream.CopyToAsync(memoryStream);</span><br><span class="line">    &#125;</span><br><span class="line">    memoryStream.Seek(<span class="number">0</span>, SeekOrigin.Begin);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> FileStreamResult(memoryStream, <span class="string">&quot;application/vnd.openxmlformats-officedocument.wordprocessingml.document&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="抓取方式"><a href="#抓取方式" class="headerlink" title="抓取方式"></a>抓取方式</h2><h3 id="抓取一般的行數"><a href="#抓取一般的行數" class="headerlink" title="抓取一般的行數"></a>抓取一般的行數</h3><p>NPOI在這function中不會是有table，所以可以觀察到table是沒有執行成功。</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">FileStream fs = <span class="keyword">new</span> (docxPath, FileMode.Open, FileAccess.Read);</span><br><span class="line">XWPFDocument docx = <span class="keyword">new</span> (fs);</span><br><span class="line"><span class="keyword">foreach</span> (<span class="keyword">var</span> para <span class="keyword">in</span> docx.Paragraphs)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">string</span> oldtext = para.ParagraphText;</span><br><span class="line">    <span class="built_in">string</span> newText = <span class="string">&quot;測試欄位&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span> (oldtext == <span class="string">&quot;&quot;</span>) <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">string</span> temptext = para.ParagraphText;</span><br><span class="line">    <span class="comment">//以下為替換文件模版中的關鍵字</span></span><br><span class="line">    <span class="keyword">if</span> (temptext.Contains(<span class="string">&quot;[$name$]&quot;</span>))</span><br><span class="line">        temptext = temptext.Replace(<span class="string">&quot;[$name$]&quot;</span>, newText);</span><br><span class="line">    para.ReplaceText(oldtext, temptext);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="抓取TABLE"><a href="#抓取TABLE" class="headerlink" title="抓取TABLE"></a>抓取TABLE</h3><p>這邊先用很簡單方式使用，請各位不要按照這暴力方式直接使用他。</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">FileStream fs = <span class="keyword">new</span> (docxPath, FileMode.Open, FileAccess.Read);</span><br><span class="line">XWPFDocument docx = <span class="keyword">new</span> (fs);</span><br><span class="line"><span class="keyword">foreach</span> (XWPFTable dt <span class="keyword">in</span> docx.Tables)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">foreach</span> (XWPFTableRow dr <span class="keyword">in</span> dt.Rows)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">foreach</span> (XWPFTableCell dc <span class="keyword">in</span> dr.GetTableICells())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">foreach</span> (<span class="keyword">var</span> para <span class="keyword">in</span> dc.Paragraphs)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">string</span> oldtext = para.ParagraphText;</span><br><span class="line">                <span class="built_in">string</span> newText = <span class="string">&quot;測試欄位&quot;</span>;</span><br><span class="line">                <span class="keyword">if</span> (oldtext == <span class="string">&quot;&quot;</span>)</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                <span class="built_in">string</span> temptext = para.ParagraphText;</span><br><span class="line">                <span class="comment">//以下為替換文件模版中的關鍵字</span></span><br><span class="line">                <span class="keyword">if</span> (temptext.Contains(<span class="string">&quot;[$name$]&quot;</span>))</span><br><span class="line">                    temptext = temptext.Replace(<span class="string">&quot;[$name$]&quot;</span>, newText);</span><br><span class="line">                para.ReplaceText(oldtext, temptext);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用type方式取用"><a href="#使用type方式取用" class="headerlink" title="使用type方式取用"></a>使用type方式取用</h3><p>當然可以不用一個一個把Index function寫一堆迴圈，可以使用<code>docx.BodyElements</code>取出，可以直接得知body裡面是TABLE、PARAGRAPH、CONTENTCONTROL。</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> IActionResult <span class="title">Index</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">string</span> docxPath = _env.WebRootPath + <span class="string">&quot;\\upload\\template.docx&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span> (System.IO.File.Exists(docxPath))</span><br><span class="line">    &#123;</span><br><span class="line">        FileStream fs = <span class="keyword">new</span> (docxPath, FileMode.Open, FileAccess.Read);</span><br><span class="line">        XWPFDocument docx = <span class="keyword">new</span> (fs);</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="keyword">var</span> bodyItem <span class="keyword">in</span> docx.BodyElements)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">switch</span> (bodyItem.ElementType)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">case</span> BodyElementType.TABLE:</span><br><span class="line">                    Set_DocxTableText(bodyItem.Body);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> BodyElementType.PARAGRAPH:</span><br><span class="line">                    Set_DocxText(bodyItem.Body);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> BodyElementType.CONTENTCONTROL:<span class="keyword">break</span>;</span><br><span class="line">                <span class="literal">default</span>:<span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Download(docx); </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> View();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Set_DocxText</span>(<span class="params">IBody docx</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="keyword">var</span> para <span class="keyword">in</span> docx.Paragraphs)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">string</span> oldtext = para.ParagraphText;</span><br><span class="line">        <span class="built_in">string</span> newText = <span class="string">&quot;測試欄位&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span> (oldtext == <span class="string">&quot;&quot;</span>)</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        <span class="built_in">string</span> temptext = para.ParagraphText;</span><br><span class="line">        <span class="comment">//以下為替換文件模版中的關鍵字</span></span><br><span class="line">        <span class="keyword">if</span> (temptext.Contains(<span class="string">&quot;[$name$]&quot;</span>))</span><br><span class="line">            temptext = temptext.Replace(<span class="string">&quot;[$name$]&quot;</span>, newText);</span><br><span class="line">        para.ReplaceText(oldtext, temptext);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Set_DocxTableText</span>(<span class="params">IBody docx</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">foreach</span> (XWPFTable dt <span class="keyword">in</span> docx.Tables)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">foreach</span> (XWPFTableRow dr <span class="keyword">in</span> dt.Rows)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">foreach</span> (XWPFTableCell dc <span class="keyword">in</span> dr.GetTableICells())</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">foreach</span> (<span class="keyword">var</span> para <span class="keyword">in</span> dc.Paragraphs)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="built_in">string</span> oldtext = para.ParagraphText;</span><br><span class="line">                    <span class="built_in">string</span> newText = <span class="string">&quot;測試欄位&quot;</span>;</span><br><span class="line">                    <span class="keyword">if</span> (oldtext == <span class="string">&quot;&quot;</span>)</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    <span class="built_in">string</span> temptext = para.ParagraphText;</span><br><span class="line">                    <span class="comment">//以下為替換文件模版中的關鍵字</span></span><br><span class="line">                    <span class="keyword">if</span> (temptext.Contains(<span class="string">&quot;[$name$]&quot;</span>))</span><br><span class="line">                        temptext = temptext.Replace(<span class="string">&quot;[$name$]&quot;</span>, newText);</span><br><span class="line">                    para.ReplaceText(oldtext, temptext);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> IActionResult <span class="title">Download</span>(<span class="params">XWPFDocument fs</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> memoryStream = <span class="keyword">new</span> MemoryStream();</span><br><span class="line">    fs.Write(memoryStream);</span><br><span class="line">    memoryStream.Seek(<span class="number">0</span>, SeekOrigin.Begin);</span><br><span class="line">    <span class="comment">// 回傳檔案到 Client 需要附上 Content Type，否則瀏覽器會解析失敗。</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> FileStreamResult(memoryStream, <span class="string">&quot;application/vnd.openxmlformats-officedocument.wordprocessingml.document&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 後端技術 </category>
          
          <category> C# </category>
          
          <category> Package </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C# 委派(delegate)、Action&lt;T&gt;、Func&lt;T,TResult&gt;</title>
      <link href="/2022/02/19/%E5%BE%8C%E7%AB%AF%E6%8A%80%E8%A1%93/CS/%E7%AD%86%E8%A8%98/CS_NOTE_Action%E4%BB%A5%E5%8F%8AFunc/"/>
      <url>/2022/02/19/%E5%BE%8C%E7%AB%AF%E6%8A%80%E8%A1%93/CS/%E7%AD%86%E8%A8%98/CS_NOTE_Action%E4%BB%A5%E5%8F%8AFunc/</url>
      
        <content type="html"><![CDATA[<h2 id="什麼是委託（delegate）"><a href="#什麼是委託（delegate）" class="headerlink" title="什麼是委託（delegate）"></a>什麼是委託（delegate）</h2><p>委託是一種特殊的類型，它可以代表一個或多個方法。可以將委託視為一個可以存儲對方法的引用的變量。委託提供了一種方便的方式來傳遞方法作為參數，以及在運行時動態地執行方法。</p><p>委託定義了方法的簽名，其中包括方法的返回值類型和參數列表。委託可以指向具有相同簽名的任何方法。委託是一種類型安全的方式來傳遞方法參數，因為它只能存儲與簽名匹配的方法。</p><p>總的來說，Delegate是一種C#中的類型，而Callback是一種編程模式。Delegate通常用於實現Callback。</p><h3 id="1-Delegate"><a href="#1-Delegate" class="headerlink" title="(1) Delegate"></a>(1) Delegate</h3><p>是一種C#中的類型，它可以用來定義一個方法的指針，並且可以將其當做一個參數傳遞給其他方法。通過Delegate，可以實現將方法當做一個參數傳遞給其他方法，並在需要的時候動態調用這個方法。</p><h3 id="2-Callback"><a href="#2-Callback" class="headerlink" title="(2) Callback"></a>(2) Callback</h3><p>是一種編程模式，用於當一個方法執行完畢後，通知其他方法。在C#中，Callback通常是通過委託（Delegate）來實現的。當一個方法完成任務後，它會調用一個Delegate，並且將結果作為參數傳遞給Delegate所引用的方法，這個方法就是Callback。</p><h2 id="Delegate-三種類型"><a href="#Delegate-三種類型" class="headerlink" title="Delegate 三種類型"></a>Delegate 三種類型</h2><h3 id="一、delegate"><a href="#一、delegate" class="headerlink" title="一、delegate"></a>一、delegate</h3><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="built_in">delegate</span> <span class="built_in">int</span> <span class="title">Calculate</span>(<span class="params"><span class="built_in">int</span> x, <span class="built_in">int</span> y</span>)</span>;</span><br></pre></td></tr></table></figure><p>上面的定義表示委託可以代表一個具有兩個int參數和int返回值的方法。可以使用委託變量來存儲對此類方法的引用，例如：</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="built_in">int</span> <span class="title">Add</span>(<span class="params"><span class="built_in">int</span> x, <span class="built_in">int</span> y</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Calculate calc = Add;</span><br><span class="line"><span class="built_in">int</span> result = calc(<span class="number">1</span>, <span class="number">2</span>);  <span class="comment">// result = 3</span></span><br></pre></td></tr></table></figure><p>在上面的例子中，定義了一個Add方法，它與Calculate委託的簽名匹配。然後將Add方法的引用存儲在委託變量calc中，可以通過調用calc變量來調用Add方法。</p><h3 id="二、Func"><a href="#二、Func" class="headerlink" title="二、Func&lt;T,TResult&gt;"></a>二、Func&lt;T,TResult&gt;</h3><p>是一個泛型委派，可以接受任何數量的參數，其中最後一個參數為返回值類型。例如，Func&lt;int, int, int&gt; 表示一個方法，該方法有兩個 int 參數並返回一個 int 值。</p><p>定義一個接受 Func&lt;&gt; 委派的方法</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">DoSomething</span>(<span class="params">Func&lt;<span class="built_in">int</span>, <span class="built_in">int</span>, <span class="built_in">int</span>&gt; operation, <span class="built_in">int</span> x, <span class="built_in">int</span> y</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">int</span> result = operation(x, y);</span><br><span class="line">    Console.WriteLine(result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用 Func&lt;&gt; 委派來傳遞方法：</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DoSomething((a, b) =&gt; a + b, <span class="number">2</span>, <span class="number">3</span>); <span class="comment">// 輸出：5</span></span><br></pre></td></tr></table></figure><p>在這個例子中， DoSomething 方法接受一個 Func&lt;&gt; 委派，可以將兩個數字相加並返回結果。</p><h3 id="三、Action"><a href="#三、Action" class="headerlink" title="三、Action "></a>三、Action <T></h3><p>是一個類似的泛型委派，但沒有返回值，它也可以接受任何數量的參數。例如，Action&lt;int, string&gt; 表示一個方法，該方法有一個 int 參數和一個 string 參數，但沒有返回值。</p><p>定義一個接受 Action 委派的方法</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">DoSomething</span>(<span class="params">Action&lt;<span class="built_in">int</span>, <span class="built_in">string</span>&gt; operation, <span class="built_in">int</span> x, <span class="built_in">string</span> y</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    operation(x, y);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用 Action 委派來傳遞方法：</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DoSomething((a, b) =&gt; Console.WriteLine(<span class="string">$&quot;<span class="subst">&#123;a&#125;</span> <span class="subst">&#123;b&#125;</span>&quot;</span>), <span class="number">2</span>, <span class="string">&quot;Hello&quot;</span>); <span class="comment">// 輸出：2 Hello</span></span><br></pre></td></tr></table></figure><p>在這個例子中，DoSomething 方法接受一個 Action 委派，可以將一個 int 值和一個字符串輸出到控制台。通過使用這些委派，可以讓方法更加靈活，可以動態地決定要執行哪個方法。</p><h2 id="Func與-Action-差異"><a href="#Func與-Action-差異" class="headerlink" title="Func&lt;&gt;與 Action 差異"></a>Func&lt;&gt;與 Action 差異</h2><ol><li><p>Func&lt;&gt; : 具有輸入參數和返回值的方法。它的最後一個類型參數表示方法的返回值類型，前面的類型參數表示方法的輸入參數的數量和類型。例如，Func&lt;int, string&gt;表示一個具有一個int型輸入參數和一個string型返回值的方法，而Func&lt;int, string, bool&gt;表示一個具有兩個輸入參數（一個int型和一個string型）和一個bool型返回值的方法。</p></li><li><p>Action : 不具有返回值的方法。它的類型參數表示方法的輸入參數的數量和類型。例如，Action<int>表示一個具有一個int型輸入參數和沒有返回值的方法，而Action&lt;int, string&gt;表示一個具有兩個輸入參數（一個int型和一個string型）和沒有返回值的方法。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 後端技術 </category>
          
          <category> C# </category>
          
          <category> 筆記 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【筆記】微軟開發者 -  Office 365 E5 無限續期方式</title>
      <link href="/2022/02/10/%E7%AD%86%E8%A8%98%E8%88%87%E7%94%9F%E6%B4%BB%E9%9B%9C%E8%A8%98/%E6%8A%80%E8%A1%93/%E3%80%90%E7%AD%86%E8%A8%98%E3%80%91Office365%20E5/"/>
      <url>/2022/02/10/%E7%AD%86%E8%A8%98%E8%88%87%E7%94%9F%E6%B4%BB%E9%9B%9C%E8%A8%98/%E6%8A%80%E8%A1%93/%E3%80%90%E7%AD%86%E8%A8%98%E3%80%91Office365%20E5/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>微軟已經提供很久讓開發者可以持續使用E5，相信很多人也有用過這個東西，後面發現Github AutApi 消失又再一次重複操作，這次會將重要操作列出。本篇文章提供下載點以及操作說明讓所有人可以快速創出自己的環境。</p><h2 id="文件參考"><a href="#文件參考" class="headerlink" title="文件參考"></a>文件參考</h2><ol><li><a href="https://www.jkg.tw/p3341/">文件參考</a></li><li><a href="https://www.microsoft.com/zh-tw/microsoft-365/enterprise/office-365-e5?activetab=pivot:overviewtab">Office 365 E5</a></li><li><a href="https://developer.microsoft.com/zh-cn/microsoft-365/dev-program">註冊Microsoft 365 E5 開發計劃</a></li><li><a href="/upload/zip/rclone-v1.53.1-windows-amd64.zip">rclone工具</a></li></ol><h1 id="AutApi-設定"><a href="#AutApi-設定" class="headerlink" title="AutApi 設定"></a>AutApi 設定</h1><p>如果第一次使用或是想要看詳細內容可以到第一點選項點選。<br>本篇使用 <a href="https://github.com/huijiyun/AutoApiSecret">AutoApiSecret</a>，相信很多人都有使用過這個Api，近期有發現以前的AutoApi被Github封鎖，之後發現這東西還存在，可以暫時先觀察狀況是否持續續期。</p><h2 id="Azure"><a href="#Azure" class="headerlink" title="Azure"></a><a href="https://azure.microsoft.com/zh-tw/">Azure</a></h2><p>如果已經有註冊帳號可以直接按下 <a href="https://portal.azure.com/#home">Azure 入口</a></p><h3 id="1-請點選-Azure-Active-Directory-應用程式註冊"><a href="#1-請點選-Azure-Active-Directory-應用程式註冊" class="headerlink" title="1. 請點選 [Azure Active Directory] &gt; [應用程式註冊]"></a>1. 請點選 [Azure Active Directory] &gt; [應用程式註冊]</h3><p><img src="/img/Note/office/office_e5/02.png"><br><img src="/img/Note/office/office_e5/03.png"></p><h3 id="2-設定註冊內容"><a href="#2-設定註冊內容" class="headerlink" title="2. 設定註冊內容"></a>2. 設定註冊內容</h3><ul><li>名稱 : 設定自己想要的名稱</li><li>支援類型 : 任何組織目錄中的帳戶</li><li>重新導向 URI : web - <a href="http://localhost:53682/">http://localhost:53682/</a><br><img src="/img/Note/office/office_e5/04.png"></li></ul><h3 id="3-紀錄ID"><a href="#3-紀錄ID" class="headerlink" title="3. 紀錄ID"></a>3. 紀錄ID</h3><p>務必要將 [應用程式 (用戶端) 識別碼] 存放記事本上面，等下會用到。<br><img src="/img/Note/office/office_e5/05.png"></p><h3 id="4-點選-憑證與秘密-用戶端密碼-新增用戶端密碼"><a href="#4-點選-憑證與秘密-用戶端密碼-新增用戶端密碼" class="headerlink" title="4. 點選[憑證與秘密] &gt; [用戶端密碼] &gt; [新增用戶端密碼]"></a>4. 點選[憑證與秘密] &gt; [用戶端密碼] &gt; [新增用戶端密碼]</h3><p>新增完畢後即可複製[值]，這是你第二個ID 一樣請你複製到記事本上面。<br><img src="/img/Note/office/office_e5/06.png"><br><img src="/img/Note/office/office_e5/07.png"><br><img src="/img/Note/office/office_e5/08.png"></p><h3 id="5-點選-API權限-新增權限-完畢後按下-代表xxx授予管理員同意-按鈕"><a href="#5-點選-API權限-新增權限-完畢後按下-代表xxx授予管理員同意-按鈕" class="headerlink" title="5. 點選 [API權限] &gt; [新增權限] &gt; 完畢後按下[代表xxx授予管理員同意]按鈕"></a>5. 點選 [API權限] &gt; [新增權限] &gt; 完畢後按下[代表xxx授予管理員同意]按鈕</h3><p>需要注意 : 這次我設定與舊版不同，只要新增以下選項即可。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Directory.ReadWrite.All</span><br><span class="line">Files.ReadWrite.All</span><br><span class="line">Mail.ReadWrite</span><br><span class="line">MailboxSettings.ReadWrite</span><br><span class="line">User.Read</span><br><span class="line">User.ReadWrite.All</span><br></pre></td></tr></table></figure><p><img src="/img/Note/office/office_e5/09.png"><br><img src="/img/Note/office/office_e5/10.png"></p><p>到這邊就完成了~! 之後可以準備使用 github </p><h2 id="AutoApiSecret"><a href="#AutoApiSecret" class="headerlink" title="AutoApiSecret"></a><a href="https://github.com/huijiyun/AutoApiSecret">AutoApiSecret</a></h2><p>請各位自行按下 <strong>Fork</strong> 再進行下一步。<br><img src="/img/Note/office/office_e5/01.png"></p><h3 id="1-創建-Personal-access-tokens"><a href="#1-創建-Personal-access-tokens" class="headerlink" title="1. 創建 Personal access tokens"></a>1. 創建 Personal access tokens</h3><p>如果不知道如何創建可以參考 <a href="https://jontcont.github.io/2022/03/21/Github_UseToken/">使用 Github Token</a><br><img src="/img/Note/office/office_e5/11.png"></p><p>設定方式也很簡單，只要按照圖片設定即可。完成後記得要複製自己的token。</p><h3 id="2-使用-rclone工具"><a href="#2-使用-rclone工具" class="headerlink" title="2. 使用 rclone工具"></a>2. 使用 <a href="/upload/zip/rclone-v1.53.1-windows-amd64.zip">rclone工具</a></h3><p>使用方式是解完壓縮，用 [系統管理員身分執行] 打開 [命令字元] 到你接壓縮的路徑。指令如下 :</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./rclone.exe authorize &quot;onedrive&quot; &quot;id1&quot; &quot;id2&quot;</span><br></pre></td></tr></table></figure><p>備註 </p><ul><li>id1 : 應用程式 (用戶端) 識別碼</li><li>id2 : 憑證與秘密</li></ul><p>完成後按下Enter ，會列出很多字串。字串立面是json 字串會比較長一點，請找到下方一樣的格式。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;refresh_token&quot;:&quot;xxxxxxxxxxxxxxxxxxxxxxxx&quot;</span><br></pre></td></tr></table></figure><p>找到之後只要複製裡面的內容，上面範例則是用 <code>xxxxxxxxxxxxxxxxxxxxxxxx</code>。</p><h3 id="3-修改-AutoApiSecret-1-txt檔案"><a href="#3-修改-AutoApiSecret-1-txt檔案" class="headerlink" title="3. 修改 AutoApiSecret &gt; 1.txt檔案"></a>3. 修改 AutoApiSecret &gt; 1.txt檔案</h3><p>這邊是存放 [ refresh_token ] 把剛才複製貼上 1.txt上面。</p><p><img src="/img/Note/office/office_e5/12.png"><br><img src="/img/Note/office/office_e5/13.png"></p><h3 id="4-點選-Action-並按下-Star"><a href="#4-點選-Action-並按下-Star" class="headerlink" title="4. 點選 Action 並按下 [Star]"></a>4. 點選 Action 並按下 [Star]</h3><p>按完 [Star] 記得要重新整理或是重新點選即可。Pin記得點選,主要原因是不知道何時AutoApiSeret會不會消失，建議還是開著鱉。<br><img src="/img/Note/office/office_e5/14.png"><br><img src="/img/Note/office/office_e5/15.png"></p><p>這邊需要留意，office E5 快到期時後才會通知，所以有空時候可以看一下Mail確保有沒有快失效。</p>]]></content>
      
      
      <categories>
          
          <category> 筆記 </category>
          
          <category> 生活雜記 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> office </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Youtube (一) - API 筆記</title>
      <link href="/2022/01/01/%E5%BE%8C%E7%AB%AF%E6%8A%80%E8%A1%93/CS/Youtube/Youtube%20(%E4%B8%80)_API%20%E6%96%87%E4%BB%B6/"/>
      <url>/2022/01/01/%E5%BE%8C%E7%AB%AF%E6%8A%80%E8%A1%93/CS/Youtube/Youtube%20(%E4%B8%80)_API%20%E6%96%87%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<p>(本篇為記錄使用)</p><h2 id="Youtube-API"><a href="#Youtube-API" class="headerlink" title="Youtube API"></a>Youtube API</h2><p>由 <a href="https://cloud.google.com/apis?hl=zh-tw">Google Cloud API</a> 提供API。Google Cloud API 有很多種類如( Vision API、Speech API、Translation API、Natural Language API、Video Intelligence API等)。</p><h3 id="API-種類"><a href="#API-種類" class="headerlink" title="API 種類"></a>API 種類</h3><ul><li><a href="https://developers.google.com/youtube/v3/getting-started">Data API</a></li><li><a href="https://developers.google.com/youtube/v3/live/getting-started">Live Streaming API</a></li><li><a href="https://developers.google.com/youtube/v3/live/getting-started">Player API</a></li><li><a href="https://developers.google.com/youtube/reporting">Analytics&#x2F;Reporting  API</a></li></ul><h3 id="API-授權"><a href="#API-授權" class="headerlink" title="API 授權"></a>API 授權</h3><ul><li>OAuth 2.0</li><li>API keys</li></ul><h2 id="OpenID-Connect"><a href="#OpenID-Connect" class="headerlink" title="OpenID Connect"></a>OpenID Connect</h2><p>是由OAuth 2.0用於身分驗證、授權。使用 OAuth 2.0 需要憑證(用戶端 ID 和用戶端密鑰)驗證使用者，授權後會有 【Access Token】、【ID Token】兩種Token 授權。</p><ol><li>ID Token : 格式由 JWT 組成，可以透過 <a href="https://jwt.io/">JWT.IO</a>解析。ID Token 會依據 API 授權種類決定會不會產生出 ID Token 。</li><li>Access Token : 作用是存取授權，必須要產生出這項Access Token 才能使用。</li></ol><h3 id="Access-Token-有效期"><a href="#Access-Token-有效期" class="headerlink" title="Access Token 有效期"></a>Access Token 有效期</h3><p>access_token 取決於授權時指定的scope的有效期，如果授權時指定多個scope，最終的access_token 的有效期取決於有效期最短的scope。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">access_token 截止時間 =（授權時間點）+（授權後調用alipay.system.oauth.token 返回的expires_in）。</span><br></pre></td></tr></table></figure><h2 id="參考文件"><a href="#參考文件" class="headerlink" title="參考文件"></a>參考文件</h2><ul><li><p>OpenID Connect : <a href="https://developers.google.com/identity/openid-connect/openid-connect?hl=zh-cn">https://developers.google.com/identity/openid-connect/openid-connect?hl=zh-cn</a></p></li><li><p>OpenID Connect Core 1.0 incorporating errata set 1 : <a href="https://openid.net/specs/openid-connect-core-1_0.html#ImplicitAuthRequest">https://openid.net/specs/openid-connect-core-1_0.html#ImplicitAuthRequest</a></p></li><li><p>‘[料理佳餚]’ 在 ASP.NET Core 整合 Google 做為網站的第三方登入: <a href="https://dotblogs.com.tw/supershowwei/2022/11/10/integrate-google-login-in-asp-net-core">https://dotblogs.com.tw/supershowwei/2022/11/10/integrate-google-login-in-asp-net-core</a></p></li><li><p>Google API 是什麼？一次搞懂五種 Google API，聽說讀寫樣樣通！: <a href="https://mile.cloud/zh/resources/blog/What-is-Google-API-one-time-to-know-five-types-of-Google-API_60">https://mile.cloud/zh/resources/blog/What-is-Google-API-one-time-to-know-five-types-of-Google-API_60</a></p></li><li><p>OAuth (6) access token &amp; refresh token : <a href="https://ithelp.ithome.com.tw/articles/10296956?sc=rss.qu">https://ithelp.ithome.com.tw/articles/10296956?sc=rss.qu</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 後端技術 </category>
          
          <category> C# </category>
          
          <category> Youtube </category>
          
      </categories>
      
      
        <tags>
            
            <tag> API </tag>
            
            <tag> C# </tag>
            
            <tag> Youtube </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用 Hexo (四) - (筆記)設定package json</title>
      <link href="/2021/12/04/HEXO/%E4%BD%BF%E7%94%A8%20Hexo%20(%E5%9B%9B)%20-%20(%E7%AD%86%E8%A8%98)%E8%A8%AD%E5%AE%9Apackage%20json/"/>
      <url>/2021/12/04/HEXO/%E4%BD%BF%E7%94%A8%20Hexo%20(%E5%9B%9B)%20-%20(%E7%AD%86%E8%A8%98)%E8%A8%AD%E5%AE%9Apackage%20json/</url>
      
        <content type="html"><![CDATA[<p>這篇主要使要紀錄設定 package json 。 </p><h2 id="相關文件"><a href="#相關文件" class="headerlink" title="相關文件"></a>相關文件</h2><ul><li><a href="https://www.npmjs.com/package/hexo-server">hexo-server</a></li></ul><h2 id="package-json"><a href="#package-json" class="headerlink" title="package.json"></a>package.json</h2><p>近期將<code>hexo server</code>設定方式微調，如果hexo-server 還有其他設定方式，可以透過下方使用方式加入。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;build&quot;</span><span class="punctuation">:</span> <span class="string">&quot;hexo generate&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;clean&quot;</span><span class="punctuation">:</span> <span class="string">&quot;hexo clean&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;deploy&quot;</span><span class="punctuation">:</span> <span class="string">&quot;hexo deploy&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;start&quot;</span><span class="punctuation">:</span> <span class="string">&quot;hexo server -o -p 666&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;publish&quot;</span><span class="punctuation">:</span> <span class="string">&quot;hexo cl &amp;&amp; hexo g -d &quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="hexo-server"><a href="#hexo-server" class="headerlink" title="hexo server"></a>hexo server</h2><h3 id="安裝方式"><a href="#安裝方式" class="headerlink" title="安裝方式"></a>安裝方式</h3><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-server --save</span><br></pre></td></tr></table></figure><h3 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h3><table><thead><tr><th>Option</th><th>Description</th><th>Default</th></tr></thead><tbody><tr><td>-i, –ip</td><td>Override the default server IP.</td><td>:: when IPv6 is available, else 0.0.0.0 (note: in most systems, :: also binds to 0.0.0.0)</td></tr><tr><td>-p, –port</td><td>Override the default port.</td><td>4000</td></tr><tr><td>-s, –static</td><td>Only serve static files.</td><td>false</td></tr><tr><td>-l, –log [format]</td><td>Enable logger. Override log format.</td><td>false</td></tr><tr><td>-o, –open</td><td>Immediately open the server url in your default web browser.</td><td>false</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 筆記 </category>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HEXO </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用 Hexo (三) -  使用 HEXO 套件</title>
      <link href="/2021/12/03/HEXO/%E4%BD%BF%E7%94%A8%20Hexo%20(%E4%B8%89)%20-%20%20%E4%BD%BF%E7%94%A8%20HEXO%20%E5%A5%97%E4%BB%B6/"/>
      <url>/2021/12/03/HEXO/%E4%BD%BF%E7%94%A8%20Hexo%20(%E4%B8%89)%20-%20%20%E4%BD%BF%E7%94%A8%20HEXO%20%E5%A5%97%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>上一篇提到簡易的創建方式，可以讓各位順利創建。<br>本章會教你簡單的套件，馬上就可以創建留言、音樂、書籍、影視評論等，剩餘功能委屈各位自行去作者文章測試研究&lt;(＿　＿)&gt;。</p><hr><h1 id="套件"><a href="#套件" class="headerlink" title="套件"></a>套件</h1><p>簡易步驟依據作者操作即可。</p><ul><li><a href="https://butterfly.js.org/posts/ceeb73f/#%E5%9C%A8%E7%B6%AB%E8%81%8A%E5%A4%A9">線上留言板</a></li></ul><h2 id="留言板-Disqus"><a href="#留言板-Disqus" class="headerlink" title="留言板-Disqus"></a>留言板-<a href="https://disqus.com/">Disqus</a></h2><p>Disqus是以使用社群網路形式，向網路社群提供網站留言服務的公司。該公司的平台提供不同的功能，例如與不同社群網路服務連結、社群網路、使用者個人檔案、垃圾宣傳及審核工具、數據分析、電子郵件通知和在行動裝置留言等。</p><h3 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h3><ol><li>按下 GET STARTED<br><img src="/img/Hexo/day_03_UseHexo/img-02.png"></li><li>按下 [I want to install Disqus on my site]<br><img src="/img/Hexo/day_03_UseHexo/img-03.png"></li><li>輸入網站名稱，這邊會直接對應 short name ，若有重複會提示出來。<br><img src="/img/Hexo/day_03_UseHexo/img-04.png"></li><li>主要注意 3.Configure Disqus、4.Setup Moderation步驟。<br><img src="/img/Hexo/day_03_UseHexo/img-05.png"><br>Website URL -&gt; Blog的Url [ <a href="https://username.githun.io/">https://username.githun.io/</a> ]<br><img src="/img/Hexo/day_03_UseHexo/img-06.png"><br>這邊是評論的審核機制，你可以選擇不受限的 <code>Balanced</code>，或是評論是需要經過系統審核或有限的 <code>Strict</code>，差異解說如下：</li></ol><ul><li>圖片、影片或連結<code>允許/不允許</code>在留言裡</li><li>訪客留言是<code>允許/不允許</code>的</li><li>留言被 flagged (被標記有害的意思?) <code>5次/3次</code> 會被送到待審核的機制中</li><li>留言內有限制或敏感字的部份都會被自動刪除</li><li><a href="https://help.disqus.com/en/articles/1717255-toxic-mod-filter">有害的評論</a> <code>需要你的審核才能顯示/自動刪除</code></li><li><code>Strict</code> 的部份，話題(Threads)會在 30 天後自動關閉<br><img src="/img/Hexo/day_03_UseHexo/img-07.png"></li></ul><h3 id="config-yml-設定"><a href="#config-yml-設定" class="headerlink" title="config.yml 設定"></a>config.yml 設定</h3><p>shortname 通常創建是與Website Name一樣，若想確認可以到設定區域按下 Edit Settings 。<br>下方是設定 Disqus方式，shortname確認好後，就將名稱貼在 [short-name]。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">comments:</span></span><br><span class="line"> <span class="attr">use:</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">Disqus</span></span><br><span class="line"></span><br><span class="line"> <span class="attr">text:</span> <span class="literal">true</span> <span class="comment"># Display the comment name next to the button</span></span><br><span class="line"> </span><br><span class="line"> <span class="attr">lazyload:</span> <span class="literal">false</span></span><br><span class="line"> <span class="attr">count:</span> <span class="literal">true</span> <span class="comment"># Display comment count in post&#x27;s top_img</span></span><br><span class="line"> <span class="attr">card_post_count:</span> <span class="literal">true</span> <span class="comment"># Display comment count in Home Page</span></span><br><span class="line"></span><br><span class="line"><span class="attr">disqus:</span></span><br><span class="line"> <span class="attr">shortname:</span> <span class="string">&lt;short-name&gt;</span></span><br><span class="line"> <span class="attr">apikey:</span> <span class="comment"># For newest comments widget</span></span><br></pre></td></tr></table></figure><h3 id="查看shortname"><a href="#查看shortname" class="headerlink" title="查看shortname"></a>查看shortname</h3><p><img src="/img/Hexo/day_03_UseHexo/img-08.png"><br><img src="/img/Hexo/day_03_UseHexo/img-09.png"></p><hr><h2 id="音樂"><a href="#音樂" class="headerlink" title="音樂"></a>音樂</h2><h2 id="音樂部分需要安裝-hexo-tag-aplayer。-安裝方式npm-install-save-hexo-tag-aplayer安裝完之後，請至最面層-config裡面設定，因需要全域都插入aplayer和meting資源，為了防止插入重複的資源，需要把asset-inject設為false在themes裡面-config-yml設定-插入Aplayer-html如果要有整個Blog有播放效果，如下設定"><a href="#音樂部分需要安裝-hexo-tag-aplayer。-安裝方式npm-install-save-hexo-tag-aplayer安裝完之後，請至最面層-config裡面設定，因需要全域都插入aplayer和meting資源，為了防止插入重複的資源，需要把asset-inject設為false在themes裡面-config-yml設定-插入Aplayer-html如果要有整個Blog有播放效果，如下設定" class="headerlink" title="音樂部分需要安裝 hexo-tag-aplayer。### 安裝方式npm install --save hexo-tag-aplayer安裝完之後，請至最面層_config裡面設定，因需要全域都插入aplayer和meting資源，為了防止插入重複的資源，需要把asset_inject設為false在themes裡面 _config.yml設定### 插入Aplayer html如果要有整個Blog有播放效果，如下設定:"></a>音樂部分需要安裝 <code>hexo-tag-aplayer</code>。<br>### 安裝方式<br><code>npm install --save hexo-tag-aplayer</code><br>安裝完之後，請至最面層_config裡面設定，因需要全域都插入aplayer和meting資源，為了防止插入重複的資源，需要把asset_inject設為<code>false</code><br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">aplayer:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">asset_inject:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><br>在themes裡面 _config.yml設定<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">aplayerInject:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">per_page:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><br>### 插入Aplayer html<br>如果要有整個Blog有播放效果，如下設定:<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">在themes裡面</span> <span class="string">_config.yml設定</span></span><br><span class="line"><span class="attr">inject:</span></span><br><span class="line">  <span class="attr">head:</span></span><br><span class="line">  <span class="attr">bottom:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&lt;div</span> <span class="string">class=&quot;aplayer</span> <span class="literal">no</span><span class="string">-destroy&quot;</span> <span class="string">data-id=&quot;003fA5G40k6hKc&quot;</span> <span class="string">data-server=&quot;tencent&quot;</span> <span class="string">data-type=&quot;artist&quot;</span> <span class="string">data-fixed=&quot;true&quot;</span> <span class="string">data-mini=&quot;true&quot;</span> <span class="string">data-listFolded=&quot;false&quot;</span> <span class="string">data-order=&quot;random&quot;</span> <span class="string">data-preload=&quot;none&quot;</span> <span class="string">data-autoplay=&quot;true&quot;</span> <span class="string">muted&gt;&lt;/div&gt;</span></span><br></pre></td></tr></table></figure><br><div class="note info flat"><p>本文 data-id 是用 <a href="https://y.qq.com/">qq音樂</a> 擷取 id，如下範例：URL : [ <a href="https://y.qq.com/n/ryqq/singer/0025NhlN2yWrP4/">https://y.qq.com/n/ryqq/singer/0025NhlN2yWrP4/</a> ]<br>我們的 data-id 就是 [0025NhlN2yWrP4]</p></div></h2><h2 id="電影"><a href="#電影" class="headerlink" title="電影"></a>電影</h2><p>電影界面使用了插件 hexo-butterfly-douban</p><h3 id="安裝方式"><a href="#安裝方式" class="headerlink" title="安裝方式"></a>安裝方式</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-butterfly-douban --save</span><br></pre></td></tr></table></figure><p>安裝完之後，請至最面層_config裡面設定。builtin設定為<code>true</code>會創建一[ book 、 movie 、 game]的頁面(自動產生)。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">douban:</span></span><br><span class="line">  <span class="attr">user:</span> <span class="string">mythsman</span></span><br><span class="line">  <span class="attr">builtin:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">book:</span></span><br><span class="line">    <span class="attr">title:</span> <span class="string">&#x27;This is my book title&#x27;</span></span><br><span class="line">    <span class="attr">quote:</span> <span class="string">&#x27;This is my book quote&#x27;</span></span><br><span class="line">    <span class="attr">meta:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">comments:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">top_img:</span> <span class="string">https://cccccc.png</span></span><br><span class="line">    <span class="attr">aside:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">books</span></span><br><span class="line">    <span class="attr">limit:</span></span><br><span class="line">  <span class="attr">movie:</span></span><br><span class="line">    <span class="attr">title:</span> <span class="string">&#x27;This is my movie title&#x27;</span></span><br><span class="line">    <span class="attr">quote:</span> <span class="string">&#x27;This is my movie quote&#x27;</span></span><br><span class="line">    <span class="attr">meta:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">comments:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">top_img:</span> <span class="string">https://cccccc.png</span></span><br><span class="line">    <span class="attr">aside:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">movies</span></span><br><span class="line">    <span class="attr">limit:</span></span><br><span class="line">  <span class="attr">game:</span></span><br><span class="line">    <span class="attr">title:</span> <span class="string">&#x27;This is my game title&#x27;</span></span><br><span class="line">    <span class="attr">quote:</span> <span class="string">&#x27;This is my game quote&#x27;</span></span><br><span class="line">    <span class="attr">meta:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">comments:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">top_img:</span> <span class="string">https://cccccc.png</span></span><br><span class="line">    <span class="attr">aside:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">games</span></span><br><span class="line">    <span class="attr">limit:</span></span><br><span class="line">  <span class="attr">timeout:</span> <span class="number">10000</span> </span><br></pre></td></tr></table></figure><h3 id="參數"><a href="#參數" class="headerlink" title="參數"></a>參數</h3><table><thead><tr><th>參數</th><th>解釋</th></tr></thead><tbody><tr><td>user</td><td>你的豆瓣ID.打開豆瓣，登入賬户，然後在右上角點擊 “個人主頁” ，這時候地址欄的URL大概是這樣：”<a href="https://www.douban.com/people/xxxxxx/">https://www.douban.com/people/xxxxxx/</a>“ ，其中的”xxxxxx”就是你的個人ID了</td></tr><tr><td>builtin</td><td>是否將生成頁面的功能嵌入<code>hexo s</code>和<code>hexo g</code>中，默認是<code>false</code>,另一可選項為<code>true</code>(1.x.x版本新增配置項)</td></tr><tr><td>title</td><td>該頁面的標題</td></tr><tr><td>quote</td><td>寫在頁面開頭的一段話,支持 html 語法.</td></tr><tr><td>timeout</td><td>【可選】爬取數據的超時時間，默認是 10000ms ,如果在使用時發現報了超時的錯(ETIMEOUT)可以把這個數據設置的大一點</td></tr><tr><td>meta</td><td>【可選】插入 <code>&lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;</code> 到頁面，可解決部分瀏覽器無法顯示豆瓣圖片的問題（會導致一些插件出錯，例如 不蒜子計數器。）</td></tr><tr><td>comments</td><td>【可選】是否顯示評論</td></tr><tr><td>top_img</td><td>【可選】是否顯示頂部圖</td></tr><tr><td>aside</td><td>【可選】是否顯示側邊欄</td></tr><tr><td>path</td><td>【可選】生成的網址<br />movie 頁面默認為 <code>//yourblog/movies</code><br />book 頁面默認為  <code>//yourblog/books</code> <br />game 頁面默認為 &#96;&#96;&#x2F;&#x2F;yourblog&#x2F;games&#96;</td></tr><tr><td>limit</td><td>【可選】限制爬取的頁數</td></tr></tbody></table><h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>部分還有很多套件沒有使用，之後可能還會修改章節內容，在這告一段落。<br>如果有想知道其他套件使用方式之類歡迎到下方留言。</p>]]></content>
      
      
      <categories>
          
          <category> 筆記 </category>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HEXO </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用 Hexo (二) - Theme Butterfly</title>
      <link href="/2021/12/02/HEXO/%E4%BD%BF%E7%94%A8%20Hexo%20(%E4%BA%8C)%20-%20Theme%20Butterfly/"/>
      <url>/2021/12/02/HEXO/%E4%BD%BF%E7%94%A8%20Hexo%20(%E4%BA%8C)%20-%20Theme%20Butterfly/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><a href="https://hexo.io/themes/">HEXO</a>官方網站中，有主題(<a href="https://hexo.io/themes/">theme</a>)項目可以自行選擇需要哪種主題。HEXO THEME 我選擇Butterfly，原因有幾個僅供參考。</p><ol><li>UI介面 : 乾淨、目錄標題選擇鍵、公告、留言板種類</li><li>文章可讀舒適度</li><li>擴充套件 : 音樂、影視、搜尋等。</li></ol><p>依據個人喜好、需求選擇自己喜歡的主題d&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;(￣▽￣*)b。</p><hr><h1 id="安裝-THEME"><a href="#安裝-THEME" class="headerlink" title="安裝 THEME"></a>安裝 THEME</h1><p>我們上一篇只有談到創建HEXO，接著安裝 Theme 可以選擇指令 <code>npm</code> 或是Git&#x2F;Github下載下來。</p><div class="note info flat"><p>如果你是用Clone下來，又想要push 到Github上，需要小心 .git 隱藏檔案。<br>可能造成會無法push的危機。</p></div><h2 id="Butterfly"><a href="#Butterfly" class="headerlink" title="Butterfly"></a><a href="https://github.com/jerryc127/hexo-theme-butterfly">Butterfly</a></h2><p>將下載好的theme把檔案放在themes資料夾底下。<br><img src="/img/Hexo/day_02_UseHexo/img-01.png"><br>當然可以增加不同的主題放在一起，如下圖。<br><img src="/img/Hexo/day_02_UseHexo/img-02.png"></p><p>下方提供 作者Blog以及Github載點: </p><ul><li>Jerry Blog: (<a href="https://butterfly.js.org/posts/21cfbf15/">https://butterfly.js.org/posts/21cfbf15/</a>)</li><li>Butterfly 詳細使用方式 : (<a href="https://butterfly.js.org/">https://butterfly.js.org/</a>)</li></ul><h2 id="config-yml"><a href="#config-yml" class="headerlink" title="_config.yml"></a>_config.yml</h2><p>config 通稱設定檔，在任何地方都不會太陌生。<br>設定位置會在外面的 _config.yml ，不會是在主題中的 _config.yml。<br><img src="/img/Hexo/day_02_UseHexo/img-02.png"></p><p>修改內容會是在最下方，也就是在 deploy 上一章提到。依據作者要求修改名稱key進theme即可。Example : <code>theme: butterfly</code> </p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Extensions</span></span><br><span class="line"><span class="comment">## Plugins: https://hexo.io/plugins/</span></span><br><span class="line"><span class="comment">## Themes: https://hexo.io/themes/</span></span><br><span class="line"><span class="attr">theme:</span> <span class="string">landscape</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h1 id="設定個人資訊"><a href="#設定個人資訊" class="headerlink" title="設定個人資訊"></a>設定個人資訊</h1><h2 id="網站名稱、個人名字設定"><a href="#網站名稱、個人名字設定" class="headerlink" title="網站名稱、個人名字設定"></a>網站名稱、個人名字設定</h2><p>設定位置通常會是 config.yml 最上方 ，設定那幾些主要設定名字外，會發現有keywords如果不太陌生的人可以解釋為關鍵詞，有關SEO問題此文就不再詳細說明。</p><p>此作者有添加zh-TW語言包，可以直接在這裏面輸入。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Hexo Configuration</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/configuration.html</span></span><br><span class="line"><span class="comment">## Source: https://github.com/hexojs/hexo/</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Site</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">Hexo</span> <span class="comment">#網頁名稱</span></span><br><span class="line"><span class="attr">subtitle:</span> <span class="string">&#x27;&#x27;</span> <span class="comment"># 網頁副標題</span></span><br><span class="line"><span class="attr">description:</span> <span class="string">&#x27;&#x27;</span> <span class="comment"># 描述</span></span><br><span class="line"><span class="attr">keywords:</span> <span class="comment">#關鍵詞</span></span><br><span class="line"><span class="attr">author:</span> <span class="string">John</span> <span class="string">Doe</span> <span class="comment">#作者</span></span><br><span class="line"><span class="attr">language:</span> <span class="string">en</span> <span class="comment">#語言</span></span><br><span class="line"><span class="attr">timezone:</span> <span class="string">&#x27;&#x27;</span> </span><br></pre></td></tr></table></figure><h2 id="主題設定"><a href="#主題設定" class="headerlink" title="主題設定"></a>主題設定</h2><p>主題設定請讀者先到themes&#x2F;_config.yml。</p><h3 id="aside-側邊欄"><a href="#aside-側邊欄" class="headerlink" title="aside (側邊欄)"></a>aside (側邊欄)</h3><p>側邊欄設定基本設定完後，就完成你初期Blog。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">aside:</span></span><br><span class="line"><span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line"> <span class="attr">hide:</span> <span class="literal">false</span></span><br><span class="line"> <span class="attr">button:</span> <span class="literal">true</span></span><br><span class="line"> <span class="attr">mobile:</span> <span class="literal">true</span> <span class="comment"># display on mobile</span></span><br><span class="line"> <span class="attr">position:</span> <span class="string">right</span> <span class="comment"># left or right</span></span><br><span class="line"> <span class="attr">card_author:</span></span><br><span class="line"> <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line"> <span class="attr">description:</span></span><br><span class="line"> <span class="attr">button:</span></span><br><span class="line"> <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line"> <span class="attr">icon:</span> <span class="string">fab</span> <span class="string">fa-github</span></span><br><span class="line"> <span class="attr">text:</span> <span class="string">Click</span> <span class="string">Follow</span></span><br><span class="line"> <span class="attr">link:</span> <span class="string">https://github.com/JontCont</span></span><br><span class="line"> <span class="attr">card_announcement:</span></span><br><span class="line"> <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">content:</span> <span class="string">歡迎來到我的Blog</span> <span class="string">，盡量在下方留言</span></span><br><span class="line"><span class="attr">card_recent_post:</span></span><br><span class="line"> <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line"> <span class="attr">limit:</span> <span class="number">5</span> <span class="comment"># if set 0 will show all</span></span><br><span class="line"> <span class="attr">sort:</span> <span class="string">date</span> <span class="comment"># date or updated</span></span><br><span class="line"> <span class="attr">sort_order:</span> <span class="comment"># Don&#x27;t modify the setting unless you know how it works</span></span><br><span class="line"> <span class="attr">card_categories:</span></span><br><span class="line"> <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line"> <span class="attr">limit:</span> <span class="number">8</span> <span class="comment"># if set 0 will show all</span></span><br><span class="line"> <span class="attr">expand:</span> <span class="string">none</span> <span class="comment"># none/true/false</span></span><br><span class="line"> <span class="attr">sort_order:</span> <span class="comment"># Don&#x27;t modify the setting unless you know how it works</span></span><br><span class="line"> <span class="attr">card_tags:</span></span><br><span class="line"> <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line"> <span class="attr">limit:</span> <span class="number">40</span> <span class="comment"># if set 0 will show all</span></span><br><span class="line"> <span class="attr">color:</span> <span class="literal">false</span></span><br><span class="line"> <span class="attr">sort_order:</span> <span class="comment"># Don&#x27;t modify the setting unless you know how it works</span></span><br><span class="line"> <span class="attr">card_archives:</span></span><br><span class="line"> <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line"> <span class="attr">type:</span> <span class="string">monthly</span> <span class="comment"># yearly or monthly</span></span><br><span class="line"> <span class="attr">format:</span> <span class="string">MMMM</span> <span class="string">YYYY</span> <span class="comment"># eg: YYYY年MM月</span></span><br><span class="line"> <span class="attr">order:</span> <span class="number">-1</span> <span class="comment"># Sort of order. 1, asc for ascending; -1, desc for descending</span></span><br><span class="line"> <span class="attr">limit:</span> <span class="number">6</span> <span class="comment"># if set 0 will show all</span></span><br><span class="line"> <span class="attr">sort_order:</span> <span class="comment"># Don&#x27;t modify the setting unless you know how it works</span></span><br><span class="line"> <span class="attr">card_webinfo:</span></span><br><span class="line"> <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line"> <span class="attr">post_count:</span> <span class="literal">true</span></span><br><span class="line"> <span class="attr">last_push_date:</span> <span class="literal">true</span></span><br><span class="line"> <span class="attr">sort_order:</span> <span class="comment"># Don&#x27;t modify the setting unless you know how it works</span></span><br></pre></td></tr></table></figure><p>更詳細安裝說明，請至作者 Blog 設定 (<a href="https://butterfly.js.org/posts/21cfbf15/#%E5%AE%89%E8%A3%9D">https://butterfly.js.org/posts/21cfbf15/#%E5%AE%89%E8%A3%9D</a>)</p><h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>前面設定主題通常不會遇到任何問題，後面建起頁面、套件設定後發現還有很長的路，設定中不斷被吹殘。下一篇會結束 Hexo 章節，將GitBook文章建立在這裏面o(≧∀≦)o。</p>]]></content>
      
      
      <categories>
          
          <category> 筆記 </category>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HEXO </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用 Hexo (一) - 創建 Hexo</title>
      <link href="/2021/12/01/HEXO/%E4%BD%BF%E7%94%A8%20Hexo%20(%E4%B8%80)%20-%20%E5%89%B5%E5%BB%BA%20Hexo/"/>
      <url>/2021/12/01/HEXO/%E4%BD%BF%E7%94%A8%20Hexo%20(%E4%B8%80)%20-%20%E5%89%B5%E5%BB%BA%20Hexo/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>前幾周 GitBook 改版，擔心會變成FaceBook 、Instagram 一樣當機不能使用，我再次挑戰GitHub Page 製作 Blog。這次不會是從零到成品，使用工具會在下方提供，再請各位多多支持。</p><h3 id="何謂Hexo"><a href="#何謂Hexo" class="headerlink" title="何謂Hexo"></a>何謂Hexo</h3><p>Hexo 是基於 Node.js 開發架框，有利於快速建立Blog，如以下特點 :</p><ul><li>編譯速度快</li><li>支援 Markdown 語法解析文章，可使用主題渲染靜態檔案</li><li>豐富的外掛套件</li><li>支援一鍵部署到靜態網頁的空間，如: GitHub Pages 、Heroku</li></ul><hr><h1 id="使用工具"><a href="#使用工具" class="headerlink" title="使用工具"></a>使用工具</h1><h2 id="一、Node-js"><a href="#一、Node-js" class="headerlink" title="一、Node.js"></a>一、<a href="https://nodejs.org/zh-tw/download/">Node.js</a></h2><p><strong>Node.js</strong> 是能夠在伺服器端運行 JavaScript的開放原始碼、跨平台執行環境。Node.js 由 OpenJS Foundation（原為 Node.js Foundation，已與 JS Foundation 合併）持有和維護。Node.js 採用Google開發執行程式碼，使用事件驅動、非阻塞和非同步輸入輸出模型等技術來提高效能，可優化應用程式的傳輸量和規模。</p><h2 id="二、Git"><a href="#二、Git" class="headerlink" title="二、Git"></a>二、<a href="https://git-scm.com/">Git</a></h2><p><strong>git</strong>是一個分散式版本控制軟體，，於2005年以GPL釋出。最初目的是為更好地管理Linux核心開發而設計。應注意的是，這與GNU Interactive Tools（一個類似Norton Commander 介面的檔案管理器）不同。</p><hr><h1 id="安裝Hexo"><a href="#安裝Hexo" class="headerlink" title="安裝Hexo"></a>安裝Hexo</h1><ol><li>安裝Hexo</li></ol><p>按照官方網去執行指令即可，如下:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-cli -g</span><br><span class="line">$ hexo init &lt;資料夾名稱&gt;</span><br><span class="line">$ <span class="built_in">cd</span> &lt;資料夾名稱&gt;</span><br><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><div class="note info flat"><p>hexo init 是初化 Hexo (建立Hexo)。</p></div><p>安裝完成後，進入資料夾會看到下方這些檔案和資料夾：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── _config.yml</span><br><span class="line">├── package.json</span><br><span class="line">├── scaffolds</span><br><span class="line">├── <span class="built_in">source</span></span><br><span class="line">|   ├── _drafts</span><br><span class="line">|   └── _posts</span><br><span class="line">└── themes</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Hexo-檔案介紹"><a href="#Hexo-檔案介紹" class="headerlink" title="Hexo 檔案介紹"></a>Hexo 檔案介紹</h2><h3 id="一、-config-yml"><a href="#一、-config-yml" class="headerlink" title="一、 _config.yml"></a>一、 _config.yml</h3><ul><li>有關網站配置的檔案，可修改各種配置設定。例如：網站標題、網站的網址、使用主題名稱等等</li><li>詳細內容可以參考<a href="https://hexo.io/zh-tw/docs/configuration">官方文件</a></li></ul><h3 id="二、package-json"><a href="#二、package-json" class="headerlink" title="二、package.json"></a>二、package.json</h3><ul><li>記錄所有載入的應用程式資料，也就是專案中需要的所有模組。</li></ul><h3 id="三、scaffolds-模板"><a href="#三、scaffolds-模板" class="headerlink" title="三、scaffolds 模板"></a>三、scaffolds 模板</h3><ul><li>當我們建立新文章時，Hexo 會根據 scaffolds 中的模板建立相對應的檔案</li><li>資料夾中有三種預設<a href="https://hexo.io/zh-tw/docs/writing.html">佈局</a>：post、page 和 draft，分別對應：要發布的文章、頁面、草稿</li></ul><h3 id="四、themes-主題"><a href="#四、themes-主題" class="headerlink" title="四、themes 主題"></a>四、themes 主題</h3><ul><li>用來存放主題的資料夾</li><li>Hexo 會根據主題來解析 scouce 資料夾中的檔案並產生靜態頁面。預設主題為 <a href="https://github.com/hexojs/hexo-theme-landscape">landscape</a></li></ul><h3 id="五、source-資源"><a href="#五、source-資源" class="headerlink" title="五、source 資源"></a>五、source 資源</h3><ul><li>用來存放原始檔案的地方，例如 Markdown 檔、圖片、各種頁面（分頁、關於等）</li><li>通常資料夾命名開頭會加上底線 <code>_</code>，例如 <code>_imgs</code></li><li>以 <code>_</code> 開頭的檔案、資料夾或隱藏檔案會被忽略，除了 <code>_posts</code> 資料夾以外</li><li>Markdown 檔和 HTML 檔會被解析，並放到 public 資料夾，而其他檔案則會被拷貝過去</li></ul><h3 id="六、source-public-deploy-git-的差別"><a href="#六、source-public-deploy-git-的差別" class="headerlink" title="六、source &amp; public &amp; .deploy_git 的差別"></a>六、source &amp; public &amp; .deploy_git 的差別</h3><ul><li>執行 <code>$ hexo generate</code> 之後，會將 scorce 文件夾中的 Markdown 檔和 HTML 檔進行解析，再結合主題進行渲染，生成我們看到的靜態網站</li><li>執行 <code>$ hexo deploy</code> 之後，則會將 public 文件夾中的內容部署到 GitHub，並生成 .deploy_git 資料夾，因此內容與 public 幾乎相同</li><li>這三者的關係可想成： source -&gt; public -&gt; .deploy_git</li></ul><hr><h1 id="部署到-GitHub"><a href="#部署到-GitHub" class="headerlink" title="部署到 GitHub"></a>部署到 GitHub</h1><h2 id="建立-GitHub-專案"><a href="#建立-GitHub-專案" class="headerlink" title="建立 GitHub 專案"></a>建立 GitHub 專案</h2><p>建立GitHub 專案，請先註冊 <a href="https://github.com/">GitHub</a> 帳號並登入到左邊會有 New 的 Button 並按下。<br><img src="/img/Hexo/day_01_UseHexo/img-01.png"></p><p>GitHub創建條件必須要是**帳號加上(.github.io)**，範例 : [username].github.io，以上步驟就完成了。<br><img src="/img/Hexo/day_01_UseHexo/img-02.png"></p><hr><h1 id="Deloy-到-GitHub"><a href="#Deloy-到-GitHub" class="headerlink" title="Deloy 到 GitHub"></a>Deloy 到 GitHub</h1><p>回到 Hexo 資料夾，打開 <code>_config.yml</code>後，移至最下方輸入以下內容:<br>repo-url 必須要貼上完整路徑。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy</span>:</span><br><span class="line"> <span class="attr">type</span>: git</span><br><span class="line"> <span class="attr">repo</span>: &lt;repo-url&gt;</span><br><span class="line"> <span class="attr">branch</span>: main</span><br></pre></td></tr></table></figure><p>請先確認 repo 網址，範例 : </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/&lt;username&gt;/&lt;username&gt;.github.io</span><br></pre></td></tr></table></figure><h2 id="package-json"><a href="#package-json" class="headerlink" title="package.json"></a>package.json</h2><p>如果沒看到 package 一定要把它初始化 <code>npm init</code>。<br>打開 package後，一定要自行輸入 <code>&quot;all&quot;: &quot;hexo cl &amp;&amp; hexo g -d &quot;</code>，可以快速清除檔案、建置Hexo。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line"><span class="string">&quot;build&quot;</span>: <span class="string">&quot;hexo generate&quot;</span>,</span><br><span class="line"><span class="string">&quot;clean&quot;</span>: <span class="string">&quot;hexo clean&quot;</span>,</span><br><span class="line"><span class="string">&quot;deploy&quot;</span>: <span class="string">&quot;hexo deploy&quot;</span>,</span><br><span class="line"><span class="string">&quot;server&quot;</span>: <span class="string">&quot;hexo server&quot;</span>,</span><br><span class="line"><span class="string">&quot;all&quot;</span>: <span class="string">&quot;hexo cl &amp;&amp; hexo g -d &quot;</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h3 id="如何執行-scprits"><a href="#如何執行-scprits" class="headerlink" title="如何執行 scprits"></a>如何執行 scprits</h3><p>只要在命令字元輸入 <code>npm run all </code>即可。</p><h3 id="執行時有錯誤訊息-not-found-git"><a href="#執行時有錯誤訊息-not-found-git" class="headerlink" title="執行時有錯誤訊息: not found git"></a>執行時有錯誤訊息: not found git</h3><p>那如果有<code>ERROR Deployer not found: git </code>，表示你沒安裝hexo-deployer-git 套件，請自行輸入以下指令。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-deployer-git --save</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>這篇主要是快速建立環境讓Hexo可以運行畫面，下一章節會開始使用 thame ，快速建立Blog 畫面，請各位小力鞭打我（＾∀＾●）ﾉｼ。</p>]]></content>
      
      
      <categories>
          
          <category> 筆記 </category>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HEXO </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Electron (一) - 安裝 MVC Core 設定</title>
      <link href="/2021/10/20/%E5%BE%8C%E7%AB%AF%E6%8A%80%E8%A1%93/CS/NetCore/Core_04_Electron_01/"/>
      <url>/2021/10/20/%E5%BE%8C%E7%AB%AF%E6%8A%80%E8%A1%93/CS/NetCore/Core_04_Electron_01/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Electron 是近年來有比較多人使用的架框，最大原因是在 Winform 跨平台上無法使用，因此誕生 Electron架框。</p><p>這是目前為止是Winform替代方案，後續再做相關範例。</p><hr><h1 id="Electron-介紹"><a href="#Electron-介紹" class="headerlink" title="Electron 介紹"></a>Electron 介紹</h1><p>Electron（原名為Atom Shell）是GitHub開發的一個開源框架。它通過使用Node.js（作為後端）和Chromium的彩現引擎（作為前端）完成跨平台的桌面GUI應用程式的開發。Electron現已被多個開源Web應用程式用於前端與後端的開發，著名專案包括GitHub的Atom和微軟的Visual Studio Code。</p><p>一個基礎的Electron包含三個檔案：package.json（元資料）、main.js（代碼）和index.html（圖形化使用者介面）。框架由Electron可執行檔（Windows中為electron.exe、macOS中為electron.app、Linux中為electron）提供。開發者可以自行添加標誌、自訂圖示、重新命名或編輯Electron可執行檔。</p><p>-取用於<a href="https://zh.wikipedia.org/wiki/Electron">維基百科</a></p><hr><h1 id="安裝Electron"><a href="#安裝Electron" class="headerlink" title="安裝Electron"></a>安裝Electron</h1><h2 id="一、創建專案"><a href="#一、創建專案" class="headerlink" title="一、創建專案"></a>一、創建專案</h2><p>Electron 原本沒有想過說用 MVC架框使用，因為需要遷入DLL檔案逼不得已需要用到c#撰寫。<br>如何安裝環境，請打開各位的 VS2019 或是 VS2022 都可以進行，切記按下[ ASP.NET  Core Web ]。</p><p><img src="/img/dotnet/Electron/01.jpg"></p><p>驗證類型自行考量後續發展進行勾選。<br><img src="/img/dotnet/Electron/02.jpg"></p><h2 id="二、新增套件-NuGet"><a href="#二、新增套件-NuGet" class="headerlink" title="二、新增套件 ( NuGet )"></a>二、新增套件 ( NuGet )</h2><p>對此專案按下右鍵並選擇管理 NuGet 套件選項。記得搜尋Electron。<br>找到ElectronNet.Api 並下載他。<br><img src="/img/dotnet/Electron/03.jpg"><br><img src="/img/dotnet/Electron/04.jpg"></p><h2 id="三、設定環境"><a href="#三、設定環境" class="headerlink" title="三、設定環境"></a>三、設定環境</h2><p>設定環境有兩個地方。依據下方範例新增上去。</p><ol><li>Program.cs<figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Program.cs</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> IHostBuilder <span class="title">CreateHostBuilder</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span> =&gt;</span><br><span class="line">  Host.CreateDefaultBuilder(args)</span><br><span class="line">  .ConfigureWebHostDefaults(webBuilder =&gt;</span><br><span class="line">  &#123;</span><br><span class="line">      <span class="comment">//需新增</span></span><br><span class="line">      webBuilder.UseElectron(args); </span><br><span class="line">      webBuilder.UseStartup&lt;Startup&gt;();</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure></li><li>Startup.cs<figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Startup.cs</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Configure</span>(<span class="params">IApplicationBuilder app, IWebHostEnvironment env</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">  ...</span><br><span class="line">  ...</span><br><span class="line">  <span class="comment">//需新增</span></span><br><span class="line">  Task.Run(<span class="keyword">async</span> () =&gt; <span class="keyword">await</span> Electron.WindowManager.CreateWindowAsync());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/img/dotnet/Electron/05.jpg"><br><img src="/img/dotnet/Electron/06.jpg"></li></ol><h2 id="四、初始化-Electronize"><a href="#四、初始化-Electronize" class="headerlink" title="四、初始化 Electronize"></a>四、初始化 Electronize</h2><p>請到 powershell 視窗輸入 <code>dotnet tool install ElectronNET.CLI -g</code> ，就會進行安裝 electronize 指令。<br><img src="/img/dotnet/Electron/07.jpg"><br>這是 electronize 指令內容，請各位參閱。<br><img src="/img/dotnet/Electron/08.jpg"></p><p>如果直接輸入<code>electronize init</code>突然報錯誤怎麼辦。<br><img src="/img/dotnet/Electron/09.jpg"></p><p>最大原因是路徑問題，<code>dir</code> 查看專案目前在哪個路徑。因為它不再真正的source路徑，所以引發路徑錯誤問題。<del>只要將cd 進入下一層即可</del>。<br><img src="/img/dotnet/Electron/10.jpg"><br><img src="/img/dotnet/Electron/11.jpg"></p><h2 id="五、執行"><a href="#五、執行" class="headerlink" title="五、執行"></a>五、執行</h2><p>安裝完畢之後， 輸入最後指令 <code> electronize start</code> 就完成 mvc + electronize環境。<br><img src="/img/dotnet/Electron/12.jpg"></p><hr><h1 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h1><p>這次補齊 Electron 環境設定，後續請讀者可以依據這裡面簡單範例產出環境。從winForm轉到 Electron 多少會不太適應，但能達到[ 網頁+form ]可以對客戶需求簡單調整。這篇文章告一段落後續開始準備撰寫 ReactJS。</p>]]></content>
      
      
      <categories>
          
          <category> 後端技術 </category>
          
          <category> C# </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
            <tag> MVC </tag>
            
            <tag> Core </tag>
            
            <tag> Electron </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C# Asp.Net Global (1) -(筆記) Global.asax 事件方法清單</title>
      <link href="/2021/09/01/%E5%BE%8C%E7%AB%AF%E6%8A%80%E8%A1%93/CS/NetFramework/NF_03_AspNet_Global/"/>
      <url>/2021/09/01/%E5%BE%8C%E7%AB%AF%E6%8A%80%E8%A1%93/CS/NetFramework/NF_03_AspNet_Global/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在沒有.net core 環境，asp.net 其實有個 Global.asax 檔案。這檔案具有繼承 <code>HttpApplication</code>類，如果遇到controller 要統計、或是清除catch 從這邊排除是其中的選擇。</p><h1 id="Global-asax"><a href="#Global-asax" class="headerlink" title="Global.asax"></a>Global.asax</h1><p>Global.asax 位於應用程式根目錄下。ASP.NET 頁面框架能夠自動識別出對Global.asax 檔案所做的任何更改。在 Global.asax 被更改後ASP.NET 頁面框架會重新啟動應用程式，包括關閉所有的瀏覽器會話，去除所有狀態資訊，並重新啟動應用程式域。</p><h2 id="提供事件"><a href="#提供事件" class="headerlink" title="提供事件"></a>提供事件</h2><table><thead><tr><th>事件方法</th><th>事件說明</th></tr></thead><tbody><tr><td>Application_Init</td><td>在應用程式被例項化或第一次被呼叫時，該事件被觸發。對於所有的HttpApplication 物件例項，它都會被呼叫。</td></tr><tr><td>Application_Disposed</td><td>在應用程式被銷燬之前觸發。這是清除以前所用資源的理想位置。</td></tr><tr><td>Application_Error</td><td>當應用程式中遇到一個未處理的異常時，該事件被觸發。</td></tr><tr><td>Application_Start</td><td>在HttpApplication 類的第一個例項被建立時，該事件被觸發。它允許你建立可以由所有HttpApplication 例項訪問的物件。</td></tr><tr><td>Application_End</td><td>在HttpApplication 類的最後一個例項被銷燬時，該事件被觸發。在一個應用程式的生命週期內它只被觸發一次。</td></tr><tr><td>Application_BeginRequest</td><td>在接收到一個應用程式請求時觸發。對於一個請求來說，它是第一個被觸發的事件，請求一般是使用者輸入的一個頁面請求（URL）。</td></tr><tr><td>Application_EndRequest</td><td>針對應用程式請求的最後一個事件。</td></tr><tr><td>Application_PreRequestHandlerExecute</td><td>在 ASP.NET 頁面框架開始執行諸如頁面或 Web 服務之類的事件處理程式之前，該事件被觸發。</td></tr><tr><td>Application_PostRequestHandlerExecute</td><td>在 ASP.NET 頁面框架結束執行一個事件處理程式時，該事件被觸發。</td></tr><tr><td>Applcation_PreSendRequestHeaders</td><td>在 ASP.NET 頁面框架傳送 HTTP 頭給請求客戶（瀏覽器）時，該事件被觸發。</td></tr><tr><td>Application_PreSendContent</td><td>在 ASP.NET 頁面框架傳送內容給請求客戶（瀏覽器）時，該事件被觸發。</td></tr><tr><td>Application_AcquireRequestState</td><td>在 ASP.NET 頁面框架得到與當前請求相關的當前狀態（Session 狀態）時，該事件被觸發。</td></tr><tr><td>Application_ReleaseRequestState</td><td>在 ASP.NET 頁面框架執行完所有的事件處理程式時，該事件被觸發。這將導致所有的狀態模組儲存它們當前的狀態資料。</td></tr><tr><td>Application_ResolveRequestCache</td><td>在 ASP.NET 頁面框架完成一個授權請求時，該事件被觸發。它允許快取模組從快取中為請求提供服務，從而繞過事件處理程式的執行。</td></tr><tr><td>Application_UpdateRequestCache</td><td>在 ASP.NET 頁面框架完成事件處理程式的執行時，該事件被觸發，從而使快取模組儲存響應資料，以供響應後續的請求時使用。</td></tr><tr><td>Application_AuthenticateRequest</td><td>在安全模組建立起當前使用者的有效的身份時，該事件被觸發。在這個時候，使用者的憑據將會被驗證。</td></tr><tr><td>Application_AuthorizeRequest</td><td>當安全模組確認一個使用者可以訪問資源之後，該事件被觸發。</td></tr><tr><td>Session_Start</td><td>在一個新使用者訪問應用程式 Web 站點時，該事件被觸發。</td></tr><tr><td>Session_End</td><td>在一個使+A1:B20用者的會話超時、結束或他們離開應用程式 Web 站點時，該事件被觸發。</td></tr></tbody></table><h2 id="參考文件"><a href="#參考文件" class="headerlink" title="參考文件"></a>參考文件</h2><ul><li><a href="https://coolmandiary.blogspot.com/2020/11/aspnetglobalasax.html">[ASP.NET]Global.asax事件筆記_實際應用例子_停用 TLS 1.0_檔案上傳大小頁面跳轉_錯誤紀錄處理</a></li><li><a href="https://www.c-sharpcorner.com/uploadfile/aa04e6/major-events-in-global-asax-file/">Major Events in GLOBAL.ASAX file</a></li><li><a href="https://codertw.com/%E5%89%8D%E7%AB%AF%E9%96%8B%E7%99%BC/266541/">ASP.NET Global.asax應用程式檔案簡介</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 後端技術 </category>
          
          <category> C# </category>
          
          <category> Global </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
            <tag> VSC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C# Asp.Net Global (2) - 使用 Global.asax 清除 cache 以及 controller 管控</title>
      <link href="/2021/09/01/%E5%BE%8C%E7%AB%AF%E6%8A%80%E8%A1%93/CS/NetFramework/NF_04_AspNet_Global/"/>
      <url>/2021/09/01/%E5%BE%8C%E7%AB%AF%E6%8A%80%E8%A1%93/CS/NetFramework/NF_04_AspNet_Global/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>配合上一張function 清單，可以得知很多 Global 能用的事件方法，這篇排除cache 問題以及好用的方法。</p><h1 id="Global-asax"><a href="#Global-asax" class="headerlink" title="Global.asax"></a>Global.asax</h1><h2 id="提供事件"><a href="#提供事件" class="headerlink" title="提供事件"></a>提供事件</h2><p>筆者留事件function給各位讀者們參閱，請配合這個表格。</p><table><thead><tr><th>事件方法</th><th>事件說明</th></tr></thead><tbody><tr><td>Application_Init</td><td>在應用程式被例項化或第一次被呼叫時，該事件被觸發。對於所有的HttpApplication 物件例項，它都會被呼叫。</td></tr><tr><td>Application_Disposed</td><td>在應用程式被銷燬之前觸發。這是清除以前所用資源的理想位置。</td></tr><tr><td>Application_Error</td><td>當應用程式中遇到一個未處理的異常時，該事件被觸發。</td></tr><tr><td>Application_Start</td><td>在HttpApplication 類的第一個例項被建立時，該事件被觸發。它允許你建立可以由所有HttpApplication 例項訪問的物件。</td></tr><tr><td>Application_End</td><td>在HttpApplication 類的最後一個例項被銷燬時，該事件被觸發。在一個應用程式的生命週期內它只被觸發一次。</td></tr><tr><td>Application_BeginRequest</td><td>在接收到一個應用程式請求時觸發。對於一個請求來說，它是第一個被觸發的事件，請求一般是使用者輸入的一個頁面請求（URL）。</td></tr><tr><td>Application_EndRequest</td><td>針對應用程式請求的最後一個事件。</td></tr><tr><td>Application_PreRequestHandlerExecute</td><td>在 ASP.NET 頁面框架開始執行諸如頁面或 Web 服務之類的事件處理程式之前，該事件被觸發。</td></tr><tr><td>Application_PostRequestHandlerExecute</td><td>在 ASP.NET 頁面框架結束執行一個事件處理程式時，該事件被觸發。</td></tr><tr><td>Applcation_PreSendRequestHeaders</td><td>在 ASP.NET 頁面框架傳送 HTTP 頭給請求客戶（瀏覽器）時，該事件被觸發。</td></tr><tr><td>Application_PreSendContent</td><td>在 ASP.NET 頁面框架傳送內容給請求客戶（瀏覽器）時，該事件被觸發。</td></tr><tr><td>Application_AcquireRequestState</td><td>在 ASP.NET 頁面框架得到與當前請求相關的當前狀態（Session 狀態）時，該事件被觸發。</td></tr><tr><td>Application_ReleaseRequestState</td><td>在 ASP.NET 頁面框架執行完所有的事件處理程式時，該事件被觸發。這將導致所有的狀態模組儲存它們當前的狀態資料。</td></tr><tr><td>Application_ResolveRequestCache</td><td>在 ASP.NET 頁面框架完成一個授權請求時，該事件被觸發。它允許快取模組從快取中為請求提供服務，從而繞過事件處理程式的執行。</td></tr><tr><td>Application_UpdateRequestCache</td><td>在 ASP.NET 頁面框架完成事件處理程式的執行時，該事件被觸發，從而使快取模組儲存響應資料，以供響應後續的請求時使用。</td></tr><tr><td>Application_AuthenticateRequest</td><td>在安全模組建立起當前使用者的有效的身份時，該事件被觸發。在這個時候，使用者的憑據將會被驗證。</td></tr><tr><td>Application_AuthorizeRequest</td><td>當安全模組確認一個使用者可以訪問資源之後，該事件被觸發。</td></tr><tr><td>Session_Start</td><td>在一個新使用者訪問應用程式 Web 站點時，該事件被觸發。</td></tr><tr><td>Session_End</td><td>在一個使+A1:B20用者的會話超時、結束或他們離開應用程式 Web 站點時，該事件被觸發。</td></tr></tbody></table><h2 id="清除-cache"><a href="#清除-cache" class="headerlink" title="清除 cache"></a>清除 cache</h2><p>要清除每一個 Action 最快方式從 Application_AcquireRequestState 加入設定檔案，發生 cache 最可怕是登入後上一頁可以看到原有的模樣，排除cache可以參考下方寫法:</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">Application_AcquireRequestState</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//取消Cache</span></span><br><span class="line">    httpContext.Response.Cache.SetCacheability(HttpCacheability.NoCache);</span><br><span class="line">    httpContext.Response.Cache.AppendCacheExtension(<span class="string">&quot;no-store, must-revalidate&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="controller-管控"><a href="#controller-管控" class="headerlink" title="controller 管控"></a>controller 管控</h2><p>從上方案例可以得知，每一個action 都會有成功清除cache ，如果再延伸應用就會像是 controller管控。</p><p>控管方式相對簡單，每一隻帳號都會有特定功能權限，選擇能前往的pages 當如果有人強行載入pages 就會需要把他導回<del>正途(誤)</del>。<br>導回方式</p><ul><li>錯誤訊息</li><li>固定首頁</li><li>提示視窗</li></ul><p>下方提供參考寫法，請各位自行參閱:</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">Application_AcquireRequestState</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> httpContext = ((MvcApplication)sender).Context;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//取得Route資訊</span></span><br><span class="line">    <span class="keyword">var</span> currentRouteData = RouteTable.Routes.GetRouteData(<span class="keyword">new</span> HttpContextWrapper(httpContext));<span class="comment">//目的: httpContext 轉換到 HttpContextBase </span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//檢查身分</span></span><br><span class="line">    <span class="built_in">string</span> currentController = Get_ControllerOrActionName(currentRouteData, <span class="string">&quot;Controller&quot;</span>); <span class="comment">//存放 controller 內容</span></span><br><span class="line">    <span class="built_in">string</span> currentAction = Get_ControllerOrActionName(currentRouteData, <span class="string">&quot;Action&quot;</span>); ; <span class="comment">//存放 action 內容</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*----- 處理判斷向下 ------*/</span></span><br><span class="line">    <span class="comment">/*----- 處理判斷向上 ------*/</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (currentController == <span class="string">&quot;Home&quot;</span> &amp;&amp; currentAction==<span class="string">&quot;Index&quot;</span> )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> routeData = <span class="keyword">new</span> RouteData();</span><br><span class="line">        routeData.Values[<span class="string">&quot;exception&quot;</span>] = <span class="literal">null</span>;</span><br><span class="line">        routeData.Values[<span class="string">&quot;controller&quot;</span>] = <span class="string">&quot;Error&quot;</span>;</span><br><span class="line">        routeData.Values[<span class="string">&quot;action&quot;</span>] = <span class="string">&quot;LoginNotFound&quot;</span>;</span><br><span class="line"></span><br><span class="line">        httpContext.ClearError();</span><br><span class="line">        httpContext.Response.Clear();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//取得errorController</span></span><br><span class="line">        IController errormanagerController = <span class="keyword">new</span> ErrorController();</span><br><span class="line">        HttpContextWrapper wrapper = <span class="keyword">new</span> HttpContextWrapper(httpContext);</span><br><span class="line">        <span class="keyword">var</span> rc = <span class="keyword">new</span> RequestContext(wrapper, routeData);</span><br><span class="line">        errormanagerController.Execute(rc);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="built_in">string</span> <span class="title">Get_ControllerOrActionName</span>(<span class="params">RouteData routeData, <span class="built_in">string</span> getName</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">string</span> resultName = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="comment">//暫存</span></span><br><span class="line">    <span class="keyword">if</span> (routeData != <span class="literal">null</span>)</span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">switch</span> (getName)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;Action&quot;</span>:</span><br><span class="line"></span><br><span class="line">                resultName = (routeData.Values[<span class="string">&quot;action&quot;</span>] != <span class="literal">null</span> &amp;&amp; !String.IsNullOrEmpty(routeData.Values[<span class="string">&quot;action&quot;</span>].ToString()))</span><br><span class="line">                        ? routeData.Values[<span class="string">&quot;action&quot;</span>].ToString()</span><br><span class="line">                        : <span class="string">&quot;&quot;</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;Controller&quot;</span>:</span><br><span class="line"></span><br><span class="line">                resultName = (routeData.Values[<span class="string">&quot;controller&quot;</span>] != <span class="literal">null</span> &amp;&amp; !String.IsNullOrEmpty(routeData.Values[<span class="string">&quot;controller&quot;</span>].ToString()))</span><br><span class="line">                        ? routeData.Values[<span class="string">&quot;controller&quot;</span>].ToString()</span><br><span class="line">                        : <span class="string">&quot;&quot;</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> resultName;</span><br><span class="line">&#125;<span class="comment">//Get_ControllerOrActionName</span></span><br></pre></td></tr></table></figure><h2 id="controller-管控注意事項"><a href="#controller-管控注意事項" class="headerlink" title="controller 管控注意事項"></a>controller 管控注意事項</h2><p>這並非萬能的功能，這function會連ajax 抓取都會抓上來，如果太頻繁呼叫也會對這段不太友善，解決方式有兩種 </p><ol><li>使用 attribute</li><li>排除指定controller ajax</li></ol><p>題外話: 很多時候ajax 自訂出 controller 需要自己歸納、編輯，但是這個功能會發現很多自定義的controller 無法掌控直接造成功能執行效果，</p><h2 id="參考文件"><a href="#參考文件" class="headerlink" title="參考文件"></a>參考文件</h2><ul><li><a href="https://coolmandiary.blogspot.com/2020/11/aspnetglobalasax.html">[ASP.NET]Global.asax事件筆記_實際應用例子_停用 TLS 1.0_檔案上傳大小頁面跳轉_錯誤紀錄處理</a></li><li><a href="https://www.c-sharpcorner.com/uploadfile/aa04e6/major-events-in-global-asax-file/">Major Events in GLOBAL.ASAX file</a></li><li><a href="https://codertw.com/%E5%89%8D%E7%AB%AF%E9%96%8B%E7%99%BC/266541/">ASP.NET Global.asax應用程式檔案簡介</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 後端技術 </category>
          
          <category> C# </category>
          
          <category> Global </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
            <tag> VSC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Sql Server - begin tran 使用方式</title>
      <link href="/2021/08/13/%E8%B3%87%E6%96%99%E5%BA%AB%E6%8A%80%E8%A1%93/SQL/Sql_10_begin_tran/"/>
      <url>/2021/08/13/%E8%B3%87%E6%96%99%E5%BA%AB%E6%8A%80%E8%A1%93/SQL/Sql_10_begin_tran/</url>
      
        <content type="html"><![CDATA[<p>T-SQL 平常使用都會直接 Update、Insert、Delet 之類動作，但是在很多時候會有不小心輸入錯誤的問題。平常如果再已經上線、正式使用資料庫時候非常建議BEGIN TRIN ，可以先確認完畢資料後再同步交期或是回復交期。</p><h2 id="BEGIN-TRANSACTION"><a href="#BEGIN-TRANSACTION" class="headerlink" title="BEGIN TRANSACTION"></a>BEGIN TRANSACTION</h2><p>使用方式:</p><ul><li>BEGIN TRANSACTION    : 開啟交期。輸入<code>BEING TRAN </code>即可。</li><li>COMMIT TRANSACTION   : 確認交期。輸入<code>COMMIT </code>即可。</li><li>ROLLBACK TRANSACTION : 回復交期。輸入<code>ROLLBACK </code>即可。</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">BEGIN</span> TRAN</span><br><span class="line"><span class="comment">/*--------執行動作------------*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--- ROLLBACK OR COMMIT 二選一</span></span><br><span class="line"><span class="keyword">COMMIT</span> </span><br><span class="line"><span class="comment">-- ROLLBACK</span></span><br></pre></td></tr></table></figure><p>實際執行動作。</p><ul><li>先用 SELECT 查看、Where 要更新的欄位</li><li>BEING TRAN 包覆 Insert 、Update 、 DELETE等</li><li>執行後，從SELECT 結果確認才執行 <code>COMMIT</code> 或是 <code>ROLLBACK</code></li></ul><h2 id="範例"><a href="#範例" class="headerlink" title="範例"></a>範例</h2><h3 id="創建Table"><a href="#創建Table" class="headerlink" title="創建Table"></a>創建Table</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SET</span> ANSI_NULLS <span class="keyword">ON</span></span><br><span class="line">GO</span><br><span class="line"></span><br><span class="line"><span class="keyword">SET</span> QUOTED_IDENTIFIER <span class="keyword">ON</span></span><br><span class="line">GO</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> [dbo].[AspNetRoleClaims](</span><br><span class="line">[Id] [<span class="type">int</span>] <span class="keyword">IDENTITY</span>(<span class="number">1</span>,<span class="number">1</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">[RoleId] [nvarchar](<span class="number">450</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">[ClaimType] [nvarchar](max) <span class="keyword">NULL</span>,</span><br><span class="line">[ClaimValue] [nvarchar](max) <span class="keyword">NULL</span>,</span><br><span class="line"> <span class="keyword">CONSTRAINT</span> [PK_AspNetRoleClaims] <span class="keyword">PRIMARY</span> KEY CLUSTERED </span><br><span class="line">(</span><br><span class="line">[Id] <span class="keyword">ASC</span></span><br><span class="line">)<span class="keyword">WITH</span> (PAD_INDEX <span class="operator">=</span> OFF, STATISTICS_NORECOMPUTE <span class="operator">=</span> OFF, IGNORE_DUP_KEY <span class="operator">=</span> OFF, ALLOW_ROW_LOCKS <span class="operator">=</span> <span class="keyword">ON</span>, ALLOW_PAGE_LOCKS <span class="operator">=</span> <span class="keyword">ON</span>, OPTIMIZE_FOR_SEQUENTIAL_KEY <span class="operator">=</span> OFF) <span class="keyword">ON</span> [<span class="keyword">PRIMARY</span>]</span><br><span class="line">) <span class="keyword">ON</span> [<span class="keyword">PRIMARY</span>] TEXTIMAGE_ON [<span class="keyword">PRIMARY</span>]</span><br><span class="line">GO</span><br></pre></td></tr></table></figure><h3 id="Insert"><a href="#Insert" class="headerlink" title="Insert"></a>Insert</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">BEGIN</span> TRAN</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> [dbo].[AspNetRoleClaims]</span><br><span class="line">           ([RoleId]</span><br><span class="line">           ,[ClaimType]</span><br><span class="line">           ,[ClaimValue])</span><br><span class="line">     <span class="keyword">VALUES</span></span><br><span class="line">           (<span class="string">&#x27;111&#x27;</span>,<span class="string">&#x27;222&#x27;</span>,<span class="string">&#x27;333&#x27;</span>)</span><br><span class="line">GO</span><br><span class="line"><span class="comment">--- ROLLBACK OR COMMIT 二選一</span></span><br><span class="line"><span class="keyword">ROLLBACK</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 資料庫技術 </category>
          
          <category> MS SQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Sql Server - try...catch 使用方式</title>
      <link href="/2021/08/10/%E8%B3%87%E6%96%99%E5%BA%AB%E6%8A%80%E8%A1%93/SQL/Sql_09_try_catch/"/>
      <url>/2021/08/10/%E8%B3%87%E6%96%99%E5%BA%AB%E6%8A%80%E8%A1%93/SQL/Sql_09_try_catch/</url>
      
        <content type="html"><![CDATA[<p>近期沒什麼時間撰寫 line notify 章節，先混混幾章來撐過這幾周。</p><h2 id="Try-Catch"><a href="#Try-Catch" class="headerlink" title="Try Catch"></a>Try Catch</h2><p>平常很寫程式不時會需要查看 Error 錯誤訊息，若在 SQL 上面也比較少人使用try catch。</p><h3 id="一、使用方式"><a href="#一、使用方式" class="headerlink" title="一、使用方式"></a>一、使用方式</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">begin</span> try</span><br><span class="line"><span class="comment">/*-------</span></span><br><span class="line"><span class="comment">  執行的SQL </span></span><br><span class="line"><span class="comment">--------*/</span></span><br><span class="line"><span class="keyword">end</span> try</span><br><span class="line"><span class="keyword">begin</span> catch </span><br><span class="line"><span class="comment">/*-------</span></span><br><span class="line"><span class="comment">  例外處理的SQL  </span></span><br><span class="line"><span class="comment">--------*/</span></span><br><span class="line"><span class="keyword">end</span> catch</span><br></pre></td></tr></table></figure><h3 id="二、範例"><a href="#二、範例" class="headerlink" title="二、範例"></a>二、範例</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">begin</span> try</span><br><span class="line">    <span class="keyword">select</span> <span class="number">1</span><span class="operator">/</span><span class="number">0</span></span><br><span class="line"><span class="keyword">end</span> try</span><br><span class="line"></span><br><span class="line"><span class="keyword">begin</span> catch</span><br><span class="line">    <span class="keyword">select</span> </span><br><span class="line">        ERROR_NUMBER() <span class="keyword">AS</span> Error_Number,</span><br><span class="line">        ERROR_SEVERITY() <span class="keyword">AS</span> Error_Severity,</span><br><span class="line">        ERROR_STATE() <span class="keyword">AS</span> Error_State,</span><br><span class="line">        ERROR_PROCEDURE() <span class="keyword">AS</span> Error_Procedure,</span><br><span class="line">        ERROR_LINE() <span class="keyword">as</span> Error_Line,</span><br><span class="line">        ERROR_MESSAGE() <span class="keyword">AS</span> Error_Message</span><br><span class="line"><span class="keyword">end</span> catch</span><br></pre></td></tr></table></figure><h2 id="參考文件"><a href="#參考文件" class="headerlink" title="參考文件"></a>參考文件</h2><ul><li><a href="https://learn.microsoft.com/zh-tw/sql/t-sql/functions/error-message-transact-sql?view=sql-server-ver16">Microsoft Transact-SQL</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 資料庫技術 </category>
          
          <category> SQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Sql Server - 無法連線到 WMI 提供者</title>
      <link href="/2021/08/08/%E8%B3%87%E6%96%99%E5%BA%AB%E6%8A%80%E8%A1%93/SQL/Sql_08_%E7%84%A1%E6%B3%95%E9%80%A3%E7%B7%9A%E5%88%B0WMI%E6%8F%90%E4%BE%9B%E8%80%85/"/>
      <url>/2021/08/08/%E8%B3%87%E6%96%99%E5%BA%AB%E6%8A%80%E8%A1%93/SQL/Sql_08_%E7%84%A1%E6%B3%95%E9%80%A3%E7%B7%9A%E5%88%B0WMI%E6%8F%90%E4%BE%9B%E8%80%85/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>近期處理SQL需要開放TCP，結過遇到打開 <code>sql configuration manager</code> 是完全打不開的狀態，讓我非常的錯愕。</p><blockquote><p>錯誤訊息:無法連線到 WMI 提供者。您沒有權限，或無法連上伺服器。請注意，您只能使用SQL Server組態管理員來管理SQL Server 2005 (含)以後版本的伺服器。命名空間無效[0x8004100e]</p></blockquote><p>遇到問題可能是有兩個版本造成打開組態管理員造成的錯誤，目前微軟解釋處理方式到目前還是豈不了作用，因此使用幾個步驟來排除這問題。</p><h2 id="一、-找到-SQL-Server-資料夾"><a href="#一、-找到-SQL-Server-資料夾" class="headerlink" title="一、 找到 SQL Server 資料夾"></a>一、 找到 SQL Server 資料夾</h2><p>目標位置 : <code>C:\Program Files (x86)\Microsoft SQL Server\</code><br>解決方式會是如果你是使用最新的SSMS目前版本 <code>15.0.18384.0</code>請選擇 <code>150</code>資料夾並移動至<code>C:\Program Files (x86)\Microsoft SQL Server\150\Shared\sqlmgmproviderxpsp2up.mof</code>。</p><h2 id="二、-Terminal-指令"><a href="#二、-Terminal-指令" class="headerlink" title="二、 Terminal 指令"></a>二、 Terminal 指令</h2><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mofcomp &quot;C:\Program Files (x86)\Microsoft SQL Server\<span class="number">150</span>\Shared\sqlmgmproviderxpsp2up.mof&quot;</span><br></pre></td></tr></table></figure><p>這邊指令一定要開啟 <em>系統管理員身分</em> 才能有效開啟這功能。目前解決後就可以順利打開 <code>sql configuration manager</code> 😂😂😂。</p><h2 id="三、-參考文件"><a href="#三、-參考文件" class="headerlink" title="三、 參考文件"></a>三、 參考文件</h2><ol><li>無法連線到 WMI 提供者。您沒有權限，或無法連上伺服器 : <a href="https://dotblogs.com.tw/lanlith/2020/06/21/121250">https://dotblogs.com.tw/lanlith/2020/06/21/121250</a></li><li>Microsoft 當您在 SQL Server 中開啟SQL Server 組態管理員時發生錯誤訊息 : <a href="https://docs.microsoft.com/zh-TW/troubleshoot/sql/tools/error-message-when-you-open-configuration-manager">https://docs.microsoft.com/zh-TW/troubleshoot/sql/tools/error-message-when-you-open-configuration-manager</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 資料庫技術 </category>
          
          <category> MS SQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Sql Server - 還原資料庫發生錯誤 &quot;無法獲得獨佔存取權,因為資料庫正在使用中&quot;</title>
      <link href="/2021/08/07/%E8%B3%87%E6%96%99%E5%BA%AB%E6%8A%80%E8%A1%93/SQL/sql_07_%E5%9B%A0%E7%82%BA%E8%B3%87%E6%96%99%E5%BA%AB%E6%AD%A3%E5%9C%A8%E4%BD%BF%E7%94%A8%E4%B8%AD/"/>
      <url>/2021/08/07/%E8%B3%87%E6%96%99%E5%BA%AB%E6%8A%80%E8%A1%93/SQL/sql_07_%E5%9B%A0%E7%82%BA%E8%B3%87%E6%96%99%E5%BA%AB%E6%AD%A3%E5%9C%A8%E4%BD%BF%E7%94%A8%E4%B8%AD/</url>
      
        <content type="html"><![CDATA[<p>Sql Server 資料庫使用上，逃不了需要還原資料庫這個動作，時常遇到很多人回答怎樣解決 “無法獲得獨佔存取權,因為資料庫正在使用中”的問題。這邊會說明我常用的幾的動作 (P.S. 本章節有重新改寫，若有其他疑問歡迎到下方發問)。</p><h1 id="“無法獲得獨佔存取權-因為資料庫正在使用中”"><a href="#“無法獲得獨佔存取權-因為資料庫正在使用中”" class="headerlink" title="“無法獲得獨佔存取權,因為資料庫正在使用中”"></a>“無法獲得獨佔存取權,因為資料庫正在使用中”</h1><p>期初通常遇到可能是這個DB有人在使用或是自己有下語法造成，依據解決方式有三種依據評估自行操作。</p><p><img src="/img/SQL/sql_sp_who/Snipaste_2022-09-09_09-11-13.png"></p><h2 id="一、離線工作"><a href="#一、離線工作" class="headerlink" title="一、離線工作"></a>一、離線工作</h2><p>離線工作部分，是最簡單、也是暴力的處理方式之一。位置於 “[DataBase]” &gt; 工作 &gt; 離線工作(T)。<br><img src="/img/SQL/sql_sp_who/Snipaste_2022-09-09_09-27-07.png"></p><h2 id="二、活動監視器"><a href="#二、活動監視器" class="headerlink" title="二、活動監視器"></a>二、活動監視器</h2><p>SQL Server 有提供 <code>活動監視器</code>功能，操作上只需要點選處理器並找到對應位置關閉即可。<br><img src="/img/SQL/sql_sp_who/Snipaste_2022-09-09_09-12-16.png"><br><img src="/img/SQL/sql_sp_who/Snipaste_2022-09-09_09-14-37.png"></p><h2 id="三、指令"><a href="#三、指令" class="headerlink" title="三、指令"></a>三、指令</h2><p>指令部分有分兩種語法，依據個人喜好做使用。</p><h3 id="使用-EXEC"><a href="#使用-EXEC" class="headerlink" title="使用 EXEC"></a>使用 EXEC</h3><p>使用 Exec 是最快的方式，主要問題則會需要慢慢找站存來源。SELECT 找到幾個關鍵字 。 當中hostname必須是空(沒有人暫存)，status需要看是否是runnable 決定是否要把它殺掉。<br>殺掉參考spid 編號，使用下方使用方式。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">USE master </span><br><span class="line">GO</span><br><span class="line"></span><br><span class="line"><span class="keyword">EXEC</span> sp_who</span><br><span class="line"></span><br><span class="line"><span class="comment">--Example : Kill [SPID] </span></span><br><span class="line"><span class="comment">--Kill 61</span></span><br><span class="line"><span class="comment">--Kill 62</span></span><br><span class="line"><span class="comment">--Kill 65 </span></span><br></pre></td></tr></table></figure><h3 id="使用-SELECT"><a href="#使用-SELECT" class="headerlink" title="使用 SELECT"></a>使用 SELECT</h3><p>這邊引用 ‘<a href="https://stackoverflow.com/questions/2234691/sql-server-filter-output-of-sp-who2">stack OverFlow</a>‘，這邊可以快速找到指定要殺掉的對象。相當快速方便。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">USE master </span><br><span class="line">GO</span><br><span class="line"></span><br><span class="line"><span class="keyword">DECLARE</span> <span class="variable">@Table</span> <span class="keyword">TABLE</span>(</span><br><span class="line">        SPID <span class="type">INT</span>,</span><br><span class="line">        Status <span class="type">VARCHAR</span>(MAX),</span><br><span class="line">        LOGIN <span class="type">VARCHAR</span>(MAX),</span><br><span class="line">        HostName <span class="type">VARCHAR</span>(MAX),</span><br><span class="line">        BlkBy <span class="type">VARCHAR</span>(MAX),</span><br><span class="line">        DBName <span class="type">VARCHAR</span>(MAX),</span><br><span class="line">        Command <span class="type">VARCHAR</span>(MAX),</span><br><span class="line">        CPUTime <span class="type">INT</span>,</span><br><span class="line">        DiskIO <span class="type">INT</span>,</span><br><span class="line">        LastBatch <span class="type">VARCHAR</span>(MAX),</span><br><span class="line">        ProgramName <span class="type">VARCHAR</span>(MAX),</span><br><span class="line">        SPID_1 <span class="type">INT</span>,</span><br><span class="line">        REQUESTID <span class="type">INT</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="variable">@Table</span> <span class="keyword">EXEC</span> sp_who2</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span>  <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span>    <span class="variable">@Table</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--Example : Kill [SPID] </span></span><br><span class="line"><span class="comment">--Kill 61</span></span><br><span class="line"><span class="comment">--Kill 62</span></span><br><span class="line"><span class="comment">--Kill 65 </span></span><br></pre></td></tr></table></figure><h2 id="四、補充"><a href="#四、補充" class="headerlink" title="四、補充"></a>四、補充</h2><p>引用 ‘<a href="http://sharedderrick.blogspot.com/2017/07/sql-server-spwho-spwho2.html">德瑞克：SQL Server 學習筆記</a>‘</p><h3 id="sp-who"><a href="#sp-who" class="headerlink" title="sp_who"></a>sp_who</h3><p>提供 SQL Server Database Engine 執行個體中有關目前使用者、工作階段和處理序的資訊。<br>可以篩選資訊，只傳回屬於特定使用者或屬於特定工作階段的非閒置處理序。</p><h3 id="sp-who2"><a href="#sp-who2" class="headerlink" title="sp_who2"></a>sp_who2</h3><p> undocumented 與 unsupported，但提供更多的資訊，例如：CPUTime、DiskIO、LastBatch、ProgramName 等。</p>]]></content>
      
      
      <categories>
          
          <category> 資料庫技術 </category>
          
          <category> MS SQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Sql Server - 壓縮交易檔案</title>
      <link href="/2021/08/06/%E8%B3%87%E6%96%99%E5%BA%AB%E6%8A%80%E8%A1%93/SQL/Sql_06_%E5%A3%93%E7%B8%AE%E4%BA%A4%E6%98%93%E6%AA%94%E6%A1%88/"/>
      <url>/2021/08/06/%E8%B3%87%E6%96%99%E5%BA%AB%E6%8A%80%E8%A1%93/SQL/Sql_06_%E5%A3%93%E7%B8%AE%E4%BA%A4%E6%98%93%E6%AA%94%E6%A1%88/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>資料庫交期檔案時常會遇到檔案很大問題，下方指令會偏向於特定情境處理，若是客戶需要小心處離 ，通常動作會是暫停、離線方式，再進行壓縮。</p><h2 id="查詢指令"><a href="#查詢指令" class="headerlink" title="查詢指令"></a>查詢指令</h2><p>下方指令是要確定是 SIMPLE 才建議執行下方語法。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">name <span class="keyword">as</span> [database_name], </span><br><span class="line">recovery_model_desc <span class="keyword">as</span> [model], </span><br><span class="line">log_reuse_wait_desc <span class="keyword">as</span> [log_reuse] </span><br><span class="line"><span class="keyword">FROM</span> sys.databases</span><br></pre></td></tr></table></figure><h2 id="壓縮指令"><a href="#壓縮指令" class="headerlink" title="壓縮指令"></a>壓縮指令</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> DATABASE [資料庫名稱]</span><br><span class="line"><span class="keyword">SET</span> RECOVERY SIMPLE;</span><br><span class="line">GO</span><br><span class="line"></span><br><span class="line"><span class="comment">--壓縮記錄檔為 20 MB</span></span><br><span class="line">DBCC SHRINKFILE ([資料庫LOG名稱], <span class="number">20</span>);</span><br><span class="line">GO</span><br><span class="line"></span><br><span class="line"><span class="keyword">ALTER</span> DATABASE  [資料庫名稱]</span><br><span class="line"><span class="keyword">SET</span> RECOVERY <span class="keyword">FULL</span>;</span><br><span class="line">GO</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 資料庫技術 </category>
          
          <category> MS SQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Sql Server - 排除單一使用者</title>
      <link href="/2021/08/05/%E8%B3%87%E6%96%99%E5%BA%AB%E6%8A%80%E8%A1%93/SQL/sql_05_%E5%96%AE%E4%B8%80%E4%BD%BF%E7%94%A8%E8%80%85/"/>
      <url>/2021/08/05/%E8%B3%87%E6%96%99%E5%BA%AB%E6%8A%80%E8%A1%93/SQL/sql_05_%E5%96%AE%E4%B8%80%E4%BD%BF%E7%94%A8%E8%80%85/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>資料庫當中，覆蓋檔案時常遇到變成單一使用者，因此可以使用下方語法。</p><h2 id="一、更改成所有使用者"><a href="#一、更改成所有使用者" class="headerlink" title="一、更改成所有使用者"></a>一、更改成所有使用者</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> DATABASE  [資料庫名稱]</span><br><span class="line"><span class="keyword">SET</span> MULTI_USER;</span><br><span class="line">GO</span><br></pre></td></tr></table></figure><h2 id="二、更改成唯獨"><a href="#二、更改成唯獨" class="headerlink" title="二、更改成唯獨"></a>二、更改成唯獨</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> DATABASE  [資料庫名稱]</span><br><span class="line"><span class="keyword">SET</span> READ_ONLY;</span><br><span class="line">GO</span><br></pre></td></tr></table></figure><h2 id="三、更改成單一使用者模式"><a href="#三、更改成單一使用者模式" class="headerlink" title="三、更改成單一使用者模式"></a>三、更改成單一使用者模式</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> DATABASE [資料庫名稱]</span><br><span class="line"><span class="keyword">SET</span> SINGLE_USER</span><br><span class="line"><span class="keyword">WITH</span> <span class="keyword">ROLLBACK</span> IMMEDIATE;</span><br><span class="line">GO</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 資料庫技術 </category>
          
          <category> MS SQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Sql Server -  恢復[正在還原]資料庫</title>
      <link href="/2021/08/04/%E8%B3%87%E6%96%99%E5%BA%AB%E6%8A%80%E8%A1%93/SQL/Sql_04_%E6%81%A2%E5%BE%A9%5B%E6%AD%A3%E5%9C%A8%E9%82%84%E5%8E%9F%5D%E8%B3%87%E6%96%99%E5%BA%AB/"/>
      <url>/2021/08/04/%E8%B3%87%E6%96%99%E5%BA%AB%E6%8A%80%E8%A1%93/SQL/Sql_04_%E6%81%A2%E5%BE%A9%5B%E6%AD%A3%E5%9C%A8%E9%82%84%E5%8E%9F%5D%E8%B3%87%E6%96%99%E5%BA%AB/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>近期遇到DB出現所謂正在還原中文字，有出現這狀況可能DB處理、還原中失敗造成這個問題提供幾個方式給大家參考。</p><h2 id="解決指令"><a href="#解決指令" class="headerlink" title="解決指令"></a>解決指令</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 切換資料庫的狀態為：ONLINE。</span></span><br><span class="line">RESTORE DATABASE [資料庫名稱]</span><br><span class="line"><span class="keyword">WITH</span> RECOVERY</span><br><span class="line">GO</span><br></pre></td></tr></table></figure><h2 id="查詢指令"><a href="#查詢指令" class="headerlink" title="查詢指令"></a>查詢指令</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">df.file_id,</span><br><span class="line">df.name <span class="keyword">as</span> logincal_file_name,</span><br><span class="line">df.state,</span><br><span class="line">df.state_desc</span><br><span class="line"><span class="keyword">FROM</span> [資料庫名稱].sys.database_files df</span><br></pre></td></tr></table></figure><h2 id="補充-restore-與-recovery-的區別"><a href="#補充-restore-與-recovery-的區別" class="headerlink" title="補充 : restore 與 recovery 的區別"></a>補充 : restore 與 recovery 的區別</h2><p>(取自於網上濃縮)<br>restore  : (還原)與備份檔案相對，從備份讀出恢復備份的樹續<br>recovery : (恢復)把restore回來的資料經過處理變成正常數據<br>如果restore 沒有加入recover的話，資料庫是打不開的，主要原因是各文件都不同步。</p>]]></content>
      
      
      <categories>
          
          <category> 資料庫技術 </category>
          
          <category> MS SQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Sql Server -  亂碼問題 - 字串叢集</title>
      <link href="/2021/08/03/%E8%B3%87%E6%96%99%E5%BA%AB%E6%8A%80%E8%A1%93/SQL/Sql_03_%E4%BA%82%E7%A2%BC%E5%95%8F%E9%A1%8C_%E5%AD%97%E4%B8%B2%E5%8F%A2%E9%9B%86/"/>
      <url>/2021/08/03/%E8%B3%87%E6%96%99%E5%BA%AB%E6%8A%80%E8%A1%93/SQL/Sql_03_%E4%BA%82%E7%A2%BC%E5%95%8F%E9%A1%8C_%E5%AD%97%E4%B8%B2%E5%8F%A2%E9%9B%86/</url>
      
        <content type="html"><![CDATA[<h1 id="SQL-Server-亂碼現象"><a href="#SQL-Server-亂碼現象" class="headerlink" title="SQL Server 亂碼現象"></a>SQL Server 亂碼現象</h1><h2 id="問題"><a href="#問題" class="headerlink" title="問題"></a>問題</h2><p>近期在安裝過程遇到 Linux 環境有亂碼現象，查詢的時候會出現 “????” 無法輸出文字，查看下預設定序為<code>SQL_Latin1_General_CP1_CI_AS</code>，解決方案可以使用下方語法。</p><h2 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> DATABASE [DatabaseName] <span class="keyword">SET</span> SINGLE_USER <span class="keyword">WITH</span> <span class="keyword">ROLLBACK</span> IMMEDIATE</span><br><span class="line"><span class="keyword">ALTER</span> DATABASE [DatabaseName] <span class="keyword">COLLATE</span> Chinese_Taiwan_Stroke_CI_AS</span><br><span class="line"><span class="keyword">ALTER</span> DATABASE [DatabaseName] <span class="keyword">SET</span> MULTI_USER <span class="keyword">WITH</span> <span class="keyword">ROLLBACK</span> IMMEDIATE</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 資料庫技術 </category>
          
          <category> SQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Sql Server - 介紹SQL、安裝設定環境</title>
      <link href="/2021/08/02/%E8%B3%87%E6%96%99%E5%BA%AB%E6%8A%80%E8%A1%93/SQL/Sql_02_%E4%BB%8B%E7%B4%B9SQL%E3%80%81%E5%AE%89%E8%A3%9D%E8%A8%AD%E5%AE%9A%E7%92%B0%E5%A2%83/"/>
      <url>/2021/08/02/%E8%B3%87%E6%96%99%E5%BA%AB%E6%8A%80%E8%A1%93/SQL/Sql_02_%E4%BB%8B%E7%B4%B9SQL%E3%80%81%E5%AE%89%E8%A3%9D%E8%A8%AD%E5%AE%9A%E7%92%B0%E5%A2%83/</url>
      
        <content type="html"><![CDATA[<h1 id="SQL-Structured-Query-Language"><a href="#SQL-Structured-Query-Language" class="headerlink" title="SQL (Structured Query Language)"></a>SQL (Structured Query Language)</h1><p>是一種特定目的程式語言，用 於管理關聯式資料庫管理系統（ RDBMS ），或在關係流資料管理系統 RDSMS ）中進行流處理。 SQL 基於關係代數和元組關係演算，包括一個資料定義語言和資料操縱語言。 SQL 的範圍包括 資料插入、查詢、更新和刪除，資料庫模式建立和修改，以及資料存取控制。儘管 SQL 經常被描 述為，而且很大程度上是一種聲明式編程（ 4GL ），但是其也含有程序式編程的元素。 ISO( 國際標準化組織 對 SQL 制訂有標準規格，而這樣做為基準的 SQL 即被稱為 標準 SQL 早期 各家 RDBMS 無法統一 SQL 敘述，因此因 ISO 制訂了標準敘述，使得各家 RDBMS 都逐步支援標準 SQL 的基本語法。 </p><hr><h1 id="SQL-敘述與其分類-SQL"><a href="#SQL-敘述與其分類-SQL" class="headerlink" title="SQL 敘述與其分類 SQL"></a>SQL 敘述與其分類 SQL</h1><p>SQL 是以數個關鍵字 ( Keyword)，再與資料表名稱為欄位名稱組成一段完成的語句 (SQL 敘 述 SQL 敘述中的關鍵字，是根據其意義或使用方式所決定的特定英文單字，其中包含了「查 詢資料表內容」或 「參考這個資料表」等意思的多個單字。</p><h2 id="一、-DDL-Data-Definition-Language-資料定義語言"><a href="#一、-DDL-Data-Definition-Language-資料定義語言" class="headerlink" title="一、 DDL ( Data Definition Language 資料定義語言 )"></a>一、 DDL ( Data Definition Language 資料定義語言 )</h2><p>能建立或刪除資料庫和資料表等用來儲 存資料的物件，規劃資料儲存的方式。 </p><ol><li>GREATE ：建立資料庫或資料表 </li><li>DROP ：刪除資料庫或資料表 </li><li>ALTER ：修改資料庫或資料表等物件的架構</li></ol><h2 id="二、DML-Data-Manipulation-Language-資料操作語言"><a href="#二、DML-Data-Manipulation-Language-資料操作語言" class="headerlink" title="二、DML(Data Manipulation Language  資料操作語言 )"></a>二、DML(Data Manipulation Language  資料操作語言 )</h2><p>能查詢或修改資料 表 內的記錄 以列為 單位的資料 。 </p><ol><li>SELECT ：資料表查詢記錄 </li><li>INSERT ：將新記錄儲存至資料表中 </li><li>UPDATE ：修改資料表的記錄 </li><li>DELETE ：刪除資料表的記錄</li></ol><h2 id="三、DCL-Data-Control-Language-資料控制語言-："><a href="#三、DCL-Data-Control-Language-資料控制語言-：" class="headerlink" title="三、DCL(Data Control Language  資料控制語言 )："></a>三、DCL(Data Control Language  資料控制語言 )：</h2><p>可以用來認可或取消對資料庫執行的變更動 作，另外也能設定 RDBMS 的使用者對資料表等物件的操作權限</p><ol><li>COMMIT ：認可對資料庫執行的變更動作</li><li>ROLLBACK ：取消對資料庫執行的變更動作</li><li>GRANT ：賦予使用者操作的權限</li><li>REVOKE ：撤銷使用者操作的權限</li></ol><p><img src="/img/sql_server/01.png"></p><h1 id="環境設定"><a href="#環境設定" class="headerlink" title="環境設定"></a>環境設定</h1><h2 id="必備工具"><a href="#必備工具" class="headerlink" title="必備工具"></a>必備工具</h2><ol><li><p>SQL-Server ：<br><a href="https://www.microsoft.com/zh-tw/sql-server/sql-server-downloads">https://www.microsoft.com/zh-tw/sql-server/sql-server-downloads</a></p></li><li><p>SSMS(SQL Server Microsoft Studio )<br><a href="https://docs.microsoft.com/zh-tw/sql/ssms/download-sql-server-management-studio-ssms?view=sql-server-ver15">https://docs.microsoft.com/zh-tw/sql/ssms/download-sql-server-management-studio-ssms?view=sql-server-ver15</a></p></li></ol><p>技術文件 : <a href="https://test-75.gitbook.io/basic-sql/sql-huan-jing-she-ding">https://test-75.gitbook.io/basic-sql/sql-huan-jing-she-ding</a></p><h2 id="設定登入sa"><a href="#設定登入sa" class="headerlink" title="設定登入sa"></a>設定登入sa</h2><ol><li><p>進入後先調整資料庫的安全性，選擇SQL Server &#x2F;Windows 驗證模式之後按下確認。<br><img src="/img/sql_server/02.png"><br><img src="/img/sql_server/03.png"></p></li><li><p>到資料庫內有安全性的資料夾，開到有sa 選項按下右鍵(選擇屬性)。<br><img src="/img/sql_server/04.png"></p></li></ol><p>輸入密碼後，到狀態把登入選擇為啟用即可使用。<br><img src="/img/sql_server/05.png"></p><div class="note info flat"><h2 id="說明"><a href="#說明" class="headerlink" title="說明"></a>說明</h2><p>第一次使用需要重新開啟SSMS，若sa還是不能登入有兩個解決方式，</p><ol><li>從SQL Server 設定管理員裡面重啟 SQL Server</li><li>直接重開電腦</li></ol></div><hr><h2 id="補充"><a href="#補充" class="headerlink" title="補充"></a>補充</h2><h3 id="一、無法修改資料結構"><a href="#一、無法修改資料結構" class="headerlink" title="一、無法修改資料結構"></a>一、無法修改資料結構</h3><p>如果有出現無法存檔結構問題，可以依下列步驟：<br><img src="/img/sql_server/06.png"></p><p>開啟SQL Server Management Studio–&gt;工具–&gt;選項–&gt;Designers(設計師)–&gt;資料表和資料庫設計工具–&gt;防止儲存需要資料表重建的變更 –&gt;取消勾選 ！如下圖：<br><img src="/img/sql_server/07.png"></p><h3 id="二、使用者-‘NT-AUTHORITY-SYSTEM’-的登入失敗"><a href="#二、使用者-‘NT-AUTHORITY-SYSTEM’-的登入失敗" class="headerlink" title="二、使用者 ‘NT AUTHORITY\SYSTEM’ 的登入失敗"></a>二、使用者 ‘NT AUTHORITY\SYSTEM’ 的登入失敗</h3><p>使用者 ‘NT AUTHORITY\SYSTEM’ 的登入失敗的解決方法。</p><ol><li><p>打開SSMS，找到安全性&gt;登入&gt;NT AUTHORITY\SYSTEM<br><img src="/img/sql_server/08.png"></p></li><li><p>右鍵”屬性”，選擇”安全性實體”<br><img src="/img/sql_server/09.png"></p></li><li><p>打勾<br><img src="/img/sql_server/10.png"></p></li></ol><h3 id="三、顯示行數"><a href="#三、顯示行數" class="headerlink" title="三、顯示行數"></a>三、顯示行數</h3><p>請選擇上方[工具]&gt;[選項]，點開[文字編輯器]，如果你只有在 Transact-SQL 要顯示行號，請點選【Transact-SQL】，如果要在所有語言都顯示行號，請點選【所有語言】，在【顯示】下勾選【行號】，按【確定】。<br><img src="/img/sql_server/11.png"></p><h3 id="四、設定編輯前資料列指令的值"><a href="#四、設定編輯前資料列指令的值" class="headerlink" title="四、設定編輯前資料列指令的值"></a>四、設定編輯前資料列指令的值</h3><p>請選擇上方[工具]&gt;[選項]，點開[SQL Server 物件總管]，修改紅色框格內，按【確定】即可。<br><img src="/img/sql_server/12.png"></p>]]></content>
      
      
      <categories>
          
          <category> 資料庫技術 </category>
          
          <category> SQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Sql Server - 合併欄位( FOR XML PATH )</title>
      <link href="/2021/08/01/%E8%B3%87%E6%96%99%E5%BA%AB%E6%8A%80%E8%A1%93/SQL/Sql_01_%E5%90%88%E4%BD%B5%E6%AC%84%E4%BD%8D/"/>
      <url>/2021/08/01/%E8%B3%87%E6%96%99%E5%BA%AB%E6%8A%80%E8%A1%93/SQL/Sql_01_%E5%90%88%E4%BD%B5%E6%AC%84%E4%BD%8D/</url>
      
        <content type="html"><![CDATA[<h1 id="SQL-Server-合併欄位"><a href="#SQL-Server-合併欄位" class="headerlink" title="SQL Server 合併欄位"></a>SQL Server 合併欄位</h1><p>近期需要列出詳細欄位，例如: 這個角色他目前有使用哪種類型，依據類型展開詳細類型資訊等。<br>公司上遇到很多欄位分同類型不同人，決定要試看看合併欄位效果。</p><h2 id="必備工具"><a href="#必備工具" class="headerlink" title="必備工具"></a>必備工具</h2><ol><li><p>SQL-Server ：<br><a href="https://www.microsoft.com/zh-tw/sql-server/sql-server-downloads">https://www.microsoft.com/zh-tw/sql-server/sql-server-downloads</a></p></li><li><p>SSMS(SQL Server Microsoft Studio )<br><a href="https://docs.microsoft.com/zh-tw/sql/ssms/download-sql-server-management-studio-ssms?view=sql-server-ver15">https://docs.microsoft.com/zh-tw/sql/ssms/download-sql-server-management-studio-ssms?view=sql-server-ver15</a></p></li></ol><p>技術文件 : <a href="https://test-75.gitbook.io/basic-sql/sql-huan-jing-she-ding">https://test-75.gitbook.io/basic-sql/sql-huan-jing-she-ding</a></p><h3 id="自行選擇-產生範例結構"><a href="#自行選擇-產生範例結構" class="headerlink" title="(自行選擇) - 產生範例結構"></a>(自行選擇) - 產生範例結構</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SET</span> ANSI_NULLS <span class="keyword">ON</span></span><br><span class="line">GO</span><br><span class="line"></span><br><span class="line"><span class="keyword">SET</span> QUOTED_IDENTIFIER <span class="keyword">ON</span></span><br><span class="line">GO</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> [dbo].[Statistics](</span><br><span class="line">[name] [nvarchar](<span class="number">20</span>) <span class="keyword">NULL</span>,</span><br><span class="line">[type] [nvarchar](<span class="number">20</span>) <span class="keyword">NULL</span></span><br><span class="line">) <span class="keyword">ON</span> [<span class="keyword">PRIMARY</span>]</span><br><span class="line">GO</span><br></pre></td></tr></table></figure><h2 id="使用-FOR-XML-PATH-合併欄位"><a href="#使用-FOR-XML-PATH-合併欄位" class="headerlink" title="使用 ( FOR XML PATH ) 合併欄位"></a>使用 ( FOR XML PATH ) 合併欄位</h2><p>如果我們直接開始用，會看到資料很凌亂，那我們直接將Type欄位合併。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> [dbo].[Statistics]</span><br><span class="line"></span><br><span class="line"><span class="comment">/* ----------Result --------- */</span></span><br><span class="line"><span class="comment">/* Ivan A */</span></span><br><span class="line"><span class="comment">/* David B */</span></span><br><span class="line"><span class="comment">/* Kate C */</span></span><br><span class="line"><span class="comment">/* John A */</span></span><br><span class="line"><span class="comment">/* Ivan D */</span></span><br><span class="line"><span class="comment">/* John C */</span></span><br><span class="line"><span class="comment">/* Ivan B */</span></span><br></pre></td></tr></table></figure><h3 id="FOR-XML-PATH"><a href="#FOR-XML-PATH" class="headerlink" title="FOR XML PATH"></a>FOR XML PATH</h3><p>這方式簡單馬type串在一起，XML使用下尚未特別處理會呈現 <code>&lt;type&gt;</code>字眼。<br>如果有特別加上字串，<code>&lt;type&gt;</code>就不會出現在table中。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">distinct</span> </span><br><span class="line"> m.name,(</span><br><span class="line"> <span class="keyword">SELECT</span> type <span class="comment">/*type+&#x27;,&#x27;*/</span> <span class="keyword">FROM</span> [dbo].[Statistics]</span><br><span class="line"> <span class="keyword">WHERE</span> name <span class="operator">=</span> m.name</span><br><span class="line"> <span class="keyword">for</span> xml path(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">)  <span class="keyword">as</span> type_item</span><br><span class="line"><span class="keyword">FROM</span> [dbo].[Statistics] m</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* ----------Result --------- */</span></span><br><span class="line"><span class="comment">-- David || &lt;type&gt;B&lt;/type&gt;</span></span><br><span class="line"><span class="comment">-- Ivan || &lt;type&gt;A&lt;/type&gt;&lt;type&gt;D&lt;/type&gt;&lt;type&gt;B&lt;/type&gt;</span></span><br><span class="line"><span class="comment">-- John  || &lt;type&gt;A&lt;/type&gt;&lt;type&gt;C&lt;/type&gt;</span></span><br><span class="line"><span class="comment">-- Kate || &lt;type&gt;C&lt;/type&gt;</span></span><br></pre></td></tr></table></figure><h3 id="去除多於符號"><a href="#去除多於符號" class="headerlink" title="去除多於符號"></a>去除多於符號</h3><p>去除多餘符號可以使用 left() 或是 right() 方法。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Select</span> </span><br><span class="line">name,<span class="keyword">left</span>(type_item,len(type_item)<span class="number">-1</span>) <span class="keyword">as</span> type_item</span><br><span class="line"><span class="keyword">From</span></span><br><span class="line">(</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">distinct</span> </span><br><span class="line"> m.name,</span><br><span class="line"> (</span><br><span class="line"> <span class="keyword">SELECT</span> type<span class="operator">+</span><span class="string">&#x27;,&#x27;</span> <span class="keyword">FROM</span> [dbo].[Statistics]</span><br><span class="line"> <span class="keyword">WHERE</span> name <span class="operator">=</span> m.name</span><br><span class="line"> <span class="keyword">for</span> xml path(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"> )  <span class="keyword">as</span> type_item</span><br><span class="line"><span class="keyword">FROM</span> [dbo].[Statistics] m</span><br><span class="line">) <span class="keyword">as</span> main</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>或者是 STUFF() 方式刪除，再請各位自行遊玩測試。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">distinct</span> </span><br><span class="line">    m.name,</span><br><span class="line">    STUFF</span><br><span class="line">    ((</span><br><span class="line">        <span class="keyword">SELECT</span> <span class="string">&#x27;,&#x27;</span><span class="operator">+</span>type <span class="keyword">FROM</span> [dbo].[Statistics]</span><br><span class="line">        <span class="keyword">WHERE</span> name <span class="operator">=</span> m.name</span><br><span class="line">        <span class="keyword">for</span> xml path(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    ),<span class="number">1</span>,<span class="number">1</span>,<span class="string">&#x27;&#x27;</span>) <span class="keyword">as</span> type_item </span><br><span class="line"><span class="keyword">FROM</span> [dbo].[Statistics] m</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 資料庫技術 </category>
          
          <category> SQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【JS】回呼函式 Callback Function</title>
      <link href="/2021/07/28/%E5%89%8D%E7%AB%AF%E6%8A%80%E8%A1%93/JS/%E3%80%90JS%E3%80%91%E5%9B%9E%E5%91%BC%E5%87%BD%E5%BC%8F%20Callback%20Function%20/"/>
      <url>/2021/07/28/%E5%89%8D%E7%AB%AF%E6%8A%80%E8%A1%93/JS/%E3%80%90JS%E3%80%91%E5%9B%9E%E5%91%BC%E5%87%BD%E5%BC%8F%20Callback%20Function%20/</url>
      
        <content type="html"><![CDATA[<h1 id="Callback-function-回呼函式"><a href="#Callback-function-回呼函式" class="headerlink" title="Callback function - 回呼函式"></a>Callback function - 回呼函式</h1><p>是指能藉由參數（argument）通往另一個函式的函式。它會在外部函式內調用、以完成某些事情。</p><h2 id="使用種類"><a href="#使用種類" class="headerlink" title="使用種類"></a>使用種類</h2><h3 id="一般使用function"><a href="#一般使用function" class="headerlink" title="一般使用function"></a>一般使用function</h3><p>開發常見使用個別function去做執行動作。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">A = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;這是 A functions&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">B = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;這是 B functions&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">A</span>();</span><br><span class="line"><span class="title function_">B</span>();</span><br></pre></td></tr></table></figure><h3 id="B-function-成為-A-function-的參數"><a href="#B-function-成為-A-function-的參數" class="headerlink" title="B function 成為 A function 的參數"></a>B function 成為 A function 的參數</h3><p>這邊是將參數設為call，讓 B function 填的位置。這樣就可以達成簡易版本的callback。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">A=<span class="function">(<span class="params">call</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;這是function A&#x27;</span>);</span><br><span class="line">    <span class="title function_">call</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">B=<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;這是function B&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">A</span>(B);</span><br></pre></td></tr></table></figure><p>下方則是利用 <code>prompt</code>方式傳入B function 參數中。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">A=<span class="function">(<span class="params">call</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> name = <span class="title function_">prompt</span>(<span class="string">&#x27;請輸入名字&#x27;</span>);</span><br><span class="line">    <span class="title function_">call</span>(name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">B=<span class="function">(<span class="params">name</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;哈摟 &#x27;</span>+name+<span class="string">&#x27;!! 這是CallBack 測試&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">A</span>(B);</span><br></pre></td></tr></table></figure><h3 id="非同步處理-asynchronous-callback"><a href="#非同步處理-asynchronous-callback" class="headerlink" title="非同步處理(asynchronous callback)"></a>非同步處理(asynchronous callback)</h3><p>以下可能會遇到需要延遲的event ，這如果要考量執行順序需要小心執行。執行順序可以考慮使用 async、await 。 </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">A=<span class="function">(<span class="params">call</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;這是function A&#x27;</span>);</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">         <span class="title function_">call</span>();</span><br><span class="line">    &#125;,<span class="number">2000</span>);</span><br><span class="line">   </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">B=<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;這是function B&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">A</span>(B);</span><br></pre></td></tr></table></figure><p>下方使用非同步方式處理。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">B = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123; <span class="title function_">resolve</span>(<span class="string">&#x27;async B function&#x27;</span>) &#125;,<span class="number">2000</span>)</span><br><span class="line">    &#125;)<span class="comment">//return</span></span><br><span class="line">    </span><br><span class="line">&#125;<span class="comment">//B()</span></span><br><span class="line"></span><br><span class="line">A = <span class="title function_">async</span>(call) =&gt; &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;A function&#x27;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">await</span> <span class="title function_">call</span>());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">A</span>(B);</span><br></pre></td></tr></table></figure><h2 id="使用時機"><a href="#使用時機" class="headerlink" title="使用時機"></a>使用時機</h2><ul><li><a href="https://developer.mozilla.org/zh-TW/docs/Glossary/Callback_function">MDN Web Docs</a></li></ul><p>從MDN Web Docs 得知，CallBack 常使用於非同步動作執行。常見案例 : Google API、Geolocation API 、GPS定位等，利用非同步取得 GPS 的設備坐標。</p>]]></content>
      
      
      <categories>
          
          <category> 前端技術 </category>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> Callback </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【JS】非同步 vs 同步 - AJAX 使用方式</title>
      <link href="/2021/07/20/%E5%89%8D%E7%AB%AF%E6%8A%80%E8%A1%93/JS/%E3%80%90JS%E3%80%91%E9%9D%9E%E5%90%8C%E6%AD%A5%20vs%20%E5%90%8C%E6%AD%A5%20-%20AJAX%20%E4%BD%BF%E7%94%A8%E6%96%B9%E5%BC%8F%20/"/>
      <url>/2021/07/20/%E5%89%8D%E7%AB%AF%E6%8A%80%E8%A1%93/JS/%E3%80%90JS%E3%80%91%E9%9D%9E%E5%90%8C%E6%AD%A5%20vs%20%E5%90%8C%E6%AD%A5%20-%20AJAX%20%E4%BD%BF%E7%94%A8%E6%96%B9%E5%BC%8F%20/</url>
      
        <content type="html"><![CDATA[<h2 id="什麼是-AJAX-？"><a href="#什麼是-AJAX-？" class="headerlink" title="什麼是 AJAX ？"></a>什麼是 AJAX ？</h2><p>AJAX 是「Asynchronous JavaScript and XML」（非同步的 JavaScript 與 XML 技術）的縮寫，簡單說就是網頁不用重新整理，就能即時地透過瀏覽器去跟伺服器溝通，撈出資料。</p><ul><li>Asynchronous：非同步</li><li>JavaScript：使用的程式語言</li><li>XML：Client 與 Server 交換資料用的資料與方法，近年由於 JSON 等格式的流行，使用 Ajax 處理的資料並不限於 XML。</li></ul><h2 id="同步請求-v-s-非同步請求"><a href="#同步請求-v-s-非同步請求" class="headerlink" title="同步請求 v.s. 非同步請求"></a>同步請求 v.s. 非同步請求</h2><p>接著讓我們引入客戶端與伺服器端的概念，來看看「同步請求」和「非同步請求」的對比：</p><ul><li><p>同步請求 (Synchronous request)： 客戶端 (client) 對伺服器端 (server) 送出 request ，並且在收到伺服器端的 response 之後才會繼續下一步的動作，等待的期間無法處理其他事情。這個作法並不理想，因為通常伺服器端的運算速度比本地電腦慢上好幾倍。</p></li><li><p>非同步請求 (Asynchronous request)：客戶端 (client) 對伺服器端 (server) 送出 request 之後，不需要等待結果，仍可以持續處理其他事情，甚至繼續送出其他 request。Responese 傳回之後，就被融合進當下頁面或應用中。</p></li></ul><h2 id="常見問題-get-與-post-的差異"><a href="#常見問題-get-與-post-的差異" class="headerlink" title="常見問題 : get 與 post 的差異"></a>常見問題 : get 與 post 的差異</h2><ul><li>get：從瀏覽器發出請求，伺服器會回傳資料（在 responseText 裡面回傳一個物件）。</li><li>post：從瀏覽器發出請求，傳送資料時註明格式，若選擇用表單格式，則傳送資料的內容要仿照表單傳送後的網址*。<br>*也就是欄位1 name &#x3D; 使用者輸入的值1 &amp; 欄位2 name &#x3D; 使用者輸入的值2 etc.</li></ul><h2 id="Ajax-Method"><a href="#Ajax-Method" class="headerlink" title="Ajax Method"></a>Ajax Method</h2><p>Api 設計過程中，很常需要配合幾個medth 互換使用。API設計模式可以參考 <a href="https://hackmd.io/@mopcon/2020/%2F%40mopcon%2FB17d5KSww"><code>RESTful </code></a></p><ul><li>POST : 新增</li><li>GET : 讀取</li><li>PUT&#x2F;PATCH : 更新</li><li>DELECT :刪除</li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端技術 </category>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【JS】停止事件 preventDefault()</title>
      <link href="/2021/07/19/%E5%89%8D%E7%AB%AF%E6%8A%80%E8%A1%93/JS/%E3%80%90JS%E3%80%91%E5%81%9C%E6%AD%A2%E4%BA%8B%E4%BB%B6%20preventDefault()/"/>
      <url>/2021/07/19/%E5%89%8D%E7%AB%AF%E6%8A%80%E8%A1%93/JS/%E3%80%90JS%E3%80%91%E5%81%9C%E6%AD%A2%E4%BA%8B%E4%BB%B6%20preventDefault()/</url>
      
        <content type="html"><![CDATA[<p>近期遇到比較麻煩的問題”非同步”問題，像是form submit之前不能確保一定完成執行，相對需要使用所謂的sleep相關作法，一開始以為可以成功結果一觸發事件就會submit 事件…。</p><h2 id="停止事件"><a href="#停止事件" class="headerlink" title="停止事件"></a>停止事件</h2><p>JavaScript事件，最常用的是onclick、onchange之類，本身事件中可以呼叫出event 事件。event 事件會紀錄著事件觸發的狀態。</p><h2 id="event-preventDefault"><a href="#event-preventDefault" class="headerlink" title="event.preventDefault()"></a>event.preventDefault()</h2><p>這做法可以延遲提交內容，如果用<code>return false</code> 會讓他失效，比較有效方式可以使用這個，先讓他把事件暫停加入我們想要的功能即可。目前遇到非同步時候最有效的做法。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&#x27;form&#x27;</span>).<span class="title function_">submit</span>(<span class="function">(<span class="params">event</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> form = <span class="variable language_">this</span>;</span><br><span class="line">  event.<span class="title function_">preventDefault</span>();</span><br><span class="line">  </span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">      form.<span class="title function_">submit</span>();</span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="測試範例"><a href="#測試範例" class="headerlink" title="測試範例"></a>測試範例</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&#x27;button&#x27;</span>).<span class="title function_">click</span>(<span class="function">(<span class="params">event</span>)=&gt;</span>&#123;</span><br><span class="line">  event.<span class="title function_">preventDefault</span>();</span><br><span class="line">  </span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;一秒後執行&#x27;</span>);</span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h2 id="event-stopPropagation"><a href="#event-stopPropagation" class="headerlink" title="event.stopPropagation()"></a>event.stopPropagation()</h2><p>這事件是針對多個div 重疊後，啟動click會產”事件冒泡”。功能主要是阻止事件冒泡，後續在補充。</p>]]></content>
      
      
      <categories>
          
          <category> 前端技術 </category>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【JS】jQuery Param() 使用方式</title>
      <link href="/2021/07/18/%E5%89%8D%E7%AB%AF%E6%8A%80%E8%A1%93/JS/%E3%80%90JS%E3%80%91jQuery%20Param()%20%E4%BD%BF%E7%94%A8%E6%96%B9%E5%BC%8F/"/>
      <url>/2021/07/18/%E5%89%8D%E7%AB%AF%E6%8A%80%E8%A1%93/JS/%E3%80%90JS%E3%80%91jQuery%20Param()%20%E4%BD%BF%E7%94%A8%E6%96%B9%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="參數（Param）"><a href="#參數（Param）" class="headerlink" title="參數（Param）"></a>參數（Param）</h1><h2 id="什麼是參數-parameters"><a href="#什麼是參數-parameters" class="headerlink" title="什麼是參數(parameters)"></a>什麼是參數(parameters)</h2><p>要了解arguments之前，我們必須要先了解什麼是參數(parameter)。參數其實就是我們會帶入函式的變數，以下面程式的例子來說，”phone”、”food”、”job”，就是我們在執行函式的時候可以任意填入的參數。不給任何參數值還是可以執行該函式。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">MyFavorite</span> (phone ,food ,job)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(&#123;</span><br><span class="line">        phone : phone,</span><br><span class="line">        food : food,</span><br><span class="line">        job : job</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Param"><a href="#Param" class="headerlink" title="Param()"></a>Param()</h2><p>序列化一個key&#x2F;value對象，該序列化值可以進行AJAX請求時在URL查詢字串中使用。</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>object</td><td>要進行序列化的數值或對象。</td></tr><tr><td>traditional</td><td>規定是否使用傳統的方式淺層進行序列化（参數序列化）。</td></tr></tbody></table><h3 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jQuery.<span class="title function_">param</span>(object,traditional)</span><br></pre></td></tr></table></figure><p>以下範例執行結果width&#x3D;1680&amp;height&#x3D;1050，應用方面可以傳入給ajax。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> params = &#123; <span class="attr">width</span>:<span class="number">1900</span>, <span class="attr">height</span>:<span class="number">1200</span> &#125;;</span><br><span class="line"><span class="keyword">var</span> str = jQuery.<span class="title function_">param</span>(params);</span><br><span class="line">$(<span class="string">&quot;#results&quot;</span>).<span class="title function_">text</span>(str);</span><br></pre></td></tr></table></figure><h3 id="範例"><a href="#範例" class="headerlink" title="範例"></a>範例</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;/jquery/jquery.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      $(<span class="variable language_">document</span>).<span class="title function_">ready</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">      </span></span><br><span class="line"><span class="language-javascript">        personObj=<span class="keyword">new</span> <span class="title class_">Object</span>();</span></span><br><span class="line"><span class="language-javascript">        personObj.<span class="property">firstname</span>=<span class="string">&quot;Bill&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">        personObj.<span class="property">lastname</span>=<span class="string">&quot;Gates&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">        personObj.<span class="property">age</span>=<span class="number">60</span>;</span></span><br><span class="line"><span class="language-javascript">        personObj.<span class="property">eyecolor</span>=<span class="string">&quot;blue&quot;</span>; </span></span><br><span class="line"><span class="language-javascript">        </span></span><br><span class="line"><span class="language-javascript">        $(<span class="string">&quot;button&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">          $(<span class="string">&quot;div&quot;</span>).<span class="title function_">text</span>($.<span class="title function_">param</span>(personObj));</span></span><br><span class="line"><span class="language-javascript">        &#125;);</span></span><br><span class="line"><span class="language-javascript">        </span></span><br><span class="line"><span class="language-javascript">      &#125;);</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span>&gt;</span>序列化对象<span class="tag">&lt;/<span class="name">button</span>&gt;</span>S</span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端技術 </category>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【JS】定時器（timer）使用方式 setTimeout() VS setInterval()</title>
      <link href="/2021/07/17/%E5%89%8D%E7%AB%AF%E6%8A%80%E8%A1%93/JS/%E3%80%90JS%E3%80%91%E5%AE%9A%E6%99%82%E5%99%A8%EF%BC%88timer%EF%BC%89%E4%BD%BF%E7%94%A8%E6%96%B9%E5%BC%8F%20setTimeout()%20VS%20setInterval()/"/>
      <url>/2021/07/17/%E5%89%8D%E7%AB%AF%E6%8A%80%E8%A1%93/JS/%E3%80%90JS%E3%80%91%E5%AE%9A%E6%99%82%E5%99%A8%EF%BC%88timer%EF%BC%89%E4%BD%BF%E7%94%A8%E6%96%B9%E5%BC%8F%20setTimeout()%20VS%20setInterval()/</url>
      
        <content type="html"><![CDATA[<h1 id="定時器（timer）"><a href="#定時器（timer）" class="headerlink" title="定時器（timer）"></a>定時器（timer）</h1><p>定時器在javascript 當中會不知道如何處理定時問題。 不少人會因為要理解使用 Javascript 如何計數相當懊惱，這邊先簡單介紹兩個function熟悉這兩個定義。</p><h2 id="setTimeout-vs-setInterval"><a href="#setTimeout-vs-setInterval" class="headerlink" title="setTimeout vs setInterval"></a>setTimeout vs setInterval</h2><p>這兩個function 功能上有不相同問題，兩種function定義如下。</p><ol><li>setTimeout  : 用於在指定的毫秒數後呼叫函式或計算表示式 - (延遲)</li><li>setInterval : 在播放動畫的時，每隔一定時間就呼叫函式，方法或物件 - (週期)</li></ol><h2 id="setTimeout"><a href="#setTimeout" class="headerlink" title="setTimeout"></a>setTimeout</h2><p>timeout 目前是程式界最常看到的詞，定義上有延遲效果，相對可以使用在時間範圍，後面用AJAX說明。</p><p>下方範例是透過 setTimeout 指定一段程式碼或函式在多少毫秒(ms)後執行，並回傳此定時器的編號。可以透過 clearTimeout 取消程式碼的執行。<br>例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 函式會將第一個參數字串使用eval轉換為可執行之程式碼</span></span><br><span class="line"><span class="comment">// 三秒後在 console 印出 &quot;test123&quot;</span></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="string">&#x27;console.log(&quot;test123&quot;);&#x27;</span>,<span class="number">3000</span>);</span><br><span class="line"><span class="comment">// 你也可以寫成function</span></span><br><span class="line"><span class="built_in">setTimeout</span>(</span><br><span class="line">    <span class="keyword">function</span>(<span class="params"></span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;test123&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">,<span class="number">3000</span>);</span><br></pre></td></tr></table></figure><p>setTimeout()執行方法其實是將須執行程式碼加入任務佇列，直到輪到此程式碼執行時，檢查時間是否到達，若到達則執行程式碼。 舉例來說：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 單純執行這段程式碼，可以看到實際所執行任務的時間</span></span><br><span class="line"><span class="keyword">var</span> startTime= <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">new</span> <span class="title class_">Date</span>()-startTime);&#125;,<span class="number">100</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;<span class="number">1000000000</span>; i++)&#123;&#125;</span><br></pre></td></tr></table></figure><p>可以發現 setTimeout 所設定的程式碼，會因為目前任務佇列所執行的程式碼而可能發生延誤執行的狀況。從下方程式碼，可以看到執行 func 的 end 與 start 時間基本上是符合我們所設定的 100 ms。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> startTime=<span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line"><span class="keyword">var</span> func = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;start: &#x27;</span> + (<span class="keyword">new</span> <span class="title class_">Date</span>()-startTime));</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;<span class="number">1000000000</span>; i++)&#123;&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;end: &#x27;</span> + (<span class="keyword">new</span> <span class="title class_">Date</span>()-startTime));</span><br><span class="line"><span class="built_in">setTimeout</span>(func,<span class="number">100</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">setTimeout</span>(func,<span class="number">100</span>);</span><br><span class="line"><span class="comment">// start: 2515</span></span><br><span class="line"><span class="comment">// end: 3457</span></span><br><span class="line"><span class="comment">// start: 3558</span></span><br><span class="line"><span class="comment">// end: 4503</span></span><br><span class="line"><span class="comment">// start: 4604</span></span><br><span class="line"><span class="comment">// end: 5543</span></span><br><span class="line"><span class="comment">// ....</span></span><br></pre></td></tr></table></figure><h2 id="setInterval"><a href="#setInterval" class="headerlink" title="setInterval"></a>setInterval</h2><p>綁定在瀏覽器 window 的一個方法，可以透過 setInterval 指定一段程式碼或函式定時在多少毫秒(ms)後執行，並回傳此定時器的編號。可以透過 clearInterval 取消程式碼的執行。<br>大致用法與 setTimeout 相同，只差在定時執行，因此這邊我們同樣測試延遲執行的問題。可以發現與 setTimeout 一樣是有延遲的狀況發生。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> startTime=<span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line"><span class="keyword">var</span> func = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;start: &#x27;</span> + (<span class="keyword">new</span> <span class="title class_">Date</span>()-startTime));</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;<span class="number">1000000000</span>; i++)&#123;&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;end: &#x27;</span> + (<span class="keyword">new</span> <span class="title class_">Date</span>()-startTime));</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">setInterval</span>(func,<span class="number">100</span>);</span><br><span class="line"><span class="comment">// start: 2520</span></span><br><span class="line"><span class="comment">// end: 3465</span></span><br><span class="line"><span class="comment">// start: 3466</span></span><br><span class="line"><span class="comment">// end: 4409</span></span><br><span class="line"><span class="comment">// start: 4409</span></span><br><span class="line"><span class="comment">// end: 5350</span></span><br><span class="line"><span class="comment">// start: 5351</span></span><br><span class="line"><span class="comment">// end: 6291</span></span><br><span class="line"><span class="comment">// start: 6292</span></span><br></pre></td></tr></table></figure><p>上面這段程式碼的執行結果，與上面的 setTimeout 比較，你會發現 setInterval 的 end 與 start 時間跳動非常大，並不是我們所設定的 100 ms。<br>由於 setInterval 是一開始就標定了執行時間點，當所註冊的函式(func)超過執行的時間點，結束時則會馬上觸發(func)，因此並不會是固定的 100 ms。</p><h2 id="補充"><a href="#補充" class="headerlink" title="補充"></a>補充</h2><h3 id="AJAX-Timeout"><a href="#AJAX-Timeout" class="headerlink" title="AJAX Timeout"></a>AJAX Timeout</h3><p>很多function 常常會遇到延遲或讀取值無法返回問題，當然這邊定義也是可以視為延遲，效果就會從開始到結束相當實用。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&quot;POST&quot;</span>,</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&quot;xxxx&quot;</span>,</span><br><span class="line">    <span class="attr">timeout</span>: <span class="number">30000</span>, <span class="comment">//超時時間：30秒</span></span><br><span class="line">    <span class="attr">dataType</span>: <span class="string">&#x27;json&#x27;</span></span><br><span class="line">    <span class="attr">success</span>: <span class="keyword">function</span>(<span class="params">result</span>) &#123;</span><br><span class="line">        <span class="comment">// <span class="doctag">TODO:</span> check result</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">error</span>: <span class="keyword">function</span>(<span class="params">XMLHttpRequest, textStatus, errorThrown</span>)&#123;</span><br><span class="line">        <span class="comment">//<span class="doctag">TODO:</span> 處理status， http status code，超時 408</span></span><br><span class="line">        <span class="comment">// 注意：如果發生了錯誤，錯誤資訊（第二個引數）除了得到null之外，還可能</span></span><br><span class="line">        <span class="comment">//是&quot;timeout&quot;, &quot;error&quot;, &quot;notmodified&quot; 和 &quot;parsererror&quot;。</span></span><br><span class="line">    &#125;, </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>注意事項</p><ol><li>預設的timeout為0，代表永不超時</li><li>資料讀取環境。 (如果是遇到 server網路受限或是寬頻受限可以考慮使用此方式)</li><li>超時處理</li></ol><p>XMLHttpRequest.readyState: 狀態碼</p><ul><li>0 － （未初始化）還沒有呼叫send()方法</li><li>1 － （載入）已呼叫send()方法，正在傳送請求</li><li>2 － （載入完成）send()方法執行完成，已經接收到全部響應內容</li><li>3 － （互動）正在解析響應內容</li><li>4 － （完成）響應內容解析完成，可以在客戶端呼叫了</li></ul><h2 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h2><p>最後，利用前面提到的延遲執行(將 setTimeout 與 setInterval 事件放進 task queue)特性，我們可以應用在程式碼執行的順序(比如等 innerHTML 執行完才 document.getElementById)。 舉例來說：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;想最後執行的一段程式碼(getElementById)&quot;</span>);</span><br><span class="line">&#125;, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">a</span>(<span class="params">x</span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;a() 開始 innerHTML&quot;</span>);</span><br><span class="line"><span class="title function_">b</span>(x);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;a() 結束 innerHTML&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">function</span> <span class="title function_">b</span>(<span class="params">y</span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;b() 開始&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;傳入的值&quot;</span> + y);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;b() 結束&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;程式碼開始&quot;</span>);</span><br><span class="line"><span class="title function_">a</span>(<span class="number">42</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;程式碼結束&quot;</span>);</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 執行結果：</span></span><br><span class="line"><span class="comment">// 程式碼開始</span></span><br><span class="line"><span class="comment">// a() 開始 innerHTML</span></span><br><span class="line"><span class="comment">// b() 開始</span></span><br><span class="line"><span class="comment">// 傳入的值42</span></span><br><span class="line"><span class="comment">// b() 結束</span></span><br><span class="line"><span class="comment">// a() 結束 innerHTML</span></span><br><span class="line"><span class="comment">// 程式碼結束</span></span><br><span class="line"><span class="comment">// 想最後執行的一段程式碼(getElementById)</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端技術 </category>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【JS】正規表示式(二) Regular Expression</title>
      <link href="/2021/07/16/%E5%89%8D%E7%AB%AF%E6%8A%80%E8%A1%93/JS/%E3%80%90JS%E3%80%91%E6%AD%A3%E8%A6%8F%E8%A1%A8%E7%A4%BA%E5%BC%8F(%E4%BA%8C)%20Regular%20Expression/"/>
      <url>/2021/07/16/%E5%89%8D%E7%AB%AF%E6%8A%80%E8%A1%93/JS/%E3%80%90JS%E3%80%91%E6%AD%A3%E8%A6%8F%E8%A1%A8%E7%A4%BA%E5%BC%8F(%E4%BA%8C)%20Regular%20Expression/</url>
      
        <content type="html"><![CDATA[<p>正規表示式是最常見的一個功能，不論是字串過濾、轉換、判斷相當實用。這篇使用JS方式使用，後續如果有空就會撰寫其他版本的寫法。</p><h1 id="JS-正規表示式"><a href="#JS-正規表示式" class="headerlink" title="JS 正規表示式"></a>JS 正規表示式</h1><h2 id="使用工具"><a href="#使用工具" class="headerlink" title="使用工具"></a>使用工具</h2><p>本篇使用方式是大家都可以使用的<code>DevTools</code>，如果不知道這東西可以點開瀏覽器並按下F12。</p><p>第一次發現視窗太小，可以參考下方圖片。</p><p><img src="/img/js/context/DevTools_001.png"><br><img src="/img/js/context/DevTools_002.png"></p><h2 id="開始使用"><a href="#開始使用" class="headerlink" title="開始使用"></a>開始使用</h2><p>使用方式是需要選擇主控台即可，其餘的先暫時不理會。</p><p><img src="/img/js/context/DevTools_003.png"></p><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><p>初始化方式可使用下面兩種寫法，一種前後加入斜線就可以達成效果。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> re = <span class="regexp">/Hello/</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> reg = <span class="keyword">new</span> <span class="title class_">RegExp</span>(<span class="string">&#x27;Hello world in JavaScript&#x27;</span>);</span><br></pre></td></tr></table></figure><h2 id="text、exec、search-使用方式"><a href="#text、exec、search-使用方式" class="headerlink" title="text、exec、search 使用方式"></a>text、exec、search 使用方式</h2><p>text 測試字串是否有府和字串，回傳方式會是boolean。<br>以下測試可以使用 <code>/i</code>：不區分大小寫，<code>/g</code>：比對字串所有位置 </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> re = <span class="regexp">/Hello/i</span>;</span><br><span class="line">re.<span class="title function_">test</span>(<span class="string">&#x27;hello&#x27;</span>); <span class="comment">//true</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> re = <span class="regexp">/Hello/g</span>;</span><br><span class="line">re.<span class="title function_">test</span>(<span class="string">&#x27;hello&#x27;</span>); <span class="comment">//false</span></span><br></pre></td></tr></table></figure><hr><p>exec 與test 不同於可以顯示比較詳細的內容，若不存在會以null方式呈現。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> re = <span class="regexp">/Hello/i</span>;</span><br><span class="line">re.<span class="title function_">exec</span>(<span class="string">&#x27;hello&#x27;</span>); <span class="comment">//[&#x27;hello&#x27;, index: 0, input: &#x27;hello&#x27;, groups: undefined]</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> re = <span class="regexp">/Hello/g</span>;</span><br><span class="line">re.<span class="title function_">exec</span>(<span class="string">&#x27;hello&#x27;</span>); <span class="comment">//null</span></span><br></pre></td></tr></table></figure><hr><p>search 與 indexOf 相同，找尋字串中會去抓取第幾位個位置，主要是數值呈現。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str =<span class="string">&#x27;hello world in JavaScript&#x27;</span>;</span><br><span class="line">str.<span class="title function_">search</span>(<span class="string">&#x27;he&#x27;</span>);     <span class="comment">//0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//indeOf比較</span></span><br><span class="line">str.<span class="title function_">search</span>(<span class="string">&#x27;world&#x27;</span>);  <span class="comment">//6</span></span><br><span class="line">str.<span class="title function_">indexOf</span>(<span class="string">&#x27;world&#x27;</span>); <span class="comment">//6</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//找不到</span></span><br><span class="line">str.<span class="title function_">search</span>(<span class="string">&#x27;world1&#x27;</span>); <span class="comment">//-1</span></span><br></pre></td></tr></table></figure><h2 id="特殊字元"><a href="#特殊字元" class="headerlink" title="特殊字元"></a>特殊字元</h2><p>特殊字元有很多種類可以使用看看效果，像是上一張標中有提到 <code>^</code>匹配輸入的開頭。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str =<span class="string">&#x27;hello world in JavaScript&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> re = <span class="regexp">/^hello/</span>;</span><br><span class="line">str.<span class="title function_">match</span>(re); <span class="comment">//[&#x27;hello&#x27;, index: 0, input: &#x27;hello world in JavaScript&#x27;, groups: undefined]</span></span><br><span class="line"></span><br><span class="line">str.<span class="title function_">match</span>(<span class="regexp">/^Hello/</span>); <span class="comment">//null</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>如果是 <code>$</code>用法則會在結尾時取得。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str =<span class="string">&#x27;hello world in JavaScript&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> re = <span class="regexp">/pt$/</span>;</span><br><span class="line">str.<span class="title function_">match</span>(re); <span class="comment">//[&#x27;pt&#x27;, index: 23, input: &#x27;hello world in JavaScript&#x27;, groups: undefined]</span></span><br><span class="line"></span><br><span class="line">str.<span class="title function_">match</span>(<span class="regexp">/pt4/</span>); <span class="comment">//null</span></span><br></pre></td></tr></table></figure><p>有時候常常遇到需要用<code>\b</code>使用這方式，可以參考下方。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> regex = <span class="regexp">/./</span>   <span class="comment">// 比對換行符號外的任意一個字元</span></span><br><span class="line"><span class="keyword">const</span> regex = <span class="regexp">/\d/</span>  <span class="comment">// 比對一個數字，相等於 /[0-9]/</span></span><br><span class="line"><span class="keyword">const</span> regex = <span class="regexp">/\w/</span>  <span class="comment">// 比對一個英文、數字或底線，相等於 /[A-Za-z0-9_]/</span></span><br><span class="line"><span class="keyword">const</span> regex = <span class="regexp">/\s/</span>  <span class="comment">// 比對一個的空格 (ex: space, tab, 換行, ...)</span></span><br><span class="line"><span class="keyword">const</span> regex = <span class="regexp">/[^\w]/</span></span><br></pre></td></tr></table></figure><h2 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h2><p>這邊就會比較多人需要使用這段，原則上如果要判斷序號、數值就可以用這個來排除。<br>下方範例兩種寫法是都可以呈現A-Z效果。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> regex = <span class="regexp">/[ABCDEFGHIJKLMNOPQRSTUVWXYZ]/</span></span><br><span class="line"><span class="keyword">let</span> regex = <span class="regexp">/[A-Z]/</span></span><br></pre></td></tr></table></figure><p>同樣數字也可以呈現，特別需求可以將數字跟英文字合併。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> regex = <span class="regexp">/[0123456789]/</span></span><br><span class="line"><span class="keyword">let</span> regex = <span class="regexp">/[0-9]/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> regex = <span class="regexp">/[A-Za-z0-9]/</span></span><br></pre></td></tr></table></figure><h2 id="量詞"><a href="#量詞" class="headerlink" title="量詞 {}"></a>量詞 {}</h2><p>量詞方式會由{}修飾  <code>/\d\d\d\d\d/ </code> 可以變成 <code>/\d&#123;5&#125;/</code>。 </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用 &#123;5&#125; 表示連續出現 5 次</span></span><br><span class="line"><span class="keyword">let</span> regex = <span class="regexp">/\d&#123;5&#125;/</span></span><br><span class="line">regex.<span class="title function_">exec</span>(<span class="string">&#x27;abcde12345&#x27;</span>) <span class="comment">// [&quot;12345&quot;, index: 5, ...]</span></span><br><span class="line">regex.<span class="title function_">exec</span>(<span class="string">&#x27;a1b2c3d4e5&#x27;</span>) <span class="comment">// null</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用 ? 表示出現 0 或 1 次，等同於 &#123;0,1&#125;</span></span><br><span class="line"><span class="keyword">const</span> regex = <span class="regexp">/\w?/</span></span><br><span class="line"><span class="comment">// 使用 + 表示出現 1 次或以上，等同於 &#123;1,&#125;</span></span><br><span class="line"><span class="keyword">const</span> regex = <span class="regexp">/\w+/</span></span><br><span class="line"><span class="comment">// 使用 * 表示出現 0 次或以上，等同於 &#123;0,&#125;</span></span><br><span class="line"><span class="keyword">const</span> regex = <span class="regexp">/\w*/</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// &#x27;+&#x27; 出現的次數越多優先</span></span><br><span class="line"><span class="keyword">const</span> regex = <span class="regexp">/a\+&#123;2,&#125;/</span></span><br><span class="line">regex.<span class="title function_">exec</span>(<span class="string">&#x27;a+++++&#x27;</span>) <span class="comment">// [&quot;a+++++&quot;, index: 0, ...]</span></span><br><span class="line"><span class="comment">// &#x27;+&#x27; 出現的次數越少優先</span></span><br><span class="line"><span class="keyword">const</span> regex = <span class="regexp">/a\+&#123;2,&#125;?/</span></span><br><span class="line">regex.<span class="title function_">exec</span>(<span class="string">&#x27;a+++++&#x27;</span>) <span class="comment">// [&quot;a++&quot;, index: 0, ...]</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端技術 </category>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【JS】正規表示法(一) Regular Expression</title>
      <link href="/2021/07/15/%E5%89%8D%E7%AB%AF%E6%8A%80%E8%A1%93/JS/%E3%80%90JS%E3%80%91%E6%AD%A3%E8%A6%8F%E8%A1%A8%E7%A4%BA%E6%B3%95(%E4%B8%80)%20Regular%20Expression/"/>
      <url>/2021/07/15/%E5%89%8D%E7%AB%AF%E6%8A%80%E8%A1%93/JS/%E3%80%90JS%E3%80%91%E6%AD%A3%E8%A6%8F%E8%A1%A8%E7%A4%BA%E6%B3%95(%E4%B8%80)%20Regular%20Expression/</url>
      
        <content type="html"><![CDATA[<p>這裡主要紀錄使用規則，後續補上使用說明。</p><h1 id="正規表示式"><a href="#正規表示式" class="headerlink" title="正規表示式"></a>正規表示式</h1><p>正規表示法（英語：Regular Expression，常簡寫為regex、regexp或RE），又稱正規表達式、正規表示式、規則運算式、常規表示法，是電腦科學的一個概念。正規表示式使用單個字串來描述、符合一系列符合某個句法規則的字串。在很多文字編輯器裡，正則表達式通常被用來檢索、替換那些符合某個模式的文字。</p><p>正規表達式是被用來匹配字串中字元組合的模式。在 JavaScript 中，正規表達式也是物件，這些模式在 RegExp 的 exec (en-US) 和 test (en-US) 方法中，以及 String 的 match、replace、search (en-US)、split (en-US) 等方法中被運用。</p><h2 id="中介字元（Metacharacters）"><a href="#中介字元（Metacharacters）" class="headerlink" title="中介字元（Metacharacters）"></a>中介字元（Metacharacters）</h2><table><thead><tr><th>中介字元</th><th>說明</th><th>範例</th><th>說明</th></tr></thead><tbody><tr><td>[]</td><td>字元的集合。</td><td>[a-m]</td><td>a~m之間的小寫英文字</td></tr><tr><td>\</td><td>發出特殊序列的信號（也可以用於轉義特殊字符）。</td><td>\d</td><td>只要數字</td></tr><tr><td>.</td><td>除了新行符號外的任意字元。</td><td>he…o</td><td>he字串後接著兩個字元，然後接著是o</td></tr><tr><td>^</td><td>字串以此為開頭。</td><td>^hello</td><td>字串開頭為hello</td></tr><tr><td>$</td><td>以此為結尾的字串。</td><td>world$</td><td>字串結尾為world</td></tr><tr><td>*</td><td>字元或字串出現任意次數（包含０次）。</td><td>aix*</td><td>ai、aix、aix和aixx或更多x都符合。</td></tr><tr><td>?</td><td>字元或字串出現 0 或 1 次。</td><td>aix?</td><td>僅ai、aix符合。</td></tr><tr><td>+</td><td>字元或字串至少出現一次。</td><td>aix+</td><td>僅aix符合。</td></tr><tr><td>{m,n}</td><td>指定字元或字串出現的m~n之間的次數。</td><td>al{2} al{3,6}</td><td>a後面連續2個l的字串 a後面連續3到6個l的字串</td></tr><tr><td>|</td><td>單一字元或群組的或，例如 ‘a|b’ 為 ‘a’ 或 ‘b’ 。</td><td>falls|stays</td><td>字串包含falls或是stays</td></tr><tr><td>()</td><td>對小括弧內的字元形成群組。</td><td></td><td></td></tr></tbody></table><h2 id="特別序列（Special-Sequences）"><a href="#特別序列（Special-Sequences）" class="headerlink" title="特別序列（Special Sequences）"></a>特別序列（Special Sequences）</h2><table><thead><tr><th>特別序列</th><th>說明</th></tr></thead><tbody><tr><td>\A</td><td>字串的開頭字元。</td></tr><tr><td>\b</td><td>單字的界線字元。</td></tr><tr><td>\B</td><td>字元的界線字元。</td></tr><tr><td>\d</td><td>數字，從 0 到 9 。</td></tr><tr><td>\D</td><td>非數字。</td></tr><tr><td>\s</td><td>各種空白符號，包含換行符號 \n 。</td></tr><tr><td>\S</td><td>非空白符號。</td></tr><tr><td>\w</td><td>任意文字字元，包括數字。</td></tr><tr><td>\W</td><td>非文字字元，包括空白符號。</td></tr><tr><td>\Z</td><td>字串的結尾字元。</td></tr></tbody></table><h2 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h2><table><thead><tr><th>集合</th><th>說明</th></tr></thead><tbody><tr><td>[arn]</td><td>回傳字串中含有a、r或n的小寫字元。</td></tr><tr><td>[a-n]</td><td>回傳字串中含有a~n之間的任意小寫字元。</td></tr><tr><td>[^arn]</td><td>回傳任意字元，除了，a、r和n。</td></tr><tr><td>[0123]</td><td>回傳字串中含有0、1、2或3的數字。</td></tr><tr><td>[0-9]</td><td>回傳字串中含有0~9之間的數字。</td></tr><tr><td>[0-5][0-9]</td><td>回傳00~59之間的數字。</td></tr><tr><td>[a-zA-Z]</td><td>回傳a~z之間的大寫和小寫字元。</td></tr><tr><td>[+]</td><td>回傳字串中的+號（+, *, ., &#96;</td></tr><tr><td>\W</td><td>非文字字元，包括空白符號。</td></tr><tr><td>\Z</td><td>字串的結尾字元。</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 前端技術 </category>
          
          <category> javascript </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>【JS】檢查變數函式 typeof 運算子</title>
      <link href="/2021/07/14/%E5%89%8D%E7%AB%AF%E6%8A%80%E8%A1%93/JS/%E3%80%90JS%E3%80%91%E6%AA%A2%E6%9F%A5%E8%AE%8A%E6%95%B8%E5%87%BD%E5%BC%8F%20typeof%20%E9%81%8B%E7%AE%97%E5%AD%90/"/>
      <url>/2021/07/14/%E5%89%8D%E7%AB%AF%E6%8A%80%E8%A1%93/JS/%E3%80%90JS%E3%80%91%E6%AA%A2%E6%9F%A5%E8%AE%8A%E6%95%B8%E5%87%BD%E5%BC%8F%20typeof%20%E9%81%8B%E7%AE%97%E5%AD%90/</url>
      
        <content type="html"><![CDATA[<p>近期看到 JavaScript 中，有很多人使用 typeof 讓我想要玩玩看 typeof 是什麼特性。typeof 使用範圍常常是在 if 當中使用，讓我們直接實作typeof吧!</p><h1 id="typeof-簡介"><a href="#typeof-簡介" class="headerlink" title="typeof 簡介"></a>typeof 簡介</h1><h2 id="一、使用方式"><a href="#一、使用方式" class="headerlink" title="一、使用方式"></a>一、使用方式</h2><p>typeof 是一個 運算子(operator)。使用時機是查看 value 是什麼型態，也能把它當成除錯的(typeof)關鍵詞。 </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typeof</span> operand</span><br></pre></td></tr></table></figure><h2 id="二、文件說明"><a href="#二、文件說明" class="headerlink" title="二、文件說明"></a>二、文件說明</h2><p>以下為 MDN Web typeof operator result 說明。<br><img src="/img/Web/js/js-typeof/typeof_desc.jpg"></p><h1 id="使用-typeof"><a href="#使用-typeof" class="headerlink" title="使用 typeof"></a>使用 typeof</h1><p>看範例可以發現使用難易度不大。這邊範例我使用 var 變數，有用過JavaScript都知道，var是非常難控管常常會有過不是自己想要的結果。<br>從下方範例 str 我給它初始賦值為 “”，想必知道 result 為 string 。 </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str =<span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> str); <span class="comment">// string</span></span><br></pre></td></tr></table></figure><p>範例是明確給予初始賦值。當如果沒有給予初始賦值情況如下:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> str); <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><p>可以發現範例中，沒有明確給予賦值回傳結果為<code>undefined</code>，這個特性可以利用這個typeof預防undefined問題。</p><blockquote><p>[補充] : 這裡可以理解為尚未分配的初始變數(初始賦值) Typeof 視為 <code>undefined</code> 不會是 <code>null</code>。</p></blockquote><h2 id="一、輸出範例"><a href="#一、輸出範例" class="headerlink" title="一、輸出範例"></a>一、輸出範例</h2><p>** 注意: <code>null</code> 在typeof為 object 。 ** </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> result;</span><br><span class="line"></span><br><span class="line">result = <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;typeof return : &quot;</span> + <span class="keyword">typeof</span> result);</span><br><span class="line"><span class="comment">//typeof return : string</span></span><br><span class="line"></span><br><span class="line">result = <span class="number">1</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;typeof return : &quot;</span> +<span class="keyword">typeof</span> result);</span><br><span class="line"><span class="comment">//typeof return : number</span></span><br><span class="line"></span><br><span class="line">result = <span class="literal">true</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;typeof return : &quot;</span> +<span class="keyword">typeof</span> result);</span><br><span class="line"><span class="comment">//typeof return : boolean</span></span><br><span class="line"></span><br><span class="line">result = []; <span class="comment">//或是使用null</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;typeof return : &quot;</span> +<span class="keyword">typeof</span> result);</span><br><span class="line"><span class="comment">//typeof return : object</span></span><br><span class="line"></span><br><span class="line">result = <span class="literal">undefined</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;typeof return : &quot;</span> +<span class="keyword">typeof</span> result);</span><br><span class="line"><span class="comment">//typeof return : undefined</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="二、typeof-取得-Function-型別"><a href="#二、typeof-取得-Function-型別" class="headerlink" title="二、typeof 取得 Function 型別"></a>二、typeof 取得 Function 型別</h2><p>Typeof 對上 function 也能使用typeof取得型態，寫法如同上方一樣，請各位參閱下方範例。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Get_StrData</span>(<span class="params">str</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">str</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> result = <span class="title class_">Get</span>_StrData(<span class="string">&quot;John&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;typeof return : &quot;</span> + <span class="keyword">typeof</span> result)</span><br></pre></td></tr></table></figure><p>範例中需要小心 Reuslt 內容， 如果建構子所建立出來的物件為 object，不注意使用會遇到 null &#x2F; undefined 。<br>這需要請各位使用判斷需要留意的點。</p><h2 id="三、補充"><a href="#三、補充" class="headerlink" title="三、補充"></a>三、補充</h2><h3 id="1-undefined表示"><a href="#1-undefined表示" class="headerlink" title="1. undefined表示"></a>1. undefined表示</h3><p>undefined表示”缺少值”，就是此處應該有一個值，但是還沒有定義。典型用法是：</p><ul><li>變數被聲明了，但沒有賦值時，就等於 undefined。</li><li>呼叫函式時，應該提供的參數沒有提供，該參數等於 undefined。</li><li>物件沒有 “沒有賦值”的屬性，該屬性的值為 undefined。</li><li>函式沒有回傳值時，預設回傳 undefined。</li></ul><div class="note info flat"><h3 id="Ashe-Li-對-Host-object-使用-typeof"><a href="#Ashe-Li-對-Host-object-使用-typeof" class="headerlink" title="[Ashe Li] - 對 Host object 使用 typeof"></a>[Ashe Li] - 對 Host object 使用 typeof</h3><p>Host object 前提是沒有實作 Call，因為有實作就視為 function</p><ul><li>如果是 typeof new val(建構式) ，回傳 Object</li><li>如果是 typeof 包裝物件(wrapper objects) ，回傳 包裝物件(wrapper objects) 之後的型別。</li></ul></div><h3 id="2-使用方向"><a href="#2-使用方向" class="headerlink" title="2. 使用方向"></a>2. 使用方向</h3><p>typeof 不單單查看型態，可以判斷使用者輸入的值是否允許的型態。例如 : 輸入年齡、數量、體種可以卡 “number” 判斷。</p><p>必須要小心使用 object 部分，因為值為 null 並非是缺少值的一種在判斷中，需要防null的問題。</p><h3 id="3-參考文件"><a href="#3-參考文件" class="headerlink" title="3. 參考文件"></a>3. 參考文件</h3><ul><li><p><a href="https://ithelp.ithome.com.tw/articles/10218815">YDKJS (Type) : 初學者第一坑 - typeof 運算子, 詳解 undefined 11th鐵人賽</a></p></li><li><p><a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Operators/typeof">MDN Web Docs</a></p></li><li><p><a href="https://pjchender.blogspot.com/2016/07/javascript-typeof.html">[筆記] JavaScript 中利用 typeof 檢驗運算元所代表的型別</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端技術 </category>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【JS】Form 快速取得法 serialize() 使用方法</title>
      <link href="/2021/07/13/%E5%89%8D%E7%AB%AF%E6%8A%80%E8%A1%93/JS/%E3%80%90JS%E3%80%91Form%20%E5%BF%AB%E9%80%9F%E5%8F%96%E5%BE%97%E6%B3%95%20serialize()%20%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/"/>
      <url>/2021/07/13/%E5%89%8D%E7%AB%AF%E6%8A%80%E8%A1%93/JS/%E3%80%90JS%E3%80%91Form%20%E5%BF%AB%E9%80%9F%E5%8F%96%E5%BE%97%E6%B3%95%20serialize()%20%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>近期整理公司的 JavaScript 發現很多人使用著直接抓取 val()，繼上一篇提到 typeof 後，我又馬上做出 <code>serialize()</code> 章節，希望大家只要是全讀範圍的 input 請使用 <code>serialize()</code> 減少 <code>undefined</code>問題。 </p><h1 id="serialize-方法"><a href="#serialize-方法" class="headerlink" title="serialize()方法"></a>serialize()方法</h1><p>簡單來說是一種序列化，目的是為了將input 、select 、textarea等輸入框轉成序列化方式。</p><h2 id="序列化"><a href="#序列化" class="headerlink" title="序列化"></a>序列化</h2><p>序列化是將物件狀態轉換為<em>可保存</em>或<em>可傳輸格式</em>的形式。[ps : 下次章節會詳細介紹 序列化 VS 反序列化]</p><ul><li>檢視 $(‘form’).serialize() 內容<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&#x27;#submit&#x27;</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> form = $(<span class="string">&#x27;form&#x27;</span>).<span class="title function_">serialize</span>();</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(form);<span class="comment">// name=john&amp;old=21&amp;date=2021/12/11</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><h2 id="使用範例"><a href="#使用範例" class="headerlink" title="使用範例"></a>使用範例</h2><p>簡單創建幾個input值以及form，如果有強迫症請自行排版。清楚看到這是我們平常讓User去Key時候，常用到的樣板。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">role</span>=<span class="string">&quot;form&quot;</span> <span class="attr">action</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;name&quot;</span> <span class="attr">name</span>=<span class="string">&#x27;text1&#x27;</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;name&quot;</span>&gt;</span>年齡<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;number&quot;</span> <span class="attr">name</span>=<span class="string">&quot;old&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;date&quot;</span> <span class="attr">name</span>=<span class="string">&quot;date&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;submit&quot;</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;index.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>未來遇到 submit 傳到ajax額外新增，又不想自動submit如下方寫法。如果你是這麼撰寫js會不時遇到資料庫內容有 <code>undefined</code>，原因可能是不存在的物件、變數，請避免使用下方範例。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">AjaxForm</span>(<span class="params">select</span>) &#123;</span><br><span class="line">    $.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">        <span class="attr">async</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">url</span>: url,</span><br><span class="line">        <span class="attr">data</span>: &#123;</span><br><span class="line">            <span class="string">&quot;name&quot;</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123; <span class="keyword">return</span> $(<span class="string">&#x27;[name=&quot;name&quot;]&#x27;</span>).<span class="title function_">val</span>(); &#125;,</span><br><span class="line">            <span class="string">&quot;old&quot;</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123; <span class="keyword">return</span> $(<span class="string">&#x27;[name=&quot;old&quot;]&#x27;</span>).<span class="title function_">val</span>(); &#125;,</span><br><span class="line">            <span class="string">&quot;date&quot;</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123; <span class="keyword">return</span> $(<span class="string">&#x27;[name=&quot;date&quot;]&#x27;</span>).<span class="title function_">val</span>(); &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>這樣就完成傳值了，下方範例意思為 form 會將裡面的input 所有的值轉換成序列，效果如同上方範例。上下方法內容回傳一樣，下方可以減少錯字的危機、減少行數，請各好好善用.serialize()功能。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">AjaxForm</span>(<span class="params">select</span>) &#123;</span><br><span class="line">    $.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">        <span class="attr">async</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">url</span>: url,</span><br><span class="line">        <span class="attr">data</span>: $(<span class="string">&#x27;form&#x27;</span>).<span class="title function_">serialize</span>()</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端技術 </category>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【JS】Fetch 使用方式</title>
      <link href="/2021/07/12/%E5%89%8D%E7%AB%AF%E6%8A%80%E8%A1%93/JS/%E3%80%90JS%E3%80%91Fetch%20%E4%BD%BF%E7%94%A8%E6%96%B9%E5%BC%8F/"/>
      <url>/2021/07/12/%E5%89%8D%E7%AB%AF%E6%8A%80%E8%A1%93/JS/%E3%80%90JS%E3%80%91Fetch%20%E4%BD%BF%E7%94%A8%E6%96%B9%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>前陣子，同事需要做一個能在Url判斷是否能連上或是存在的網址，才進行轉頁面。因此我們直接來實作有幾種方式可以知道已存在網址或是不存在。</p><h1 id="遠端資料方法"><a href="#遠端資料方法" class="headerlink" title="遠端資料方法"></a>遠端資料方法</h1><p>JavaScript 中可以使用 <a href="https://developer.mozilla.org/zh-TW/docs/Web/API/XMLHttpRequest">XMLHttpRequest</a> 的方法。</p><h2 id="XMLHttpRequest"><a href="#XMLHttpRequest" class="headerlink" title="XMLHttpRequest"></a>XMLHttpRequest</h2><p>JavaScript 沒有jquery 使用，會如同下方處理方式。 針對[url]變數舉得網址，load中會取得status方式，算是很久的寫法。</p><div class="note blue icon-padding simple"><i class="note-icon fas fa-bullhorn"></i><p>備註 : (這部分可以寫成 ajax 方式，如果遇到 CORS 之後章節會在細說。)</p></div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> url = <span class="string">&#x27;https://randomuser.me/api/&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> req = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line">req.<span class="title function_">open</span>(<span class="string">&#x27;get&#x27;</span>, url, <span class="literal">false</span>);</span><br><span class="line">req.<span class="property">onload</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> $div = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#response-result&#x27;</span>);</span><br><span class="line">  $div.<span class="property">textContent</span> += <span class="string">&#x27;DONE : &#x27;</span>+ req.<span class="property">status</span>;</span><br><span class="line">&#125;;</span><br><span class="line">req.<span class="title function_">send</span>(<span class="literal">null</span>);</span><br></pre></td></tr></table></figure><h2 id="Fetch"><a href="#Fetch" class="headerlink" title="Fetch"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Fetch_API/Using_Fetch">Fetch</a></h2><p>這裡Fetch提供簡單的範例來取得遠端的資料，fetch 會使用 ES6 的 Promise 作回應，then 作為下一步，catch 作為錯誤回應 (404, 500…)。<br>回傳的為 ReadableStream 物件，需要使用不同資料類型使用對應方法，才能正確取得資料物件。</p><p><img src="/img/Web/js/js-fetch/xhr.PNG"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> url =</span><br><span class="line">  <span class="string">&#x27;https://randomuser.me/api/&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_">fetch</span>(url,&#123;&#125;).<span class="title function_">then</span>(<span class="function">(<span class="params">rep</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(rep.<span class="property">status</span>);</span><br><span class="line">  <span class="keyword">let</span> $div = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#response-result&#x27;</span>);</span><br><span class="line">  $div.<span class="property">textContent</span> += <span class="string">&#x27;DONE : &#x27;</span>+ rep.<span class="property">status</span>;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>fetch 後方會接 then()，這是 Promise 的特性，資料取得後可在 then 裡面接收。<code>return response.json();</code> 的資料則會傳到下一個 then()。<br>then方法會得到一個帶有Response(回應)物件值的已實現狀態的Promise物件。Response 物件通常都是從外部資源要求所得到，自訂Response物件算是會在特殊的情況下才會作的事情。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> url =</span><br><span class="line">  <span class="string">&#x27;https://randomuser.me/api/&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_">fetch</span>(url,&#123;&#125;).<span class="title function_">then</span>(<span class="function">(<span class="params">rep</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(rep.<span class="property">status</span>);</span><br><span class="line">  <span class="keyword">let</span> $div = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#response-result&#x27;</span>);</span><br><span class="line">  $div.<span class="property">textContent</span> += <span class="string">&#x27;DONE : &#x27;</span>+ rep.<span class="property">status</span>;</span><br><span class="line">  <span class="keyword">return</span> res.<span class="title function_">json</span>(); </span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function">(<span class="params">jsonData</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(jsonData);</span><br><span class="line">&#125;).<span class="title function_">catch</span>(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;錯誤:&#x27;</span>, err);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="Fetch相關介面說明"><a href="#Fetch相關介面說明" class="headerlink" title="Fetch相關介面說明"></a>Fetch相關介面說明</h1><p>fetch的核心由GlobalFetch、Request、Response與Headers四個介面(物件)與一個Body(Mixin混合)。概略的內容說明如下:</p><ul><li>GlobalFetch: 提供全域的fetch方法</li><li>Request: 要求，其中包含method、url、headers、context、body等等屬性與clone方法</li><li>Response: 回應，其中包含headers、ok、status、statusText、type、body等等屬性與clone方法</li><li>Headers: 執行Request與Response中所包含的headers的各種動作，例如取回、增加、移除、檢查等等。設計這個介面的原因有一部份是為了安全性。</li><li>Body: 同時在Request與Response中均有實作，裡面有包含主體內容的資料，是一種ReadableStream(可讀取串流)的物件</li></ul><h2 id="Request-要求"><a href="#Request-要求" class="headerlink" title="Request(要求)"></a>Request(要求)</h2><p>Request 物件中可以包含的屬性值，可以看到設定值相當多，可以依使用情況設定到很細:</p><ul><li>method: GET, POST, PUT, DELETE, HEAD。</li><li>url: 要求的網址。</li><li>headers: 與要求相關的Headers物件。</li><li>referrer - no-referrer, client或一個網址。預設為client。</li><li>mode - cors, no-cors, same-origin, navigate。預設為cors。Chrome(v47~)目前的預設值是same-origin。</li><li>credentials - omit, same-origin, include。預設為omit。Chrome(v47~)目前的預設值是include。</li><li>redirect - follow, error, manual。Chrome(v47~)目前的預設值是。manual。</li><li>integrity - Subresource Integrity(子資源完整性, SRI)的值</li><li>cache - default, no-store, reload, no-cache, 或 force-cache</li><li>body: 要加到要求中的內容。注意，method為GET或HEAD時不使用這個值。</li></ul><h2 id="Response-回應"><a href="#Response-回應" class="headerlink" title="Response(回應)"></a>Response(回應)</h2><ul><li>Response 物件中包含的屬性摘要如下:</li><li>type: basic, cors</li><li>url: 回應網址</li><li>useFinalURL: 布林值，代表這個網址是否為最後的網址(也可能是重新導向的網址)</li><li>status: 狀態碼 (例如: 200, 404, 500…)</li><li>ok: 代表成功的狀態碼 (狀態碼介於200-299)</li><li>statusText: 狀態碼的文字 (例如: OK)</li><li>headers: 與回應相關的Headers物件</li></ul><h1 id="參考文件"><a href="#參考文件" class="headerlink" title="參考文件"></a>參考文件</h1><ul><li><a href="https://eyesofkids.gitbooks.io/javascript-start-from-es6/content/part4/ajax_fetch.html">https://eyesofkids.gitbooks.io/javascript-start-from-es6/content/part4/ajax_fetch.html</a></li><li><a href="https://wcc723.github.io/javascript/2017/12/28/javascript-fetch/">https://wcc723.github.io/javascript/2017/12/28/javascript-fetch/</a></li><li><a href="https://shubo.io/what-is-cors/">https://shubo.io/what-is-cors/</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端技術 </category>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
            <tag> ES6 Web 技術 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Github Pages (一) - SEO 搜尋引擎</title>
      <link href="/2021/07/11/DevOps/Github/Github%20Pages%20(%E4%B8%80)%20-%20SEO%20%E6%90%9C%E5%B0%8B%E5%BC%95%E6%93%8E/"/>
      <url>/2021/07/11/DevOps/Github/Github%20Pages%20(%E4%B8%80)%20-%20SEO%20%E6%90%9C%E5%B0%8B%E5%BC%95%E6%93%8E/</url>
      
        <content type="html"><![CDATA[<p>Blog 目前已經經營快要過完半年，近期發現Google 搜尋引擎找不到我的Blog，原本以為Github Pages 會加入在搜尋引擎當中，測試下來結論是沒有出現。目前想到原因是 SEO 無法辨認出網站，於是，目前得知每個Browser會有搜尋引擎運算，如果沒有出現可能要留意了。</p><h2 id="Google-Search-Console"><a href="#Google-Search-Console" class="headerlink" title="Google Search Console"></a><a href="https://search.google.com/search-console/about">Google Search Console</a></h2><p>Google Search Console 是 Google 提供監控、維持網站在 Google 搜尋結果中的排名，並排解相關問題。網站上未申請 Search Console 還是有機會在Google 排名當中，如果要改善SEO 就需要使用。</p><h2 id="hexo-generator-sitemap"><a href="#hexo-generator-sitemap" class="headerlink" title="hexo-generator-sitemap"></a><a href="https://www.npmjs.com/package/hexo-generator-sitemap">hexo-generator-sitemap</a></h2><p>這個Plugin 是為了產生 Sitemap.xml 使用，需要加入在_config.yml設定檔。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sitemap</span><br><span class="line">  path:</span><br><span class="line">    - sitemap.xml</span><br></pre></td></tr></table></figure><h2 id="sitemap-網站地圖"><a href="#sitemap-網站地圖" class="headerlink" title="sitemap 網站地圖"></a>sitemap 網站地圖</h2><p>Google Search 搜尋引擎有兩種模式。第一種搜尋引擎自己抓取、第二種使用Sitemap 讓搜尋引擎提早發現哪些頁面是被收錄。Sitemap 主要用意是收錄、存取Google引擎當中，可以讓 Google 提早收錄到你想要的網站、頁面。</p><p>如果要使用網站上產生 Sitemap 可以使用 <a href="https://www.xml-sitemaps.com/">XML Sitemap Online</a>。</p><h2 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h2><p>Googel Search Console 使用需要設定幾個動作才會被搜尋得到，目前設定完畢後第二天就可以搜尋到網站，後續會補上操作章節。</p><p>主要設定大綱為這兩項。</p><ol><li>網站審查</li><li>Sitemap</li></ol><h2 id="補充"><a href="#補充" class="headerlink" title="補充"></a>補充</h2><h3 id="如何測試自己網站是否有加入"><a href="#如何測試自己網站是否有加入" class="headerlink" title="如何測試自己網站是否有加入"></a>如何測試自己網站是否有加入</h3><p>只要在 Browser Url 輸入以下方式就可以看得到了。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">site:&lt;url&gt;</span><br><span class="line"></span><br><span class="line">// example</span><br><span class="line">site:https://jontcont.github.io/</span><br></pre></td></tr></table></figure><h2 id="參考文件"><a href="#參考文件" class="headerlink" title="參考文件"></a>參考文件</h2><ul><li><a href="https://ktinglee.github.io/what-is-seo/">什麼是SEO？ - GitHub Pages x Jekyll x Blog</a></li><li><a href="https://kucw.github.io/blog/2021/1/from-medium-to-github/">為了SEO！我離開了Medium，改在GitHub 上自架個人網站</a></li><li><a href="https://annkuoq.github.io/blog/2020-03-15-how-to-find-my-blog-on-google-search/">如何讓 Google 搜尋到自己的部落格</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> DevOps </category>
          
          <category> Github </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Github Pages (二) - Google Search Console</title>
      <link href="/2021/07/11/DevOps/Github/Github%20Pages%20(%E4%BA%8C)%20-%20Google%20Search%20Console/"/>
      <url>/2021/07/11/DevOps/Github/Github%20Pages%20(%E4%BA%8C)%20-%20Google%20Search%20Console/</url>
      
        <content type="html"><![CDATA[<h1 id="使用-Google-Search-Console"><a href="#使用-Google-Search-Console" class="headerlink" title="使用 Google Search Console"></a>使用 <a href="https://search.google.com/search-console/about">Google Search Console</a></h1><p>Google Search Console 近期有新增[網域]資源類型，因為我們是使用 Github Pages 所以要使用 [網址前置字元] 來設定 。<br><img src="/img/Note/Github_Pages/Snipaste_2022-08-31_12-18-49.png"></p><p>驗證擁有權部分只需要將它提供的載點放入網在中即可。<br><img src="/img/Note/Github_Pages/Snipaste_2022-08-31_14-34-21.png"></p><h2 id="Sitemap"><a href="#Sitemap" class="headerlink" title="Sitemap"></a>Sitemap</h2><p>上一篇有簡單帶過 Sitemap 使用方式。這邊初始使用時候會使用上 <a href="https://www.xml-sitemaps.com/">XML Sitemap Online</a>，可以快速鍵至到 Github 到上面。接下來，放置root底下路徑並等待Github Pages 上去到頁面當中。<br><img src="/img/Note/Github_Pages/Snipaste_2022-08-31_14-33-01.png"></p><p>以上準備完成就只要加入剛才的  <code>sitemap.xml</code> 即可。<br><img src="/img/Note/Github_Pages/Snipaste_2022-08-31_14-25-33.png"></p><h2 id="網址審查"><a href="#網址審查" class="headerlink" title="網址審查"></a>網址審查</h2><p>網址審查功能主要是單頁驗證，意思是sitemap 是讓所有網站可以被 Google 搜尋得到，如果沒有編入索引內容當中是沒辦法查詢到這個內容，這裡可以使用[網址審查]排除這問題。<br><img src="/img/Note/Github_Pages/Snipaste_2022-08-31_14-43-13.png"></p><p>網址審查部分比較特別地方，需要由 Google 判定這個網址是否符合網址規範才會加入成功，第一次驗證可能需要等到明天才會達到效果。<br><img src="/img/Note/Github_Pages/Snipaste_2022-08-31_14-46-40.png"></p><h2 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h2><p>Google Search Console 有這兩種功能可以快速加入到Google Search 裡面，如果使用[網址審查]方式，可能是最快呈現效果。如果使用 <a href="https://www.npmjs.com/package/hexo-generator-sitemap">hexo-generator-sitemap</a>就只需要特別指定sitemap.xml 相當方便。</p>]]></content>
      
      
      <categories>
          
          <category> DevOps </category>
          
          <category> Github </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【JS】前端遇到的基本問題</title>
      <link href="/2021/07/11/%E5%89%8D%E7%AB%AF%E6%8A%80%E8%A1%93/JS/%E3%80%90JS%E3%80%91%E5%89%8D%E7%AB%AF%E9%81%87%E5%88%B0%E7%9A%84%E5%9F%BA%E6%9C%AC%E5%95%8F%E9%A1%8C%20/"/>
      <url>/2021/07/11/%E5%89%8D%E7%AB%AF%E6%8A%80%E8%A1%93/JS/%E3%80%90JS%E3%80%91%E5%89%8D%E7%AB%AF%E9%81%87%E5%88%B0%E7%9A%84%E5%9F%BA%E6%9C%AC%E5%95%8F%E9%A1%8C%20/</url>
      
        <content type="html"><![CDATA[<p>進入網頁世界時候，常常問到什麼是 CDN、什麼是 .min.js或者是Reset Css，此章節為定期維護不定時會在這裡更新。</p><h1 id="1-CDN-內容傳遞網路-Content-delivery-network"><a href="#1-CDN-內容傳遞網路-Content-delivery-network" class="headerlink" title="1. CDN -內容傳遞網路  (Content delivery network)"></a>1. CDN -內容傳遞網路  (Content delivery network)</h1><p>是指一種透過網際網路互相連接的電腦網路系統，利用最靠近每位使用者的伺服器，更快、更可靠地將音樂、圖片、影片、應用程式及其他檔案傳送給使用者，來提供高效能、可擴展性及低成本的網路內容傳遞給使用者。<br>這是一種內容在網路上傳輸的快取機制。</p><h2 id="優點"><a href="#優點" class="headerlink" title="優點"></a>優點</h2><ol><li>加速網頁瀏覽效能：因為已經將緩存資料放在最近的機房中，不需要重新像伺服器讀取</li><li>有效分流(頻寬)：當所有用戶都不再向同一個伺服器讀取資料，大幅降低集中流量</li><li>網站穩定度：網站流量分散後，網站的穩定度大幅提高，即使短暫當機也不怕用戶無法使用</li><li>安全性增加：因網站透過CDN分散出去，駭客較難直接攻擊網站本體</li></ol><h2 id="2-Reset-Css"><a href="#2-Reset-Css" class="headerlink" title="2. Reset Css"></a>2. Reset Css</h2><p>在 W3C 制訂 HTML 與 CSS 規格時，並沒有強制規定各家瀏覽器應該怎樣實作每一個 HTML tag 的 CSS 預設樣式，只有提供資訊參考的範例，加上IE 獨霸的時期，那時候還沒有其他瀏覽器， CSS Reset 的需求主要落在 IE 各版本之間的調整，後來 Firefox、safari、Chrome 陸續出現，網頁設計師必須要針對每個瀏覽器去做調整，因此 CSS Reset 的需求漸漸增加。</p><p>有幾套常見的 CSS Reset，提供各位參閱。</p><ul><li><a href="https://meyerweb.com/eric/tools/css/reset/">Reset CSS</a>，此為 Eric Meyer 的版本</li><li><a href="http://html5doctor.com/html-5-reset-stylesheet/">HTML5 Reset Stylesheet，HTML5 Doctor</a> 網站修改自 Eric A. Meyer 的版本。</li><li><a href="https://clarle.github.io/yui3/yui/docs/cssreset/">CSS Reset - YUI Library</a> ，由 Yahoo UI Library v3 所提供的 CSS Reset 版本。</li></ul><h2 id="3-css命名規則"><a href="#3-css命名規則" class="headerlink" title="3.css命名規則"></a>3.css命名規則</h2><h3 id="OOCSS（Object-Oriented-CSS）"><a href="#OOCSS（Object-Oriented-CSS）" class="headerlink" title="OOCSS（Object Oriented CSS）"></a>OOCSS（Object Oriented CSS）</h3><ol><li>分離結構與樣式（Separate container and content）：結構是元素標籤，樣式是指顏色，減少依賴結構與樣式間的影響，應該要增加樣式的可重覆性。</li><li>分離HTML與CSS（Separate structure and skin）：是指盡量將可共用的樣式單獨抽離出來給class。</li></ol><h3 id="SMACSS"><a href="#SMACSS" class="headerlink" title="SMACSS"></a>SMACSS</h3><p>（Scalable &amp; Modular Architecture for CSS）更具結構與命名規則的限制，透過以下五種分類概念，把class的命成拆的更細節。</p><ul><li>SMACSS把CSS分成五種結構：（Categorizing CSS Rules）： <code>Base</code>、<code>Layout</code>、<code>Module</code>、<code>State</code>、<code>Theme</code></li><li>命名規則：為CSS做分類，id與css的使用不會是獨立性，會透過dash 去做分類，命名規則（Naming Rules）對於SMACSS是很重要的。</li></ul><h3 id="BEM（Block，Element，Modifier）"><a href="#BEM（Block，Element，Modifier）" class="headerlink" title="BEM（Block，Element，Modifier）"></a>BEM（Block，Element，Modifier）</h3><p>由區塊、元素與修飾狀態 </p><ul><li>Block：　是頁面獨立的區塊，每個頁面都可以看成很多區塊的組合。</li><li>Element：是指區塊中的元素</li><li>Modifier：是指描述Block或者Element的屬性或狀態<br>透過上面三點，結合再一起的class命名就是BEM</li></ul><h1 id="4-JS-中-min-js-和-js-檔案的區別"><a href="#4-JS-中-min-js-和-js-檔案的區別" class="headerlink" title="4. JS 中 .min.js 和.js 檔案的區別"></a>4. JS 中 .min.js 和.js 檔案的區別</h1><h2 id="一、-js和-min-js檔案分別是什麼"><a href="#一、-js和-min-js檔案分別是什麼" class="headerlink" title="一、.js和.min.js檔案分別是什麼"></a>一、.js和.min.js檔案分別是什麼</h2><p>.js是JavaScript 原始碼檔案， .min.js是壓縮版的js檔案。<br>.min.js檔案經過壓縮，相對編譯前的js檔案體積較小，傳輸效率快。 防止窺視和竊取原始碼 經過編碼將變數和函式原命名改為毫無意義的命名，以防止他人窺視和竊取 js 原始碼</p><h2 id="二、-js-和-min-js檔案的優缺點"><a href="#二、-js-和-min-js檔案的優缺點" class="headerlink" title="二、 .js 和.min.js檔案的優缺點"></a>二、 .js 和.min.js檔案的優缺點</h2><table><thead><tr><th>TYPE</th><th align="center">優點</th><th align="right">缺點</th></tr></thead><tbody><tr><td>.js</td><td align="center">可讀性較好，易於debug和更改</td><td align="right">體積較大，傳輸時間長</td></tr><tr><td>.min.js</td><td align="center">體積較小傳輸快, 原始碼防竊</td><td align="right">可讀性差</td></tr></tbody></table><h2 id="三、-壓縮原理"><a href="#三、-壓縮原理" class="headerlink" title="三、 壓縮原理"></a>三、 壓縮原理</h2><p>壓縮：刪除 js 程式碼中所有註釋、跳格符號、換行符號及無用的空格，從而壓縮 JS 檔案大小。<br>混淆：經過編碼將變數和函式原命名改為毫無意義的命名，刪除無用程式碼，行內函數，等價語句替換等(以防止他人窺視和竊取原始碼)</p>]]></content>
      
      
      <categories>
          
          <category> 前端技術 </category>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【HTML】套件-簡易操作 IntroJs、DriverJs</title>
      <link href="/2021/07/04/%E5%89%8D%E7%AB%AF%E6%8A%80%E8%A1%93/HTML/Html_04_%E6%8C%87%E5%BC%95%E5%A5%97%E4%BB%B6IntroJs%E3%80%81DriverJs/"/>
      <url>/2021/07/04/%E5%89%8D%E7%AB%AF%E6%8A%80%E8%A1%93/HTML/Html_04_%E6%8C%87%E5%BC%95%E5%A5%97%E4%BB%B6IntroJs%E3%80%81DriverJs/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>近期整理一些文章，看到還有指引套件部分忘記處理，這邊大概簡述兩個比較常見的套件。以兩種套件來說各有好壞，使用指引套件必須要留意Css可能遇到<code>z-index</code>順序問題，如果是DriverJs部分可能需要注意css方面比較多一些…。</p><ul><li><a href="https://github.com/JontCont/html_guideJs_template">github 範例</a></li><li><a href="https://dotblogs.com.tw/wellwind/2016/12/15/front-end-intro-js">[前端軍火庫]Intro.js - 把建好的UI直接變成說明文件</a></li></ul><h1 id="IntroJs"><a href="#IntroJs" class="headerlink" title="IntroJs"></a>IntroJs</h1><p>IntroJs 是用在 html mark當中，設定上相當簡單、快速 。IntroJs 如果是商業用途可能要索取費用。</p><h2 id="安裝"><a href="#安裝" class="headerlink" title="安裝"></a>安裝</h2><ol><li>Github :<code> git clone https://github.com/usablica/intro.js.git</code></li><li>npm :  <code>npm install intro.js --save</code></li><li>yarn  : <code>yarn add intro.js</code></li></ol><h2 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h2><p>依據IntroJs 使用方式，需要設定幾點。</p><ol><li>順序 : <code>data-step</code></li><li>內容 : <code>data-intro</code></li><li>提示 : <code>data-hint</code> (必須要配合 <code>introJs().addHints();</code>處理。)</li></ol><p>此套件會依據 step 順序呈現下一步提示，如果要使用”提示點”表示，可以使用使用<code>data-hint</code>標記。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;card card-body&quot;</span> <span class="attr">data-step</span>=<span class="string">&quot;1&quot;</span> <span class="attr">data-intro</span>=<span class="string">&quot;這是 card style。由NFC作者取得&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;imgBx&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://raw.githubusercontent.com/JontCont/Html-BlogUI/main/card-ui/images/1.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;img-item&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;card-content&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;card-content--title&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">h2</span>&gt;</span>John Contel&#x27;s<span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>Senior Designer<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;card-content--icon&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;li-item&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fab fa-twitter&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;li-item&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fab fa-instagram&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;li-item&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;far fa-envelope&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;li-item&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fab fa-facebook&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">    introJs().start();</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="DriverJs"><a href="#DriverJs" class="headerlink" title="DriverJs"></a><a href="https://kamranahmed.info/driver.js/">DriverJs</a></h1><p>DriverJs 是另一種指引套件，如果是商業使用這個部分可能是參考之一。</p><h2 id="安裝-1"><a href="#安裝-1" class="headerlink" title="安裝"></a>安裝</h2><ol><li>Github :<code> git clone https://github.com/kamranahmedse/driver.js.git</code></li><li>npm :  <code>npm install driver.js</code></li><li>yarn  : <code>yarn add driver.js</code></li></ol><h2 id="開始使用"><a href="#開始使用" class="headerlink" title="開始使用"></a>開始使用</h2><h3 id="highlight"><a href="#highlight" class="headerlink" title="highlight"></a>highlight</h3><p>這邊使用方式是透過html selector 抓取，所以會比IntroJs設定方面可能比較多一些。論單體彈出視窗使用<code>highlight</code>即可，如下方範例。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> driver = <span class="keyword">new</span> <span class="title class_">Driver</span>();</span><br><span class="line"><span class="keyword">let</span> option = </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">element</span>: <span class="string">&#x27;.card-body&#x27;</span>, </span><br><span class="line">        <span class="attr">popover</span>: &#123;</span><br><span class="line">            <span class="attr">title</span>: <span class="string">&#x27;Title for the Popover!&#x27;</span>,</span><br><span class="line">            <span class="attr">description</span>: <span class="string">&#x27;Description for it&#x27;</span>,</span><br><span class="line">            <span class="attr">position</span>: <span class="string">&#x27;top&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">driver.<span class="title function_">highlight</span>(option);</span><br><span class="line">driver.<span class="title function_">start</span>();</span><br></pre></td></tr></table></figure><h3 id="defineSteps"><a href="#defineSteps" class="headerlink" title="defineSteps"></a>defineSteps</h3><p>如果要呈現上下指引需要跟改為defineSteps，title、description 部分可以使用html方式撰寫。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> driver = <span class="keyword">new</span> <span class="title class_">Driver</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Define the steps for introduction</span></span><br><span class="line">driver.<span class="title function_">defineSteps</span>([</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">element</span>: <span class="string">&#x27;.card-body&#x27;</span>,</span><br><span class="line">    <span class="attr">popover</span>: &#123;</span><br><span class="line">        <span class="attr">className</span>: <span class="string">&#x27;first-step-popover-class&#x27;</span>,</span><br><span class="line">        <span class="attr">title</span>: <span class="string">&#x27;Title on Popover&#x27;</span>,</span><br><span class="line">        <span class="attr">description</span>: <span class="string">&#x27;Body of the popover&#x27;</span>,</span><br><span class="line">        <span class="attr">position</span>: <span class="string">&#x27;left&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">element</span>: <span class="string">&#x27;.card-content--icon&#x27;</span>,</span><br><span class="line">    <span class="attr">popover</span>: &#123;</span><br><span class="line">        <span class="attr">title</span>: <span class="string">&#x27;Title on Popover&#x27;</span>,</span><br><span class="line">        <span class="attr">description</span>: <span class="string">&#x27;Body of the popover&#x27;</span>,</span><br><span class="line">        <span class="attr">position</span>: <span class="string">&#x27;top&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">element</span>: <span class="string">&#x27;.imgBx&#x27;</span>,</span><br><span class="line">    <span class="attr">popover</span>: &#123;</span><br><span class="line">        <span class="attr">title</span>: <span class="string">&#x27;Title on Popover&#x27;</span>,</span><br><span class="line">        <span class="attr">description</span>: <span class="string">&#x27;Body of the popover&#x27;</span>,</span><br><span class="line">        <span class="attr">position</span>: <span class="string">&#x27;right&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br><span class="line">]);</span><br><span class="line"><span class="comment">// Start the introduction</span></span><br><span class="line">driver.<span class="title function_">start</span>();</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端技術 </category>
          
          <category> html </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> front-end </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【HTML】-何謂 robots.txt</title>
      <link href="/2021/07/03/%E5%89%8D%E7%AB%AF%E6%8A%80%E8%A1%93/HTML/Html_03_Rebots/"/>
      <url>/2021/07/03/%E5%89%8D%E7%AB%AF%E6%8A%80%E8%A1%93/HTML/Html_03_Rebots/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>許多前端工程師都有相關rebots使用經驗，為了增加 SEO 通常會使用robots，讓使用者可以快速查自己的網站，robots.txt 可以從各樣的網站可以看到。本篇會簡述rebots ，若需要細項說明可以請至下方點選查詢。</p><h1 id="robots-簡介"><a href="#robots-簡介" class="headerlink" title="robots 簡介"></a>robots 簡介</h1><p>robots 是主要功用哪個頁面可以檢索、索引。使用方面會直接影響 SEO 。</p><h2 id="何謂-SEO-搜尋引擎最佳化"><a href="#何謂-SEO-搜尋引擎最佳化" class="headerlink" title="何謂 SEO 搜尋引擎最佳化"></a>何謂 SEO 搜尋引擎最佳化</h2><p>SEO(Search Engine Optimization)，透過搜尋引擎運作規則調整網站，提高網站相關搜尋引擎排名。搜尋引擎針對檢索(Crawl)、索引(Index)的網站資訊，進行演算法排序提供使用者查詢。</p><h2 id="robots-使用方式"><a href="#robots-使用方式" class="headerlink" title="robots 使用方式"></a>robots 使用方式</h2><p>robots 只需要使用 txt 撰寫，必須要留意要使用<strong>UTF-8</strong>編碼的文字檔。設定方式預設允許所有搜尋引擎檢索所有內容，有兩種做法。</p><h3 id="不填入disallow內容"><a href="#不填入disallow內容" class="headerlink" title="不填入disallow內容"></a>不填入disallow內容</h3><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">User-agent: *</span><br><span class="line">Disallow:</span><br></pre></td></tr></table></figure><h3 id="allow-使用-符號"><a href="#allow-使用-符號" class="headerlink" title="allow 使用 &#x2F;符號"></a>allow 使用 &#x2F;符號</h3><p>&#x2F; : root 根目錄，在這可以解釋從root開始都允許檢索所有檔案。</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">User-agent: *</span><br><span class="line">Allow: /</span><br></pre></td></tr></table></figure><h3 id="檢測方式"><a href="#檢測方式" class="headerlink" title="檢測方式"></a>檢測方式</h3><p>如果你要查詢網站是否有沒有 robots 可以在每個 url 後面加上 robots.txt 就可以查看到</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://www.google.com/robots.txt</span><br></pre></td></tr></table></figure><h2 id="網頁爬蟲影響"><a href="#網頁爬蟲影響" class="headerlink" title="網頁爬蟲影響"></a>網頁爬蟲影響</h2><p>需要進行爬蟲時候，通常會先查閱內部會不會有主檔需要爬的內容，目前爬蟲使用方式很多種，相關應用後續會執行一遍給各位參考。</p><h1 id="文件參考"><a href="#文件參考" class="headerlink" title="文件參考"></a>文件參考</h1><ol><li>Google 說明文件 : <a href="https://developers.google.com/search/docs/advanced/robots/create-robots-txt?hl=zh-tw">https://developers.google.com/search/docs/advanced/robots/create-robots-txt?hl=zh-tw</a></li><li>robots.txt用途與使用範例教學，釐清SEO收錄觀念！: <a href="https://awoo.ai/zh-hant/blog/robotstxt-crawl/">https://awoo.ai/zh-hant/blog/robotstxt-crawl/</a></li><li>搜尋引擎最佳化 : <a href="https://zh.wikipedia.org/wiki/%E6%90%9C%E5%B0%8B%E5%BC%95%E6%93%8E%E6%9C%80%E4%BD%B3%E5%8C%96">https://zh.wikipedia.org/wiki/%E6%90%9C%E5%B0%8B%E5%BC%95%E6%93%8E%E6%9C%80%E4%BD%B3%E5%8C%96</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 前端技術 </category>
          
          <category> html </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> front-end </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【HTML】-滾動條 Scrollbar</title>
      <link href="/2021/07/02/%E5%89%8D%E7%AB%AF%E6%8A%80%E8%A1%93/HTML/Html_02_Scrollbar/"/>
      <url>/2021/07/02/%E5%89%8D%E7%AB%AF%E6%8A%80%E8%A1%93/HTML/Html_02_Scrollbar/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>近期遇到很多UI介面 scrollbar 都不同樣式或是將 scrollbar 用消失減少版面佔住的機會。<br>可以參考下方滾動條樣式，我再慢慢展示出效果來。</p><h1 id="如何讓scrollbar出現"><a href="#如何讓scrollbar出現" class="headerlink" title="如何讓scrollbar出現"></a>如何讓scrollbar出現</h1><p>第一次用網頁常常遇到 scrollbar 不知道怎樣叫出來，反而不斷跑版。<br>網頁有分父(容器)層跟子(容器)層，當子層超過父層時候，可以使用 <code>overflow</code>。</p><p>以下範例 :</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;block-1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;block-2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">margin-left</span>: auto;</span><br><span class="line">    <span class="attribute">margin-right</span>: auto;</span><br><span class="line">    <span class="attribute">overflow</span>: scroll;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.block-1</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">50vh</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#111</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.block-2</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">50vh</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#ccc</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>這樣就得到我們的 scrollbar 。</p><div class="note info flat"><p>補充 : overflow 設定屬性</p></div><table><thead><tr><th>屬性</th><th>功能</th></tr></thead><tbody><tr><td>visible</td><td>預設值。內容不會被修剪，會呈現在元素框之外。</td></tr><tr><td>hidden</td><td>內容會被修剪，並且其餘內容是不可見的。</td></tr><tr><td>scroll</td><td>內容會被修剪，但是流覽器會顯示捲軸以便查看其餘的內容。</td></tr><tr><td>auto</td><td>如果內容被修剪，則流覽器會顯示捲軸以便查看其餘的內容。</td></tr><tr><td>inherit</td><td>規定應該從父元素繼承 overflow 屬性的值。</td></tr></tbody></table><h1 id="使用-scrollbar"><a href="#使用-scrollbar" class="headerlink" title="使用 scrollbar"></a>使用 scrollbar</h1><p>如果要設定修改變更 scrollbar，需要知道webkit設定。<br>題外話: 前陣子報導駭客組織利用Safari核心引擎WebKit漏洞,讓用戶導向詐騙網站索取個資。<br>連結 : <a href="https://www.ithome.com.tw/news/142770">https://www.ithome.com.tw/news/142770</a></p><h2 id="webkit"><a href="#webkit" class="headerlink" title="webkit"></a>webkit</h2><p>WebKit是一種用來讓網頁瀏覽器繪製網頁的排版引擎。通用瀏覽器內核有 chrome、safari、Blink、Trident等。<br>目前主流的移動瀏覽器渲染引擎，主要設計是用來讓網頁瀏覽器繪製網頁。</p><h2 id="設定滾動條樣式"><a href="#設定滾動條樣式" class="headerlink" title="設定滾動條樣式"></a>設定滾動條樣式</h2><table><thead><tr><th>偽元素（ Pseudo-element ）</th><th>功能</th></tr></thead><tbody><tr><td>::-webkit-scrollbar</td><td>滾動條</td></tr><tr><td>::-webkit-scrollbar-button</td><td>滾動條按鈕(上下箭頭)</td></tr><tr><td>::-webkit-scrollbar-thumb</td><td>可拖動滾動滑塊</td></tr><tr><td>::-webkit-scrollbar-track</td><td>滾動條軌跡</td></tr><tr><td>::-webkit-scrollbar-track-piece</td><td>軌道沒有滑塊部份</td></tr><tr><td>::-webkit-scrollbar-corner</td><td>滾動條抵繳</td></tr><tr><td>::-webkit-resizer</td><td>可拖動的調整大小手把</td></tr></tbody></table><h2 id="展示滾動條樣式"><a href="#展示滾動條樣式" class="headerlink" title="展示滾動條樣式"></a>展示滾動條樣式</h2><h3 id="隱藏-scrollbar"><a href="#隱藏-scrollbar" class="headerlink" title="隱藏 scrollbar"></a>隱藏 scrollbar</h3><p>依照上面的方式，結論是加上 display就會達到隱藏效果。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">::-webkit-scrollbar &#123;</span><br><span class="line">    <span class="attribute">display</span> :none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="scrollbar-滾動條"><a href="#scrollbar-滾動條" class="headerlink" title="scrollbar 滾動條"></a>scrollbar 滾動條</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> ::-webkit-scrollbar-thumb &#123;</span><br><span class="line">   <span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(to bottom right, <span class="number">#0080ff</span>, <span class="number">#1a6d0f</span>, <span class="number">#bfff0e</span>, <span class="built_in">rgb</span>(<span class="number">255</span>, <span class="number">122</span>, <span class="number">89</span>));</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="scrollbar-軌道"><a href="#scrollbar-軌道" class="headerlink" title="scrollbar 軌道"></a>scrollbar 軌道</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">::-webkit-scrollbar-track-piece &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="built_in">rgb</span>(<span class="number">255</span>, <span class="number">212</span>, <span class="number">249</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/img/html-srcollbar/img02.PNG"></p><h3 id="scrollbar-button"><a href="#scrollbar-button" class="headerlink" title="scrollbar-button"></a>scrollbar-button</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">::-webkit-scrollbar-button &#123;</span><br><span class="line"> <span class="attribute">width</span>: <span class="number">10px</span>;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">10px</span>;</span><br><span class="line"><span class="attribute">background-color</span>: <span class="built_in">rgb</span>(<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/img/html-srcollbar/img01.PNG"></p><h3 id="scrollbar-corner"><a href="#scrollbar-corner" class="headerlink" title="scrollbar-corner"></a>scrollbar-corner</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">::-webkit-scrollbar-corner &#123;</span><br><span class="line"><span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">241</span>, <span class="number">89</span>, <span class="number">89</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/img/html-srcollbar/img03.PNG"></p><h2 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h2><p>以上是 scrollbar 調整，如果像是firefox、ie、edge 就會遇到沒有效果的問題。<br>這幾些功能對付公司網頁 scrollbar 應該是綽綽有餘。<br>下一期會來探討 [ 瀏覽器內核 ] 有哪些。</p>]]></content>
      
      
      <categories>
          
          <category> 前端技術 </category>
          
          <category> html </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> front-end </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【HTML】-Enter Key Hint</title>
      <link href="/2021/07/01/%E5%89%8D%E7%AB%AF%E6%8A%80%E8%A1%93/HTML/Html_01_EnterKeyHint/"/>
      <url>/2021/07/01/%E5%89%8D%E7%AB%AF%E6%8A%80%E8%A1%93/HTML/Html_01_EnterKeyHint/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近看到有一篇有關EnterKeyHint文章，整個手癢跑去玩玩看，官方說明這方式是針對虛擬鍵盤才會出現的效果，如下面表格:</p><table><thead><tr><th>Keyword</th><th>Description</th></tr></thead><tbody><tr><td><code>enter</code></td><td>The user agent should present a cue for the operation ‘enter’, typically inserting a new line.</td></tr><tr><td><code>done</code></td><td>The user agent should present a cue for the operation ‘done’, typically meaning there is nothing more to input and the input method editor (IME) will be closed.</td></tr><tr><td><code>go</code></td><td>The user agent should present a cue for the operation ‘go’, typically meaning to take the user to the target of the text they typed.</td></tr><tr><td><code>next</code></td><td>The user agent should present a cue for the operation ‘next’, typically taking the user to the next field that will accept text.</td></tr><tr><td><code>previous</code></td><td>The user agent should present a cue for the operation ‘previous’, typically taking the user to the previous field that will accept text.</td></tr><tr><td><code>search</code></td><td>The user agent should present a cue for the operation ‘search’, typically taking the user to the results of searching for the text they have typed.</td></tr><tr><td><code>send</code></td><td>The user agent should present a cue for the operation ‘send’, typically delivering the text to its target.</td></tr></tbody></table><p>這功能只有手機版本的虛擬鍵盤才看得見，若你要用windows的虛擬鍵盤是看不見的歐!!ヽ(*。&gt;Д&lt;)o゜</p><h1 id="創建Html"><a href="#創建Html" class="headerlink" title="創建Html"></a>創建Html</h1><p>我們創建簡單易點的html，不需要殘虐自己一定要把版面排很齊。參考以下範例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">div</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">div</span>&gt;<span class="selector-tag">label</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: block;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span>&gt;</span>Enter:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span> <span class="attr">enterkeyhint</span>=<span class="string">&quot;enter&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span>&gt;</span>Done:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span> <span class="attr">enterkeyhint</span>=<span class="string">&quot;done&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span>&gt;</span>Go:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span> <span class="attr">enterkeyhint</span>=<span class="string">&quot;go&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span>&gt;</span>Next:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span> <span class="attr">enterkeyhint</span>=<span class="string">&quot;next&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span>&gt;</span>Previous:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span> <span class="attr">enterkeyhint</span>=<span class="string">&quot;previous&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span>&gt;</span>Search:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span> <span class="attr">enterkeyhint</span>=<span class="string">&quot;search&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span>&gt;</span>Send:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span> <span class="attr">enterkeyhint</span>=<span class="string">&quot;send&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>這幾些都是要focus在輸入框裡面就可以看得見，如下圖，這樣就會提升UI操作順暢。<br>依據自己評估，決定在使用。</p><div class="gallery">    <div class="fj-gallery  data" data-rowHeight="220" data-limit="10">    <span class="gallery-data">[{"url":"/img/html-enterkeyHint/01.png","alt":""},{"url":"/img/html-enterkeyHint/02.png","alt":""},{"url":"/img/html-enterkeyHint/03.png","alt":""},{"url":"/img/html-enterkeyHint/04.png","alt":""},{"url":"/img/html-enterkeyHint/05.png","alt":""},{"url":"/img/html-enterkeyHint/06.png","alt":""},{"url":"/img/html-enterkeyHint/07.png","alt":""}]</span>    </div>    <button class="gallery-load-more"><span>載入更多</span><i class="fa-solid fa-arrow-down"></i></button>    </div><h2 id="題外話"><a href="#題外話" class="headerlink" title="題外話"></a>題外話</h2><p>Stefan Judis 曾經在2020年有提到 Enterkeyhint ，有支援 Safari 瀏覽器(IOS)，有興趣的人可以實驗看看。FireFox事實上是有出現，只是不像是Chrome一樣馬上出現，必須要按下去(Enter)才會出現，使用上需要自己拿捏使用方式，以免被客戶要求強迫修改。</p><blockquote class="twitter-tweet"><p lang="en" dir="ltr">Safari now supports `enterkeyhint`. 👏 <br><br>I always like it when the enter key gives me more context. 👇<br><br>🔗 Spec: <a href="https://t.co/IOQkUsjB6f">https://t.co/IOQkUsjB6f</a><a href="https://twitter.com/hashtag/devsheets?src=hash&amp;ref_src=twsrc%5Etfw">#devsheets</a> <a href="https://t.co/7HHX77Jow7">pic.twitter.com/7HHX77Jow7</a></p>&mdash; Stefan @ goto CPH 🇩🇰 (@stefanjudis) <a href="https://twitter.com/stefanjudis/status/1249958064041734144?ref_src=twsrc%5Etfw">April 14, 2020</a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script><h2 id="文件參考"><a href="#文件參考" class="headerlink" title="文件參考"></a>文件參考</h2><h3 id="MDN-EnterKeyHint"><a href="#MDN-EnterKeyHint" class="headerlink" title="MDN -  EnterKeyHint"></a>MDN - <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/enterKeyHint"> EnterKeyHint</a></h3><h3 id="CSS-TRICKS-enterkeyhint"><a href="#CSS-TRICKS-enterkeyhint" class="headerlink" title="CSS-TRICKS - enterkeyhint"></a>CSS-TRICKS - <a href="https://css-tricks.com/enterkeyhint/">enterkeyhint</a></h3>]]></content>
      
      
      <categories>
          
          <category> 前端技術 </category>
          
          <category> html </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> front-end </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
